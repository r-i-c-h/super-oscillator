!function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r}()({1:[function(require,module,exports){module.exports={real:[0,-1e-6,-.085652,.034718,-.036957,.014576,-.005792,.003677,-.002998,.001556,-486e-6,.0015,-809e-6,955e-6,-169e-6,636e-6,-682e-6,663e-6,-166e-6,509e-6,-42e-5,194e-6,-25e-6,267e-6,-299e-6,226e-6,-38e-6,163e-6,-273e-6,141e-6,-47e-6,109e-6,-162e-6,88e-6,-35e-6,115e-6,-157e-6,79e-6,-35e-6,99e-6,-64e-6,104e-6,-2e-5,56e-6,-1e-4,53e-6,-39e-6,65e-6,-82e-6,65e-6,-51e-6,54e-6,-6e-5,35e-6,-11e-6,47e-6,-49e-6,33e-6,-2e-5,37e-6,-41e-6,56e-6,-4e-6,25e-6,-48e-6,22e-6,-8e-6,15e-6,-52e-6,13e-6,-11e-6,17e-6,-29e-6,23e-6,-3e-6,17e-6,-31e-6,27e-6,-8e-6,16e-6,-33e-6,25e-6,-13e-6,2e-5,-21e-6,22e-6,-4e-6,19e-6,-24e-6,1e-5,-6e-6,9e-6,-19e-6,18e-6,-6e-6,15e-6,-18e-6,13e-6,-9e-6,17e-6,-22e-6,13e-6,-1e-6,14e-6,-13e-6,13e-6,-6e-6,12e-6,-15e-6,13e-6,-1e-6,14e-6,-12e-6,12e-6,-3e-6,11e-6,-14e-6,9e-6,-4e-6,9e-6,-11e-6,5e-6,-1e-6,8e-6,-1e-5,9e-6,-3e-6,9e-6,-12e-6,7e-6,-2e-6,7e-6,-8e-6,7e-6,-3e-6,8e-6,-9e-6,7e-6,-3e-6,7e-6,-8e-6,6e-6,-3e-6,5e-6,-9e-6,6e-6,-1e-6,5e-6,-7e-6,5e-6,-1e-6,5e-6,-8e-6,4e-6,-1e-6,5e-6,-6e-6,5e-6,-1e-6,6e-6,-7e-6,3e-6,-2e-6,4e-6,-6e-6,4e-6,-2e-6,4e-6,-5e-6,4e-6,-2e-6,4e-6,-6e-6,3e-6,-1e-6,5e-6,-5e-6,4e-6,-2e-6,4e-6,-4e-6,3e-6,-1e-6,4e-6,-5e-6,3e-6,-1e-6,4e-6,-4e-6,3e-6,-2e-6,3e-6,-4e-6,3e-6,-2e-6,3e-6,-4e-6,3e-6,-1e-6,3e-6,-4e-6,2e-6,-2e-6,3e-6,-3e-6,2e-6,-1e-6,3e-6,-3e-6,2e-6,-1e-6,2e-6,-3e-6,2e-6,-2e-6,2e-6,-3e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-1e-6,2e-6,-2e-6,2e-6,-1e-6,2e-6,-3e-6,2e-6,0,2e-6,-4e-6,3e-6,-1e-6,3e-6,-5e-6,5e-6,-3e-6,4e-6,-7e-6,7e-6,-6e-6,6e-6,-8e-6,9e-6,-8e-6,7e-6,-9e-6,1e-5,-9e-6,7e-6,-8e-6,9e-6,-9e-6,7e-6,-7e-6,8e-6,-8e-6,6e-6,-5e-6,6e-6,-7e-6,5e-6,-3e-6,5e-6,-5e-6,4e-6,-2e-6,4e-6,-4e-6,3e-6,-2e-6,3e-6,-4e-6,3e-6,-2e-6,3e-6,-4e-6,3e-6,-1e-6,3e-6,-3e-6,2e-6,-1e-6,3e-6,-3e-6,2e-6,-1e-6,3e-6,-3e-6,2e-6,-1e-6,2e-6,-3e-6,2e-6,-1e-6,2e-6,-3e-6,2e-6,-1e-6,2e-6,-3e-6,2e-6,-1e-6,2e-6,-3e-6,2e-6,-1e-6,2e-6,-3e-6,2e-6,-1e-6,2e-6,-2e-6,2e-6,-1e-6,2e-6,-2e-6,2e-6,-1e-6,2e-6,-2e-6,2e-6,-1e-6,2e-6,-2e-6,1e-6,-1e-6,2e-6,-2e-6,1e-6,-1e-6,2e-6,-2e-6,1e-6,0,2e-6,-2e-6,1e-6,0,2e-6,-2e-6,1e-6,0,1e-6,-2e-6,1e-6,0,1e-6,-2e-6,1e-6,0,1e-6,-2e-6,1e-6,0,1e-6,-2e-6,1e-6,0,1e-6,-2e-6,1e-6,0,1e-6,-2e-6,1e-6,0,1e-6,-2e-6,1e-6,0,1e-6,-2e-6,1e-6,0,1e-6,-2e-6,1e-6,0,1e-6,-2e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,0,0,1e-6,-1e-6,0,0,1e-6,-1e-6,0,0,1e-6,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,.5,-1e-6,0,-1e-6,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],2:[function(require,module,exports){module.exports={real:[0,.498544,-.052193,-.019862,-.002256,.001649,-894e-6,596e-6,24e-5,-181e-6,325e-6,-88e-6,22e-6,33e-6,-49e-6,39e-6,-38e-6,36e-6,1e-6,4e-6,-7e-6,6e-6,-14e-6,22e-6,-13e-6,-12e-6,6e-6,4e-6,-5e-6,2e-6,-2e-6,-6e-6,1e-6,16e-6,-19e-6,3e-6,4e-6,7e-6,-7e-6,-4e-6,0,1e-6,1e-5,-7e-6,2e-6,1e-6,-1e-6,-6e-6,13e-6,-3e-6,9e-6,-13e-6,1e-6,2e-6,11e-6,-6e-6,1e-6,3e-6,-9e-6,-9e-6,-6e-6,-6e-6,-4e-6,-1e-6,-7e-6,4e-6,9e-6,-1e-6,6e-6,12e-6,3e-6,4e-6,6e-6,-4e-6,-1e-6,1e-6,-8e-6,2e-6,-7e-6,-11e-6,3e-6,3e-6,-9e-6,-4e-6,-4e-6,-6e-6,2e-6,-4e-6,9e-6,5e-6,2e-6,3e-6,-1e-6,0,1e-6,0,-9e-6,6e-6,-6e-6,0,-8e-6,1e-6,-1e-6,-4e-6,3e-6,0,-2e-6,2e-6,0,1e-6,6e-6,-4e-6,-5e-6,5e-6,-2e-6,-4e-6,-15e-6,-9e-6,-5e-6,-3e-6,-7e-6,2e-6,1e-6,2e-6,1e-6,-4e-6,-3e-6,-4e-6,3e-6,4e-6,-7e-6,-2e-6,2e-6,-2e-6,-1e-6,-5e-6,-5e-6,-6e-6,4e-6,-6e-6,-8e-6,-3e-6,2e-6,-2e-6,1e-6,-4e-6,-11e-6,-1e-6,-11e-6,3e-6,-7e-6,0,-11e-6,-7e-6,5e-6,-5e-6,-7e-6,4e-6,-4e-6,-3e-6,-1e-6,-2e-6,-2e-6,-5e-6,1e-6,-1e-6,-4e-6,-3e-6,-5e-6,-9e-6,-8e-6,5e-6,1e-6,4e-6,-7e-6,-1e-6,3e-6,-8e-6,-5e-6,-2e-6,-5e-6,2e-6,-11e-6,-1e-6,-7e-6,-11e-6,-1e-5,-12e-6,-5e-6,-6e-6,-7e-6,1e-6,-1e-6,0,4e-6,-6e-6,-1e-6,-1e-6,-9e-6,-6e-6,-8e-6,2e-6,-15e-6,-2e-6,-1e-5,-2e-6,-6e-6,2e-6,-6e-6,-6e-6,5e-6,-4e-6,-1e-6,-6e-6,-8e-6,-3e-6,-12e-6,-4e-6,-3e-6,0,-6e-6,-6e-6,-12e-6,-7e-6,-13e-6,-12e-6,-11e-6,-12e-6,-13e-6,-7e-6,-14e-6,-6e-6,-4e-6,-9e-6,-9e-6,-3e-6,-1e-6,-1e-6,3e-6,2e-6,9e-6,7e-6,12e-6,11e-6,12e-6,12e-6,12e-6,11e-6,11e-6,1e-5,9e-6,9e-6,8e-6,7e-6,7e-6,6e-6,6e-6,5e-6,5e-6,5e-6,4e-6,4e-6,4e-6,4e-6,4e-6,4e-6,4e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,0,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,-.038133,.172877,-.018249,.007476,-.00245,.001892,-.001804,.00105,-623e-6,246e-6,-137e-6,-17e-6,31e-6,2e-6,-37e-6,31e-6,-1e-5,33e-6,-2e-5,3e-6,5e-6,0,-14e-6,15e-6,-2e-6,11e-6,-6e-6,-14e-6,-8e-6,2e-6,1e-6,-1e-6,9e-6,2e-6,-6e-6,8e-6,-6e-6,-4e-6,-6e-6,-6e-6,-6e-6,-7e-6,-5e-6,-2e-6,8e-6,-5e-6,-3e-6,1e-5,7e-6,2e-6,3e-6,-4e-6,1e-5,0,3e-6,-2e-6,5e-6,-3e-6,1e-6,4e-6,-9e-6,-1e-6,-7e-6,-2e-6,-9e-6,-1e-6,1e-6,0,1e-5,-12e-6,-5e-6,1e-5,-5e-6,1e-6,5e-6,3e-6,5e-6,6e-6,-1e-6,-9e-6,2e-6,2e-6,-6e-6,1e-5,-1e-5,-4e-6,-1e-6,0,7e-6,-7e-6,-1e-6,0,-5e-6,-1e-6,0,6e-6,-8e-6,5e-6,-6e-6,1e-6,-5e-6,-2e-6,-1e-6,2e-6,-2e-6,1e-6,-2e-6,-1e-6,1e-6,4e-6,6e-6,7e-6,0,4e-6,1e-6,-1e-6,-3e-6,1e-6,-1e-6,-2e-6,6e-6,0,-1e-6,0,8e-6,1e-6,-3e-6,-4e-6,6e-6,-7e-6,-5e-6,0,0,-3e-6,7e-6,3e-6,2e-6,7e-6,-8e-6,1e-6,3e-6,-4e-6,2e-6,0,1e-5,-1e-6,1e-6,5e-6,-6e-6,1e-6,9e-6,0,7e-6,9e-6,3e-6,5e-6,1e-6,0,0,2e-6,5e-6,4e-6,-1e-6,2e-6,13e-6,6e-6,4e-6,7e-6,1e-6,4e-6,-5e-6,5e-6,-1e-6,-1e-6,-7e-6,7e-6,-2e-6,-6e-6,2e-6,0,7e-6,-2e-6,1e-5,-4e-6,4e-6,4e-6,-8e-6,-2e-6,-6e-6,5e-6,7e-6,1e-6,7e-6,7e-6,5e-6,7e-6,5e-6,3e-6,2e-6,5e-6,4e-6,1e-6,0,3e-6,8e-6,7e-6,4e-6,-4e-6,7e-6,-2e-6,1e-6,0,6e-6,-5e-6,8e-6,-7e-6,-1e-6,-3e-6,-4e-6,6e-6,-4e-6,6e-6,5e-6,5e-6,6e-6,1e-6,5e-6,7e-6,8e-6,11e-6,9e-6,2e-5,21e-6,13e-6,26e-6,18e-6,2e-5,15e-6,21e-6,18e-6,16e-6,15e-6,14e-6,1e-5,9e-6,7e-6,6e-6,4e-6,3e-6,2e-6,2e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,0,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],3:[function(require,module,exports){module.exports={real:[0,.483754,.377857,.076295,-.02584,.007114,.001243,-.001278,.004322,-626e-6,-29e-5,.001967,-129e-6,71e-6,603e-6,-71e-6,-8e-5,292e-6,-71e-6,-141e-6,145e-6,-177e-6,49e-6,78e-6,-219e-6,122e-6,21e-6,-123e-6,104e-6,-49e-6,-44e-6,11e-5,-82e-6,-6e-6,137e-6,-15e-5,93e-6,56e-6,-147e-6,15e-5,-71e-6,-42e-6,126e-6,-109e-6,37e-6,71e-6,-96e-6,64e-6,25e-6,-1e-4,92e-6,-32e-6,-49e-6,99e-6,-82e-6,31e-6,55e-6,-92e-6,66e-6,-4e-6,-61e-6,77e-6,-37e-6,-29e-6,75e-6,-76e-6,13e-6,57e-6,-97e-6,78e-6,-14e-6,-6e-5,95e-6,-69e-6,2e-6,55e-6,-77e-6,51e-6,1e-5,-54e-6,64e-6,-33e-6,-22e-6,61e-6,-63e-6,2e-5,26e-6,-48e-6,36e-6,-19e-6,-22e-6,33e-6,-31e-6,3e-6,22e-6,-31e-6,5e-6,6e-6,-27e-6,17e-6,-5e-6,-13e-6,24e-6,-19e-6,-4e-6,14e-6,-21e-6,8e-6,2e-6,-16e-6,8e-6,-2e-6,-13e-6,13e-6,-7e-6,-4e-6,11e-6,-1e-5,0,1e-5,-14e-6,7e-6,-2e-6,-7e-6,7e-6,-7e-6,-5e-6,5e-6,-8e-6,2e-6,0,-5e-6,0,-2e-6,-6e-6,7e-6,-2e-6,3e-6,6e-6,-6e-6,0,1e-6,-8e-6,0,-1e-6,-2e-6,-2e-6,0,-4e-6,-1e-6,1e-6,-8e-6,-3e-6,-6e-6,-4e-6,-4e-6,-3e-6,-2e-6,-4e-6,-2e-6,-1e-6,-5e-6,-1e-6,3e-6,-1e-6,-1e-6,-2e-6,-3e-6,0,-1e-6,-4e-6,0,-5e-6,0,-2e-6,-3e-6,-3e-6,-5e-6,-4e-6,-3e-6,-2e-6,-1e-6,5e-6,-4e-6,-2e-6,-5e-6,-2e-6,-2e-6,-2e-6,0,-1e-6,-1e-6,0,-4e-6,-7e-6,-6e-6,-1e-6,-7e-6,0,-4e-6,0,-7e-6,-9e-6,0,0,-4e-6,-2e-6,-3e-6,-7e-6,-2e-6,-2e-6,-5e-6,-3e-6,-3e-6,-2e-6,-6e-6,0,-5e-6,2e-6,-4e-6,-4e-6,-6e-6,-9e-6,-5e-6,-1e-6,-3e-6,-5e-6,-1e-6,-2e-6,-9e-6,-6e-6,-8e-6,1e-6,-4e-6,-5e-6,1e-6,-7e-6,-6e-6,-2e-6,-1e-6,-7e-6,-5e-6,-1e-6,-4e-6,-7e-6,-2e-6,-4e-6,-6e-6,-2e-6,-2e-6,-5e-6,-13e-6,-8e-6,-9e-6,-9e-6,-7e-6,-3e-6,-2e-6,-6e-6,-8e-6,-2e-6,-5e-6,-6e-6,-9e-6,-6e-6,-9e-6,-9e-6,-2e-6,-6e-6,-7e-6,2e-6,-8e-6,-4e-6,-7e-6,-3e-6,-8e-6,-9e-6,-5e-6,-1e-5,-6e-6,-14e-6,-14e-6,-15e-6,-16e-6,-19e-6,-16e-6,-12e-6,-22e-6,-17e-6,-17e-6,-15e-6,-14e-6,-18e-6,-13e-6,-4e-6,-5e-6,-5e-6,0,0,4e-6,6e-6,7e-6,1e-5,12e-6,13e-6,15e-6,15e-6,14e-6,15e-6,14e-6,14e-6,13e-6,12e-6,12e-6,11e-6,1e-5,1e-5,9e-6,8e-6,8e-6,7e-6,7e-6,7e-6,6e-6,6e-6,6e-6,6e-6,6e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,4e-6,4e-6,4e-6,4e-6,4e-6,4e-6,4e-6,4e-6,4e-6,4e-6,4e-6,4e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,1e-6,2e-6,2e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,0,0,0,0,1e-6,0,0,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,-.12642,.179291,-.033466,.040514,.004135,-.00291,.0029,.003767,-345e-6,.001215,518e-6,-85e-6,543e-6,235e-6,-69e-6,168e-6,113e-6,-128e-6,189e-6,-41e-6,-151e-6,197e-6,-117e-6,-51e-6,87e-6,-116e-6,64e-6,1e-6,-93e-6,85e-6,-23e-6,-97e-6,112e-6,-68e-6,-39e-6,119e-6,-146e-6,96e-6,34e-6,-145e-6,137e-6,-62e-6,-59e-6,103e-6,-85e-6,6e-6,81e-6,-92e-6,53e-6,44e-6,-112e-6,95e-6,-33e-6,-59e-6,93e-6,-8e-5,22e-6,57e-6,-85e-6,46e-6,15e-6,-7e-5,78e-6,-25e-6,-44e-6,81e-6,-71e-6,13e-6,64e-6,-102e-6,74e-6,-17e-6,-54e-6,81e-6,-58e-6,1e-6,53e-6,-69e-6,36e-6,17e-6,-55e-6,57e-6,-31e-6,-28e-6,56e-6,-54e-6,2e-5,22e-6,-45e-6,35e-6,-12e-6,-2e-5,33e-6,-13e-6,-1e-5,26e-6,-25e-6,8e-6,12e-6,-29e-6,22e-6,-4e-6,-11e-6,25e-6,-12e-6,1e-6,16e-6,-17e-6,3e-6,7e-6,-15e-6,1e-5,3e-6,-14e-6,17e-6,-4e-6,-4e-6,14e-6,-14e-6,2e-6,11e-6,-11e-6,3e-6,3e-6,-4e-6,6e-6,-1e-6,1e-6,7e-6,-6e-6,-2e-6,2e-6,-5e-6,5e-6,1e-6,-8e-6,4e-6,-3e-6,-2e-6,7e-6,-5e-6,5e-6,2e-6,-1e-6,2e-6,4e-6,-3e-6,3e-6,0,1e-6,4e-6,5e-6,7e-6,4e-6,-5e-6,5e-6,0,-2e-6,-2e-6,6e-6,-4e-6,0,0,1e-6,5e-6,6e-6,-1e-6,-1e-6,-1e-6,7e-6,0,0,4e-6,2e-6,-1e-6,2e-6,-5e-6,-2e-6,1e-6,5e-6,2e-6,6e-6,0,2e-6,-1e-6,-3e-6,5e-6,-2e-6,4e-6,2e-6,-4e-6,1e-6,2e-6,8e-6,3e-6,7e-6,-9e-6,2e-6,1e-6,6e-6,1e-6,-2e-6,3e-6,-4e-6,3e-6,5e-6,-1e-6,4e-6,3e-6,2e-6,1e-6,-3e-6,4e-6,0,1e-6,2e-6,1e-6,-4e-6,3e-6,1e-6,-1e-6,-1e-6,0,4e-6,2e-6,-2e-6,1e-6,2e-6,3e-6,3e-6,-1e-6,1e-6,1e-6,0,2e-6,-1e-6,0,4e-6,1e-6,-4e-6,0,6e-6,-2e-6,3e-6,-3e-6,6e-6,4e-6,7e-6,8e-6,2e-6,5e-6,-2e-6,-3e-6,2e-6,2e-6,-1e-6,-1e-6,1e-6,-3e-6,2e-6,3e-6,4e-6,-5e-6,4e-6,0,0,4e-6,-3e-6,-2e-6,-3e-6,-1e-6,1e-6,-3e-6,1e-6,-3e-6,-1e-6,2e-6,2e-6,-3e-6,8e-6,6e-6,3e-6,7e-6,3e-6,8e-6,8e-6,13e-6,17e-6,14e-6,13e-6,17e-6,21e-6,21e-6,24e-6,26e-6,27e-6,26e-6,27e-6,25e-6,25e-6,23e-6,22e-6,2e-5,18e-6,17e-6,14e-6,12e-6,1e-5,9e-6,7e-6,6e-6,5e-6,4e-6,4e-6,3e-6,3e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,0,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}},{}],4:[function(require,module,exports){module.exports={real:[0,.001056,-.371626,-.038289,-.241364,.065179,-.127552,.014426,-.00302,-.014399,-.01333,.003929,-.013432,.007582,-.002041,-47e-6,.003094,-.002225,-156e-6,395e-6,-159e-6,16e-5,402e-6,149e-6,178e-6,3e-5,372e-6,-328e-6,189e-6,-124e-6,33e-6,-99e-6,96e-6,33e-6,28e-6,108e-6,76e-6,39e-6,98e-6,36e-6,2e-6,56e-6,63e-6,-52e-6,77e-6,1e-6,32e-6,-1e-5,19e-6,-29e-6,14e-6,-8e-6,4e-6,-3e-6,16e-6,-8e-6,-4e-6,-3e-6,8e-6,9e-6,-7e-6,4e-6,4e-6,11e-6,5e-6,-3e-6,3e-6,-4e-6,1e-6,-5e-6,9e-6,-7e-6,5e-6,2e-6,-1e-6,8e-6,0,-9e-6,-4e-6,-1e-6,-9e-6,7e-6,-4e-6,3e-6,-5e-6,4e-6,13e-6,-3e-6,6e-6,6e-6,9e-6,-3e-6,-1e-6,4e-6,-4e-6,-5e-6,3e-6,-5e-6,4e-6,2e-6,-11e-6,-6e-6,8e-6,8e-6,-8e-6,-3e-6,-5e-6,5e-6,-9e-6,9e-6,1e-6,-2e-6,-6e-6,1e-6,6e-6,0,1e-6,3e-6,-8e-6,2e-6,0,-6e-6,-3e-6,5e-6,1e-5,7e-6,2e-6,-4e-6,3e-6,0,2e-6,1e-6,7e-6,11e-6,-4e-6,5e-6,2e-6,-1e-6,-4e-6,13e-6,7e-6,3e-6,1e-6,0,-1e-6,5e-6,-5e-6,-5e-6,3e-6,2e-6,1e-5,-1e-6,-2e-6,2e-6,0,0,3e-6,-5e-6,8e-6,3e-6,-5e-6,2e-6,1e-6,1e-6,3e-6,1e-6,11e-6,2e-6,-3e-6,8e-6,0,-4e-6,2e-6,5e-6,6e-6,-7e-6,5e-6,0,-5e-6,4e-6,1e-6,3e-6,13e-6,4e-6,4e-6,1e-6,3e-6,5e-6,-2e-6,5e-6,5e-6,2e-6,7e-6,9e-6,6e-6,0,-2e-6,2e-6,0,-2e-6,4e-6,-6e-6,4e-6,4e-6,8e-6,-4e-6,1e-5,5e-6,8e-6,-2e-6,5e-6,5e-6,14e-6,2e-6,8e-6,3e-6,5e-6,2e-6,11e-6,-7e-6,1e-6,0,-3e-6,0,6e-6,6e-6,4e-6,1e-5,9e-6,4e-6,1e-6,1e-6,5e-6,2e-6,-4e-6,0,4e-6,3e-6,8e-6,0,8e-6,-4e-6,6e-6,9e-6,-3e-6,4e-6,8e-6,3e-6,7e-6,7e-6,3e-6,2e-6,6e-6,19e-6,1e-6,6e-6,-5e-6,-4e-6,1e-5,-1e-6,1e-5,-1e-5,1e-5,5e-6,1e-5,6e-6,11e-6,-1e-6,8e-6,4e-6,0,4e-6,1e-6,6e-6,13e-6,13e-6,12e-6,9e-6,4e-6,4e-6,3e-6,3e-6,15e-6,12e-6,15e-6,7e-6,13e-6,6e-6,14e-6,14e-6,12e-6,13e-6,12e-6,15e-6,19e-6,13e-6,1e-5,9e-6,6e-6,1e-6,7e-6,6e-6,0,-4e-6,-8e-6,-7e-6,-1e-5,-11e-6,-11e-6,-12e-6,-12e-6,-13e-6,-13e-6,-12e-6,-12e-6,-12e-6,-11e-6,-1e-5,-1e-5,-9e-6,-9e-6,-8e-6,-7e-6,-7e-6,-7e-6,-6e-6,-6e-6,-6e-6,-5e-6,-5e-6,-5e-6,-5e-6,-5e-6,-4e-6,-4e-6,-4e-6,-4e-6,-4e-6,-4e-6,-4e-6,-4e-6,-4e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-2e-6,-2e-6,-3e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,-.499999,.077463,.070331,.132072,.012785,.003997,.02055,-.010545,-.008137,-311e-6,-.013317,-.004685,-.00145,-.006016,-.004443,.0041,-.007229,.002437,-.002378,-323e-6,-455e-6,476e-6,-748e-6,378e-6,-138e-6,87e-6,-111e-6,144e-6,-17e-5,-52e-6,-136e-6,-61e-6,-182e-6,-43e-6,-61e-6,-48e-6,-21e-6,33e-6,-47e-6,5e-5,33e-6,-1e-5,1e-5,43e-6,-3e-6,24e-6,28e-6,1e-5,26e-6,3e-6,-8e-6,-5e-6,19e-6,-6e-6,-4e-6,7e-6,17e-6,0,7e-6,0,1e-5,11e-6,1e-5,2e-6,9e-6,7e-6,9e-6,-1e-6,13e-6,-1e-6,-1e-6,5e-6,9e-6,8e-6,5e-6,6e-6,11e-6,4e-6,1e-6,-8e-6,8e-6,6e-6,2e-6,-3e-6,4e-6,-11e-6,4e-6,-5e-6,8e-6,-2e-6,3e-6,-8e-6,-1e-6,1e-6,-8e-6,3e-6,1e-6,5e-6,5e-6,-2e-6,-3e-6,-8e-6,-2e-6,3e-6,5e-6,7e-6,-5e-6,4e-6,9e-6,-11e-6,8e-6,-6e-6,3e-6,4e-6,-1e-6,-2e-6,-1e-6,7e-6,-2e-6,12e-6,-6e-6,5e-6,-1e-6,-1e-6,2e-6,-3e-6,12e-6,-3e-6,8e-6,-2e-6,2e-6,9e-6,-3e-6,8e-6,1e-6,7e-6,5e-6,-4e-6,-2e-6,-4e-6,-1e-6,1e-6,3e-6,8e-6,-7e-6,0,-2e-6,-3e-6,-2e-6,2e-6,4e-6,0,6e-6,0,-1e-6,-6e-6,1e-6,-1e-5,3e-6,-3e-6,5e-6,-2e-6,7e-6,-5e-6,9e-6,5e-6,1e-6,2e-6,7e-6,1e-6,-6e-6,5e-6,1e-6,12e-6,3e-6,-1e-6,-1e-6,17e-6,5e-6,-2e-6,1e-6,-1e-6,-5e-6,-3e-6,-1e-6,2e-6,-1e-6,-11e-6,-2e-6,-5e-6,-4e-6,-4e-6,-1e-6,8e-6,-1e-6,2e-6,0,-2e-6,4e-6,7e-6,4e-6,-9e-6,1e-6,1e-6,-7e-6,-8e-6,-2e-6,0,8e-6,-15e-6,2e-6,3e-6,7e-6,-6e-6,3e-6,7e-6,0,-1e-6,2e-6,2e-6,5e-6,0,-1e-6,2e-6,-8e-6,-3e-6,1e-6,2e-6,-9e-6,-6e-6,-17e-6,-1e-6,8e-6,-2e-6,-2e-6,-4e-6,-17e-6,-1e-6,-5e-6,-9e-6,1e-6,-5e-6,7e-6,-3e-6,-12e-6,-3e-6,-12e-6,1e-6,7e-6,-14e-6,-7e-6,0,-3e-6,-1e-6,2e-6,1e-6,0,5e-6,6e-6,6e-6,5e-6,-1e-6,-9e-6,4e-6,-3e-6,6e-6,-5e-6,-1e-5,0,1e-6,-1e-6,7e-6,-6e-6,-11e-6,3e-6,5e-6,3e-6,-6e-6,1e-5,-12e-6,-7e-6,0,-12e-6,-4e-6,2e-6,-1e-5,0,-4e-6,-1e-6,-14e-6,-2e-6,-17e-6,-13e-6,-19e-6,-8e-6,-15e-6,-22e-6,-16e-6,-24e-6,-26e-6,-2e-5,-24e-6,-24e-6,-23e-6,-17e-6,-19e-6,-17e-6,-17e-6,-13e-6,-12e-6,-1e-5,-9e-6,-7e-6,-6e-6,-5e-6,-4e-6,-3e-6,-3e-6,-2e-6,-2e-6,-2e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],5:[function(require,module,exports){module.exports={real:[0,-.087481,-.008727,.015668,-741e-6,-.002277,-.0016,-.00405,-.001203,-.003604,-.001386,-.00309,-.001163,-.002088,-.001024,-.001233,-737e-6,-601e-6,-461e-6,-17e-5,-188e-6,-4e-6,-7e-6,86e-6,105e-6,5e-5,133e-6,31e-6,92e-6,-11e-6,4e-5,-4e-6,-29e-6,-5e-6,-58e-6,15e-6,-67e-6,19e-6,-47e-6,27e-6,-11e-6,16e-6,18e-6,4e-6,32e-6,2e-6,31e-6,-6e-6,13e-6,-11e-6,-3e-6,-12e-6,-19e-6,-15e-6,-31e-6,-1e-5,-2e-5,-9e-6,-14e-6,-1e-5,4e-6,1e-6,13e-6,1e-6,17e-6,8e-6,19e-6,9e-6,12e-6,8e-6,5e-6,5e-6,1e-6,8e-6,-7e-6,-4e-6,0,-6e-6,-1e-6,-2e-6,2e-6,-2e-6,5e-6,4e-6,4e-6,9e-6,2e-6,8e-6,3e-6,9e-6,4e-6,6e-6,-1e-6,1e-6,2e-6,-2e-6,0,-5e-6,1e-6,-2e-6,0,-4e-6,2e-6,0,2e-6,4e-6,3e-6,6e-6,5e-6,7e-6,3e-6,5e-6,2e-6,-2e-6,1e-6,-2e-6,0,-1e-6,-4e-6,-3e-6,4e-6,0,1e-6,-1e-6,0,5e-6,0,3e-6,1e-6,2e-6,5e-6,1e-6,-2e-6,1e-6,3e-6,0,-2e-6,0,-2e-6,0,0,3e-6,1e-6,3e-6,1e-6,3e-6,5e-6,1e-6,3e-6,3e-6,2e-6,1e-6,3e-6,1e-6,0,2e-6,1e-6,2e-6,0,4e-6,-1e-6,-2e-6,2e-6,-1e-6,0,3e-6,2e-6,2e-6,1e-6,1e-6,2e-6,-1e-6,2e-6,2e-6,3e-6,2e-6,2e-6,2e-6,-3e-6,2e-6,-1e-6,-1e-6,1e-6,2e-6,1e-6,1e-6,-1e-6,2e-6,3e-6,2e-6,0,3e-6,1e-6,0,0,2e-6,1e-6,3e-6,1e-6,-1e-6,4e-6,0,1e-6,-1e-6,1e-6,-2e-6,-1e-6,2e-6,-1e-6,2e-6,1e-6,0,0,1e-6,0,1e-6,-1e-6,1e-6,0,-1e-6,0,-1e-6,3e-6,-1e-6,2e-6,1e-6,0,0,-2e-6,-1e-6,1e-6,0,-1e-6,0,2e-6,2e-6,2e-6,1e-6,-1e-6,-2e-6,2e-6,-1e-6,5e-6,3e-6,2e-6,2e-6,0,-1e-6,-1e-6,0,3e-6,-2e-6,3e-6,1e-6,2e-6,0,0,5e-6,0,1e-6,0,1e-6,1e-6,0,-2e-6,3e-6,0,1e-6,1e-6,-1e-6,1e-6,4e-6,0,0,2e-6,2e-6,2e-6,0,0,-2e-6,1e-6,0,2e-6,2e-6,2e-6,2e-6,5e-6,2e-6,-2e-6,3e-6,0,1e-6,2e-6,2e-6,-2e-6,-2e-6,2e-6,3e-6,0,-1e-6,4e-6,-1e-6,2e-6,-3e-6,0,3e-6,-1e-6,2e-6,3e-6,1e-6,0,5e-6,2e-6,0,0,1e-6,1e-6,1e-6,0,0,3e-6,1e-6,1e-6,3e-6,0,4e-6,4e-6,1e-6,1e-6,-1e-6,2e-6,2e-6,1e-6,1e-6,3e-6,0,3e-6,1e-6,1e-6,2e-6,5e-6,1e-6,4e-6,4e-6,2e-6,3e-6,4e-6,2e-6,3e-6,-1e-6,2e-6,0,1e-6,0,2e-6,0,0,0,1e-6,0,-1e-6,-1e-6,0,-1e-6,-2e-6,-1e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,.492288,.009944,.032169,.001931,.019775,.001332,.00657,.001131,.004102,65e-5,918e-6,445e-6,83e-6,82e-6,-726e-6,-113e-6,-63e-5,-292e-6,-559e-6,-277e-6,-299e-6,-256e-6,-153e-6,-139e-6,-7e-6,-37e-6,32e-6,48e-6,41e-6,9e-5,33e-6,9e-5,7e-6,59e-6,9e-6,29e-6,4e-6,-3e-6,13e-6,-16e-6,22e-6,-6e-6,3e-5,7e-6,24e-6,3e-5,31e-6,37e-6,23e-6,37e-6,21e-6,29e-6,19e-6,9e-6,7e-6,-6e-6,5e-6,-13e-6,-3e-6,-15e-6,-9e-6,-8e-6,-8e-6,0,-8e-6,8e-6,-3e-6,17e-6,5e-6,1e-5,1e-5,8e-6,12e-6,4e-6,1e-5,-4e-6,4e-6,-2e-6,6e-6,-3e-6,-1e-6,-2e-6,-3e-6,4e-6,-3e-6,4e-6,2e-6,6e-6,6e-6,8e-6,7e-6,4e-6,5e-6,4e-6,5e-6,0,2e-6,-1e-6,-1e-6,-1e-6,-2e-6,0,-2e-6,2e-6,-2e-6,0,0,-1e-6,1e-6,1e-6,4e-6,2e-6,0,5e-6,2e-6,2e-6,1e-6,-1e-6,-2e-6,-3e-6,-2e-6,0,-2e-6,-3e-6,0,-4e-6,2e-6,-3e-6,-1e-6,2e-6,1e-6,-2e-6,0,1e-6,-2e-6,3e-6,-2e-6,0,0,-1e-6,-5e-6,-2e-6,-3e-6,-2e-6,-2e-6,-1e-6,1e-6,-2e-6,1e-6,-1e-6,-2e-6,2e-6,1e-6,4e-6,-1e-6,2e-6,-3e-6,-1e-6,-1e-6,1e-6,1e-6,-3e-6,0,-2e-6,2e-6,-1e-6,-2e-6,0,0,1e-6,-2e-6,-2e-6,1e-6,2e-6,1e-6,0,-1e-6,-1e-6,0,-1e-6,1e-6,-2e-6,1e-6,-1e-6,-1e-6,1e-6,-3e-6,0,-1e-6,1e-6,-1e-6,1e-6,0,0,-1e-6,3e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-2e-6,0,1e-6,-1e-6,0,-1e-6,1e-6,3e-6,-3e-6,0,1e-6,0,0,1e-6,0,-1e-6,-1e-6,0,1e-6,-2e-6,-1e-6,-2e-6,-2e-6,0,-1e-6,0,-1e-6,1e-6,-1e-6,-1e-6,-2e-6,-2e-6,-1e-6,1e-6,3e-6,-1e-6,3e-6,0,-3e-6,-2e-6,-2e-6,1e-6,-1e-6,2e-6,0,-3e-6,-1e-6,-1e-6,1e-6,-2e-6,-2e-6,0,-1e-6,0,-2e-6,1e-6,-2e-6,0,-2e-6,0,-1e-6,-1e-6,1e-6,2e-6,-4e-6,0,-1e-6,1e-6,2e-6,-2e-6,2e-6,-1e-6,-2e-6,1e-6,0,1e-6,0,-2e-6,-2e-6,0,1e-6,0,0,-1e-6,1e-6,0,-2e-6,1e-6,0,-3e-6,2e-6,-1e-6,-1e-6,1e-6,0,-1e-6,1e-6,1e-6,-1e-6,0,0,-2e-6,-3e-6,-2e-6,-1e-6,0,0,-1e-6,2e-6,1e-6,2e-6,2e-6,1e-6,-1e-6,0,2e-6,2e-6,-2e-6,-2e-6,1e-6,-1e-6,0,1e-6,-1e-6,2e-6,0,-1e-6,1e-6,-1e-6,-4e-6,2e-6,0,0,-2e-6,0,-1e-6,0,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-1e-6,0,0,-2e-6,-1e-6,-2e-6,-3e-6,-3e-6,-3e-6,-3e-6,-4e-6,-4e-6,-2e-6,-3e-6,-3e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],6:[function(require,module,exports){module.exports={real:[0,-.298519,-.438701,.029934,-.01282,.01361,-.002967,.002248,.0042,-.001483,-86e-6,.002181,517e-6,-966e-6,-483e-6,-341e-6,-472e-6,-503e-6,189e-6,23e-5,-165e-6,85e-6,132e-6,9e-5,74e-6,121e-6,163e-6,-24e-6,2e-5,31e-6,-52e-6,-24e-6,-16e-6,31e-6,-14e-6,-13e-6,28e-6,3e-6,-4e-6,24e-6,3e-5,14e-6,11e-6,19e-6,17e-6,3e-6,13e-6,9e-6,8e-6,7e-6,2e-6,1e-5,1e-6,4e-6,8e-6,-9e-6,8e-6,5e-6,0,5e-6,1e-5,7e-6,4e-6,8e-6,9e-6,3e-6,3e-6,1e-6,8e-6,7e-6,3e-6,7e-6,6e-6,7e-6,4e-6,4e-6,0,7e-6,0,4e-6,7e-6,5e-6,-2e-6,0,4e-6,6e-6,1e-6,5e-6,1e-6,7e-6,-1e-6,3e-6,2e-6,0,-4e-6,6e-6,2e-6,0,8e-6,1e-6,-3e-6,7e-6,3e-6,2e-6,4e-6,1e-6,4e-6,4e-6,1e-6,0,-1e-6,2e-6,2e-6,-1e-6,-4e-6,-1e-6,7e-6,1e-6,4e-6,1e-6,2e-6,5e-6,8e-6,0,6e-6,7e-6,2e-6,5e-6,5e-6,5e-6,0,3e-6,-1e-6,5e-6,1e-6,2e-6,3e-6,2e-6,-2e-6,-1e-6,1e-6,-1e-6,3e-6,0,-2e-6,5e-6,-1e-6,6e-6,3e-6,-2e-6,3e-6,5e-6,2e-6,8e-6,2e-6,1e-6,4e-6,5e-6,1e-6,4e-6,1e-6,0,-2e-6,2e-6,3e-6,6e-6,4e-6,-1e-6,5e-6,6e-6,-2e-6,-1e-6,5e-6,2e-6,1e-6,5e-6,3e-6,-1e-6,3e-6,0,3e-6,1e-6,-1e-6,-1e-6,1e-6,4e-6,0,2e-6,0,-1e-6,1e-6,0,6e-6,1e-6,2e-6,3e-6,0,0,2e-6,2e-6,-1e-6,5e-6,2e-6,2e-6,0,2e-6,0,-2e-6,2e-6,6e-6,1e-6,5e-6,3e-6,2e-6,-1e-6,1e-6,1e-6,1e-6,1e-6,4e-6,8e-6,4e-6,3e-6,1e-6,3e-6,3e-6,1e-6,-1e-6,2e-6,-2e-6,5e-6,1e-6,1e-6,0,1e-6,-2e-6,6e-6,3e-6,1e-6,4e-6,3e-6,1e-6,3e-6,7e-6,1e-6,2e-6,3e-6,2e-6,-1e-6,0,1e-6,3e-6,2e-6,0,2e-6,1e-6,4e-6,-2e-6,2e-6,1e-6,0,-3e-6,3e-6,0,-1e-6,1e-6,6e-6,-1e-6,-4e-6,-5e-6,5e-6,-2e-6,3e-6,1e-6,-1e-6,5e-6,-1e-6,-1e-6,1e-6,1e-6,0,-5e-6,2e-6,3e-6,3e-6,2e-6,-1e-6,-1e-6,1e-6,-2e-6,3e-6,-3e-6,-1e-6,2e-6,3e-6,2e-6,-1e-6,0,1e-6,1e-6,-1e-6,-2e-6,2e-6,3e-6,0,-1e-6,2e-6,3e-6,-2e-6,1e-6,5e-6,0,0,2e-6,0,1e-6,-5e-6,-3e-6,0,2e-6,3e-6,-2e-6,3e-6,5e-6,-1e-6,2e-6,-3e-6,5e-6,-3e-6,2e-6,1e-6,4e-6,-2e-6,2e-6,-1e-6,2e-6,2e-6,4e-6,3e-6,3e-6,-2e-6,4e-6,3e-6,5e-6,0,-3e-6,1e-6,5e-6,-4e-6,-1e-6,3e-6,3e-6,-1e-6,1e-6,-1e-6,0,0,1e-6,-3e-6,0,4e-6,2e-6,-1e-6,-1e-6,1e-6,4e-6,-2e-6,0,0,-2e-6,2e-6,3e-6,0,-5e-6,3e-6,3e-6,5e-6,5e-6,1e-6,1e-6,5e-6,5e-6,-1e-6,-2e-6,5e-6,-5e-6,4e-6,0,1e-6,5e-6,2e-6,-4e-6,-2e-6,0,1e-6,6e-6,2e-6,3e-6,3e-6,0,5e-6,1e-6,0,-1e-6,0,1e-6,5e-6,2e-6,3e-6,0,3e-6,1e-6,5e-6,4e-6,-3e-6,0,2e-6,3e-6,5e-6,3e-6,-2e-6,2e-6,4e-6,3e-6,0,3e-6,3e-6,0,2e-6,0,3e-6,5e-6,2e-6,5e-6,4e-6,4e-6,3e-6,7e-6,-1e-6,2e-6,2e-6,2e-6,1e-6,7e-6,2e-6,7e-6,0,1e-6,9e-6,6e-6,8e-6,7e-6,3e-6,3e-6,5e-6,1e-6,2e-6,3e-6,4e-6,5e-6,1e-6,4e-6,4e-6,3e-6,5e-6,4e-6,-1e-6,0,4e-6,-1e-6,0,1e-6,0,-1e-6,-3e-6,-1e-6,-2e-6,-3e-6,-2e-6,-5e-6,-5e-6,-6e-6,-5e-6,-6e-6,-7e-6,-7e-6,-7e-6,-6e-6,-7e-6,-8e-6,-7e-6,-7e-6,-6e-6,-6e-6,-6e-6,-6e-6,-6e-6,-6e-6,-5e-6,-5e-6,-5e-6,-5e-6,-4e-6,-4e-6,-4e-6,-4e-6,-4e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,.196789,.239878,-.046114,.137313,.004485,-.007303,.007059,-446e-6,.004374,-.004755,-458e-6,-178e-6,-.001408,-337e-6,-285e-6,833e-6,45e-6,18e-6,476e-6,48e-6,9e-6,19e-6,137e-6,51e-6,-88e-6,13e-6,-37e-6,-11e-5,-34e-6,32e-6,-1e-5,0,8e-6,12e-6,-3e-6,4e-6,34e-6,0,23e-6,7e-6,0,6e-6,-15e-6,14e-6,-15e-6,-1e-5,4e-6,-7e-6,-8e-6,-8e-6,4e-6,-2e-6,-6e-6,7e-6,-3e-6,4e-6,2e-6,3e-6,1e-6,0,-1e-6,3e-6,3e-6,2e-6,2e-6,-2e-6,-3e-6,1e-6,-5e-6,-1e-6,-1e-6,-4e-6,-5e-6,1e-6,7e-6,0,0,-8e-6,0,-2e-6,-3e-6,2e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,2e-6,0,-3e-6,2e-6,3e-6,0,1e-6,1e-6,-8e-6,3e-6,2e-6,-4e-6,1e-6,0,-4e-6,3e-6,-9e-6,-2e-6,-1e-6,-2e-6,0,-2e-6,-2e-6,-3e-6,0,-3e-6,0,2e-6,-1e-6,6e-6,7e-6,1e-6,1e-6,-2e-6,-4e-6,-2e-6,3e-6,-3e-6,0,-1e-6,-2e-6,0,1e-6,-1e-6,-2e-6,-1e-6,-4e-6,-1e-6,-4e-6,1e-6,-2e-6,-1e-6,-5e-6,0,-4e-6,-2e-6,0,1e-6,-1e-6,-1e-6,2e-6,0,-1e-6,1e-6,4e-6,0,0,1e-6,-1e-6,-3e-6,3e-6,-2e-6,-2e-6,-4e-6,0,-4e-6,-2e-6,-3e-6,-4e-6,2e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,3e-6,0,-2e-6,1e-6,1e-6,2e-6,4e-6,0,-1e-6,-1e-6,0,-4e-6,1e-6,-3e-6,-5e-6,1e-6,-1e-6,0,-2e-6,-3e-6,3e-6,1e-6,1e-6,-4e-6,-1e-6,-1e-6,-2e-6,-4e-6,1e-6,-4e-6,3e-6,-2e-6,1e-6,-3e-6,-3e-6,3e-6,2e-6,-1e-6,-3e-6,3e-6,-3e-6,-5e-6,5e-6,-2e-6,1e-6,-1e-6,-2e-6,-4e-6,0,-3e-6,2e-6,-3e-6,1e-6,2e-6,-1e-6,-2e-6,-1e-6,-5e-6,0,4e-6,-3e-6,-6e-6,2e-6,-4e-6,-1e-6,-1e-6,-2e-6,-3e-6,-2e-6,-1e-6,-2e-6,0,1e-6,-3e-6,3e-6,2e-6,-2e-6,4e-6,-1e-6,0,-3e-6,-3e-6,-2e-6,3e-6,-4e-6,-4e-6,4e-6,0,1e-6,-4e-6,2e-6,2e-6,-1e-6,2e-6,-2e-6,-1e-6,-7e-6,-3e-6,3e-6,-1e-6,-1e-6,-2e-6,-4e-6,1e-6,-1e-6,-1e-6,0,-4e-6,0,-3e-6,0,1e-6,0,0,1e-6,-1e-6,-1e-6,0,-2e-6,0,-3e-6,-3e-6,0,-1e-6,-2e-6,0,-4e-6,-3e-6,-3e-6,-2e-6,-1e-6,3e-6,-4e-6,0,0,2e-6,-7e-6,-1e-6,0,0,-1e-6,4e-6,-2e-6,-1e-6,0,0,-6e-6,-2e-6,-1e-6,1e-6,-2e-6,-1e-6,1e-6,2e-6,-7e-6,-1e-6,-1e-6,2e-6,-1e-6,2e-6,0,-2e-6,-2e-6,-2e-6,-3e-6,1e-6,-1e-6,0,1e-6,0,-6e-6,2e-6,-1e-6,3e-6,-1e-6,0,-1e-6,0,3e-6,0,-3e-6,-2e-6,-1e-6,-1e-6,-2e-6,-1e-6,-6e-6,-4e-6,-2e-6,-2e-6,2e-6,-2e-6,-3e-6,0,3e-6,-3e-6,-3e-6,-1e-6,1e-6,0,-3e-6,-1e-6,-3e-6,-3e-6,2e-6,0,1e-6,-1e-6,1e-6,1e-6,0,-3e-6,3e-6,0,-1e-6,-1e-6,0,-1e-6,1e-6,-7e-6,-2e-6,-2e-6,-4e-6,1e-6,-1e-6,0,1e-6,-4e-6,5e-6,-3e-6,2e-6,0,-6e-6,1e-6,0,1e-6,3e-6,-4e-6,0,-6e-6,0,0,2e-6,0,-2e-6,-1e-6,3e-6,0,-6e-6,-5e-6,-5e-6,0,0,-2e-6,-1e-6,3e-6,-3e-6,-3e-6,-3e-6,1e-6,-1e-6,-1e-6,-3e-6,0,1e-6,2e-6,1e-6,0,-1e-6,-6e-6,-4e-6,-2e-6,-2e-6,-5e-6,-5e-6,-7e-6,-1e-6,-1e-6,-4e-6,-3e-6,0,-4e-6,-5e-6,-4e-6,-7e-6,-4e-6,-6e-6,-5e-6,-8e-6,-6e-6,-5e-6,-7e-6,-8e-6,-8e-6,-1e-5,-12e-6,-9e-6,-1e-5,-9e-6,-9e-6,-1e-5,-7e-6,-11e-6,-9e-6,-9e-6,-8e-6,-7e-6,-7e-6,-8e-6,-7e-6,-5e-6,-5e-6,-6e-6,-5e-6,-4e-6,-4e-6,-4e-6,-3e-6,-2e-6,-2e-6,-2e-6,-1e-6,-1e-6,-1e-6,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}},{}],7:[function(require,module,exports){module.exports={real:[0,-.051411,-.085181,-.45332,-.042603,.04083,-.204758,.02603,-.147721,-.007584,-.07638,-.003137,-.064948,.003745,.120424,-.002757,.016572,.001757,.005585,.001412,-.011589,-.001676,-.010206,-.005745,.002632,-.001359,-.001483,-.003481,-.005393,.003601,.004419,-.002671,.001664,.001878,-.003127,-.003645,-.002282,.00249,949e-6,.002633,153e-6,-786e-6,-54e-6,.00141,.001927,-.001851,77e-6,.001024,-413e-6,-.001542,.001697,68e-5,-.001677,-879e-6,.001588,-.001163,-.001416,.001599,.001367,-.001552,-.001309,.001185,.001161,.001016,-.001293,-196e-6,959e-6,-821e-6,.001153,.001188,.001041,318e-6,-.001352,.001337,.001352,-.001001,-867e-6,-503e-6,75e-5,-49e-5,.001242,-144e-6,558e-6,.001006,314e-6,-.001167,.001112,935e-6,987e-6,888e-6,-.001061,-59e-6,.001039,.001154,665e-6,.001027,-.001083,.001052,776e-6,295e-6,-945e-6,866e-6,894e-6,694e-6,-524e-6,199e-6,.001024,-996e-6,-56e-6,.001027,764e-6,793e-6,-985e-6,179e-6,968e-6,549e-6,-967e-6,655e-6,-677e-6,-977e-6,936e-6,-254e-6,-167e-6,703e-6,134e-6,-266e-6,-774e-6,-891e-6,514e-6,874e-6,71e-5,771e-6,837e-6,-25e-5,48e-5,178e-6,-902e-6,75e-5,911e-6,907e-6,-625e-6,592e-6,491e-6,866e-6,511e-6,-84e-6,799e-6,597e-6,879e-6,869e-6,822e-6,618e-6,-7e-5,-6e-6,857e-6,695e-6,-365e-6,55e-5,638e-6,77e-6,-568e-6,71e-5,839e-6,761e-6,202e-6,632e-6,-65e-5,-464e-6,665e-6,825e-6,-102e-6,763e-6,4e-4,587e-6,-623e-6,78e-5,-363e-6,494e-6,198e-6,797e-6,797e-6,726e-6,44e-5,572e-6,73e-5,789e-6,294e-6,721e-6,679e-6,-756e-6,-439e-6,544e-6,88e-6,82e-5,736e-6,641e-6,673e-6,458e-6,783e-6,-781e-6,-762e-6,649e-6,75e-6,591e-6,-16e-5,431e-6,-469e-6,-47e-5,-557e-6,-57e-5,-559e-6,-653e-6,-726e-6,-76e-5,-76e-5,-758e-6,-773e-6,-775e-6,-77e-5,-758e-6,-768e-6,-767e-6,-76e-5,-741e-6,-76e-5,-76e-5,-75e-5,-726e-6,-752e-6,-753e-6,-739e-6,-711e-6,-744e-6,-747e-6,-73e-5,-697e-6,-737e-6,-74e-5,-72e-5,-685e-6,-73e-5,-734e-6,-712e-6,-717e-6,-77e-5,-773e-6,-748e-6,-705e-6,-763e-6,-767e-6,-74e-5,-695e-6,-757e-6,-76e-5,-732e-6,-685e-6,-751e-6,-754e-6,-725e-6,-676e-6,-745e-6,-747e-6,-717e-6,-668e-6,-739e-6,-741e-6,-711e-6,-66e-5,-733e-6,-735e-6,-704e-6,-652e-6,-728e-6,-729e-6,-698e-6,-645e-6,-723e-6,-723e-6,-692e-6,-638e-6,-718e-6,-717e-6,-686e-6,-632e-6,-713e-6,-711e-6,-681e-6,-626e-6,-708e-6,-706e-6,-676e-6,-62e-5,-703e-6,-7e-4,-67e-5,-614e-6,-698e-6,-695e-6,-665e-6,-608e-6,-694e-6,-689e-6,-661e-6,-603e-6,-689e-6,-684e-6,-658e-6,-598e-6,-685e-6,-679e-6,-65e-5,-593e-6,-68e-5,-674e-6,-648e-6,-59e-5,-677e-6,-669e-6,-644e-6,-585e-6,-672e-6,-664e-6,-64e-5,-581e-6,-668e-6,-659e-6,-635e-6,-576e-6,-664e-6,-655e-6,-633e-6,-572e-6,-66e-5,-65e-5,-63e-5,-568e-6,-657e-6,-645e-6,-626e-6,-564e-6,-653e-6,-641e-6,-621e-6,-56e-5,-649e-6,-637e-6,-619e-6,-557e-6,-646e-6,-632e-6,-614e-6,-553e-6,-642e-6,-628e-6,-611e-6,-55e-5,-639e-6,-624e-6,-608e-6,-547e-6,-635e-6,-62e-5,-606e-6,-543e-6,-632e-6,-597e-6,-584e-6,-524e-6,-609e-6,-594e-6,-581e-6,-521e-6,-606e-6,-59e-5,-578e-6,-518e-6,-603e-6,-586e-6,-576e-6,-515e-6,-6e-4,-582e-6,-573e-6,-512e-6,-597e-6,-579e-6,-569e-6,-509e-6,-594e-6,-575e-6,-567e-6,-507e-6,-591e-6,-572e-6,-565e-6,-504e-6,-588e-6,-568e-6,-562e-6,-501e-6,-585e-6,-566e-6,-56e-5,-499e-6,-582e-6,-562e-6,-557e-6,-497e-6,-58e-5,-559e-6,-555e-6,-495e-6,-577e-6,-556e-6,-553e-6,-492e-6,-574e-6,-552e-6,-549e-6,-489e-6,-572e-6,-549e-6,-547e-6,-487e-6,-569e-6,-546e-6,-546e-6,-484e-6,-566e-6,-544e-6,-543e-6,-483e-6,-564e-6,-541e-6,-54e-5,-479e-6,-561e-6,-537e-6,-541e-6,-477e-6,-559e-6,-535e-6,-537e-6,-476e-6,-556e-6,-531e-6,-537e-6,-468e-6,-553e-6,-529e-6,-542e-6,-471e-6,-551e-6,-528e-6,-528e-6,-463e-6,-467e-6,-45e-5,-454e-6,-41e-5,-469e-6,-445e-6,-453e-6,-397e-6,-467e-6,-445e-6,-451e-6,-398e-6,-465e-6,-443e-6,-448e-6,-395e-6,-463e-6,-44e-5,-447e-6,-396e-6,-461e-6,-438e-6,-445e-6,-393e-6,-459e-6,-436e-6,-444e-6,-391e-6,-457e-6,-434e-6,-442e-6,-389e-6,-456e-6,-432e-6,-44e-5,-388e-6,-454e-6,-43e-5,-439e-6,-387e-6,-452e-6,-428e-6,-438e-6,-386e-6,-45e-5,-426e-6,-435e-6,-383e-6,-449e-6,-424e-6,-434e-6,-383e-6,-447e-6,-422e-6,-43e-5,-38e-5,-445e-6,-419e-6,-431e-6,-38e-5,-443e-6,-417e-6,-435e-6,-376e-6,-442e-6,-416e-6,-427e-6,-376e-6,-44e-5,-415e-6,-424e-6,-374e-6,-438e-6,-414e-6,-425e-6,-374e-6,-437e-6,-412e-6,-423e-6,-372e-6,-435e-6,-41e-5,-422e-6,-371e-6,-434e-6,-408e-6,-421e-6,-369e-6,-432e-6,-406e-6,-42e-5,-368e-6,-43e-5,-404e-6,-418e-6,-367e-6,-429e-6,-402e-6,-417e-6,-365e-6,-427e-6,-402e-6,-415e-6,-365e-6,-426e-6,-399e-6,-415e-6,-364e-6,-424e-6,-398e-6,-412e-6,-362e-6,-423e-6,-396e-6,-411e-6,-361e-6,-421e-6,-395e-6,-41e-5,-359e-6,-42e-5,-393e-6,-409e-6,-358e-6,-419e-6,-391e-6,-408e-6,-357e-6,-417e-6,-39e-5,-407e-6,-356e-6,-416e-6,-389e-6,-405e-6,-355e-6,-414e-6,-387e-6,-404e-6,-353e-6,-413e-6,-385e-6,-402e-6,-352e-6,-412e-6,-384e-6,-401e-6,-352e-6,-41e-5,-383e-6,-401e-6,-35e-5,-409e-6,-327e-6,-342e-6,-299e-6,-35e-5,-326e-6,-342e-6,-299e-6,-349e-6,-325e-6,-34e-5,-298e-6,-347e-6,-324e-6,-339e-6,-297e-6,-346e-6,-322e-6,-34e-5,-295e-6,-345e-6,-321e-6,-336e-6,-294e-6,-344e-6,-32e-5,-335e-6,-295e-6,-343e-6,-32e-5,-335e-6,-293e-6,-342e-6,-317e-6,-336e-6,-293e-6,-341e-6,-316e-6,-333e-6,-292e-6,-34e-5,-315e-6,-333e-6,-291e-6,-339e-6,-315e-6,-333e-6,-29e-5,-338e-6,-313e-6,-331e-6,-289e-6,-337e-6,-313e-6,-33e-5,-288e-6,-336e-6,-312e-6,-329e-6,-287e-6,-335e-6,-309e-6,-328e-6,-286e-6,-334e-6,-309e-6,-327e-6,-286e-6,-333e-6,-308e-6,-326e-6,-285e-6,-332e-6,-308e-6,-325e-6,-285e-6,-331e-6,-307e-6,-324e-6,-283e-6,-33e-5,-305e-6,-323e-6,-283e-6,-329e-6,-305e-6,-322e-6,-282e-6,-328e-6,-304e-6,-322e-6,-281e-6,-327e-6,-303e-6,-321e-6,-28e-5,-326e-6,-302e-6,-32e-5,-28e-5,-325e-6,-301e-6,-32e-5,-279e-6,-324e-6,-299e-6,-319e-6,-279e-6,-324e-6,-299e-6,-318e-6,-278e-6,-323e-6,-298e-6,-317e-6,-277e-6,-322e-6,-297e-6,-316e-6,-276e-6,-321e-6,-296e-6,-315e-6,-276e-6,-32e-5,-295e-6,-314e-6,-274e-6,-319e-6,-294e-6,-314e-6,-275e-6,-318e-6,-293e-6,-314e-6,-273e-6,-318e-6,-292e-6,-313e-6,-273e-6,-317e-6,-292e-6,-312e-6,-272e-6,-316e-6,-291e-6,-311e-6,-272e-6,-315e-6,-29e-5,-309e-6,-271e-6,-314e-6,-289e-6,-311e-6,-27e-5,-313e-6,-287e-6,-31e-5,-27e-5,-313e-6,-287e-6,-307e-6,-267e-6,-312e-6,-286e-6,-308e-6,-268e-6,-311e-6,-286e-6,-306e-6,-267e-6,-31e-5,-284e-6,-306e-6,-267e-6,-309e-6,-284e-6,-305e-6,-266e-6,-309e-6,-284e-6,-304e-6,-265e-6,-308e-6,-282e-6,-304e-6,-266e-6,-307e-6,-281e-6,-302e-6,-264e-6,-306e-6,-281e-6,-302e-6,-264e-6,-306e-6,-28e-5,-302e-6,-263e-6,-305e-6,-279e-6,-3e-4,-262e-6,-304e-6,-279e-6,-3e-4,-262e-6,-303e-6,-278e-6,-299e-6,-262e-6,-303e-6,-278e-6,-299e-6,-261e-6,-302e-6,-276e-6,-298e-6,-261e-6,-301e-6,-275e-6,-297e-6,-26e-5,-3e-4,-273e-6,-297e-6,-261e-6,-3e-4,-273e-6,-298e-6,-257e-6,-299e-6,-273e-6,-296e-6,-258e-6,-298e-6,-273e-6,-294e-6,-257e-6,-298e-6,-272e-6,-293e-6,-257e-6,-297e-6,-272e-6,-294e-6,-254e-6,-296e-6,-27e-5,-293e-6,-255e-6,-295e-6,-272e-6,-292e-6,-253e-6,-295e-6,-269e-6,-292e-6,-253e-6,-294e-6,-269e-6,-291e-6,-253e-6,-294e-6,-268e-6,-29e-5,-254e-6,-293e-6,-268e-6,-29e-5,-253e-6,-292e-6,-267e-6,-289e-6,-25e-5,-292e-6,-264e-6,-289e-6,-252e-6,-291e-6,-265e-6,-286e-6,-247e-6,-29e-5,-264e-6,-289e-6,-252e-6,-29e-5,-266e-6,-282e-6,-249e-6,-288e-6,-264e-6,-285e-6,-265e-6,-288e-6,-268e-6,-283e-6,-22e-5,-254e-6,-243e-6,-252e-6,-221e-6,-254e-6,-234e-6,-253e-6,-217e-6,-253e-6,-23e-5,-249e-6,-219e-6,-253e-6,-233e-6,-246e-6,-218e-6,-252e-6,-23e-5,-249e-6,-219e-6,-252e-6,-229e-6,-25e-5,-217e-6,-251e-6,-23e-5,-249e-6,-216e-6,-251e-6,-227e-6,-248e-6,-217e-6,-25e-5,-229e-6,-248e-6,-216e-6,-25e-5,-227e-6,-248e-6,-216e-6,-249e-6,-227e-6,-245e-6,-214e-6,-249e-6,-225e-6,-247e-6,-215e-6,-248e-6,-227e-6,-246e-6,-214e-6,-248e-6,-225e-6,-246e-6,-215e-6,-247e-6,-223e-6,-244e-6,-214e-6,-246e-6,-224e-6,-244e-6,-214e-6,-246e-6,-223e-6,-245e-6,-212e-6,-246e-6,-223e-6,-244e-6,-213e-6,-245e-6,-221e-6,-243e-6,-212e-6,-244e-6,-221e-6,-243e-6,-213e-6,-244e-6,-222e-6,-242e-6,-211e-6,-244e-6,-221e-6,-241e-6,-209e-6,-243e-6,-222e-6,-241e-6,-21e-5,-243e-6,-22e-5,-24e-5,-211e-6,-242e-6,-22e-5,-24e-5,-209e-6,-242e-6,-218e-6,-241e-6,-21e-5,-241e-6,-218e-6,-239e-6,-209e-6,-241e-6,-218e-6,-238e-6,-207e-6,-24e-5,-217e-6,-238e-6,-207e-6,-24e-5,-215e-6,-239e-6,-206e-6,-239e-6,-217e-6,-235e-6,-206e-6,-239e-6,-215e-6,-238e-6,-207e-6,-238e-6,-216e-6,-236e-6,-206e-6,-238e-6,-215e-6,-236e-6,-206e-6,-237e-6,-215e-6,-236e-6,-206e-6,-237e-6,-215e-6,-235e-6,-205e-6,-237e-6,-215e-6,-235e-6,-205e-6,-236e-6,-214e-6,-234e-6,-203e-6,-236e-6,-213e-6,-234e-6,-203e-6,-235e-6,-213e-6,-234e-6,-203e-6,-235e-6,-213e-6,-233e-6,-203e-6,-234e-6,-212e-6,-233e-6,-204e-6,-234e-6,-212e-6,-232e-6,-203e-6,-233e-6,-212e-6,-232e-6,-202e-6,-233e-6,-21e-5,-232e-6,-201e-6,-233e-6,-212e-6,-231e-6,-204e-6,-232e-6,-21e-5,-23e-5,-201e-6,-232e-6,-209e-6,-231e-6,-202e-6,-231e-6,-211e-6,-23e-5,-201e-6,-231e-6,-209e-6,-23e-5,-201e-6,-231e-6,-208e-6,-229e-6,-2e-4,-23e-5,-208e-6,-229e-6,-2e-4,-23e-5,-208e-6,-228e-6,-2e-4,-229e-6,-207e-6,-228e-6,-2e-4,-229e-6,-206e-6,-227e-6,-2e-4,-229e-6,-206e-6,-228e-6,-198e-6,-228e-6,-205e-6,-227e-6,-199e-6,-228e-6,-205e-6,-227e-6,-199e-6,-227e-6,-205e-6,-226e-6,-198e-6,-227e-6,-205e-6,-226e-6,-197e-6,-227e-6,-201e-6,-226e-6,-198e-6,-226e-6,-205e-6,-225e-6,-196e-6,-226e-6,-203e-6,-224e-6,-196e-6,-225e-6,-203e-6,-225e-6,-196e-6,-225e-6,-202e-6,-224e-6,-195e-6,-225e-6,-203e-6,-224e-6,-195e-6,-224e-6,-201e-6,-223e-6,-195e-6,-224e-6,-202e-6,-223e-6,-195e-6,-223e-6,-19e-5,-209e-6,-183e-6,-21e-5,-189e-6,-209e-6,-182e-6,-209e-6,-188e-6,-209e-6,-182e-6,-209e-6,-188e-6,-208e-6,-182e-6,-209e-6,-187e-6,-208e-6,-182e-6,-208e-6,-188e-6,-207e-6,-181e-6,-208e-6,-188e-6,-207e-6,-181e-6,-208e-6,-186e-6,-207e-6,-18e-5,-207e-6,-187e-6,-207e-6,-181e-6,-207e-6,-185e-6,-206e-6,-181e-6,-207e-6,-185e-6,-206e-6,-179e-6,-206e-6,-186e-6,-205e-6,-18e-5,-206e-6,-185e-6,-205e-6,-179e-6,-206e-6,-185e-6,-205e-6,-178e-6,-205e-6,-185e-6,-204e-6,-179e-6,-205e-6,-184e-6,-204e-6,-178e-6,-205e-6,-183e-6,-204e-6,-179e-6,-204e-6,-184e-6,-204e-6,-177e-6,-204e-6,-183e-6,-203e-6,-177e-6,-204e-6,-183e-6,-203e-6,-177e-6,-203e-6,-183e-6,-202e-6,-177e-6,-203e-6,-183e-6,-202e-6,-179e-6,-203e-6,-182e-6,-202e-6,-176e-6,-202e-6,-181e-6,-202e-6,-177e-6,-202e-6,-184e-6,-201e-6,-176e-6,-202e-6,-18e-5,-201e-6,-176e-6,-201e-6,-181e-6,-2e-4,-175e-6,-201e-6,-181e-6,-199e-6,-174e-6,-201e-6,-179e-6,-2e-4,-174e-6,-201e-6,-181e-6,-2e-4,-175e-6,-2e-4,-181e-6,-199e-6,-174e-6,-2e-4,-181e-6,-198e-6,-173e-6,-2e-4,-178e-6,-199e-6,-174e-6,-199e-6,-179e-6,-198e-6,-174e-6,-199e-6,-181e-6,-198e-6,-174e-6,-199e-6,-179e-6,-198e-6,-173e-6,-198e-6,-177e-6,-198e-6,-174e-6,-198e-6,-176e-6,-198e-6,-173e-6,-198e-6,-176e-6,-197e-6,-173e-6,-198e-6,-176e-6,-197e-6,-174e-6,-197e-6,-176e-6,-196e-6,-172e-6,-197e-6,-176e-6,-197e-6,-171e-6,-197e-6,-176e-6,-196e-6,-168e-6,-196e-6,-182e-6,-196e-6,-171e-6,-196e-6,-174e-6,-196e-6,-173e-6,-196e-6,-176e-6,-191e-6,-172e-6,-196e-6,-171e-6,-194e-6,-171e-6,-195e-6,-176e-6,-195e-6,-169e-6,-195e-6,-174e-6,-194e-6,-166e-6,-195e-6,-174e-6,-194e-6,-168e-6,-194e-6,-17e-5,-194e-6,-169e-6,-194e-6,-174e-6,-193e-6,-169e-6,-194e-6,-174e-6,-193e-6,-169e-6,-194e-6,-173e-6,-192e-6,-168e-6,-193e-6,-175e-6,-192e-6,-167e-6,-193e-6,-173e-6,-192e-6,-167e-6,-193e-6,-171e-6,-191e-6,-167e-6,-192e-6,-173e-6,-192e-6,-171e-6,-192e-6,-172e-6,-191e-6,-167e-6,-192e-6,-171e-6,-191e-6,-168e-6,-192e-6,-171e-6,-191e-6,-167e-6,-191e-6,-171e-6,-191e-6,-167e-6,-191e-6,-171e-6,-191e-6,-166e-6,-191e-6,-17e-5,-19e-5,-167e-6,-191e-6,-171e-6,-19e-5,-166e-6,-19e-5,-17e-5,-19e-5,-165e-6,-19e-5,-17e-5,-19e-5,-166e-6,-19e-5,-15e-5,-167e-6,-146e-6,-168e-6,-151e-6,-167e-6,-146e-6,-167e-6,-15e-5,-167e-6,-148e-6,-167e-6,-15e-5,-167e-6,-147e-6,-167e-6,-149e-6,-167e-6,-147e-6,-167e-6,-149e-6,-166e-6,-146e-6,-167e-6,-149e-6,-166e-6,-144e-6,-166e-6,-148e-6,-166e-6,-146e-6,-166e-6,-148e-6,-165e-6,-145e-6,-166e-6,-148e-6,-166e-6,-146e-6,-166e-6,-149e-6,-165e-6,-145e-6,-165e-6,-145e-6,-165e-6,-145e-6,-165e-6,-148e-6,-165e-6,-145e-6,-165e-6,-145e-6,-165e-6,-144e-6,-165e-6,-148e-6,-164e-6,-145e-6,-165e-6,-147e-6,-164e-6,-144e-6,-164e-6,-147e-6,-164e-6,-145e-6,-164e-6,-148e-6,-164e-6,-143e-6,-164e-6,-147e-6,-163e-6,-144e-6,-164e-6,-146e-6,-163e-6,-144e-6,-163e-6,-145e-6,-163e-6,-142e-6,-163e-6,-148e-6,-163e-6,-142e-6,-163e-6,-144e-6,-163e-6,-14e-5,-163e-6,-145e-6,-162e-6,-142e-6,-163e-6,-144e-6,-162e-6,-142e-6,-162e-6,-145e-6,-162e-6,-141e-6,-162e-6,-145e-6,-162e-6,-142e-6,-162e-6,-144e-6,-162e-6,-142e-6,-162e-6,-145e-6,-162e-6,-143e-6,-162e-6,-144e-6,-161e-6,-141e-6,-161e-6,-144e-6,-161e-6,-143e-6,-161e-6,-144e-6,-161e-6,-141e-6,-161e-6,-143e-6,-161e-6,-142e-6,-161e-6,-143e-6,-161e-6,-14e-5,-161e-6,-142e-6,-16e-5,-141e-6,-16e-5,-143e-6,-16e-5,-141e-6,-16e-5,-143e-6,-16e-5,-14e-5,-16e-5,-145e-6,-159e-6,-141e-6,-16e-5,-143e-6,-159e-6,-139e-6,-16e-5,-143e-6,-159e-6,-139e-6,-159e-6,-141e-6,-159e-6,-139e-6,-159e-6,-143e-6,-159e-6,-139e-6,-159e-6,-141e-6,-159e-6,-14e-5,-159e-6,-14e-5,-158e-6,-138e-6,-159e-6,-141e-6,-158e-6,-138e-6,-158e-6,-143e-6,-158e-6,-139e-6,-158e-6,-141e-6,-158e-6,-137e-6,-158e-6,-142e-6,-158e-6,-138e-6,-158e-6,-141e-6,-157e-6,-138e-6,-158e-6,-14e-5,-157e-6,-138e-6,-157e-6,-139e-6,-157e-6,-138e-6,-157e-6,-141e-6,-157e-6,-139e-6,-157e-6,-139e-6,-156e-6,-139e-6,-157e-6,-138e-6,-157e-6,-137e-6,-157e-6,-138e-6,-156e-6,-137e-6,-156e-6,-139e-6,-156e-6,-138e-6,-156e-6,-139e-6,-156e-6,-137e-6,-156e-6,-139e-6,-156e-6,-138e-6,-156e-6,-139e-6,-155e-6,-136e-6,-156e-6,-138e-6,-156e-6,-136e-6,-155e-6,-139e-6,-155e-6,-137e-6,-155e-6,-139e-6,-155e-6,-136e-6,-155e-6,-138e-6,-155e-6,-138e-6,-155e-6,-139e-6,-155e-6,-136e-6,-155e-6,-138e-6,-155e-6,-137e-6,-155e-6,-137e-6,-154e-6,-136e-6,-154e-6,-137e-6,-154e-6,-135e-6,-154e-6,-137e-6,-154e-6,-135e-6,-154e-6,-137e-6,-154e-6,-134e-6,-154e-6,-136e-6,-154e-6,-135e-6,-154e-6,-137e-6,-154e-6,-136e-6,-154e-6,-136e-6,-153e-6,-135e-6,-153e-6,-137e-6,-153e-6,-135e-6,-153e-6,-136e-6,-153e-6,-134e-6,-153e-6,-136e-6,-153e-6,-134e-6,-153e-6,-137e-6,-153e-6,-133e-6,-153e-6,-136e-6,-153e-6,-134e-6,-153e-6,-135e-6,-152e-6,-133e-6,-152e-6,-135e-6,-152e-6,-134e-6,-152e-6,-134e-6,-152e-6,-134e-6,-152e-6,-135e-6,-152e-6,-134e-6,-152e-6,-134e-6,-152e-6,-134e-6,-152e-6,-135e-6,-151e-6,-131e-6,-151e-6,-134e-6,-151e-6,-134e-6,-151e-6,-136e-6,-151e-6,-134e-6,-151e-6,-136e-6,-151e-6,-134e-6,-151e-6,-133e-6,-151e-6,-133e-6,-151e-6,-134e-6,-151e-6,-133e-6,-151e-6,-133e-6,-15e-5,-132e-6,-15e-5,-132e-6,-15e-5,-134e-6,-15e-5,-125e-6,-149e-6,-135e-6,-15e-5,-131e-6,-15e-5,-135e-6,-15e-5,-132e-6,-15e-5,-132e-6,-15e-5,-133e-6,-15e-5,-133e-6,-15e-5,-131e-6,-149e-6,-132e-6,-149e-6,-134e-6,-149e-6,-131e-6,-149e-6,-133e-6,-149e-6,-131e-6,-149e-6,-135e-6,-149e-6,-133e-6,-149e-6,-133e-6,-149e-6,-13e-5,-149e-6,-131e-6,-149e-6,-131e-6,-149e-6,-131e-6,-148e-6,-13e-5,-148e-6,-133e-6,-148e-6,-13e-5,-148e-6,-132e-6,-148e-6,-129e-6,-148e-6,-132e-6,-148e-6,-13e-5,-148e-6,-131e-6,-148e-6,-13e-5,-148e-6,-131e-6,-148e-6,-131e-6,-148e-6,-123e-6,-139e-6,-124e-6,-139e-6,-125e-6,-139e-6,-123e-6,-139e-6,-123e-6,-139e-6,-122e-6,-138e-6,-12e-5,-138e-6,-123e-6,-138e-6,-124e-6,-138e-6,-123e-6,-138e-6,-123e-6,-138e-6,-122e-6,-138e-6,-123e-6,-138e-6,-121e-6,-138e-6,-123e-6,-138e-6,-122e-6,-138e-6,-122e-6,-137e-6,-123e-6,-138e-6,-122e-6,-137e-6,-121e-6,-137e-6,-122e-6,-137e-6,-121e-6,-137e-6,-121e-6,-137e-6,-121e-6,-137e-6,-122e-6,-137e-6,-122e-6,-137e-6,-123e-6,-137e-6,-121e-6,-137e-6,-121e-6,-137e-6,-121e-6,-137e-6,-121e-6,-137e-6,-12e-5,-137e-6,-122e-6,-136e-6,-121e-6,-136e-6,-121e-6,-136e-6,-12e-5,-136e-6,-12e-5,-136e-6,-12e-5,-136e-6,-121e-6,-136e-6,-119e-6,-136e-6,-12e-5,-136e-6,-12e-5,-136e-6,-121e-6,-136e-6,-12e-5,-136e-6,-121e-6,-136e-6,-12e-5,-136e-6,-121e-6,-136e-6,-119e-6,-136e-6,-12e-5,-135e-6,-12e-5,-135e-6,-12e-5,-135e-6,-12e-5,-135e-6,-119e-6,-135e-6,-119e-6,-135e-6,-119e-6,-135e-6,-12e-5,-135e-6,-12e-5,-135e-6,-12e-5,-135e-6,-119e-6,-135e-6,-12e-5,-135e-6,-119e-6,-135e-6,-118e-6,-135e-6,-12e-5,-134e-6,-119e-6,-134e-6,-12e-5,-134e-6,-119e-6,-134e-6,-119e-6,-134e-6,-119e-6,-134e-6,-119e-6,-134e-6,-119e-6,-134e-6,-118e-6,-134e-6,-118e-6,-134e-6,-119e-6,-134e-6,-117e-6,-134e-6,-118e-6,-134e-6,-118e-6,-134e-6,-117e-6,-134e-6,-118e-6,-133e-6,-118e-6,-133e-6,-119e-6,-133e-6,-118e-6,-133e-6,-118e-6,-133e-6,-118e-6,-133e-6,-119e-6,-133e-6,-117e-6,-133e-6,-115e-6,-133e-6,-111e-6,-133e-6,-115e-6],imag:[0,.123894,.15737,.210952,-.07615,-.145613,-.004471,-.011613,.068694,.033905,.119128,-.001508,-.005879,.004987,-.012356,-.002032,.002838,.00564,.016947,.003254,.012119,.001022,.001041,-.006764,.006971,.006519,.00636,-.005381,.001966,.003007,692e-6,-.003329,-.003718,.003545,.00201,-368e-6,-.002096,.001772,.002863,2e-6,-.002596,.002207,.002314,-.001802,-9e-4,999e-6,.002079,.001643,-.00187,.001103,801e-6,.00173,-759e-6,.001411,-436e-6,.001145,-783e-6,123e-6,-812e-6,273e-6,-854e-6,925e-6,-936e-6,-.001076,695e-6,.001443,.001081,.001177,-836e-6,-766e-6,-941e-6,.001357,295e-6,319e-6,193e-6,-853e-6,-977e-6,.001197,-.00105,-.001184,-282e-6,.001258,.001128,-743e-6,-.001203,408e-6,-523e-6,-786e-6,-708e-6,-819e-6,-563e-6,-.001193,575e-6,-254e-6,-883e-6,-393e-6,15e-5,278e-6,-755e-6,-.001036,505e-6,622e-6,572e-6,-796e-6,-911e-6,.001027,188e-6,287e-6,.00103,-7e-6,-679e-6,-637e-6,-238e-6,992e-6,265e-6,-835e-6,238e-6,743e-6,718e-6,11e-5,-285e-6,941e-6,-956e-6,664e-6,-953e-6,921e-6,56e-5,-334e-6,796e-6,358e-6,-616e-6,-532e-6,413e-6,896e-6,792e-6,-906e-6,177e-6,-526e-6,62e-6,-74e-6,-657e-6,-682e-6,754e-6,233e-6,-733e-6,-887e-6,-387e-6,-653e-6,-71e-6,132e-6,-301e-6,-616e-6,-867e-6,-867e-6,-111e-6,-509e-6,-777e-6,-656e-6,567e-6,-847e-6,-63e-5,-458e-6,-78e-6,355e-6,813e-6,-546e-6,-52e-5,-688e-6,-492e-6,-13e-6,-816e-6,302e-6,713e-6,-567e-6,523e-6,223e-6,722e-6,-637e-6,-779e-6,-85e-6,69e-6,-329e-6,-663e-6,-55e-5,-304e-6,3e-6,-73e-5,31e-5,-389e-6,-343e-6,-701e-6,-621e-6,-819e-6,44e-6,-36e-5,507e-6,46e-5,671e-6,21e-5,-212e-6,-265e-6,-476e-6,-799e-6,-541e-6,-783e-6,-67e-5,-642e-6,-639e-6,-562e-6,-546e-6,-555e-6,-437e-6,-294e-6,-183e-6,-175e-6,-178e-6,-76e-6,1e-5,-71e-6,-143e-6,-44e-6,41e-6,-93e-6,-185e-6,-64e-6,37e-6,-12e-5,-218e-6,-77e-6,38e-6,-14e-5,-242e-6,-86e-6,4e-5,-155e-6,-26e-5,-93e-6,43e-6,-168e-6,-275e-6,-97e-6,48e-6,-178e-6,-304e-6,-106e-6,56e-6,-197e-6,-314e-6,-108e-6,61e-6,-204e-6,-322e-6,-109e-6,67e-6,-211e-6,-329e-6,-11e-5,72e-6,-214e-6,-334e-6,-11e-5,77e-6,-218e-6,-338e-6,-11e-5,82e-6,-221e-6,-341e-6,-109e-6,87e-6,-224e-6,-344e-6,-108e-6,92e-6,-225e-6,-346e-6,-107e-6,96e-6,-226e-6,-348e-6,-106e-6,101e-6,-227e-6,-349e-6,-105e-6,105e-6,-228e-6,-349e-6,-103e-6,109e-6,-227e-6,-35e-5,-103e-6,113e-6,-228e-6,-35e-5,-101e-6,116e-6,-228e-6,-351e-6,-101e-6,12e-5,-227e-6,-35e-5,-98e-6,123e-6,-22e-5,-35e-5,-97e-6,126e-6,-23e-5,-349e-6,-97e-6,13e-5,-224e-6,-346e-6,-93e-6,131e-6,-222e-6,-347e-6,-92e-6,135e-6,-22e-5,-345e-6,-91e-6,137e-6,-221e-6,-345e-6,-9e-5,14e-5,-214e-6,-344e-6,-9e-5,143e-6,-211e-6,-343e-6,-86e-6,145e-6,-211e-6,-341e-6,-85e-6,146e-6,-213e-6,-34e-5,-84e-6,148e-6,-208e-6,-338e-6,-83e-6,15e-5,-209e-6,-337e-6,-81e-6,152e-6,-207e-6,-336e-6,-8e-5,154e-6,-206e-6,-334e-6,-79e-6,155e-6,-202e-6,-334e-6,-78e-6,153e-6,-194e-6,-322e-6,-74e-6,154e-6,-194e-6,-32e-5,-73e-6,155e-6,-191e-6,-319e-6,-72e-6,157e-6,-188e-6,-318e-6,-7e-5,16e-5,-185e-6,-316e-6,-7e-5,159e-6,-188e-6,-316e-6,-68e-6,16e-5,-184e-6,-313e-6,-68e-6,16e-5,-182e-6,-312e-6,-67e-6,163e-6,-18e-5,-311e-6,-65e-6,162e-6,-178e-6,-31e-5,-65e-6,164e-6,-176e-6,-307e-6,-63e-6,165e-6,-175e-6,-305e-6,-62e-6,166e-6,-173e-6,-304e-6,-61e-6,167e-6,-173e-6,-303e-6,-59e-6,168e-6,-171e-6,-302e-6,-6e-5,168e-6,-168e-6,-302e-6,-6e-5,168e-6,-167e-6,-297e-6,-6e-5,166e-6,-169e-6,-299e-6,-58e-6,17e-5,-157e-6,-297e-6,-57e-6,168e-6,-16e-5,-294e-6,-54e-6,172e-6,-15e-5,-303e-6,-6e-5,171e-6,-12e-5,-293e-6,-6e-5,166e-6,-164e-6,-301e-6,-74e-6,144e-6,-131e-6,-233e-6,-46e-6,154e-6,-127e-6,-251e-6,-44e-6,148e-6,-126e-6,-245e-6,-42e-6,148e-6,-128e-6,-246e-6,-43e-6,15e-5,-126e-6,-241e-6,-43e-6,149e-6,-125e-6,-242e-6,-43e-6,148e-6,-122e-6,-242e-6,-42e-6,149e-6,-123e-6,-241e-6,-41e-6,15e-5,-123e-6,-239e-6,-39e-6,149e-6,-119e-6,-238e-6,-39e-6,149e-6,-117e-6,-236e-6,-4e-5,15e-5,-12e-5,-237e-6,-38e-6,151e-6,-115e-6,-234e-6,-38e-6,15e-5,-123e-6,-235e-6,-39e-6,154e-6,-115e-6,-233e-6,-36e-6,153e-6,-9e-5,-235e-6,-39e-6,152e-6,-117e-6,-233e-6,-38e-6,151e-6,-119e-6,-232e-6,-39e-6,148e-6,-111e-6,-23e-5,-37e-6,149e-6,-111e-6,-229e-6,-37e-6,15e-5,-11e-5,-228e-6,-36e-6,149e-6,-107e-6,-227e-6,-34e-6,15e-5,-105e-6,-227e-6,-35e-6,152e-6,-105e-6,-225e-6,-33e-6,151e-6,-104e-6,-225e-6,-34e-6,148e-6,-104e-6,-223e-6,-33e-6,151e-6,-99e-6,-222e-6,-33e-6,15e-5,-104e-6,-222e-6,-32e-6,151e-6,-1e-4,-221e-6,-32e-6,149e-6,-101e-6,-221e-6,-32e-6,151e-6,-98e-6,-22e-5,-32e-6,151e-6,-98e-6,-219e-6,-32e-6,151e-6,-95e-6,-218e-6,-31e-6,15e-5,-96e-6,-216e-6,-3e-5,149e-6,-96e-6,-216e-6,-3e-5,15e-5,-96e-6,-216e-6,-3e-5,15e-5,-96e-6,-214e-6,-3e-5,149e-6,-9e-5,-214e-6,-3e-5,128e-6,-8e-5,-183e-6,-25e-6,128e-6,-76e-6,-182e-6,-25e-6,128e-6,-78e-6,-181e-6,-25e-6,128e-6,-75e-6,-18e-5,-24e-6,128e-6,-67e-6,-181e-6,-25e-6,127e-6,-79e-6,-181e-6,-25e-6,129e-6,-78e-6,-177e-6,-24e-6,125e-6,-76e-6,-178e-6,-23e-6,129e-6,-67e-6,-177e-6,-23e-6,129e-6,-74e-6,-176e-6,-23e-6,128e-6,-72e-6,-175e-6,-24e-6,126e-6,-66e-6,-176e-6,-21e-6,127e-6,-7e-5,-176e-6,-22e-6,126e-6,-69e-6,-175e-6,-21e-6,127e-6,-7e-5,-175e-6,-22e-6,13e-5,-68e-6,-174e-6,-22e-6,128e-6,-67e-6,-172e-6,-2e-5,126e-6,-68e-6,-172e-6,-21e-6,126e-6,-67e-6,-171e-6,-21e-6,125e-6,-68e-6,-171e-6,-21e-6,127e-6,-67e-6,-17e-5,-2e-5,125e-6,-69e-6,-17e-5,-2e-5,126e-6,-65e-6,-17e-5,-21e-6,126e-6,-66e-6,-169e-6,-19e-6,126e-6,-63e-6,-167e-6,-19e-6,124e-6,-61e-6,-168e-6,-2e-5,126e-6,-62e-6,-165e-6,-19e-6,125e-6,-62e-6,-166e-6,-19e-6,126e-6,-63e-6,-166e-6,-18e-6,125e-6,-59e-6,-166e-6,-19e-6,125e-6,-6e-5,-164e-6,-18e-6,125e-6,-61e-6,-165e-6,-19e-6,126e-6,-6e-5,-163e-6,-17e-6,126e-6,-56e-6,-164e-6,-17e-6,125e-6,-55e-6,-162e-6,-18e-6,124e-6,-55e-6,-161e-6,-17e-6,123e-6,-57e-6,-16e-5,-17e-6,124e-6,-59e-6,-16e-5,-17e-6,123e-6,-46e-6,-161e-6,-16e-6,127e-6,-49e-6,-159e-6,-16e-6,124e-6,-58e-6,-162e-6,-16e-6,124e-6,-51e-6,-159e-6,-16e-6,122e-6,-55e-6,-158e-6,-17e-6,125e-6,-53e-6,-157e-6,-16e-6,123e-6,-52e-6,-157e-6,-16e-6,122e-6,-55e-6,-157e-6,-17e-6,123e-6,-5e-5,-155e-6,-15e-6,125e-6,-53e-6,-157e-6,-16e-6,123e-6,-49e-6,-156e-6,-14e-6,123e-6,-49e-6,-155e-6,-16e-6,124e-6,-54e-6,-155e-6,-15e-6,121e-6,-49e-6,-155e-6,-15e-6,122e-6,-5e-5,-153e-6,-14e-6,12e-5,-48e-6,-154e-6,-14e-6,122e-6,-45e-6,-151e-6,-13e-6,123e-6,-48e-6,-152e-6,-15e-6,125e-6,-45e-6,-148e-6,-13e-6,124e-6,-35e-6,-154e-6,-15e-6,123e-6,-42e-6,-15e-5,-14e-6,121e-6,-49e-6,-15e-5,-13e-6,122e-6,-49e-6,-15e-5,-13e-6,12e-5,-4e-5,-153e-6,-14e-6,122e-6,-43e-6,-151e-6,-15e-6,116e-6,-48e-6,-152e-6,-14e-6,12e-5,-43e-6,-15e-5,-15e-6,12e-5,-45e-6,-15e-5,-12e-6,12e-5,-44e-6,-147e-6,-12e-6,119e-6,-4e-5,-148e-6,-1e-5,12e-5,-42e-6,-151e-6,-14e-6,124e-6,-38e-6,-146e-6,-11e-6,119e-6,-55e-6,-154e-6,-15e-6,121e-6,-25e-6,-144e-6,-14e-6,115e-6,-67e-6,-148e-6,-24e-6,118e-6,-45e-6,-116e-6,-14e-6,107e-6,-52e-6,-129e-6,-15e-6,76e-6,-38e-6,-126e-6,-5e-6,1e-4,-23e-6,-131e-6,-13e-6,106e-6,-46e-6,-126e-6,-13e-6,99e-6,-57e-6,-128e-6,-8e-6,105e-6,-42e-6,-125e-6,-7e-6,104e-6,-28e-6,-127e-6,-1e-5,102e-6,-33e-6,-129e-6,-8e-6,106e-6,-33e-6,-126e-6,-11e-6,102e-6,-31e-6,-125e-6,-12e-6,103e-6,-25e-6,-125e-6,-11e-6,103e-6,-42e-6,-128e-6,-11e-6,105e-6,-31e-6,-124e-6,-9e-6,101e-6,-31e-6,-125e-6,-1e-5,104e-6,-29e-6,-123e-6,-9e-6,107e-6,-4e-5,-123e-6,-1e-5,104e-6,-32e-6,-123e-6,-1e-5,103e-6,-26e-6,-124e-6,-8e-6,103e-6,-31e-6,-122e-6,-1e-5,105e-6,-34e-6,-122e-6,-1e-5,105e-6,-3e-5,-12e-5,-1e-5,102e-6,-33e-6,-122e-6,-9e-6,102e-6,-31e-6,-125e-6,-9e-6,1e-4,-34e-6,-122e-6,-1e-5,102e-6,-35e-6,-12e-5,-8e-6,102e-6,-27e-6,-122e-6,-9e-6,104e-6,-22e-6,-119e-6,-1e-5,102e-6,-31e-6,-12e-5,-7e-6,102e-6,-33e-6,-122e-6,-1e-5,104e-6,-32e-6,-122e-6,-9e-6,106e-6,-22e-6,-122e-6,-9e-6,101e-6,-47e-6,-121e-6,-11e-6,103e-6,-23e-6,-119e-6,-7e-6,1e-4,-34e-6,-119e-6,-9e-6,102e-6,-28e-6,-119e-6,-8e-6,101e-6,-29e-6,-118e-6,-8e-6,99e-6,-28e-6,-118e-6,-9e-6,99e-6,-28e-6,-117e-6,-8e-6,101e-6,-27e-6,-121e-6,-9e-6,101e-6,-3e-5,-119e-6,-7e-6,101e-6,-27e-6,-118e-6,-9e-6,99e-6,-25e-6,-118e-6,-8e-6,1e-4,-27e-6,-116e-6,-9e-6,1e-4,-3e-5,-116e-6,-9e-6,97e-6,-27e-6,-116e-6,-7e-6,101e-6,-24e-6,-117e-6,-8e-6,97e-6,-25e-6,-111e-6,-9e-6,98e-6,-3e-5,-115e-6,-9e-6,1e-4,-23e-6,-114e-6,-6e-6,96e-6,-24e-6,-114e-6,-7e-6,99e-6,-23e-6,-114e-6,-7e-6,1e-4,-28e-6,-114e-6,-7e-6,98e-6,-22e-6,-113e-6,-7e-6,98e-6,-23e-6,-112e-6,-8e-6,98e-6,-25e-6,-112e-6,-7e-6,99e-6,-25e-6,-112e-6,-6e-6,98e-6,-19e-6,-114e-6,-7e-6,1e-4,-19e-6,-112e-6,-7e-6,99e-6,-2e-5,-11e-5,-6e-6,98e-6,-24e-6,-111e-6,-7e-6,97e-6,-21e-6,-112e-6,-5e-6,104e-6,-19e-6,-11e-5,-7e-6,95e-6,-22e-6,-112e-6,-8e-6,99e-6,-23e-6,-112e-6,-8e-6,97e-6,-16e-6,-11e-5,-7e-6,99e-6,-22e-6,-111e-6,-5e-6,97e-6,-2e-5,-111e-6,-5e-6,98e-6,-23e-6,-11e-5,-6e-6,97e-6,-21e-6,-11e-5,-6e-6,9e-5,-19e-6,-103e-6,-5e-6,91e-6,-18e-6,-104e-6,-5e-6,93e-6,-14e-6,-102e-6,-6e-6,91e-6,-2e-5,-103e-6,-5e-6,92e-6,-19e-6,-102e-6,-7e-6,91e-6,-23e-6,-103e-6,-5e-6,89e-6,-19e-6,-102e-6,-6e-6,92e-6,-17e-6,-103e-6,-4e-6,9e-5,-16e-6,-1e-4,-5e-6,92e-6,-16e-6,-1e-4,-6e-6,92e-6,-13e-6,-103e-6,-5e-6,9e-5,-18e-6,-101e-6,-5e-6,9e-5,-21e-6,-102e-6,-7e-6,91e-6,-15e-6,-102e-6,-5e-6,88e-6,-19e-6,-1e-4,-4e-6,91e-6,-19e-6,-102e-6,-5e-6,91e-6,-16e-6,-1e-4,-5e-6,88e-6,-15e-6,-102e-6,-7e-6,9e-5,-2e-5,-101e-6,-7e-6,89e-6,-2e-5,-1e-4,-4e-6,88e-6,-22e-6,-1e-4,-5e-6,88e-6,-2e-5,-96e-6,-5e-6,9e-5,-12e-6,-1e-4,-6e-6,9e-5,-8e-6,-98e-6,-5e-6,83e-6,-24e-6,-99e-6,-6e-6,92e-6,-17e-6,-99e-6,-7e-6,89e-6,-21e-6,-99e-6,-5e-6,87e-6,-29e-6,-1e-4,-5e-6,9e-5,-14e-6,-1e-4,-6e-6,86e-6,-18e-6,-98e-6,-6e-6,86e-6,-19e-6,-99e-6,-5e-6,85e-6,-24e-6,-1e-4,-5e-6,9e-5,-14e-6,-98e-6,-6e-6,87e-6,-17e-6,-98e-6,-5e-6,84e-6,-15e-6,-97e-6,-4e-6,87e-6,-12e-6,-97e-6,-6e-6,89e-6,-15e-6,-96e-6,-3e-6,9e-5,-9e-6,-97e-6,-4e-6,89e-6,-2e-5,-95e-6,-3e-6,9e-5,-12e-6,-93e-6,-3e-6,89e-6,-16e-6,-97e-6,-5e-6,89e-6,-9e-6,-98e-6,-5e-6,88e-6,-14e-6,-102e-6,-2e-6,74e-6,-12e-6,-96e-6,12e-6,91e-6,-7e-6,-92e-6,-3e-6,86e-6,-43e-6,-94e-6,0,95e-6,-2e-5,-94e-6,-5e-6,84e-6,-5e-6,-98e-6,0,89e-6,-19e-6,-101e-6,-6e-6,87e-6,-12e-6,-98e-6,-5e-6,95e-6,-16e-6,-96e-6,-7e-6,85e-6,-19e-6,-96e-6,-5e-6,86e-6,-14e-6,-94e-6,-4e-6,86e-6,-24e-6,-96e-6,-3e-6,82e-6,-17e-6,-96e-6,-3e-6,86e-6,-23e-6,-96e-6,-4e-6,88e-6,-26e-6,-97e-6,-3e-6,84e-6,0,-87e-6,-7e-6,85e-6,-16e-6,-95e-6,-2e-6,88e-6,-18e-6,-93e-6,-4e-6,86e-6,-1e-5,-93e-6,-3e-6,87e-6,-12e-6,-94e-6,-4e-6,86e-6,-12e-6,-94e-6,-5e-6,87e-6,-13e-6,-93e-6,-5e-6,85e-6,-17e-6,-93e-6,-5e-6,85e-6,-13e-6,-94e-6,-2e-6,85e-6,-11e-6,-93e-6,-5e-6,76e-6,-1e-5,-82e-6,-3e-6,73e-6,-13e-6,-82e-6,-2e-6,75e-6,-1e-5,-78e-6,-5e-6,74e-6,-8e-6,-79e-6,-2e-6,75e-6,-7e-6,-79e-6,-3e-6,75e-6,-7e-6,-79e-6,-1e-6,74e-6,-1e-5,-84e-6,-3e-6,75e-6,-1e-5,-8e-5,-1e-6,75e-6,-16e-6,-8e-5,-1e-6,75e-6,-7e-6,-78e-6,-4e-6,73e-6,-7e-6,-79e-6,-2e-6,79e-6,-9e-6,-79e-6,-1e-6,72e-6,-1e-5,-79e-6,-2e-6,78e-6,-1e-5,-8e-5,-2e-6,73e-6,-11e-6,-78e-6,-1e-6,73e-6,-9e-6,-79e-6,-4e-6,74e-6,-11e-6,-78e-6,-4e-6,71e-6,-9e-6,-8e-5,-1e-6,73e-6,-13e-6,-78e-6,-2e-6,74e-6,-5e-6,-77e-6,-3e-6,75e-6,2e-6,-8e-5,-2e-6,69e-6,-1e-5,-8e-5,-2e-6,77e-6,1e-6,-84e-6,-2e-6,75e-6,-11e-6,-8e-5,-1e-6,75e-6,-3e-6,-79e-6,-4e-6,73e-6,-12e-6,-8e-5,-1e-6,73e-6,-6e-6,-77e-6,-2e-6,73e-6,-7e-6,-78e-6,-2e-6,72e-6,-6e-6,-75e-6,-2e-6,73e-6,-1e-5,-79e-6,-3e-6,73e-6,-8e-6,-75e-6,-2e-6,72e-6,-6e-6,-77e-6,-2e-6,73e-6,-6e-6,-75e-6,-3e-6,73e-6,-3e-6,-78e-6,-2e-6,74e-6,-8e-6,-76e-6,-2e-6,72e-6,-1e-5,-77e-6,-2e-6,73e-6,-4e-6,-78e-6,-3e-6,67e-6,-11e-6,-76e-6,-2e-6,72e-6,-7e-6,-78e-6,-2e-6,71e-6,-6e-6,-77e-6,-2e-6,74e-6,0,-78e-6,-2e-6,7e-5,-9e-6,-77e-6,-2e-6,73e-6,-4e-6,-76e-6,-2e-6,74e-6,-8e-6,-78e-6,-1e-6,73e-6,-4e-6,-78e-6,-2e-6,68e-6,-5e-6,-75e-6,-3e-6,72e-6,-13e-6,-78e-6,-2e-6,7e-5,-1e-5,-77e-6,-2e-6,72e-6,-9e-6,-76e-6,-2e-6,72e-6,-5e-6,-75e-6,-2e-6,73e-6,-6e-6,-75e-6,-2e-6,7e-5,-3e-6,-73e-6,-2e-6,73e-6,-13e-6,-73e-6,-3e-6,74e-6,-6e-6,-77e-6,1e-6,73e-6,-9e-6,-76e-6,-2e-6,72e-6,-8e-6,-74e-6,-3e-6,72e-6,-7e-6,-74e-6,-3e-6,72e-6,-3e-6,-73e-6,-3e-6,71e-6,-11e-6,-76e-6,1e-6,72e-6,-2e-6,-75e-6,-4e-6,7e-5,-3e-6,-74e-6,-2e-6,7e-5,-7e-6,-75e-6,-2e-6,72e-6,-4e-6,-71e-6,-1e-6,69e-6,-8e-6,-74e-6,-2e-6,7e-5,-4e-6,-73e-6,0,72e-6,-7e-6,-74e-6,-2e-6,7e-5,-2e-6,-74e-6,0,71e-6,0,-74e-6,-2e-6,7e-5,-3e-6,-76e-6,-1e-6,73e-6,-7e-6,-74e-6,-3e-6,7e-5,-2e-6,-71e-6,-2e-6,72e-6,-1e-5,-73e-6,-1e-6,69e-6,-9e-6,-72e-6,-2e-6,7e-5,-4e-6,-75e-6,-1e-6,7e-5,-8e-6,-74e-6,-2e-6,69e-6,2e-6,-76e-6,-2e-6,7e-5,-1e-6,-73e-6,0,71e-6,-2e-6,-74e-6,-1e-6,71e-6,-9e-6,-72e-6,0,72e-6,4e-6,-71e-6,-1e-6,7e-5,-9e-6,-72e-6,0,71e-6,-4e-6,-72e-6,-2e-6,68e-6,-15e-6,-76e-6,-3e-6,71e-6,-8e-6,-71e-6,-4e-6,65e-6,-1e-6,-7e-5,-1e-6,66e-6,-5e-6,-69e-6,0,72e-6,-2e-6,-7e-5,-3e-6,68e-6,-6e-6,-71e-6,-2e-6,71e-6,5e-6,-73e-6,-4e-6,72e-6,-13e-6,-69e-6,0,84e-6,15e-6,-66e-6,1e-6,74e-6,7e-6,-65e-6,-1e-6,71e-6,1e-6,-7e-5,0,69e-6,-1e-6,-69e-6,-2e-6,73e-6,-6e-6,-71e-6,-7e-6,65e-6,-8e-6,-71e-6,-5e-6,68e-6,-14e-6,-71e-6,-4e-6,64e-6,-5e-6,-68e-6,1e-6,66e-6,-2e-6,-72e-6,0,71e-6,0,-7e-5,-1e-6,7e-5,-9e-6,-72e-6,-3e-6,66e-6,-8e-6,-72e-6,-1e-6,68e-6,1e-6,-73e-6,-2e-6,68e-6,1e-6,-7e-5,1e-6,69e-6,-4e-6,-7e-5,-3e-6,68e-6,-5e-6,-69e-6,1e-6,65e-6,-8e-6,-62e-6,0,61e-6,2e-6,-65e-6,-1e-6,64e-6,-4e-6,-65e-6,0,68e-6,-3e-6,-64e-6,-1e-6,62e-6,-2e-6,-63e-6,-2e-6,63e-6,2e-6,-64e-6,0,62e-6,-5e-6,-67e-6,0,62e-6,-5e-6,-65e-6,-1e-6,64e-6,-7e-6,-61e-6,1e-6,63e-6,8e-6,-66e-6,0,64e-6,3e-6,-65e-6,0,64e-6,-1e-6,-65e-6,-2e-6,62e-6,2e-6,-62e-6,0,59e-6,0,-64e-6,-3e-6,64e-6,5e-6,-63e-6,-1e-6,64e-6,1e-6,-65e-6,1e-6,62e-6,-7e-6,-64e-6,0,63e-6,-5e-6,-65e-6,-2e-6,65e-6,-5e-6,-64e-6,-1e-6,62e-6,-2e-6,-65e-6,-1e-6,64e-6,4e-6,-64e-6,0,61e-6,-4e-6,-64e-6,0,62e-6,1e-6,-64e-6,-1e-6,62e-6,-2e-6,-65e-6,0,62e-6,1e-6,-62e-6,-2e-6,63e-6,5e-6,-63e-6,-1e-6,64e-6,2e-6,-63e-6,0,64e-6,1e-6,-63e-6,1e-6,62e-6,-3e-6,-61e-6,-1e-6,62e-6,1e-6,-62e-6,-1e-6,64e-6,-2e-6,-64e-6,0,61e-6,0,-63e-6,-2e-6,6e-5,2e-6,-63e-6,0,62e-6,0,-63e-6,-2e-6,63e-6,-1e-6,-63e-6,0,64e-6,0,-63e-6,0,62e-6,3e-6,-64e-6,1e-6,63e-6,-1e-6,-62e-6,-1e-6,64e-6,-3e-6,-63e-6,2e-6,62e-6,-2e-6,-61e-6,0,61e-6,7e-6,-63e-6,-1e-6,62e-6,13e-6,-6e-5,2e-6,63e-6,-5e-6,-67e-6,-2e-6,74e-6,0,-66e-6]}},{}],8:[function(require,module,exports){module.exports={real:[0,.003915,-.164554,.034611,.069911,.028231,.047549,.018651,-.013682,-.031255,-.029816,659e-6,.0295,.03558,.022052,-.002817,-.011609,-.012592,-.005837,.008523,.008795,.002894,-759e-6,-.002033,-.00355,-.002653,-387e-6,.001989,.003417,.001766,0,-817e-6,-.00389,-.003441,-.00197,.001531,.003523,.004057,.001139,-806e-6,-.004045,-.004163,-.003275,.002099,.002445,.003829,.001838,.002583,-.00332,-.003711,-524e-6,.001416,.003075,.001313,113e-6,-.003009,-.002575,-35e-5,.001224,.003059,.002712,.00153,-.002129,-.002885,-.00207,-.002365,.002407,-.001242,-.00163,-.00142,.001771,.002401,909e-6,-515e-6,-.002726,289e-6,.002373,51e-6,464e-6,-.002847,.001412,-.002432,.0014,928e-6,.0016,-.001009,-309e-6,-.002194,.002388,-.002514,.002322,-.001289,-421e-6,.00179,-.002532,59e-5,-.001436,-668e-6,.002213,-.002383,.001875,.00101,-.002349,-.001575,-434e-6,-98e-5,7e-5,-.002161,.001772,825e-6,-.001831,-546e-6,-.001082,774e-6,-.001881,-.001889,-737e-6,.001709,-91e-6,.001185,.001782,.001269,739e-6,-.001767,.001645,803e-6,-.001357,629e-6,.001353,441e-6,743e-6,733e-6,-275e-6,-.001532,-.001283,106e-6,.001557,-849e-6,.001125,.001591,983e-6,-.001551,-497e-6,.00158,.001552,.001208,274e-6,687e-6,.001248,-.001492,-.001345,.001452,903e-6,.001216,-.001434,.001375,-.001487,-.001177,266e-6,-232e-6,.001455,728e-6,-.001455,.0012,-317e-6,.001434,.001403,739e-6,614e-6,216e-6,-.001049,-.001367,-141e-6,747e-6,-.001096,.001358,233e-6,.001318,.00112,.001347,932e-6,-.001116,766e-6,-.001149,341e-6,-.001225,.001179,-75e-6,.001272,631e-6,-439e-6,.00104,.001113,-784e-6,-65e-5,-26e-6,103e-6,583e-6,-676e-6,515e-6,.001202,865e-6,24e-5,-.001146,.001056,796e-6,-601e-6,-.001072,.001055,-937e-6,-.001065,-493e-6,.001038,915e-6,-75e-5,273e-6,484e-6,-849e-6,-665e-6,-23e-6,991e-6,.001043,219e-6,.001036,555e-6,258e-6,-741e-6,.001008,697e-6,-627e-6,589e-6,558e-6,251e-6,836e-6,-908e-6,186e-6,736e-6,951e-6,-8e-4,-105e-6,-606e-6,661e-6,-756e-6,-419e-6,201e-6,-201e-6,-477e-6,-661e-6,-676e-6,-75e-5,-783e-6,-853e-6,-846e-6,-889e-6,-92e-5,-93e-5,-93e-5,-93e-5,-931e-6,-931e-6,-929e-6,-926e-6,-923e-6,-921e-6,-919e-6,-916e-6,-912e-6,-911e-6,-909e-6,-906e-6,-902e-6,-901e-6,-9e-4,-898e-6,-893e-6,-891e-6,-891e-6,-888e-6,-885e-6,-882e-6,-883e-6,-882e-6,-877e-6,-875e-6,-875e-6,-874e-6,-869e-6,-869e-6,-867e-6,-866e-6,-861e-6,-859e-6,-808e-6,-808e-6,-803e-6,-804e-6,-804e-6,-803e-6,-799e-6,-795e-6,-797e-6,-797e-6,-792e-6,-789e-6,-793e-6,-793e-6,-787e-6,-783e-6,-786e-6,-784e-6,-78e-5,-778e-6,-781e-6,-779e-6,-776e-6,-773e-6,-775e-6,-776e-6,-768e-6,-769e-6,-772e-6,-772e-6,-769e-6,-764e-6,-767e-6,-766e-6,-763e-6,-761e-6,-758e-6,-761e-6,-756e-6,-754e-6,-763e-6,-756e-6,-751e-6,-751e-6,-754e-6,-751e-6,-748e-6,-747e-6,-748e-6,-747e-6,-743e-6,-74e-5,-743e-6,-746e-6,-739e-6,-74e-5,-741e-6,-739e-6,-732e-6,-731e-6,-738e-6,-739e-6,-732e-6,-727e-6,-73e-5,-734e-6,-727e-6,-722e-6,-727e-6,-726e-6,-723e-6,-72e-5,-725e-6,-726e-6,-717e-6,-712e-6,-723e-6,-723e-6,-715e-6,-714e-6,-717e-6,-696e-6,-692e-6,-685e-6,-692e-6,-697e-6,-686e-6,-685e-6,-684e-6,-687e-6,-686e-6,-681e-6,-686e-6,-681e-6,-685e-6,-681e-6,-676e-6,-683e-6,-678e-6,-673e-6,-678e-6,-679e-6,-675e-6,-67e-5,-676e-6,-677e-6,-671e-6,-67e-5,-669e-6,-675e-6,-668e-6,-665e-6,-668e-6,-667e-6,-668e-6,-665e-6,-664e-6,-667e-6,-664e-6,-66e-5,-663e-6,-665e-6,-65e-5,-659e-6,-662e-6,-656e-6,-657e-6,-656e-6,-658e-6,-653e-6,-651e-6,-652e-6,-654e-6,-651e-6,-65e-5,-648e-6,-65e-5,-651e-6,-643e-6,-648e-6,-647e-6,-645e-6,-647e-6,-641e-6,-644e-6,-649e-6,-643e-6,-638e-6,-641e-6,-644e-6,-64e-5,-635e-6,-641e-6,-643e-6,-631e-6,-638e-6,-637e-6,-642e-6,-639e-6,-627e-6,-631e-6,-643e-6,-629e-6,-624e-6,-631e-6,-633e-6,-63e-5,-627e-6,-63e-5,-632e-6,-625e-6,-631e-6,-627e-6,-625e-6,-624e-6,-618e-6,-623e-6,-624e-6,-621e-6,-61e-5,-623e-6,-63e-5,-62e-5,-614e-6,-622e-6,-62e-5,-616e-6,-614e-6,-618e-6,-618e-6,-609e-6,-614e-6,-615e-6,-616e-6,-61e-5,-606e-6,-611e-6,-617e-6,-618e-6,-612e-6,-608e-6,-606e-6,-604e-6,-608e-6,-607e-6,-612e-6,-609e-6,-606e-6,-608e-6,-601e-6,-594e-6,-603e-6,-603e-6,-6e-4,-592e-6,-596e-6,-595e-6,-607e-6,-596e-6,-607e-6,-596e-6,-598e-6,-593e-6,-594e-6,-598e-6,-593e-6,-58e-5,-593e-6,-596e-6,-591e-6,-594e-6,-592e-6,-593e-6,-593e-6,-58e-5,-575e-6,-583e-6,-597e-6,-582e-6,-59e-5,-579e-6,-588e-6,-445e-6,-523e-6,-539e-6,-116e-6,-591e-6,42e-6,199e-6,-575e-6,-585e-6,-58e-5,-589e-6,-586e-6,-58e-5,-585e-6,-587e-6,-583e-6,-538e-6,-619e-6,-618e-6,-619e-6,-616e-6,-614e-6,-588e-6,-614e-6,-606e-6,-609e-6,-615e-6,-614e-6,-612e-6,-611e-6,-61e-5,-598e-6,-598e-6,-597e-6,-605e-6,-608e-6,-61e-5,-602e-6,-603e-6,-601e-6,-607e-6,-599e-6,-602e-6,-603e-6,-603e-6,-596e-6,-596e-6,-6e-4,-603e-6,-604e-6,-597e-6,-6e-4,-593e-6,-59e-5,-593e-6,-596e-6,-594e-6,-592e-6,-594e-6,-595e-6,-589e-6,-595e-6,-587e-6,-589e-6,-596e-6,-589e-6,-59e-5,-588e-6,-595e-6,-587e-6,-587e-6,-591e-6,-576e-6,-589e-6,-585e-6,-581e-6,-586e-6,-582e-6,-581e-6,-587e-6,-582e-6,-585e-6,-581e-6,-584e-6,-573e-6,-579e-6,-577e-6,-584e-6,-581e-6,-574e-6,-582e-6,-58e-5,-581e-6,-575e-6,-575e-6,-58e-5,-577e-6,-576e-6,-578e-6,-578e-6,-575e-6,-568e-6,-577e-6,-576e-6,-569e-6,-573e-6,-569e-6,-574e-6,-57e-5,-556e-6,-573e-6,-575e-6,-572e-6,-568e-6,-569e-6,-573e-6,-57e-5,-561e-6,-567e-6,-571e-6,-57e-5,-561e-6,-566e-6,-565e-6,-563e-6,-563e-6,-567e-6,-603e-6,-597e-6,-602e-6,-6e-4,-597e-6,-595e-6,-598e-6,-599e-6,-596e-6,-593e-6,-594e-6,-594e-6,-599e-6,-598e-6,-589e-6,-594e-6,-594e-6,-59e-5,-592e-6,-593e-6,-588e-6,-582e-6,-586e-6,-591e-6,-593e-6,-587e-6,-585e-6,-588e-6,-583e-6,-589e-6,-582e-6,-589e-6,-588e-6,-587e-6,-582e-6,-583e-6,-588e-6,-581e-6,-575e-6,-586e-6,-586e-6,-584e-6,-586e-6,-581e-6,-554e-6,-577e-6,-58e-5,-58e-5,-581e-6,-58e-5,-572e-6,-578e-6,-573e-6,-575e-6,-579e-6,-576e-6,-579e-6,-577e-6,-578e-6,-577e-6,-571e-6,-575e-6,-576e-6,-573e-6,-576e-6,-574e-6,-57e-5,-57e-5,-573e-6,-573e-6,-567e-6,-565e-6,-57e-5,-569e-6,-571e-6,-568e-6,-57e-5,-572e-6,-57e-5,-57e-5,-568e-6,-57e-5,-566e-6,-57e-5,-556e-6,-566e-6,-565e-6,-562e-6,-566e-6,-566e-6,-563e-6,-563e-6,-562e-6,-566e-6,-556e-6,-563e-6,-564e-6,-562e-6,-559e-6,-562e-6,-58e-5,-574e-6,-569e-6,-576e-6,-577e-6,-577e-6,-565e-6,-569e-6,-578e-6,-574e-6,-576e-6,-569e-6,-571e-6,-57e-5,-575e-6,-57e-5,-569e-6,-566e-6,-566e-6,-571e-6,-562e-6,-569e-6,-57e-5,-57e-5,-572e-6,-571e-6,-569e-6,-566e-6,-569e-6,-568e-6,-554e-6,-563e-6,-568e-6,-565e-6,-559e-6,-567e-6,-567e-6,-559e-6,-559e-6,-567e-6,-554e-6,-564e-6,-563e-6,-563e-6,-56e-5,-554e-6,-561e-6,-564e-6,-563e-6,-555e-6,-56e-5,-559e-6,-561e-6,-561e-6,-559e-6,-554e-6,-561e-6,-56e-5,-555e-6,-557e-6,-559e-6,-552e-6,-552e-6,-557e-6,-556e-6,-556e-6,-552e-6,-554e-6,-557e-6,-554e-6,-542e-6,-55e-5,-548e-6,-548e-6,-535e-6,-554e-6,-554e-6,-552e-6,-553e-6,-55e-5,-546e-6,-55e-5,-552e-6,-542e-6,-551e-6,-55e-5,-545e-6,-545e-6,-55e-5,-549e-6,-541e-6,-549e-6,-545e-6,-544e-6,-544e-6,-545e-6,-543e-6,-547e-6,-543e-6,-545e-6,-532e-6,-544e-6,-546e-6,-545e-6,-545e-6,-527e-6,-544e-6,-54e-5,-538e-6,-496e-6,-535e-6,-537e-6,-534e-6,-542e-6,-542e-6,-535e-6,-538e-6,-537e-6,-534e-6,-532e-6,-54e-5,-531e-6,-537e-6,-538e-6,-539e-6,-536e-6,-534e-6,-529e-6,-536e-6,-534e-6,-537e-6,-536e-6,-536e-6,-536e-6,-533e-6,-535e-6,-533e-6,-535e-6,-526e-6,-526e-6,-534e-6,-534e-6,-533e-6,-53e-5,-532e-6,-522e-6,-529e-6,-532e-6,-53e-5,-528e-6,-524e-6,-531e-6,-518e-6,-529e-6,-528e-6,-525e-6,-529e-6,-528e-6,-527e-6,-528e-6,-527e-6,-522e-6,-525e-6,-523e-6,-514e-6,-527e-6,-477e-6,-525e-6,-515e-6,-526e-6,-52e-5,-525e-6,-518e-6,-512e-6,-524e-6,-523e-6,-516e-6,-521e-6,-52e-5,-522e-6,-518e-6,-522e-6,-507e-6,-516e-6,-486e-6,-49e-5,-489e-6,-49e-5,-486e-6,-485e-6,-477e-6,-487e-6,-48e-5,-485e-6,-481e-6,-482e-6,-477e-6,-48e-5,-476e-6,-486e-6,-474e-6,-484e-6,-483e-6,-484e-6,-48e-5,-482e-6,-473e-6,-482e-6,-484e-6,-481e-6,-47e-5,-484e-6,-483e-6,-482e-6,-466e-6,-476e-6,-482e-6,-482e-6,-482e-6,-481e-6,-481e-6,-481e-6,-481e-6,-473e-6,-48e-5,-48e-5,-474e-6,-477e-6,-48e-5,-479e-6,-472e-6,-476e-6,-454e-6,-471e-6,-467e-6,-464e-6,-478e-6,-477e-6,-476e-6,-474e-6,-475e-6,-472e-6,-475e-6,-462e-6,-474e-6,-475e-6,-474e-6,-474e-6,-474e-6,-469e-6,-468e-6,-467e-6,-473e-6,-47e-5,-47e-5,-473e-6,-468e-6,-473e-6,-463e-6,-472e-6,-43e-5,-43e-5,-43e-5,-419e-6,-386e-6,-424e-6,-417e-6,-406e-6,-429e-6,-424e-6,-396e-6,-413e-6,-427e-6,-423e-6,-423e-6,-426e-6,-425e-6,-418e-6,-416e-6,-423e-6,-426e-6,-426e-6,-401e-6,-426e-6,-425e-6,-423e-6,-418e-6,-425e-6,-419e-6,-425e-6,-392e-6,-419e-6,-415e-6,-376e-6,-42e-5,-423e-6,-418e-6,-422e-6,-417e-6,-415e-6,-42e-5,-422e-6,-396e-6,-413e-6,-402e-6,-334e-6,-334e-6,-42e-5,-326e-6,-419e-6,-42e-5,-344e-6,-355e-6,-256e-6,419e-6,-419e-6,41e-5,0,-364e-6,-309e-6,-418e-6,-414e-6,-412e-6,-405e-6,-291e-6,-362e-6,-406e-6,-323e-6,-371e-6,-414e-6,-417e-6,-412e-6,-416e-6,-399e-6,-411e-6,-414e-6,-402e-6,-378e-6,-395e-6,-414e-6,-404e-6,-407e-6,-401e-6,-413e-6,-403e-6,-414e-6,-413e-6,-41e-5,-407e-6,-413e-6,-397e-6,-411e-6,-412e-6,-403e-6,-405e-6,-411e-6,-398e-6,-399e-6,-397e-6,-393e-6,-386e-6,-383e-6,-392e-6,-392e-6,-393e-6,-391e-6,-397e-6,-397e-6,-397e-6,-393e-6,-39e-5,-397e-6,-391e-6,-383e-6,-389e-6,-396e-6,-393e-6,-385e-6,-395e-6,-393e-6,-392e-6,-392e-6,-38e-5,-39e-5,-39e-5,-393e-6,-385e-6,-392e-6,-393e-6,-392e-6,-363e-6,-393e-6,-376e-6,-36e-5,-385e-6,-39e-5,-387e-6,-392e-6,-384e-6,-387e-6,-392e-6,-391e-6,-375e-6,-379e-6,-379e-6,-379e-6,-362e-6,-379e-6,-378e-6,-372e-6,-37e-5,-37e-5,-377e-6,-378e-6,-377e-6,-372e-6,-377e-6,-377e-6,-373e-6,-377e-6,-377e-6,-368e-6,-35e-5,-375e-6,-372e-6,-366e-6,-372e-6,-375e-6,-375e-6,-375e-6,-372e-6,-368e-6,-368e-6,-374e-6,-373e-6,-373e-6,-374e-6,-371e-6,-354e-6,-373e-6,-373e-6,-372e-6,-368e-6,-372e-6,-372e-6,-369e-6,-372e-6,-371e-6,-352e-6,-371e-6,-369e-6,-36e-5,-371e-6,-37e-5,-337e-6,-371e-6,-369e-6,-366e-6,-371e-6,-37e-5,-338e-6,-337e-6,-336e-6,-337e-6,-335e-6,-337e-6,-331e-6,-331e-6,-332e-6,-333e-6,-318e-6,-336e-6,-335e-6,-335e-6,-322e-6,-333e-6,-335e-6,-335e-6,-326e-6,-334e-6,-329e-6,-335e-6,-334e-6,-334e-6,-331e-6,-331e-6,-319e-6,-334e-6,-332e-6,-329e-6,-334e-6,-333e-6,-333e-6,-332e-6,-327e-6,-326e-6,-33e-5,-332e-6,-332e-6,-332e-6,-329e-6,-332e-6,-316e-6,-33e-5,-331e-6,-332e-6,-332e-6,-33e-5,-329e-6,-33e-5,-327e-6,-331e-6,-327e-6,-328e-6,-331e-6,-33e-5,-329e-6,-295e-6,-319e-6,-33e-5,-329e-6,-322e-6,-329e-6,-315e-6,-259e-6,-3e-4,-328e-6,-321e-6,-325e-6,-324e-6,-317e-6,-328e-6,-327e-6,-323e-6,-319e-6,-327e-6,-326e-6,-322e-6,-327e-6,-327e-6,-321e-6,-326e-6,-327e-6,-327e-6,-326e-6,-324e-6,-325e-6,-326e-6,-326e-6,-325e-6,-318e-6,-324e-6,-323e-6,-322e-6,-324e-6,-325e-6,-325e-6,-313e-6,-311e-6,-324e-6,-303e-6,-324e-6,-325e-6,-324e-6,-311e-6,-323e-6,-324e-6,-324e-6,-323e-6,-324e-6,-323e-6,-321e-6,-322e-6,-319e-6,-321e-6,-32e-5,-32e-5,-319e-6,-323e-6,-322e-6,-32e-5,-313e-6,-312e-6,-32e-5,-308e-6,-312e-6,-32e-5,-296e-6,-314e-6,-32e-5,-32e-5,-32e-5,-321e-6,-319e-6,-318e-6,-32e-5,-32e-5,-317e-6,-319e-6,-32e-5,-318e-6,-319e-6,-314e-6,-319e-6,-307e-6,-319e-6,-279e-6,-318e-6,-314e-6,-309e-6,-308e-6,-304e-6,-303e-6,-308e-6,-292e-6,-308e-6,-308e-6,-308e-6,-307e-6,-306e-6,-301e-6,-306e-6,-303e-6,-306e-6,-308e-6,-301e-6,-307e-6,-302e-6,-307e-6,-307e-6,-306e-6,-306e-6,-298e-6,-306e-6,-306e-6,-306e-6,-305e-6,-304e-6,-306e-6,-302e-6,-304e-6,-299e-6,-273e-6,-301e-6,-282e-6,-285e-6,-171e-6,129e-6,-3e-4,-303e-6,-304e-6,-303e-6,-303e-6,-293e-6,-302e-6,-303e-6,-272e-6,-293e-6,-3e-4,-303e-6,-272e-6,-304e-6,-301e-6,-302e-6,-303e-6,-303e-6,-303e-6,-303e-6,-303e-6,-302e-6,-302e-6,-298e-6,-301e-6,-299e-6,-302e-6,-301e-6,-302e-6,-288e-6,-291e-6,-299e-6,-295e-6,-301e-6,-298e-6,-301e-6,-301e-6,-301e-6,-299e-6,-3e-4,-287e-6,-301e-6,-295e-6,-3e-4,-3e-4,-3e-4,-28e-5,-297e-6,-293e-6,-291e-6,-298e-6,-299e-6,-299e-6,-292e-6,-294e-6,-292e-6,-297e-6,-29e-5,-299e-6,-294e-6,-295e-6,-271e-6,-298e-6,-298e-6,-298e-6,-297e-6,-295e-6,-297e-6,-294e-6,-293e-6,-298e-6,-295e-6,-297e-6,-292e-6,-288e-6,-297e-6,-297e-6,-297e-6,-297e-6,-296e-6,-292e-6,-296e-6,-272e-6,-296e-6,-287e-6,-296e-6,-296e-6,-295e-6,-294e-6,-296e-6,-292e-6,-295e-6,-29e-5,-295e-6,-277e-6,-288e-6,-295e-6,-293e-6,-29e-5,-294e-6,-292e-6,-294e-6,-291e-6,-294e-6,-293e-6,-293e-6,-294e-6,-291e-6,-294e-6,-294e-6,-292e-6,-294e-6,-279e-6,-285e-6,-276e-6,-291e-6,-284e-6,-289e-6,-29e-5,-289e-6,-282e-6,-281e-6,-292e-6,-288e-6,-275e-6,-288e-6,-289e-6,-289e-6,-275e-6,-289e-6,-29e-5,-292e-6,-274e-6,-287e-6,-291e-6,-29e-5,-283e-6,-287e-6,-287e-6,-291e-6,-29e-5,-29e-5,-284e-6,-279e-6,-284e-6,-279e-6,-29e-5,-29e-5,-279e-6,-279e-6,-288e-6,-288e-6,-286e-6,-283e-6,-289e-6,-289e-6,-289e-6,-287e-6,-283e-6,-281e-6,-289e-6,-268e-6,-284e-6,-288e-6,-288e-6,-287e-6,-288e-6,-286e-6,-287e-6,-282e-6,-285e-6,-256e-6,-287e-6,-279e-6,-288e-6,-286e-6,-273e-6,-276e-6,-281e-6,-276e-6,-287e-6,-284e-6,-269e-6,-283e-6,-25e-5,-285e-6,-282e-6,-286e-6,-275e-6,-285e-6,-238e-6,-283e-6,-283e-6,-274e-6,-286e-6,-284e-6,-286e-6,-274e-6,-271e-6,-255e-6,-281e-6,-187e-6,-249e-6,1e-5,186e-6,-211e-6,237e-6,-211e-6,-139e-6,-248e-6,-284e-6,-252e-6,-22e-5,-275e-6,-273e-6,-283e-6,-278e-6,-282e-6,-258e-6,-281e-6,-279e-6,-272e-6,-283e-6,-277e-6,-277e-6,-21e-5,-272e-6,-277e-6,-28e-5,-271e-6,-282e-6,-283e-6,-282e-6,-268e-6,-278e-6,-282e-6,-282e-6,-276e-6,-232e-6,-27e-5,-28e-5,-27e-5,-263e-6,-279e-6,-273e-6,-273e-6,-281e-6,-281e-6,-272e-6,-277e-6,-278e-6,-281e-6,-281e-6,-28e-5,-178e-6,-281e-6,-28e-5,-272e-6,-278e-6,-238e-6,-28e-5,-266e-6,-279e-6,-28e-5,-28e-5,-28e-5,-273e-6,-273e-6,-277e-6,-278e-6,-261e-6,-279e-6,-27e-5,-279e-6,-278e-6,-278e-6,-279e-6,-272e-6,-276e-6,-278e-6,-276e-6,-276e-6,-277e-6,-278e-6,-275e-6,-26e-5,-269e-6,-278e-6,-276e-6,-266e-6,-278e-6,-277e-6,-269e-6,-277e-6,-273e-6,-271e-6,-277e-6,-268e-6,-277e-6,-277e-6,-277e-6,-274e-6,-265e-6,-276e-6,-274e-6,-277e-6,-275e-6,-27e-5,-276e-6,-273e-6,-273e-6,-274e-6,-276e-6,-275e-6,-257e-6,-275e-6,-273e-6,-269e-6,-257e-6,-275e-6,-269e-6,-26e-5,-263e-6,-275e-6,-238e-6,-266e-6,-263e-6,-274e-6,-26e-5,-23e-5,-262e-6,-273e-6,-274e-6,-274e-6,-259e-6,-271e-6,-268e-6,-274e-6,-273e-6,-274e-6,-273e-6,-271e-6,-27e-5,-265e-6,-273e-6,-273e-6,-272e-6,-273e-6,-271e-6,-272e-6,-253e-6,-272e-6,-269e-6,-273e-6,-269e-6,-27e-5,-272e-6,-266e-6,-27e-5,-272e-6,-259e-6,-272e-6,-259e-6,-272e-6,-272e-6,-272e-6,-271e-6,-269e-6,-272e-6,-268e-6,-262e-6,-271e-6,-24e-5,-24e-5,-255e-6,-271e-6,-271e-6,-269e-6,-258e-6,-232e-6,-271e-6,-223e-6,24e-5,-267e-6,-13e-5,-27e-5,-268e-6,-27e-5,-264e-6,-27e-5,-264e-6,-27e-5,-268e-6,-254e-6,-26e-5,-266e-6,-248e-6,-266e-6,-269e-6,-268e-6,-263e-6,-263e-6,-262e-6,-267e-6,-259e-6,-269e-6,-263e-6,-259e-6,-268e-6,-265e-6,-268e-6,-242e-6,-242e-6,-264e-6,-259e-6,-201e-6,-268e-6,-264e-6,-268e-6,-264e-6,-267e-6,-258e-6,-264e-6,-268e-6,-261e-6,-261e-6,-267e-6,-265e-6,-258e-6,-267e-6,-251e-6,-263e-6,-22e-5,-265e-6,-263e-6,-266e-6,-266e-6,-254e-6,-266e-6,-262e-6,-26e-5,-266e-6,-264e-6,-262e-6,-265e-6,-265e-6,-238e-6,-266e-6,-244e-6,-261e-6,-263e-6,-265e-6,-264e-6,-265e-6,-261e-6,-265e-6,-265e-6,-259e-6,-263e-6,-263e-6,-264e-6,-256e-6,-255e-6,-26e-5,-26e-5,-237e-6,-26e-5,-258e-6,-263e-6,-255e-6,-264e-6,-262e-6,-263e-6,-264e-6,-264e-6,-264e-6,-257e-6,-261e-6,-263e-6,-263e-6,-242e-6,-263e-6,-262e-6,-254e-6,-263e-6,-263e-6,-259e-6,-263e-6,-263e-6,-26e-5,-262e-6,-249e-6,-262e-6,-256e-6,-235e-6,-249e-6,-235e-6,-253e-6,-26e-5,-239e-6,-222e-6,-253e-6,-262e-6,-26e-5,-259e-6,-258e-6,-261e-6,-257e-6,-252e-6,-212e-6,-244e-6,-257e-6,-196e-6,-26e-5,-261e-6,-261e-6,-261e-6,-261e-6,-259e-6,-26e-5,-244e-6,-257e-6,-26e-5,-256e-6,-256e-6,-258e-6,-25e-5,-258e-6,-254e-6,-259e-6,-25e-5,-225e-6,-259e-6,-243e-6,-58e-6,-257e-6,-24e-6,195e-6,-253e-6,-243e-6,-249e-6,-25e-5,-242e-6,-259e-6,-257e-6,-255e-6,-249e-6,-246e-6,-259e-6,-252e-6,-259e-6,-258e-6,-242e-6,-258e-6,-254e-6,-254e-6,-256e-6,-257e-6,-258e-6,-258e-6,-245e-6,-258e-6,-248e-6,-257e-6,-257e-6,-258e-6,-258e-6,-244e-6,-23e-5,-257e-6,-235e-6,-253e-6,-255e-6,-253e-6,-255e-6,-257e-6,-253e-6,-222e-6,-255e-6,-256e-6,-25e-5,-257e-6,-253e-6,-25e-5,-257e-6,-257e-6,-252e-6,-249e-6,-254e-6,-254e-6,-252e-6,-256e-6,-249e-6,-256e-6,-255e-6,-255e-6,-252e-6,-255e-6,-246e-6,-255e-6,-255e-6,-255e-6,-255e-6,-255e-6,-255e-6,-251e-6,-197e-6,-255e-6,-255e-6,-25e-5,-255e-6,-251e-6,-255e-6,-254e-6,-255e-6,-254e-6,-254e-6,-25e-5,-253e-6,-254e-6,-202e-6,-25e-5,-244e-6,-253e-6,-232e-6,-253e-6,-254e-6,-253e-6,-247e-6,-253e-6,-253e-6,-244e-6,-224e-6,-224e-6,-249e-6,-253e-6,-246e-6,0,253e-6],
imag:[0,-.30197,-.02984,-.03342,-.032345,-.016191,.02986,.045049,.014313,.003638,-.019988,-.037528,-.024295,.001519,.02086,.024232,.011503,-.003924,-.008923,-.004758,.001648,.002115,.003103,.002499,-342e-6,-.002275,-.003513,-.002841,-.0012,.00309,.003499,.00393,69e-5,-.001815,-.00386,-.003988,-.002309,.00175,.004208,.004228,.001303,-541e-6,-.002546,-.003521,-.003077,-666e-6,.003376,.002791,.001772,324e-6,-.003428,-.003129,-.001453,.003102,.003336,.001372,-.001863,-.003131,-.002873,-482e-6,.001442,.002527,.002013,357e-6,-.002008,-.001915,.001824,.002728,-.002489,.00259,.002451,-.001803,.00284,.002916,.001105,-.002908,-.001672,.002883,.002828,-1e-5,-.002452,.001412,-.002419,.002619,-.002251,-.002553,-.002712,-.001597,-.001256,938e-6,-.001141,.002227,-.002525,.00181,-3e-5,-.002449,-.00196,-.002323,-942e-6,223e-6,.001467,.002143,-206e-6,.001739,-.002294,.002029,.002242,56e-5,.001341,.002052,-.001224,-.002123,-.001895,.001759,-347e-6,-246e-6,-.001747,-658e-6,-.001821,.001376,-311e-6,-.001278,.001634,264e-6,-676e-6,.001579,-.001129,.001585,-.001026,-.001633,-.001513,-.00151,-.00165,-655e-6,.001053,-.00165,-54e-5,-.001405,-.001187,-354e-6,-.001293,461e-6,-.001534,-291e-6,43e-6,-968e-6,.001518,.001375,889e-6,326e-6,-711e-6,438e-6,.001212,-89e-5,-447e-6,593e-6,-129e-6,-91e-5,.001459,-.00146,231e-6,.001276,163e-6,-832e-6,-.001421,223e-6,25e-6,-.001188,.001252,-.001374,-907e-6,-208e-6,-.001371,-.001154,-822e-6,-15e-5,-.001343,332e-6,-763e-6,108e-6,973e-6,749e-6,.001099,-683e-6,.001289,517e-6,606e-6,.00132,-349e-6,.001154,-.001153,-657e-6,517e-6,-94e-5,-.001034,-.001218,.00121,-.001062,-.001002,.00109,-9e-6,831e-6,.001172,334e-6,55e-5,-882e-6,-898e-6,117e-6,-211e-6,-523e-6,-11e-5,-947e-6,242e-6,54e-5,75e-5,.001022,938e-6,623e-6,-813e-6,-.001048,-335e-6,39e-6,.001018,-78e-6,875e-6,.001001,718e-6,-208e-6,-755e-6,772e-6,798e-6,-817e-6,-955e-6,-522e-6,378e-6,-964e-6,-647e-6,-226e-6,558e-6,-968e-6,-759e-6,-709e-6,-603e-6,-87e-5,-942e-6,-94e-5,-832e-6,-693e-6,-676e-6,-589e-6,-541e-6,-418e-6,-427e-6,-323e-6,-21e-5,-154e-6,-138e-6,-129e-6,-105e-6,-89e-6,-89e-6,-97e-6,-113e-6,-113e-6,-113e-6,-121e-6,-137e-6,-137e-6,-137e-6,-146e-6,-161e-6,-153e-6,-153e-6,-154e-6,-169e-6,-17e-5,-162e-6,-17e-5,-177e-6,-186e-6,-17e-5,-17e-5,-185e-6,-186e-6,-177e-6,-178e-6,-193e-6,-185e-6,-186e-6,-186e-6,-201e-6,-203e-6,-181e-6,-174e-6,-189e-6,-182e-6,-174e-6,-174e-6,-183e-6,-197e-6,-182e-6,-175e-6,-19e-5,-197e-6,-175e-6,-166e-6,-189e-6,-198e-6,-181e-6,-183e-6,-197e-6,-196e-6,-182e-6,-182e-6,-19e-5,-197e-6,-183e-6,-175e-6,-2e-4,-192e-6,-174e-6,-166e-6,-176e-6,-191e-6,-175e-6,-175e-6,-182e-6,-182e-6,-192e-6,-174e-6,-191e-6,-191e-6,-149e-6,-174e-6,-192e-6,-184e-6,-166e-6,-175e-6,-183e-6,-183e-6,-174e-6,-174e-6,-184e-6,-191e-6,-175e-6,-157e-6,-183e-6,-175e-6,-166e-6,-166e-6,-191e-6,-191e-6,-158e-6,-149e-6,-175e-6,-192e-6,-174e-6,-15e-5,-176e-6,-191e-6,-167e-6,-167e-6,-175e-6,-182e-6,-158e-6,-15e-5,-183e-6,-199e-6,-15e-5,-141e-6,-175e-6,-174e-6,-158e-6,-146e-6,-161e-6,-185e-6,-153e-6,-122e-6,-169e-6,-169e-6,-169e-6,-153e-6,-153e-6,-17e-5,-145e-6,-162e-6,-137e-6,-154e-6,-169e-6,-137e-6,-153e-6,-17e-5,-145e-6,-137e-6,-153e-6,-169e-6,-137e-6,-129e-6,-154e-6,-153e-6,-153e-6,-121e-6,-153e-6,-162e-6,-145e-6,-145e-6,-137e-6,-146e-6,-146e-6,-129e-6,-138e-6,-153e-6,-137e-6,-122e-6,-183e-6,-142e-6,-126e-6,-149e-6,-141e-6,-141e-6,-125e-6,-149e-6,-15e-5,-142e-6,-132e-6,-142e-6,-142e-6,-149e-6,-133e-6,-125e-6,-159e-6,-133e-6,-133e-6,-141e-6,-125e-6,-15e-5,-132e-6,-1e-4,-134e-6,-149e-6,-133e-6,-117e-6,-133e-6,-15e-5,-117e-6,-1e-4,-158e-6,-124e-6,-124e-6,-92e-6,-108e-6,-159e-6,-141e-6,-58e-6,-141e-6,-158e-6,-125e-6,-108e-6,-124e-6,-134e-6,-116e-6,-1e-4,-133e-6,-1e-4,-117e-6,-125e-6,-125e-6,-15e-5,-125e-6,-116e-6,-124e-6,-167e-6,-108e-6,-5e-5,-116e-6,-141e-6,-99e-6,-109e-6,-125e-6,-133e-6,-108e-6,-1e-4,-142e-6,-116e-6,-108e-6,-1e-4,-125e-6,-141e-6,-117e-6,-75e-6,-58e-6,-99e-6,-117e-6,-125e-6,-132e-6,-108e-6,-108e-6,-74e-6,-92e-6,-108e-6,-92e-6,-125e-6,-151e-6,-107e-6,-107e-6,-117e-6,-15e-5,-132e-6,-134e-6,-5e-5,-124e-6,-33e-6,-116e-6,-1e-4,-125e-6,-117e-6,-91e-6,-117e-6,-166e-6,-109e-6,-91e-6,-116e-6,-91e-6,-1e-4,-92e-6,-92e-6,-149e-6,-167e-6,-133e-6,-8e-6,-133e-6,-83e-6,-141e-6,-91e-6,-395e-6,-282e-6,249e-6,581e-6,33e-6,59e-5,-557e-6,133e-6,75e-6,-108e-6,-17e-6,-59e-6,-99e-6,-58e-6,17e-6,-67e-6,-232e-6,-62e-6,-71e-6,-53e-6,-79e-6,-89e-6,-196e-6,-8e-5,-123e-6,-106e-6,-53e-6,-62e-6,-71e-6,-8e-5,-8e-5,-141e-6,-141e-6,-141e-6,-98e-6,-71e-6,-53e-6,-106e-6,-98e-6,-106e-6,-62e-6,-114e-6,-89e-6,-8e-5,-8e-5,-116e-6,-116e-6,-88e-6,-62e-6,-44e-6,-97e-6,-71e-6,-115e-6,-123e-6,-106e-6,-89e-6,-97e-6,-106e-6,-89e-6,-8e-5,-114e-6,-71e-6,-116e-6,-105e-6,-44e-6,-97e-6,-88e-6,-97e-6,-35e-6,-98e-6,-98e-6,-62e-6,-142e-6,-7e-5,-97e-6,-114e-6,-8e-5,-106e-6,-106e-6,-62e-6,-97e-6,-71e-6,-97e-6,-71e-6,-132e-6,-98e-6,-107e-6,-53e-6,-79e-6,-115e-6,-62e-6,-7e-5,-62e-6,-97e-6,-97e-6,-53e-6,-8e-5,-8e-5,-62e-6,-53e-6,-8e-5,-115e-6,-53e-6,-62e-6,-107e-6,79e-6,-98e-6,-62e-6,-89e-6,-15e-5,-62e-6,-27e-6,-62e-6,-89e-6,-8e-5,-35e-6,-62e-6,-116e-6,-8e-5,-26e-6,-45e-6,-107e-6,-71e-6,-79e-6,-88e-6,-88e-6,-44e-6,38e-6,-93e-6,-38e-6,-66e-6,-85e-6,-94e-6,-65e-6,-56e-6,-76e-6,-94e-6,-85e-6,-85e-6,19e-6,-28e-6,-103e-6,-66e-6,-66e-6,-94e-6,-75e-6,-57e-6,-93e-6,-122e-6,-104e-6,-66e-6,-38e-6,-85e-6,-94e-6,-75e-6,-103e-6,-56e-6,-103e-6,-47e-6,-56e-6,-57e-6,-94e-6,-85e-6,-38e-6,-94e-6,-123e-6,-47e-6,-38e-6,-57e-6,-28e-6,-75e-6,-188e-6,-95e-6,-75e-6,-66e-6,-56e-6,-65e-6,-113e-6,-76e-6,-103e-6,-85e-6,-56e-6,-76e-6,-47e-6,-57e-6,-47e-6,-47e-6,-94e-6,-66e-6,-47e-6,-75e-6,-38e-6,-56e-6,-84e-6,-84e-6,-56e-6,-56e-6,-95e-6,-104e-6,-65e-6,-75e-6,-47e-6,-76e-6,56e-6,-28e-6,-47e-6,-47e-6,-57e-6,-28e-6,-66e-6,-19e-6,123e-6,-57e-6,-66e-6,-84e-6,-47e-6,-47e-6,-66e-6,-66e-6,-75e-6,-9e-6,-104e-6,-56e-6,-38e-6,-56e-6,-76e-6,-47e-6,-29e-6,-88e-6,-116e-6,-68e-6,-59e-6,-49e-6,-127e-6,-106e-6,-19e-6,-68e-6,-39e-6,-96e-6,-77e-6,-87e-6,-39e-6,-77e-6,-87e-6,-98e-6,-98e-6,-58e-6,-116e-6,-68e-6,-58e-6,-48e-6,-19e-6,-29e-6,-58e-6,-78e-6,-39e-6,-48e-6,-136e-6,-87e-6,-39e-6,-68e-6,-106e-6,-29e-6,-29e-6,-96e-6,-96e-6,-1e-5,-117e-6,-49e-6,-58e-6,-49e-6,-77e-6,-107e-6,-58e-6,-19e-6,19e-6,-97e-6,-58e-6,-67e-6,-39e-6,-39e-6,-48e-6,-88e-6,0,-19e-6,-78e-6,-59e-6,-19e-6,-87e-6,-87e-6,-39e-6,-49e-6,-39e-6,-77e-6,-58e-6,1e-5,-49e-6,-126e-6,-77e-6,88e-6,-87e-6,-146e-6,-29e-6,-19e-6,-39e-6,1e-5,-58e-6,-88e-6,-48e-6,-19e-6,-106e-6,-29e-6,29e-6,-78e-6,-78e-6,-19e-6,-38e-6,-97e-6,-1e-5,-68e-6,-68e-6,68e-6,-58e-6,-68e-6,-1e-5,-68e-6,-49e-6,-126e-6,-49e-6,1e-5,0,19e-6,-137e-6,29e-6,-68e-6,77e-6,223e-6,-97e-6,-78e-6,-97e-6,1e-5,-19e-6,-87e-6,-59e-6,-68e-6,-87e-6,-97e-6,1e-5,-97e-6,-49e-6,-39e-6,-19e-6,-49e-6,-68e-6,-96e-6,-49e-6,-58e-6,-2e-5,29e-6,-19e-6,-1e-5,-58e-6,-19e-6,48e-6,19e-6,-97e-6,-97e-6,1e-5,-19e-6,-29e-6,-58e-6,-29e-6,-106e-6,-58e-6,-19e-6,48e-6,-59e-6,-87e-6,-19e-6,-117e-6,-38e-6,-49e-6,-68e-6,19e-6,-39e-6,-49e-6,-2e-5,39e-6,-77e-6,-58e-6,-68e-6,-116e-6,0,-224e-6,-39e-6,107e-6,-1e-5,-77e-6,1e-5,-88e-6,-116e-6,-29e-6,-39e-6,88e-6,-48e-6,-58e-6,-29e-6,-68e-6,-1e-5,-127e-6,-78e-6,-64e-6,-9e-6,-36e-6,0,-55e-6,-64e-6,-11e-5,-37e-6,91e-6,-55e-6,-82e-6,-73e-6,-101e-6,-82e-6,101e-6,-18e-6,-109e-6,46e-6,55e-6,-37e-6,-72e-6,-55e-6,-109e-6,-55e-6,9e-6,-54e-6,-117e-6,-9e-6,27e-6,-27e-6,-128e-6,-82e-6,-19e-6,0,-19e-6,-28e-6,-28e-6,-9e-6,9e-6,-85e-6,-28e-6,19e-6,-76e-6,-56e-6,0,-19e-6,-85e-6,-56e-6,151e-6,-85e-6,-103e-6,-114e-6,0,-28e-6,-28e-6,-57e-6,-37e-6,-66e-6,-38e-6,-113e-6,-38e-6,19e-6,28e-6,-28e-6,-19e-6,-75e-6,-75e-6,-84e-6,28e-6,-56e-6,-56e-6,0,-66e-6,0,-94e-6,0,9e-6,0,0,94e-6,189e-6,69e-6,-102e-6,-138e-6,0,-61e-6,-164e-6,-112e-6,34e-6,-6e-5,-6e-5,-34e-6,43e-6,-85e-6,-93e-6,-52e-6,-9e-6,-9e-6,-145e-6,-9e-6,25e-6,43e-6,77e-6,0,-68e-6,0,-162e-6,-68e-6,-86e-6,-196e-6,51e-6,26e-6,-68e-6,26e-6,-68e-6,-78e-6,43e-6,9e-6,-146e-6,86e-6,128e-6,-257e-6,-257e-6,34e-6,266e-6,34e-6,-9e-6,-241e-6,-225e-6,333e-6,26e-6,-17e-6,85e-6,-419e-6,208e-6,283e-6,0,-6e-5,69e-6,103e-6,-3e-4,-207e-6,95e-6,264e-6,-19e-5,-43e-6,0,-6e-5,-9e-6,119e-6,-6e-5,35e-6,103e-6,-172e-6,-129e-6,-17e-6,-94e-6,-78e-6,-102e-6,34e-6,94e-6,0,17e-6,-51e-6,-69e-6,0,-112e-6,-34e-6,-9e-6,-86e-6,-77e-6,26e-6,33e-6,-17e-6,41e-6,-67e-6,-101e-6,-108e-6,-67e-6,-67e-6,59e-6,75e-6,0,0,-8e-6,-58e-6,-75e-6,0,-67e-6,-1e-4,-74e-6,-8e-6,42e-6,92e-6,-17e-6,-42e-6,5e-5,5e-5,-107e-6,-58e-6,-58e-6,33e-6,-84e-6,-42e-6,-25e-6,-33e-6,-151e-6,-9e-6,114e-6,-158e-6,-79e-6,-44e-6,-62e-6,0,-8e-5,-62e-6,0,0,-6e-5,-17e-6,0,17e-6,-112e-6,9e-6,-9e-6,-69e-6,-77e-6,-77e-6,-17e-6,-9e-6,17e-6,-61e-6,-17e-6,9e-6,-51e-6,-9e-6,0,-77e-6,-137e-6,-34e-6,52e-6,-85e-6,52e-6,-17e-6,9e-6,-17e-6,43e-6,-69e-6,-69e-6,-17e-6,-35e-6,-35e-6,-8e-6,-43e-6,121e-6,-8e-6,8e-6,-26e-6,-6e-5,26e-6,17e-6,-51e-6,9e-6,-26e-6,-12e-5,26e-6,-43e-6,-94e-6,17e-6,26e-6,-156e-6,0,-34e-6,6e-5,9e-6,-9e-6,0,23e-6,-31e-6,-8e-6,-39e-6,-16e-6,-63e-6,-63e-6,-54e-6,-47e-6,-109e-6,-16e-6,-31e-6,-23e-6,-94e-6,-39e-6,-23e-6,-16e-6,-78e-6,23e-6,63e-6,-16e-6,-16e-6,-16e-6,-47e-6,-47e-6,101e-6,8e-6,39e-6,55e-6,8e-6,8e-6,-15e-6,23e-6,-62e-6,-7e-5,-47e-6,16e-6,16e-6,-24e-6,-47e-6,16e-6,-103e-6,-31e-6,-24e-6,8e-6,0,31e-6,-39e-6,-31e-6,-54e-6,8e-6,-47e-6,-39e-6,0,-8e-6,31e-6,-148e-6,-86e-6,0,-16e-6,71e-6,-16e-6,95e-6,204e-6,-134e-6,23e-6,71e-6,46e-6,-55e-6,-87e-6,-8e-6,-31e-6,55e-6,-78e-6,-23e-6,-31e-6,-63e-6,-16e-6,16e-6,-63e-6,-31e-6,8e-6,-8e-6,-23e-6,-4e-5,31e-6,8e-6,-16e-6,-32e-6,-7e-5,-32e-6,-39e-6,-47e-6,-32e-6,15e-6,-8e-6,-86e-6,93e-6,16e-6,-117e-6,16e-6,0,24e-6,-93e-6,-24e-6,-16e-6,-8e-6,24e-6,0,16e-6,-39e-6,-31e-6,-54e-6,39e-6,-47e-6,39e-6,47e-6,0,-24e-6,39e-6,-78e-6,78e-6,-31e-6,95e-6,78e-6,31e-6,-125e-6,71e-6,31e-6,-31e-6,-23e-6,8e-6,-31e-6,-39e-6,8e-6,0,46e-6,-23e-6,-8e-6,-31e-6,-23e-6,-63e-6,23e-6,87e-6,16e-6,-155e-6,-23e-6,-55e-6,15e-6,-23e-6,-53e-6,61e-6,23e-6,1e-4,-15e-6,0,-23e-6,-31e-6,-38e-6,-68e-6,-38e-6,53e-6,31e-6,0,-64e-6,-9e-6,-55e-6,-18e-6,9e-6,-18e-6,27e-6,-72e-6,18e-6,0,-18e-6,-28e-6,-37e-6,0,-46e-6,37e-6,63e-6,137e-6,-55e-6,118e-6,11e-5,253e-6,276e-6,-55e-6,37e-6,28e-6,28e-6,-28e-6,82e-6,-37e-6,-28e-6,136e-6,-82e-6,-46e-6,18e-6,136e-6,0,37e-6,27e-6,-18e-6,0,-9e-6,-9e-6,0,-18e-6,-9e-6,54e-6,27e-6,45e-6,18e-6,-27e-6,-9e-6,-9e-5,-82e-6,-36e-6,64e-6,-18e-6,45e-6,-9e-6,9e-6,-9e-6,36e-6,-18e-6,-9e-5,-9e-6,55e-6,9e-6,-18e-6,0,-108e-6,-45e-6,-64e-6,73e-6,-36e-6,18e-6,18e-6,-64e-6,-55e-6,64e-6,-36e-6,-73e-6,-9e-6,55e-6,46e-6,-126e-6,-18e-6,0,18e-6,-27e-6,46e-6,-18e-6,-46e-6,55e-6,-9e-6,-37e-6,-18e-6,-55e-6,-72e-6,18e-6,-19e-6,9e-6,9e-6,-28e-6,-55e-6,9e-6,118e-6,0,-72e-6,9e-6,18e-6,28e-6,37e-6,9e-6,46e-6,-18e-6,-54e-6,-9e-6,-102e-6,-63e-6,-18e-6,37e-6,54e-6,-18e-6,37e-6,9e-6,-45e-6,0,-27e-6,-27e-6,-1e-5,4e-5,0,-1e-5,-3e-5,0,-9e-5,-71e-6,-99e-6,-4e-5,-71e-6,5e-5,-4e-5,5e-5,-8e-5,-8e-5,-1e-5,5e-5,-98e-6,5e-5,-4e-5,4e-5,-98e-6,4e-5,-3e-5,-1e-5,-101e-6,-5e-5,-2e-5,3e-5,-71e-6,49e-6,49e-6,-1e-5,2e-5,-2e-5,-61e-6,-8e-5,61e-6,-8e-5,2e-5,1e-5,8e-5,8e-5,3e-5,-3e-5,-49e-6,-61e-6,-2e-5,-1e-5,-2e-5,-4e-5,-61e-6,7e-5,-1e-5,-109e-6,-51e-6,2e-5,-2e-5,-3e-5,-2e-5,-39e-6,-3e-5,6e-5,-39e-6,-133e-6,-2e-5,7e-5,0,-3e-5,-91e-6,-79e-6,6e-5,79e-6,-2e-5,41e-6,1e-4,5e-5,-14e-5,-3e-5,5e-5,1e-5,79e-6,-31e-6,-159e-6,-4e-5,4e-5,-81e-6,-1e-5,3e-5,-1e-5,-81e-6,-9e-5,128e-6,5e-5,-216e-6,-139e-6,285e-6,-216e-6,-191e-6,-158e-6,-191e-6,248e-6,139e-6,-1e-5,131e-6,-18e-5,-71e-6,81e-6,-2e-5,-6e-5,3e-5,119e-6,-4e-5,-5e-5,81e-6,2e-5,-59e-6,-59e-6,-19e-5,-8e-5,59e-6,4e-5,8e-5,2e-5,0,2e-5,-89e-6,-5e-5,0,-2e-5,59e-6,161e-6,-8e-5,3e-5,8e-5,-101e-6,-4e-5,-71e-6,71e-6,-2e-5,-2e-5,-71e-6,-49e-6,4e-5,1e-5,0,2e-5,217e-6,1e-5,2e-5,-7e-5,-4e-5,-149e-6,-2e-5,89e-6,2e-5,-1e-5,1e-5,0,-61e-6,-61e-6,-4e-5,3e-5,-1e-4,2e-5,7e-5,2e-5,-2e-5,2e-5,1e-5,-6e-5,39e-6,2e-5,-39e-6,39e-6,-3e-5,2e-5,41e-6,1e-4,7e-5,-1e-5,3e-5,-79e-6,1e-5,-2e-5,-7e-5,-2e-5,51e-6,6e-5,0,7e-5,0,1e-5,1e-5,-41e-6,-81e-6,-2e-5,41e-6,0,-31e-6,6e-5,-1e-5,-4e-5,-4e-5,-3e-5,1e-5,-2e-5,-99e-6,-2e-5,4e-5,-6e-5,-99e-6,2e-5,-6e-5,-9e-5,-81e-6,0,-139e-6,69e-6,81e-6,2e-5,9e-5,-15e-5,81e-6,3e-5,-1e-5,0,-9e-5,-4e-5,-59e-6,-11e-6,24e-6,12e-6,24e-6,35e-6,-47e-6,-69e-6,12e-6,12e-6,24e-6,12e-6,35e-6,24e-6,103e-6,24e-6,-47e-6,12e-6,-47e-6,-35e-6,-12e-6,58e-6,-35e-6,12e-6,83e-6,-12e-6,-83e-6,-12e-6,-12e-6,12e-6,-24e-6,-35e-6,0,-47e-6,-71e-6,12e-6,126e-6,126e-6,-93e-6,-12e-6,12e-6,-35e-6,-82e-6,-139e-6,-12e-6,-153e-6,126e-6,46e-6,237e-6,0,-35e-6,-12e-6,57e-6,0,-57e-6,-12e-6,-35e-6,-92e-6,-71e-6,46e-6,106e-6,-46e-6,-12e-6,-23e-6,57e-6,-6e-5,-6e-5,-35e-6,71e-6,12e-6,-57e-6,71e-6,-12e-6,-46e-6,-12e-6,115e-6,115e-6,46e-6,71e-6,-177e-6,12e-6,46e-6,0,46e-6,-23e-6,-7e-5,-46e-6,0,-59e-6,-59e-6,-12e-6,35e-6,-7e-5,0,-91e-6,46e-6,151e-6,-35e-6,-46e-6,23e-6,-12e-6,-81e-6,-12e-6,48e-6,59e-6,-12e-6,34e-6,48e-6,23e-6,-23e-6,-119e-6,0,105e-6,-48e-6,-34e-6,12e-6,-23e-6,-12e-6,-47e-6,0,-12e-6,59e-6,36e-6,34e-6,-23e-6,-7e-5,-7e-5,47e-6,47e-6,-118e-6,47e-6,59e-6,23e-6,-7e-5,11e-6,36e-6,-23e-6,11e-6,11e-6,11e-6,-58e-6,36e-6,-23e-6,-11e-6,104e-6,-11e-6,-24e-6,69e-6,0,-11e-6,-47e-6,0,0,36e-6,24e-6,83e-6,-24e-6,-58e-6,-117e-6,-83e-6,-117e-6,-69e-6,-35e-6,108e-6,14e-5,-69e-6,12e-6,-35e-6,-35e-6,-47e-6,24e-6,47e-6,-69e-6,153e-6,-93e-6,-47e-6,173e-6,24e-6,12e-6,0,12e-6,-12e-6,-35e-6,-24e-6,-93e-6,-47e-6,-24e-6,47e-6,47e-6,-35e-6,-72e-6,-35e-6,58e-6,24e-6,-71e-6,-13e-5,-24e-6,93e-6,253e-6,35e-6,259e-6,-172e-6,58e-6,92e-6,71e-6,68e-6,92e-6,0,-35e-6,-46e-6,-71e-6,-82e-6,12e-6,57e-6,-12e-6,-12e-6,92e-6,-12e-6,46e-6,46e-6,-35e-6,-23e-6,12e-6,12e-6,-82e-6,-12e-6,71e-6,-23e-6,23e-6,-12e-6,0,81e-6,115e-6,-12e-6,-106e-6,-46e-6,35e-6,-46e-6,-35e-6,12e-6,46e-6,129e-6,-35e-6,-23e-6,-57e-6,12e-6,46e-6,-59e-6,0,0,-46e-6,-59e-6,-35e-6,35e-6,-46e-6,-12e-6,-59e-6,-12e-6,23e-6,-23e-6,46e-6,12e-6,7e-5,-12e-6,-12e-6,0,-12e-6,0,-12e-6,46e-6,-162e-6,-12e-6,12e-6,48e-6,12e-6,46e-6,12e-6,12e-6,0,23e-6,-12e-6,48e-6,-23e-6,12e-6,154e-6,48e-6,-7e-5,-23e-6,-104e-6,23e-6,0,-23e-6,-59e-6,12e-6,-12e-6,-7e-5,-118e-6,-118e-6,-47e-6,0,59e-6,253e-6,0]}},{}],9:[function(require,module,exports){module.exports={real:[0,.16238,.062109,.035087,.019162,.00229,.050003,-.017683,.003847,.017706,.002123,.002409,.015985,-.009882,.023513,-.020894,.014567,-.008968,.008466,-.001435,.006276,-.005895,.011753,-.011957,.012239,-.010608,.006371,-.005362,-515e-6,-915e-6,.006307,-.008339,.008238,-.008281,.003664,-984e-6,876e-6,-.003983,.00288,-.004432,.004209,-.0052,.004474,-.003857,894e-6,-.00312,.003329,-.002796,.00255,-727e-6,.00209,-.002307,.002002,-.002017,.001679,-722e-6,.00104,-.001169,.002089,-.001722,.001888,-.003238,.001509,-772e-6,-.001109,-.003273,.00329,-.004159,-.002891,-705e-6,.001915,-.003575,.002956,-.003724,.003995,-.004082,.002414,-.002768,.002072,725e-6,493e-6,-.00201,.001433,.001595,752e-6,-.001411,.001222,-.00161,-.001047,-459e-6,.001413,-571e-6,-47e-6,908e-6,-.001162,-227e-6,-32e-6,-917e-6,-789e-6,-.00142,62e-5,-.001393,.001292,.001435,-62e-5,804e-6,733e-6,545e-6,765e-6,-938e-6,44e-6,-.001227,831e-6,-.001217,.00138,-649e-6,59e-5,-.001385,-.001382,688e-6,-.001163,168e-6,72e-5,-.001145,-196e-6,.001168,299e-6,-656e-6,271e-6,.001027,-458e-6,-938e-6,714e-6,-543e-6,96e-5,97e-5,-695e-6,334e-6,58e-5,675e-6,-158e-6,101e-6,-545e-6,598e-6,-718e-6,-837e-6,9e-4,-907e-6,-656e-6,864e-6,-868e-6,303e-6,-673e-6,-221e-6,769e-6,857e-6,-264e-6,24e-6,601e-6,-841e-6,421e-6,-162e-6,794e-6,-836e-6,-707e-6,798e-6,186e-6,-83e-5,58e-6,663e-6,-695e-6,-539e-6,-436e-6,-802e-6,597e-6,-102e-6,-199e-6,676e-6,172e-6,326e-6,-791e-6,-727e-6,776e-6,175e-6,-558e-6,-265e-6,262e-6,621e-6,-702e-6,707e-6,593e-6,-568e-6,258e-6,-576e-6,-701e-6,-701e-6,-678e-6,-697e-6,454e-6,-619e-6,64e-6,684e-6,234e-6,163e-6,-557e-6,467e-6,637e-6,-572e-6,622e-6,19e-6,268e-6,-9e-5,-601e-6,658e-6,-641e-6,-472e-6,366e-6,-169e-6,43e-6,-34e-5,29e-5,-428e-6,49e-5,-622e-6,-654e-6,645e-6,-371e-6,-241e-6,-522e-6,539e-6,-44e-6,-574e-6,613e-6,-433e-6,382e-6,312e-6,382e-6,-361e-6,83e-6,533e-6,-632e-6,164e-6,545e-6,-524e-6,-152e-6,617e-6,-257e-6,-303e-6,459e-6,-81e-6,-402e-6,319e-6,39e-6,-35e-5,273e-6,89e-6,-364e-6,199e-6,81e-6,-286e-6,183e-6,104e-6,-287e-6,166e-6,121e-6,-288e-6,15e-5,141e-6,-286e-6,126e-6,156e-6,-283e-6,104e-6,176e-6,-211e-6,66e-6,145e-6,-206e-6,48e-6,155e-6,-198e-6,3e-5,168e-6,-191e-6,9e-6,177e-6,-184e-6,-6e-6,186e-6,-172e-6,-24e-6,192e-6,-161e-6,-42e-6,196e-6,-148e-6,-64e-6,201e-6,-135e-6,-76e-6,204e-6,-12e-5,-93e-6,204e-6,-108e-6,-107e-6,21e-5,-94e-6,-128e-6,207e-6,-77e-6,-14e-5,202e-6,-56e-6,-151e-6,197e-6,-37e-6,-165e-6,191e-6,-17e-6,-174e-6,179e-6,0,-182e-6,169e-6,17e-6,-188e-6,155e-6,33e-6,-193e-6,144e-6,54e-6,-197e-6,133e-6,69e-6,-199e-6,117e-6,85e-6,-199e-6,96e-6,102e-6,-198e-6,83e-6,118e-6,-195e-6,68e-6,128e-6,-19e-5,46e-6,141e-6,-186e-6,26e-6,153e-6,-179e-6,11e-6,162e-6,-168e-6,-4e-6,169e-6,-158e-6,-24e-6,175e-6,-148e-6,-46e-6,182e-6,-136e-6,-62e-6,187e-6,-121e-6,-72e-6,189e-6,-103e-6,-89e-6,19e-5,-94e-6,-106e-6,189e-6,-79e-6,-121e-6,187e-6,-61e-6,-135e-6,183e-6,-42e-6,-143e-6,177e-6,-28e-6,-177e-6,193e-6,-16e-6,-185e-6,181e-6,0,-192e-6,17e-5,27e-6,-197e-6,157e-6,42e-6,-202e-6,141e-6,54e-6,-205e-6,123e-6,7e-5,-206e-6,103e-6,88e-6,-205e-6,87e-6,102e-6,-203e-6,76e-6,118e-6,-198e-6,54e-6,13e-5,-19e-5,32e-6,141e-6,-185e-6,5e-6,153e-6,-177e-6,-22e-6,158e-6,-166e-6,-49e-6,164e-6,-152e-6,-81e-6,168e-6,-141e-6,-104e-6,17e-5,-12e-5,-129e-6,169e-6,-97e-6,-158e-6,166e-6,-75e-6,-19e-5,166e-6,-54e-6,-195e-6,161e-6,-27e-6,-154e-6,151e-6,16e-6,-6e-5,155e-6,54e-6,38e-6,158e-6,91e-6,101e-6,168e-6,125e-6,142e-6,175e-6,155e-6,166e-6,182e-6,172e-6,193e-6,201e-6,196e-6,2e-4,203e-6,202e-6,203e-6,203e-6,203e-6,202e-6,201e-6,201e-6,2e-4,199e-6,199e-6,197e-6,197e-6,197e-6,196e-6,196e-6,196e-6,196e-6,196e-6,197e-6,196e-6,195e-6,196e-6,196e-6,196e-6,195e-6,196e-6,196e-6,196e-6,196e-6,195e-6,196e-6,196e-6,196e-6,195e-6,196e-6,195e-6,195e-6,195e-6,195e-6,195e-6,194e-6,194e-6,194e-6,194e-6,194e-6,194e-6,194e-6,193e-6,193e-6,193e-6,193e-6,193e-6,192e-6,193e-6,193e-6,192e-6,192e-6,192e-6,192e-6,192e-6,191e-6,191e-6,191e-6,191e-6,191e-6,191e-6,19e-5,19e-5,19e-5,19e-5,19e-5,19e-5,189e-6,189e-6,189e-6,189e-6,189e-6,188e-6,188e-6,188e-6,188e-6,188e-6,187e-6,187e-6,187e-6,187e-6,187e-6,187e-6,187e-6,186e-6,114e-6,114e-6,114e-6,114e-6,113e-6,113e-6,113e-6,113e-6,113e-6,113e-6,113e-6,113e-6,113e-6,113e-6,113e-6,112e-6,112e-6,112e-6,112e-6,112e-6,112e-6,112e-6,112e-6,112e-6,112e-6,111e-6,111e-6,111e-6,111e-6,111e-6,111e-6,111e-6,11e-5,111e-6,111e-6,11e-5,11e-5,11e-5,11e-5,11e-5,11e-5,11e-5,11e-5,11e-5,109e-6,11e-5,109e-6,109e-6,83e-6,83e-6,83e-6,83e-6,82e-6,83e-6,83e-6,82e-6,82e-6,82e-6,82e-6,82e-6,82e-6,82e-6,82e-6,82e-6,82e-6,82e-6,82e-6,81e-6,81e-6,82e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,8e-5,8e-5,81e-6,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,79e-6,8e-5,8e-5,79e-6,79e-6,8e-5,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,78e-6,78e-6,79e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,77e-6,78e-6,78e-6,82e-6,82e-6,82e-6,82e-6,82e-6,82e-6,82e-6,82e-6,82e-6,82e-6,82e-6,82e-6,81e-6,81e-6,82e-6,82e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,81e-6,8e-5,8e-5,8e-5,81e-6,81e-6,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,8e-5,79e-6,79e-6,8e-5,8e-5,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,79e-6,78e-6,79e-6,79e-6,79e-6,78e-6,79e-6,79e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,78e-6,77e-6,78e-6,78e-6,78e-6,77e-6,78e-6,78e-6,77e-6,77e-6,77e-6,77e-6,77e-6,77e-6,77e-6,77e-6,77e-6,77e-6,77e-6,77e-6,77e-6,76e-6,77e-6,77e-6,77e-6,76e-6,77e-6,77e-6,76e-6,76e-6,76e-6,76e-6,76e-6,76e-6,76e-6,76e-6,76e-6,76e-6,76e-6,76e-6,76e-6,75e-6,76e-6,76e-6,76e-6,75e-6,76e-6,76e-6,76e-6,75e-6,75e-6,75e-6,75e-6,75e-6,75e-6,75e-6,75e-6,75e-6,75e-6,75e-6,75e-6,74e-6,75e-6,75e-6,75e-6,74e-6,75e-6,75e-6,75e-6,74e-6,75e-6,75e-6,75e-6,74e-6,74e-6,74e-6,74e-6,74e-6,74e-6,74e-6,74e-6,74e-6,74e-6,74e-6,74e-6,74e-6,74e-6,74e-6,74e-6,73e-6,74e-6,74e-6,74e-6,73e-6,74e-6,73e-6,73e-6,73e-6,73e-6,74e-6,73e-6,73e-6,73e-6,73e-6,73e-6,73e-6,73e-6,73e-6,73e-6,72e-6,73e-6,73e-6,73e-6,73e-6,73e-6,73e-6,73e-6,73e-6,73e-6,73e-6,72e-6,72e-6,72e-6,72e-6,72e-6,72e-6,72e-6,72e-6,72e-6,72e-6,72e-6,72e-6,72e-6,71e-6,72e-6,72e-6,72e-6,71e-6,72e-6,72e-6,72e-6,71e-6,72e-6,72e-6,72e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,71e-6,7e-5,71e-6,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,69e-6,7e-5,69e-6,69e-6,69e-6,7e-5,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,68e-6,69e-6,69e-6,69e-6,69e-6,69e-6,68e-6,68e-6,65e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,67e-6,67e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,67e-6,67e-6,68e-6,67e-6,67e-6,67e-6,68e-6,67e-6,67e-6,67e-6,67e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,45e-6,44e-6,45e-6,45e-6,45e-6,44e-6,45e-6,45e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,43e-6,44e-6,43e-6,43e-6,43e-6,44e-6,43e-6,43e-6,43e-6,44e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,42e-6,42e-6,42e-6,43e-6,42e-6,42e-6,42e-6,43e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,35e-6,35e-6,36e-6,35e-6,35e-6,35e-6,36e-6,36e-6,35e-6,35e-6,36e-6,36e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,34e-6,34e-6,35e-6,35e-6,35e-6,34e-6,34e-6,35e-6,35e-6,34e-6,35e-6,35e-6,34e-6,34e-6,35e-6,35e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,33e-6,33e-6,34e-6,34e-6,33e-6,34e-6,34e-6,34e-6,33e-6,34e-6,34e-6,34e-6,34e-6,33e-6,34e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,31e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,29e-6,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,29e-6,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,27e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,26e-6],imag:[0,.121181,.134239,-.057595,.049711,-.015144,-.006389,.003981,-77e-5,-.012665,.018718,-.017802,.010014,-.02018,.006831,-.001106,-.009476,-.006318,.001516,-.006389,-.004417,-.006808,.00374,-.005655,-.004231,.002433,-.006182,.001208,.00505,-.00475,.001425,-883e-6,-52e-5,.001299,-.006318,.005372,-.005313,-611e-6,.001626,236e-6,.001221,-201e-6,-.002203,.003068,.00479,.001683,.0011,-.001017,.001078,-.002556,648e-6,-824e-6,.001371,-.001167,.001585,-.001698,.001505,-.001169,-167e-6,.002239,-.002664,-67e-6,-.002949,.003195,-.003066,651e-6,-378e-6,-599e-6,-.003006,-.00408,-.003637,.00197,-.002956,.001835,.001022,-336e-6,.002074,-.001529,.001979,-.002034,-.002089,715e-6,.001209,-417e-6,.001456,-815e-6,-.001063,-46e-6,.001212,.001378,296e-6,-.001318,.001427,.001093,-804e-6,-.001432,.001442,.001103,-.001189,-18e-6,.00127,543e-6,738e-6,364e-6,.001337,-.001226,-.001262,.001346,-.001227,.001091,-.001432,726e-6,.001152,-719e-6,275e-6,-.001242,-.001264,107e-6,-56e-6,-.001052,46e-5,.001235,-.00101,464e-6,.001215,372e-6,.001184,.001024,-.001181,-128e-6,924e-6,-419e-6,-733e-6,863e-6,-332e-6,-288e-6,645e-6,-884e-6,741e-6,651e-6,-921e-6,926e-6,-751e-6,-705e-6,577e-6,-378e-6,166e-6,-1e-4,629e-6,-272e-6,249e-6,818e-6,-552e-6,838e-6,395e-6,86e-6,-817e-6,856e-6,-606e-6,129e-6,736e-6,-83e-5,281e-6,-79e-6,-449e-6,-248e-6,811e-6,0,-826e-6,491e-6,-44e-5,-619e-6,692e-6,-149e-6,552e-6,805e-6,-784e-6,439e-6,-786e-6,-733e-6,117e-6,-327e-6,173e-6,774e-6,-458e-6,-669e-6,668e-6,355e-6,-13e-5,83e-6,-391e-6,423e-6,-657e-6,-406e-6,41e-6,16e-6,172e-6,-26e-6,526e-6,313e-6,689e-6,-96e-6,648e-6,667e-6,-4e-4,499e-6,242e-6,368e-6,-272e-6,-677e-6,62e-5,-668e-6,-301e-6,132e-6,-191e-6,472e-6,-556e-6,643e-6,-661e-6,567e-6,593e-6,-5e-4,437e-6,207e-6,14e-6,-98e-6,535e-6,603e-6,-385e-6,357e-6,-644e-6,291e-6,-194e-6,473e-6,514e-6,-557e-6,51e-5,-523e-6,-629e-6,342e-6,0,-609e-6,314e-6,347e-6,-608e-6,103e-6,398e-6,-363e-6,-107e-6,464e-6,-243e-6,-203e-6,375e-6,-138e-6,-258e-6,365e-6,-87e-6,-214e-6,28e-5,-54e-6,-226e-6,271e-6,-35e-6,-237e-6,262e-6,-12e-6,-245e-6,25e-5,12e-6,-256e-6,238e-6,31e-6,-264e-6,222e-6,38e-6,-204e-6,157e-6,55e-6,-208e-6,146e-6,76e-6,-21e-5,129e-6,91e-6,-211e-6,115e-6,102e-6,-21e-5,97e-6,119e-6,-207e-6,81e-6,132e-6,-203e-6,66e-6,145e-6,-197e-6,44e-6,156e-6,-191e-6,27e-6,166e-6,-182e-6,9e-6,18e-5,-181e-6,-6e-6,187e-6,-165e-6,-28e-6,194e-6,-154e-6,-47e-6,2e-4,-141e-6,-63e-6,203e-6,-124e-6,-76e-6,205e-6,-109e-6,-1e-4,204e-6,-91e-6,-114e-6,203e-6,-77e-6,-131e-6,2e-4,-61e-6,-141e-6,194e-6,-41e-6,-151e-6,189e-6,-21e-6,-163e-6,181e-6,-7e-6,-174e-6,171e-6,14e-6,-18e-5,159e-6,3e-5,-185e-6,15e-5,52e-6,-191e-6,137e-6,63e-6,-194e-6,121e-6,77e-6,-195e-6,108e-6,98e-6,-194e-6,95e-6,112e-6,-192e-6,81e-6,123e-6,-187e-6,62e-6,136e-6,-181e-6,4e-5,148e-6,-177e-6,28e-6,16e-5,-168e-6,9e-6,165e-6,-157e-6,-9e-6,172e-6,-145e-6,-23e-6,178e-6,-131e-6,-42e-6,183e-6,-12e-5,-61e-6,185e-6,-115e-6,-84e-6,21e-5,-1e-4,-106e-6,209e-6,-83e-6,-122e-6,207e-6,-67e-6,-136e-6,204e-6,-47e-6,-152e-6,2e-4,-27e-6,-166e-6,194e-6,-5e-6,-178e-6,186e-6,11e-6,-186e-6,178e-6,27e-6,-19e-5,166e-6,48e-6,-196e-6,157e-6,71e-6,-2e-4,146e-6,82e-6,-202e-6,131e-6,97e-6,-2e-4,125e-6,113e-6,-195e-6,115e-6,13e-5,-183e-6,108e-6,141e-6,-17e-5,104e-6,158e-6,-151e-6,104e-6,173e-6,-12e-5,107e-6,183e-6,-54e-6,107e-6,189e-6,27e-6,113e-6,194e-6,121e-6,124e-6,195e-6,186e-6,118e-6,187e-6,191e-6,114e-6,172e-6,165e-6,97e-6,148e-6,131e-6,82e-6,115e-6,98e-6,63e-6,86e-6,68e-6,37e-6,55e-6,36e-6,18e-6,18e-6,6e-6,-6e-6,-6e-6,-12e-6,-24e-6,-24e-6,-27e-6,-33e-6,-33e-6,-41e-6,-41e-6,-41e-6,-41e-6,-41e-6,-41e-6,-41e-6,-4e-5,-34e-6,-34e-6,-4e-5,-34e-6,-34e-6,-34e-6,-34e-6,-27e-6,-27e-6,-27e-6,-27e-6,-27e-6,-2e-5,-21e-6,-21e-6,-21e-6,-14e-6,-21e-6,-21e-6,-14e-6,-14e-6,-14e-6,-21e-6,-14e-6,-14e-6,-14e-6,-14e-6,-14e-6,-7e-6,-14e-6,-14e-6,-7e-6,-7e-6,-7e-6,-14e-6,-7e-6,0,-7e-6,-7e-6,-7e-6,0,-7e-6,-7e-6,-7e-6,0,0,-7e-6,0,0,0,-7e-6,0,0,0,-7e-6,0,7e-6,0,0,0,7e-6,0,0,0,7e-6,0,0,0,8e-6,8e-6,0,8e-6,5e-6,5e-6,0,5e-6,5e-6,5e-6,0,5e-6,5e-6,5e-6,0,5e-6,5e-6,5e-6,0,5e-6,5e-6,5e-6,0,5e-6,1e-5,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,8e-6,4e-6,4e-6,4e-6,7e-6,4e-6,4e-6,4e-6,7e-6,4e-6,4e-6,7e-6,7e-6,4e-6,4e-6,4e-6,7e-6,7e-6,4e-6,7e-6,7e-6,4e-6,4e-6,7e-6,7e-6,4e-6,4e-6,4e-6,8e-6,4e-6,4e-6,4e-6,8e-6,4e-6,4e-6,8e-6,8e-6,4e-6,4e-6,4e-6,8e-6,8e-6,4e-6,4e-6,8e-6,4e-6,4e-6,8e-6,8e-6,4e-6,4e-6,8e-6,8e-6,4e-6,4e-6,4e-6,8e-6,4e-6,4e-6,8e-6,8e-6,4e-6,4e-6,8e-6,8e-6,4e-6,4e-6,4e-6,8e-6,8e-6,4e-6,4e-6,8e-6,4e-6,4e-6,8e-6,8e-6,4e-6,4e-6,4e-6,8e-6,8e-6,4e-6,4e-6,8e-6,4e-6,4e-6,9e-6,9e-6,4e-6,4e-6,9e-6,9e-6,9e-6,4e-6,9e-6,9e-6,4e-6,4e-6,9e-6,9e-6,4e-6,4e-6,9e-6,9e-6,9e-6,4e-6,9e-6,9e-6,9e-6,4e-6,9e-6,9e-6,4e-6,4e-6,9e-6,9e-6,9e-6,4e-6,4e-6,9e-6,9e-6,4e-6,9e-6,9e-6,4e-6,4e-6,9e-6,9e-6,4e-6,4e-6,4e-6,9e-6,9e-6,4e-6,9e-6,9e-6,4e-6,4e-6,9e-6,9e-6,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,5e-6,5e-6,0,5e-6,5e-6,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,1e-5,5e-6,5e-6,5e-6,5e-6,5e-6,0,5e-6,5e-6,5e-6,0,5e-6,5e-6,5e-6,5e-6,5e-6,11e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,5e-6,0,5e-6,5e-6,5e-6,0,5e-6,5e-6,5e-6,5e-6,5e-6,6e-6,5e-6,0,6e-6,6e-6,6e-6,6e-6,6e-6,6e-6,6e-6,0,6e-6,6e-6,6e-6,0,6e-6,6e-6,6e-6,0,6e-6,6e-6,6e-6,0,6e-6,6e-6,6e-6,6e-6,6e-6,6e-6,6e-6,0,6e-6,11e-6,0,0,6e-6,6e-6,0,-6e-6,11e-6,22e-6,11e-6,6e-6,6e-6,6e-6,6e-6,6e-6,6e-6,6e-6,0,0,6e-6,11e-6,11e-6,0,6e-6,6e-6,6e-6,0,6e-6,6e-6,6e-6,0,6e-6,6e-6,6e-6,0,6e-6,6e-6,6e-6,0,6e-6,6e-6,6e-6,0,6e-6,6e-6,6e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,4e-6,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,4e-6,0,4e-6,0,0,0,4e-6,0,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,0,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,0,0,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,0,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,0,0,4e-6,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,4e-6,0,0,0,4e-6,4e-6,0,0,5e-6,5e-6,0,0,5e-6,5e-6,5e-6,5e-6,5e-6,4e-6,0,0,4e-6,4e-6,0,0,4e-6,4e-6,0,0,4e-6,4e-6,0,0,4e-6,4e-6,0,0,0,4e-6,4e-6,0,4e-6,4e-6,4e-6,0,0,4e-6,4e-6,0,0,4e-6,0,0,4e-6,4e-6,0,0,0,4e-6,0,0,4e-6,4e-6,4e-6,0,0,0,0,0,4e-6,4e-6,0,0,4e-6,4e-6,4e-6,0,0,4e-6,4e-6,0,0,4e-6,0,0,4e-6,4e-6,4e-6,0,0,4e-6,0,0,0,4e-6,0,0,4e-6,4e-6,0,0,0,4e-6,0,0,0,4e-6,0,0,4e-6,4e-6,0,0,0,4e-6,4e-6,0,0,4e-6,0,0,4e-6,4e-6,0,0,0,4e-6,4e-6,0,0,4e-6,0,0,0,4e-6,0,0,0,0,0,0,0,4e-6,0,0,0,4e-6,0,0,0,4e-6,0,0,0,4e-6,0,0,0,4e-6,0,0,4e-6,4e-6,0,0,0,4e-6,0,0,0,4e-6,0,0,0,4e-6,0,0,0,0,4e-6,0,0,4e-6,0,0,0,0,0,0,0,4e-6,4e-6,0,0,4e-6,0,0,0,4e-6,0,0,0,0,4e-6,0,0,4e-6,0,0,0,4e-6,0,0,0,4e-6,0,0,0,4e-6,0,0,0,4e-6,0,0,0,4e-6,0,0,0,5e-6,0,0,0,5e-6,0,0,0,0,0,0,0,0,0,0,0,5e-6,0,0,0,5e-6,0,0,0,0,0,0,0,0,0,0,0,5e-6,0,0,0,0,0,0,0,0,0,0,0,4e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4e-6,0,0,0,4e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4e-6,0,0,0,0,0,0,0,4e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-9e-6]
}},{}],10:[function(require,module,exports){module.exports={real:[0,-1e-6,-.139102,.086216,-.053293,.034018,-.024299,.01707,-.015971,.01553,-.012639,.011335,-.011541,.01043,-.009167,.008078,-.007356,.007138,-.006327,.005447,-.001334,749e-6,-421e-6,303e-6,-297e-6,234e-6,-23e-5,212e-6,-208e-6,246e-6,-242e-6,238e-6,-234e-6,389e-6,-383e-6,378e-6,-373e-6,582e-6,-575e-6,567e-6,-.001135,.001121,-.001108,.002151,-.002127,.002103,-.004914,.004862,-.008108,.017829,-.01765,.018022,-.014397,.014261,-.014129,.011645,-.011541,.009515,-.006526,.00647,-.003472,.002311,-.001538,.001573,-.001561,.001549,-.001537,.001525,-.001299,.001289,-.00128,.001271,-.001262,.001417,-.001641,.001631,-.00162,.001609,-.001599,.001589,-.001579,.001569,-.00156,.00155,-.001541,.001532,-.001619,.00161,-.001601,.001592,-.001583,.001574,-.001566,.001557,-.001549,.001541,-.001533,.001525,-.001517,.00151,-.001502,.001495,-.001487,.00148,-.001473,.001466,-.001459,.001452,-.001446,.001439,-.001432,.001426,-.00142,.001413,-.001407,.001401,-.001395,.001389,-.001383,.001377,-.001372,.001366,-.00136,.001355,-.001349,.001344,-.001339,.001333,-.001328,.001323,-.001318,.001313,-.001308,.001303,-.001298,.001293,-.001288,.001284,-.001279,.001397,-.001392,.001387,-.001383,.001378,-.001373,.001368,-.001363,.001359,-.001354,.00135,-.001345,.001341,-.001336,.001332,-.001328,.001323,-.001319,.001315,-.001311,.001306,-.001302,.001298,-.001294,.00129,-.001286,.001282,-.001279,.001275,-.001271,.001267,-.001263,.00126,-.001256,.001252,-.001249,.001245,-.001242,.001238,-.001234,.001231,-.001228,.001224,-.001221,.001217,-.001214,.001211,-.001207,.001204,-.001201,.001198,-.001195,.001191,-.001188,.001185,-.001182,.001179,-.001176,.001173,-.00117,.001167,-.001164,.001161,-.001158,.001155,-.001152,.00115,-.001147,.001144,-.001141,.001138,-.001136,.001133,-.00113,.001128,-755e-6,753e-6,-751e-6,773e-6,-771e-6,769e-6,-767e-6,766e-6,-764e-6,762e-6,-76e-5,759e-6,-757e-6,755e-6,-753e-6,752e-6,-798e-6,796e-6,-794e-6,792e-6,-791e-6,789e-6,-787e-6,786e-6,-784e-6,782e-6,-78e-5,779e-6,-777e-6,775e-6,-774e-6,772e-6,-771e-6,769e-6,-767e-6,766e-6,-764e-6,836e-6,-835e-6,833e-6,-831e-6,829e-6,-854e-6,852e-6,-85e-5,848e-6,-847e-6,845e-6,-843e-6,842e-6,-84e-5,838e-6,-837e-6,835e-6,-833e-6,832e-6,-83e-5,829e-6,-827e-6,825e-6,-824e-6,822e-6,-821e-6,819e-6,-818e-6,816e-6,-815e-6,813e-6,-812e-6,81e-5,-809e-6,783e-6,-781e-6,78e-5,-778e-6,777e-6,-775e-6,751e-6,-749e-6,748e-6,-747e-6,745e-6,-744e-6,743e-6,-741e-6,74e-5,-739e-6,737e-6,-736e-6,735e-6,-733e-6,732e-6,-731e-6,729e-6,-728e-6,727e-6,-726e-6,724e-6,-723e-6,722e-6,-721e-6,719e-6,-718e-6,717e-6,-716e-6,714e-6,-713e-6,712e-6,-711e-6,71e-5,-708e-6,707e-6,-706e-6,705e-6,-704e-6,702e-6,-701e-6,7e-4,-699e-6,698e-6,-697e-6,696e-6,-694e-6,693e-6,-692e-6,691e-6,-69e-5,689e-6,-688e-6,686e-6,-685e-6,684e-6,-704e-6,703e-6,-702e-6,701e-6,-7e-4,699e-6,-698e-6,696e-6,-695e-6,694e-6,-693e-6,692e-6,-691e-6,69e-5,-689e-6,688e-6,-686e-6,685e-6,-684e-6,683e-6,-682e-6,681e-6,-68e-5,679e-6,-678e-6,677e-6,-676e-6,675e-6,-674e-6,672e-6,-671e-6,67e-5,-669e-6,668e-6,-667e-6,666e-6,-665e-6,664e-6,-663e-6,662e-6,-661e-6,66e-5,-659e-6,658e-6,-657e-6,656e-6,-655e-6,654e-6,-653e-6,652e-6,-651e-6,65e-5,-649e-6,648e-6,-647e-6,646e-6,-645e-6,644e-6,-643e-6,642e-6,-641e-6,64e-5,-639e-6,638e-6,-637e-6,636e-6,-635e-6,634e-6,-614e-6,613e-6,-612e-6,611e-6,-61e-5,609e-6,-608e-6,607e-6,-607e-6,606e-6,-605e-6,604e-6,-603e-6,602e-6,-601e-6,6e-4,-599e-6,598e-6,-597e-6,596e-6,-596e-6,595e-6,-594e-6,593e-6,-592e-6,591e-6,-59e-5,589e-6,-588e-6,587e-6,-587e-6,586e-6,-585e-6,584e-6,-583e-6,582e-6,-581e-6,58e-5,-579e-6,579e-6,-578e-6,577e-6,-576e-6,575e-6,-574e-6,573e-6,-572e-6,571e-6,-571e-6,57e-5,-569e-6,568e-6,-567e-6,566e-6,-565e-6,564e-6,-564e-6,563e-6,-562e-6,561e-6,-56e-5,559e-6,-558e-6,558e-6,-557e-6,556e-6,-555e-6,554e-6,-553e-6,552e-6,-473e-6,472e-6,-472e-6,471e-6,-47e-5,469e-6,-469e-6,468e-6,-467e-6,466e-6,-466e-6,465e-6,-464e-6,463e-6,-463e-6,462e-6,-461e-6,461e-6,-46e-5,459e-6,-458e-6,458e-6,-457e-6,456e-6,-455e-6,455e-6,-454e-6,453e-6,-452e-6,452e-6,-451e-6,45e-5,-45e-5,449e-6,-448e-6,447e-6,-447e-6,446e-6,-445e-6,445e-6,-444e-6,443e-6,-442e-6,442e-6,-441e-6,44e-5,-439e-6,439e-6,-438e-6,437e-6,-437e-6,436e-6,-435e-6,434e-6,-434e-6,433e-6,-432e-6,431e-6,-431e-6,43e-5,-429e-6,429e-6,-428e-6,427e-6,-426e-6,426e-6,-425e-6,424e-6,-423e-6,423e-6,-422e-6,421e-6,-421e-6,42e-5,-419e-6,418e-6,-418e-6,417e-6,-416e-6,415e-6,-415e-6,414e-6,-413e-6,413e-6,-412e-6,411e-6,-41e-5,41e-5,-409e-6,408e-6,-407e-6,407e-6,-406e-6,405e-6,-405e-6,404e-6,-403e-6,402e-6,-402e-6,401e-6,-4e-4,399e-6,-399e-6,398e-6,-397e-6,396e-6,-396e-6,349e-6,-349e-6,348e-6,-347e-6,347e-6,-346e-6,345e-6,-345e-6,344e-6,-343e-6,343e-6,-342e-6,341e-6,-341e-6,34e-5,-34e-5,339e-6,-338e-6,338e-6,-337e-6,336e-6,-336e-6,335e-6,-334e-6,334e-6,-333e-6,332e-6,-332e-6,331e-6,-33e-5,33e-5,-329e-6,328e-6,-328e-6,327e-6,-326e-6,326e-6,-325e-6,324e-6,-324e-6,323e-6,-322e-6,322e-6,-321e-6,32e-5,-32e-5,319e-6,-318e-6,318e-6,-317e-6,316e-6,-316e-6,315e-6,-314e-6,314e-6,-313e-6,312e-6,-311e-6,311e-6,-31e-5,309e-6,-309e-6,308e-6,-307e-6,307e-6,-306e-6,305e-6,-305e-6,304e-6,-303e-6,303e-6,-302e-6,301e-6,-301e-6,3e-4,-299e-6,298e-6,-298e-6,297e-6,-296e-6,296e-6,-295e-6,294e-6,-294e-6,293e-6,-292e-6,291e-6,-291e-6,29e-5,-289e-6,271e-6,-271e-6,27e-5,-27e-5,269e-6,-268e-6,268e-6,-267e-6,266e-6,-266e-6,265e-6,-264e-6,264e-6,-263e-6,262e-6,-262e-6,261e-6,-26e-5,259e-6,-259e-6,258e-6,-257e-6,257e-6,-256e-6,255e-6,-255e-6,254e-6,-253e-6,253e-6,-252e-6,251e-6,-251e-6,25e-5,-249e-6,249e-6,-248e-6,247e-6,-247e-6,246e-6,-245e-6,245e-6,-244e-6,243e-6,-242e-6,242e-6,-241e-6,24e-5,-24e-5,239e-6,-238e-6,238e-6,-237e-6,236e-6,-235e-6,235e-6,-234e-6,233e-6,-233e-6,232e-6,-231e-6,231e-6,-23e-5,229e-6,-228e-6,228e-6,-227e-6,226e-6,-226e-6,225e-6,-224e-6,223e-6,-223e-6,222e-6,-221e-6,221e-6,-22e-5,219e-6,-218e-6,218e-6,-217e-6,216e-6,-216e-6,215e-6,-214e-6,213e-6,-213e-6,212e-6,-211e-6,21e-5,-21e-5,209e-6,-208e-6,208e-6,-207e-6,206e-6,-205e-6,205e-6,-204e-6,203e-6,-202e-6,178e-6,-178e-6,177e-6,-176e-6,176e-6,-175e-6,174e-6,-174e-6,173e-6,-172e-6,172e-6,-171e-6,17e-5,-17e-5,169e-6,-168e-6,168e-6,-167e-6,166e-6,-166e-6,165e-6,-164e-6,164e-6,-163e-6,162e-6,-162e-6,161e-6,-16e-5,16e-5,-159e-6,158e-6,-158e-6,157e-6,-156e-6,156e-6,-155e-6,154e-6,-154e-6,153e-6,-152e-6,152e-6,-151e-6,15e-5,-149e-6,149e-6,-148e-6,147e-6,-147e-6,146e-6,-145e-6,145e-6,-144e-6,143e-6,-143e-6,142e-6,-141e-6,141e-6,-14e-5,139e-6,-138e-6,138e-6,-137e-6,136e-6,-136e-6,135e-6,-134e-6,134e-6,-133e-6,132e-6,-131e-6,131e-6,-13e-5,129e-6,-129e-6,128e-6,-127e-6,126e-6,-126e-6,125e-6,-124e-6,124e-6,-123e-6,122e-6,-121e-6,121e-6,-12e-5,119e-6,-118e-6,118e-6,-117e-6,116e-6,-116e-6,115e-6,-114e-6,113e-6,-113e-6,112e-6,-111e-6,111e-6,-11e-5,109e-6,-108e-6,108e-6,-107e-6,106e-6,-105e-6,105e-6,-104e-6,103e-6,-103e-6,102e-6,-101e-6,1e-4,-1e-4,99e-6,-98e-6,97e-6,-97e-6,96e-6,-95e-6,94e-6,-94e-6,93e-6,-92e-6,91e-6,-91e-6,9e-5,-89e-6,88e-6,-88e-6,87e-6,-86e-6,85e-6,-85e-6,84e-6,-83e-6,83e-6,-82e-6,81e-6,-8e-5,79e-6,-79e-6,78e-6,-77e-6,76e-6,-76e-6,75e-6,-74e-6,73e-6,-73e-6,72e-6,-71e-6,7e-5,-7e-5,69e-6,-68e-6,67e-6,-67e-6,66e-6,-65e-6,64e-6,-64e-6,63e-6,-62e-6,61e-6,-6e-5,6e-5,-59e-6,58e-6,-57e-6,57e-6,-56e-6,55e-6,-54e-6,52e-6,-51e-6,51e-6,-5e-5,49e-6,-48e-6,48e-6,-47e-6,46e-6,-45e-6,45e-6,-44e-6,43e-6,-42e-6,42e-6,-41e-6,4e-5,-39e-6,39e-6,-38e-6,37e-6,-36e-6,36e-6,-35e-6,34e-6,-33e-6,33e-6,-32e-6,31e-6,-3e-5,29e-6,-29e-6,28e-6,-27e-6,26e-6,-26e-6,25e-6,-24e-6,23e-6,-23e-6,22e-6,-21e-6,2e-5,-2e-5,19e-6,-18e-6,17e-6,-17e-6,16e-6,-15e-6,14e-6,-14e-6,13e-6,-12e-6,11e-6,-11e-6,1e-5,-9e-6,8e-6,-8e-6,7e-6,-6e-6,5e-6,-5e-6,4e-6,-3e-6,2e-6,-2e-6,1e-6,0,-1e-6,2e-6,-2e-6,3e-6,-4e-6,5e-6,-5e-6,6e-6,-7e-6,8e-6,-8e-6,9e-6,-1e-5,11e-6,-11e-6,12e-6,-13e-6,14e-6,-14e-6,15e-6,-16e-6,17e-6,-17e-6,18e-6,-19e-6,2e-5,-2e-5,21e-6,-22e-6,23e-6,-24e-6,24e-6,-25e-6,26e-6,-27e-6,27e-6,-28e-6,29e-6,-3e-5,3e-5,-31e-6,32e-6,-33e-6,33e-6,-34e-6,35e-6,-36e-6,36e-6,-37e-6,38e-6,-39e-6,39e-6,-4e-5,41e-6,-41e-6,42e-6,-43e-6,44e-6,-44e-6,45e-6,-46e-6,47e-6,-47e-6,48e-6,-49e-6,5e-5,-5e-5,51e-6,-52e-6,53e-6,-53e-6,54e-6,-55e-6,56e-6,-56e-6,57e-6,-58e-6,59e-6,-59e-6,6e-5,-61e-6,62e-6,-62e-6,63e-6,-64e-6,65e-6,-65e-6,66e-6,-67e-6,67e-6,-68e-6,69e-6,-7e-5,7e-5,-71e-6,72e-6,-73e-6,73e-6,-74e-6,75e-6,-75e-6,76e-6,-77e-6,78e-6,-78e-6,79e-6,-8e-5,8e-5,-81e-6,82e-6,-83e-6,83e-6,-84e-6,85e-6,-85e-6,86e-6,-87e-6,87e-6,-88e-6,89e-6,-9e-5,9e-5,-91e-6,92e-6,-92e-6,93e-6,-94e-6,95e-6,-95e-6,96e-6,-97e-6,97e-6,-98e-6,99e-6,-99e-6,1e-4,-101e-6,101e-6,-102e-6,103e-6,-104e-6,104e-6,-105e-6,106e-6,-106e-6,107e-6,-108e-6,108e-6,-109e-6,109e-6,-11e-5,111e-6,-112e-6,112e-6,-113e-6,114e-6,-114e-6,115e-6,-116e-6,116e-6,-117e-6,118e-6,-118e-6,119e-6,-119e-6,12e-5,-121e-6,121e-6,-122e-6,123e-6,-123e-6,124e-6,-125e-6,125e-6,-126e-6,126e-6,-127e-6,128e-6,-128e-6,129e-6,-13e-5,13e-5,-131e-6,131e-6,-132e-6,133e-6,-133e-6,134e-6,-135e-6,135e-6,-136e-6,136e-6,-137e-6,138e-6,-138e-6,139e-6,-139e-6,14e-5,-14e-5,141e-6,-142e-6,142e-6,-143e-6,144e-6,-144e-6,145e-6,-145e-6,146e-6,-146e-6,147e-6,-148e-6,148e-6,-149e-6,149e-6,-15e-5,15e-5,-151e-6,152e-6,-152e-6,153e-6,-153e-6,154e-6,-154e-6,155e-6,-155e-6,156e-6,-156e-6,157e-6,-157e-6,158e-6,-159e-6,159e-6,-16e-5,16e-5,-161e-6,161e-6,-162e-6,162e-6,-163e-6,163e-6,-164e-6,164e-6,-165e-6,165e-6,-166e-6,166e-6,-167e-6,178e-6,-178e-6,179e-6,-179e-6,18e-5,-18e-5,181e-6,-181e-6,182e-6,-182e-6,183e-6,-183e-6,184e-6,-184e-6,185e-6,-185e-6,186e-6,-186e-6,187e-6,-187e-6,188e-6,-188e-6,189e-6,-189e-6,19e-5,-19e-5,191e-6,-191e-6,191e-6,-192e-6,192e-6,-193e-6,193e-6,-194e-6,194e-6,-194e-6,195e-6,-195e-6,196e-6,-196e-6,197e-6,-197e-6,197e-6,-198e-6,198e-6,-199e-6,199e-6,-199e-6,2e-4,-2e-4,201e-6,-201e-6,201e-6,-202e-6,202e-6,-202e-6,203e-6,-203e-6,204e-6,-204e-6,204e-6,-205e-6,205e-6,-205e-6,206e-6,-206e-6,206e-6,-207e-6,207e-6,-207e-6,208e-6,-208e-6,208e-6,-209e-6,209e-6,-209e-6,209e-6,-21e-5,21e-5,-21e-5,211e-6,-211e-6,211e-6,-211e-6,212e-6,-212e-6,212e-6,-213e-6,213e-6,-213e-6,213e-6,-214e-6,214e-6,-214e-6,214e-6,-215e-6,215e-6,-215e-6,215e-6,-215e-6,216e-6,-216e-6,216e-6,-216e-6,217e-6,-217e-6,217e-6,-217e-6,217e-6,-217e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-217e-6,217e-6,-217e-6,217e-6,-217e-6,216e-6,-216e-6,216e-6,-216e-6,215e-6,-215e-6,215e-6,-215e-6,215e-6,-214e-6,214e-6,-214e-6,213e-6,-213e-6,213e-6,-213e-6,212e-6,-212e-6,212e-6,-211e-6,211e-6,-211e-6,211e-6,-21e-5,21e-5,-21e-5,209e-6,-209e-6,209e-6,-208e-6,208e-6,-208e-6,207e-6,-207e-6,207e-6,-206e-6,206e-6,-205e-6,205e-6,-205e-6,204e-6,-204e-6,204e-6,-203e-6,203e-6,-202e-6,202e-6,-202e-6,201e-6,-201e-6,2e-4,-2e-4,199e-6,-199e-6,199e-6,-198e-6,198e-6,-197e-6,197e-6,-196e-6,196e-6,-195e-6,195e-6,-194e-6,194e-6,-193e-6,193e-6,-192e-6,192e-6,-191e-6,191e-6,-19e-5,19e-5,-189e-6,189e-6,-188e-6,188e-6,-187e-6,187e-6,-186e-6,186e-6,-185e-6,185e-6,-184e-6,183e-6,-183e-6,182e-6,-182e-6,181e-6,-181e-6,18e-5,-179e-6,179e-6,-178e-6,178e-6,-177e-6,176e-6,-176e-6,175e-6,-175e-6,174e-6,-173e-6,173e-6,-172e-6,171e-6,-171e-6,17e-5,-169e-6,169e-6,-168e-6,167e-6,-167e-6,166e-6,-165e-6,165e-6,-164e-6,163e-6,-163e-6,162e-6,-161e-6,161e-6,-16e-5,159e-6,-158e-6,158e-6,-157e-6,156e-6,-156e-6,155e-6,-154e-6,153e-6,-153e-6,152e-6,-151e-6,15e-5,-15e-5,149e-6,-148e-6,147e-6,-147e-6,146e-6,-145e-6,144e-6,-143e-6,143e-6,-142e-6,141e-6,-14e-5,139e-6,-139e-6,138e-6,-137e-6,136e-6,-135e-6,135e-6,-134e-6,133e-6,-132e-6,131e-6,-13e-5,13e-5,-129e-6,128e-6,-127e-6,126e-6,-125e-6,125e-6,-124e-6,123e-6,-122e-6,121e-6,-12e-5,119e-6,-118e-6,118e-6,-117e-6,116e-6,-115e-6,114e-6,-113e-6,112e-6,-111e-6,11e-5,-11e-5,109e-6,-108e-6,107e-6,-106e-6,105e-6,-104e-6,103e-6,-102e-6,101e-6,-1e-4,99e-6,-99e-6,98e-6,-97e-6,96e-6,-95e-6,94e-6,-93e-6,92e-6,-91e-6,9e-5,-89e-6,88e-6,-87e-6,86e-6,-85e-6,84e-6,-83e-6,82e-6,-81e-6,8e-5,-79e-6,78e-6,-77e-6,76e-6,-75e-6,74e-6,-73e-6,72e-6,-71e-6,7e-5,-69e-6,68e-6,-67e-6,66e-6,-65e-6,64e-6,-63e-6,62e-6,-61e-6,6e-5,-59e-6,58e-6,-57e-6,56e-6,-55e-6,54e-6,-53e-6,52e-6,-51e-6,5e-5,-49e-6,48e-6,-47e-6,46e-6,-45e-6,44e-6,-43e-6,42e-6,-41e-6,4e-5,-39e-6,38e-6,-37e-6,36e-6,-35e-6,33e-6,-32e-6,31e-6,-3e-5,29e-6,-28e-6,27e-6,-26e-6,25e-6,-24e-6,23e-6,-22e-6,21e-6,-2e-5,19e-6,-18e-6,17e-6,-16e-6,14e-6,-13e-6,12e-6,-11e-6,1e-5,-9e-6,8e-6,-7e-6,6e-6,-5e-6,4e-6,-3e-6,2e-6,-1e-6,0,1e-6,-3e-6,4e-6,-5e-6,6e-6,-7e-6,8e-6,-9e-6,1e-5,-11e-6,12e-6,-13e-6,14e-6,-15e-6,16e-6,-17e-6,18e-6,-2e-5,21e-6,-22e-6,23e-6,-24e-6,25e-6,-26e-6,27e-6,-28e-6,29e-6,-3e-5,31e-6,-32e-6,33e-6,-34e-6,35e-6,-36e-6,37e-6,-38e-6,39e-6,-41e-6,41e-6,-43e-6,44e-6,-45e-6,46e-6,-47e-6,48e-6,-49e-6,5e-5,-51e-6,52e-6,-53e-6,54e-6,-55e-6,56e-6,-57e-6,58e-6,-59e-6,6e-5,-61e-6,62e-6,-63e-6,64e-6,-65e-6,66e-6,-67e-6,68e-6,-69e-6,7e-5,-71e-6,72e-6,-73e-6,74e-6,-75e-6,76e-6,-77e-6,78e-6,-79e-6,8e-5,-81e-6,82e-6,-83e-6,84e-6,-85e-6,86e-6,-87e-6,88e-6,-89e-6,9e-5,-9e-5,91e-6,-92e-6,93e-6,-94e-6,95e-6,-96e-6,97e-6,-98e-6,99e-6,-1e-4,101e-6,-101e-6,102e-6,-103e-6,104e-6,-105e-6,106e-6,-107e-6,108e-6,-109e-6,109e-6,-11e-5,111e-6,-112e-6,113e-6,-114e-6,115e-6,-116e-6,116e-6,-117e-6,118e-6,-119e-6,12e-5,-121e-6,121e-6,-122e-6,123e-6,-124e-6,125e-6,-125e-6,126e-6,-127e-6,128e-6,-129e-6,129e-6,-13e-5,131e-6,-132e-6,133e-6,-133e-6,134e-6,-135e-6,136e-6,-149e-6,15e-5,-151e-6,152e-6,-153e-6,153e-6,-154e-6,155e-6,-156e-6,157e-6,-157e-6,158e-6,-159e-6,16e-5,-16e-5,161e-6,-162e-6,163e-6,-163e-6,164e-6,-165e-6,165e-6,-166e-6,167e-6,-168e-6,168e-6,-169e-6,17e-5,-17e-5,171e-6,-172e-6,172e-6,-173e-6,174e-6,-174e-6,175e-6,-175e-6,176e-6,-177e-6,177e-6,-178e-6,178e-6,-179e-6,18e-5,-18e-5,181e-6,-181e-6,182e-6,-182e-6,183e-6,-184e-6,184e-6,-185e-6,185e-6,-186e-6,186e-6,-187e-6,187e-6,-188e-6,188e-6,-189e-6,189e-6,-19e-5,19e-5,-19e-5,191e-6,-191e-6,192e-6,-192e-6,193e-6,-193e-6,193e-6,-194e-6,194e-6,-195e-6,195e-6,-195e-6,196e-6,-196e-6,196e-6,-197e-6,197e-6,-197e-6,198e-6,-198e-6,198e-6,-199e-6,199e-6,-199e-6,199e-6,-2e-4,2e-4,-2e-4,2e-4,-201e-6,201e-6,-201e-6,201e-6,-201e-6,202e-6,-202e-6,202e-6,-202e-6,202e-6,-203e-6,203e-6,-203e-6,203e-6,-203e-6,203e-6,-203e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6],imag:[0,.341455,-1e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-3e-6,3e-6,-3e-6,6e-6,-6e-6,6e-6,-16e-6,16e-6,-28e-6,64e-6,-66e-6,7e-5,-58e-6,6e-5,-62e-6,53e-6,-54e-6,46e-6,-33e-6,34e-6,-19e-6,13e-6,-9e-6,9e-6,-1e-5,1e-5,-1e-5,1e-5,-9e-6,9e-6,-9e-6,1e-5,-1e-5,11e-6,-13e-6,14e-6,-14e-6,14e-6,-15e-6,15e-6,-15e-6,15e-6,-16e-6,16e-6,-16e-6,17e-6,-18e-6,18e-6,-19e-6,19e-6,-19e-6,2e-5,-2e-5,2e-5,-21e-6,21e-6,-21e-6,21e-6,-22e-6,22e-6,-23e-6,23e-6,-23e-6,24e-6,-24e-6,24e-6,-25e-6,25e-6,-25e-6,26e-6,-26e-6,26e-6,-27e-6,27e-6,-27e-6,28e-6,-28e-6,28e-6,-29e-6,29e-6,-3e-5,3e-5,-3e-5,31e-6,-31e-6,31e-6,-32e-6,32e-6,-33e-6,33e-6,-33e-6,34e-6,-34e-6,35e-6,-35e-6,35e-6,-36e-6,36e-6,-36e-6,4e-5,-41e-6,41e-6,-42e-6,42e-6,-43e-6,43e-6,-44e-6,44e-6,-44e-6,45e-6,-45e-6,46e-6,-46e-6,47e-6,-47e-6,48e-6,-48e-6,49e-6,-49e-6,49e-6,-5e-5,5e-5,-51e-6,51e-6,-52e-6,52e-6,-53e-6,53e-6,-54e-6,54e-6,-55e-6,55e-6,-56e-6,56e-6,-57e-6,57e-6,-58e-6,58e-6,-59e-6,59e-6,-6e-5,6e-5,-61e-6,61e-6,-62e-6,62e-6,-63e-6,63e-6,-64e-6,64e-6,-65e-6,65e-6,-66e-6,66e-6,-67e-6,67e-6,-68e-6,68e-6,-69e-6,69e-6,-7e-5,7e-5,-71e-6,71e-6,-72e-6,72e-6,-73e-6,74e-6,-74e-6,75e-6,-75e-6,76e-6,-76e-6,77e-6,-52e-6,52e-6,-53e-6,55e-6,-55e-6,55e-6,-56e-6,56e-6,-57e-6,57e-6,-57e-6,58e-6,-58e-6,58e-6,-59e-6,59e-6,-63e-6,64e-6,-64e-6,65e-6,-65e-6,65e-6,-66e-6,66e-6,-67e-6,67e-6,-67e-6,68e-6,-68e-6,69e-6,-69e-6,7e-5,-7e-5,7e-5,-71e-6,71e-6,-72e-6,79e-6,-8e-5,8e-5,-81e-6,81e-6,-84e-6,85e-6,-85e-6,86e-6,-86e-6,87e-6,-87e-6,88e-6,-88e-6,88e-6,-89e-6,9e-5,-9e-5,91e-6,-91e-6,92e-6,-92e-6,92e-6,-93e-6,94e-6,-94e-6,95e-6,-95e-6,96e-6,-96e-6,97e-6,-97e-6,98e-6,-98e-6,96e-6,-96e-6,97e-6,-97e-6,98e-6,-98e-6,96e-6,-96e-6,97e-6,-97e-6,98e-6,-98e-6,99e-6,-99e-6,1e-4,-1e-4,101e-6,-101e-6,102e-6,-102e-6,103e-6,-103e-6,104e-6,-104e-6,105e-6,-105e-6,106e-6,-106e-6,107e-6,-107e-6,108e-6,-108e-6,109e-6,-109e-6,11e-5,-11e-5,111e-6,-111e-6,112e-6,-112e-6,113e-6,-113e-6,114e-6,-114e-6,115e-6,-115e-6,116e-6,-116e-6,117e-6,-118e-6,118e-6,-119e-6,119e-6,-12e-5,12e-5,-121e-6,121e-6,-122e-6,122e-6,-123e-6,123e-6,-128e-6,128e-6,-129e-6,129e-6,-13e-5,13e-5,-131e-6,131e-6,-132e-6,133e-6,-133e-6,134e-6,-134e-6,135e-6,-135e-6,136e-6,-136e-6,137e-6,-138e-6,138e-6,-139e-6,139e-6,-14e-5,14e-5,-141e-6,142e-6,-142e-6,143e-6,-143e-6,144e-6,-144e-6,145e-6,-145e-6,146e-6,-147e-6,147e-6,-148e-6,148e-6,-149e-6,149e-6,-15e-5,151e-6,-151e-6,152e-6,-152e-6,153e-6,-153e-6,154e-6,-155e-6,155e-6,-156e-6,156e-6,-157e-6,158e-6,-158e-6,159e-6,-159e-6,16e-5,-16e-5,161e-6,-162e-6,162e-6,-163e-6,163e-6,-164e-6,164e-6,-165e-6,166e-6,-161e-6,162e-6,-162e-6,163e-6,-163e-6,164e-6,-165e-6,165e-6,-166e-6,166e-6,-167e-6,168e-6,-168e-6,169e-6,-169e-6,17e-5,-17e-5,171e-6,-171e-6,172e-6,-173e-6,173e-6,-174e-6,174e-6,-175e-6,176e-6,-176e-6,177e-6,-177e-6,178e-6,-179e-6,179e-6,-18e-5,18e-5,-181e-6,181e-6,-182e-6,182e-6,-183e-6,184e-6,-184e-6,185e-6,-185e-6,186e-6,-187e-6,187e-6,-188e-6,188e-6,-189e-6,19e-5,-19e-5,191e-6,-191e-6,192e-6,-192e-6,193e-6,-194e-6,194e-6,-195e-6,195e-6,-196e-6,197e-6,-197e-6,198e-6,-198e-6,199e-6,-2e-4,2e-4,-201e-6,201e-6,-173e-6,174e-6,-174e-6,175e-6,-175e-6,176e-6,-176e-6,177e-6,-177e-6,178e-6,-178e-6,179e-6,-179e-6,18e-5,-18e-5,181e-6,-181e-6,182e-6,-182e-6,183e-6,-183e-6,184e-6,-184e-6,185e-6,-185e-6,186e-6,-186e-6,187e-6,-187e-6,188e-6,-188e-6,189e-6,-19e-5,19e-5,-191e-6,191e-6,-192e-6,192e-6,-193e-6,193e-6,-194e-6,194e-6,-195e-6,195e-6,-196e-6,196e-6,-197e-6,197e-6,-198e-6,198e-6,-199e-6,199e-6,-2e-4,2e-4,-201e-6,201e-6,-202e-6,202e-6,-203e-6,203e-6,-204e-6,204e-6,-205e-6,205e-6,-206e-6,206e-6,-207e-6,207e-6,-208e-6,208e-6,-209e-6,209e-6,-21e-5,21e-5,-211e-6,211e-6,-212e-6,213e-6,-213e-6,213e-6,-214e-6,215e-6,-215e-6,216e-6,-216e-6,217e-6,-217e-6,218e-6,-218e-6,219e-6,-219e-6,22e-5,-22e-5,221e-6,-221e-6,222e-6,-222e-6,223e-6,-223e-6,224e-6,-224e-6,225e-6,-225e-6,226e-6,-226e-6,227e-6,-227e-6,201e-6,-202e-6,202e-6,-203e-6,203e-6,-204e-6,204e-6,-205e-6,205e-6,-205e-6,206e-6,-206e-6,207e-6,-207e-6,208e-6,-208e-6,209e-6,-209e-6,21e-5,-21e-5,21e-5,-211e-6,211e-6,-212e-6,212e-6,-213e-6,213e-6,-214e-6,214e-6,-214e-6,215e-6,-215e-6,216e-6,-216e-6,217e-6,-217e-6,218e-6,-218e-6,218e-6,-219e-6,219e-6,-22e-5,22e-5,-221e-6,221e-6,-221e-6,222e-6,-222e-6,223e-6,-223e-6,224e-6,-224e-6,224e-6,-225e-6,225e-6,-226e-6,226e-6,-227e-6,227e-6,-227e-6,228e-6,-228e-6,229e-6,-229e-6,23e-5,-23e-5,23e-5,-231e-6,231e-6,-232e-6,232e-6,-233e-6,233e-6,-234e-6,234e-6,-234e-6,235e-6,-235e-6,236e-6,-236e-6,236e-6,-237e-6,237e-6,-238e-6,238e-6,-238e-6,239e-6,-239e-6,24e-5,-24e-5,226e-6,-227e-6,227e-6,-227e-6,228e-6,-228e-6,229e-6,-229e-6,229e-6,-23e-5,23e-5,-23e-5,231e-6,-231e-6,232e-6,-232e-6,232e-6,-233e-6,233e-6,-234e-6,234e-6,-234e-6,235e-6,-235e-6,235e-6,-236e-6,236e-6,-237e-6,237e-6,-237e-6,238e-6,-238e-6,238e-6,-239e-6,239e-6,-239e-6,24e-5,-24e-5,241e-6,-241e-6,241e-6,-242e-6,242e-6,-242e-6,243e-6,-243e-6,243e-6,-244e-6,244e-6,-244e-6,245e-6,-245e-6,246e-6,-246e-6,246e-6,-247e-6,247e-6,-247e-6,248e-6,-248e-6,248e-6,-249e-6,249e-6,-249e-6,25e-5,-25e-5,25e-5,-251e-6,251e-6,-251e-6,252e-6,-252e-6,252e-6,-253e-6,253e-6,-253e-6,254e-6,-254e-6,254e-6,-255e-6,255e-6,-255e-6,256e-6,-256e-6,256e-6,-257e-6,257e-6,-257e-6,258e-6,-258e-6,258e-6,-259e-6,259e-6,-259e-6,26e-5,-26e-5,26e-5,-26e-5,261e-6,-261e-6,231e-6,-231e-6,232e-6,-232e-6,232e-6,-232e-6,233e-6,-233e-6,233e-6,-234e-6,234e-6,-234e-6,234e-6,-235e-6,235e-6,-235e-6,235e-6,-236e-6,236e-6,-236e-6,236e-6,-237e-6,237e-6,-237e-6,237e-6,-238e-6,238e-6,-238e-6,238e-6,-239e-6,239e-6,-239e-6,239e-6,-239e-6,24e-5,-24e-5,24e-5,-24e-5,241e-6,-241e-6,241e-6,-241e-6,242e-6,-242e-6,242e-6,-242e-6,242e-6,-243e-6,243e-6,-243e-6,243e-6,-244e-6,244e-6,-244e-6,244e-6,-244e-6,245e-6,-245e-6,245e-6,-245e-6,245e-6,-246e-6,246e-6,-246e-6,246e-6,-246e-6,247e-6,-247e-6,247e-6,-247e-6,247e-6,-248e-6,248e-6,-248e-6,248e-6,-248e-6,248e-6,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-252e-6,252e-6,-252e-6,252e-6,-252e-6,252e-6,-252e-6,253e-6,-253e-6,253e-6,-253e-6,253e-6,-253e-6,253e-6,-254e-6,254e-6,-254e-6,254e-6,-254e-6,254e-6,-254e-6,254e-6,-255e-6,255e-6,-255e-6,255e-6,-255e-6,255e-6,-255e-6,255e-6,-255e-6,256e-6,-256e-6,256e-6,-256e-6,256e-6,-256e-6,256e-6,-256e-6,256e-6,-256e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,259e-6,-259e-6,259e-6,-259e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-248e-6,248e-6,-248e-6,248e-6,-248e-6,248e-6,-248e-6,248e-6,-248e-6,247e-6,-247e-6,247e-6,-247e-6,247e-6,-247e-6,247e-6,-247e-6,246e-6,-246e-6,246e-6,-246e-6,246e-6,-246e-6,246e-6,-245e-6,245e-6,-245e-6,245e-6,-245e-6,245e-6,-245e-6,244e-6,-244e-6,244e-6,-244e-6,244e-6,-243e-6,243e-6,-243e-6,243e-6,-243e-6,243e-6,-242e-6,242e-6,-242e-6,242e-6,-242e-6,241e-6,-241e-6,241e-6,-241e-6,241e-6,-24e-5,24e-5,-24e-5,24e-5,-239e-6,239e-6,-239e-6,239e-6,-239e-6,238e-6,-238e-6,238e-6,-238e-6,237e-6,-237e-6,237e-6,-237e-6,236e-6,-236e-6,236e-6,-236e-6,235e-6,-235e-6,235e-6,-235e-6,234e-6,-234e-6,234e-6,-233e-6,233e-6,-233e-6,233e-6,-232e-6,232e-6,-232e-6,231e-6,-231e-6,231e-6,-231e-6,23e-5,-23e-5,23e-5,-229e-6,229e-6,-229e-6,228e-6,-228e-6,228e-6,-227e-6,227e-6,-227e-6,226e-6,-226e-6,226e-6,-225e-6,225e-6,-225e-6,224e-6,-224e-6,224e-6,-223e-6,223e-6,-223e-6,222e-6,-222e-6,222e-6,-221e-6,221e-6,-22e-5,22e-5,-22e-5,219e-6,-219e-6,218e-6,-218e-6,218e-6,-217e-6,217e-6,-217e-6,216e-6,-216e-6,215e-6,-215e-6,214e-6,-214e-6,214e-6,-213e-6,213e-6,-212e-6,212e-6,-212e-6,211e-6,-211e-6,21e-5,-21e-5,209e-6,-209e-6,209e-6,-208e-6,208e-6,-207e-6,207e-6,-206e-6,206e-6,-205e-6,205e-6,-204e-6,204e-6,-203e-6,203e-6,-203e-6,202e-6,-202e-6,201e-6,-201e-6,2e-4,-2e-4,199e-6,-199e-6,198e-6,-198e-6,197e-6,-197e-6,196e-6,-196e-6,195e-6,-195e-6,194e-6,-194e-6,193e-6,-193e-6,192e-6,-191e-6,191e-6,-19e-5,19e-5,-189e-6,189e-6,-188e-6,188e-6,-187e-6,187e-6,-186e-6,185e-6,-185e-6,184e-6,-184e-6,183e-6,-183e-6,182e-6,-182e-6,181e-6,-18e-5,18e-5,-179e-6,179e-6,-178e-6,177e-6,-177e-6,176e-6,-176e-6,175e-6,-175e-6,174e-6,-173e-6,173e-6,-172e-6,172e-6,-171e-6,17e-5,-17e-5,169e-6,-168e-6,168e-6,-167e-6,167e-6,-166e-6,165e-6,-165e-6,164e-6,-163e-6,163e-6,-162e-6,161e-6,-161e-6,16e-5,-16e-5,159e-6,-158e-6,158e-6,-157e-6,156e-6,-156e-6,155e-6,-154e-6,154e-6,-153e-6,152e-6,-152e-6,151e-6,-15e-5,149e-6,-149e-6,148e-6,-147e-6,147e-6,-155e-6,155e-6,-154e-6,153e-6,-152e-6,152e-6,-151e-6,15e-5,-149e-6,149e-6,-148e-6,147e-6,-146e-6,145e-6,-145e-6,144e-6,-143e-6,142e-6,-142e-6,141e-6,-14e-5,139e-6,-139e-6,138e-6,-137e-6,136e-6,-135e-6,135e-6,-134e-6,133e-6,-132e-6,131e-6,-131e-6,13e-5,-129e-6,128e-6,-127e-6,127e-6,-126e-6,125e-6,-124e-6,123e-6,-122e-6,122e-6,-121e-6,12e-5,-119e-6,118e-6,-117e-6,117e-6,-116e-6,115e-6,-114e-6,113e-6,-112e-6,111e-6,-111e-6,11e-5,-109e-6,108e-6,-107e-6,107e-6,-106e-6,105e-6,-104e-6,103e-6,-102e-6,101e-6,-1e-4,1e-4,-99e-6,98e-6,-97e-6,96e-6,-95e-6,94e-6,-93e-6,93e-6,-92e-6,91e-6,-9e-5,89e-6,-88e-6,87e-6,-86e-6,85e-6,-85e-6,84e-6,-83e-6,82e-6,-81e-6,8e-5,-79e-6,78e-6,-77e-6,77e-6,-76e-6,75e-6,-74e-6,73e-6,-72e-6,71e-6,-7e-5,69e-6,-68e-6,67e-6,-66e-6,65e-6,-65e-6,64e-6,-63e-6,62e-6,-61e-6,6e-5,-59e-6,58e-6,-57e-6,56e-6,-55e-6,54e-6,-53e-6,52e-6,-52e-6,51e-6,-5e-5,49e-6,-48e-6,47e-6,-46e-6,45e-6,-44e-6,43e-6,-42e-6,41e-6,-4e-5,39e-6,-38e-6,37e-6,-36e-6,35e-6,-35e-6,34e-6,-33e-6,32e-6,-31e-6,3e-5,-29e-6,28e-6,-27e-6,26e-6,-25e-6,24e-6,-23e-6,22e-6,-21e-6,2e-5,-19e-6,18e-6,-17e-6,16e-6,-15e-6,15e-6,-14e-6,13e-6,-12e-6,11e-6,-1e-5,9e-6,-8e-6,7e-6,-6e-6,5e-6,-4e-6,3e-6,-2e-6,1e-6,0,-1e-6,2e-6,-3e-6,4e-6,-5e-6,6e-6,-7e-6,8e-6,-8e-6,9e-6,-1e-5,11e-6,-12e-6,13e-6,-14e-6,15e-6,-16e-6,17e-6,-18e-6,19e-6,-2e-5,21e-6,-22e-6,23e-6,-24e-6,25e-6,-26e-6,27e-6,-28e-6,29e-6,-3e-5,31e-6,-31e-6,32e-6,-33e-6,34e-6,-35e-6,36e-6,-37e-6,38e-6,-39e-6,4e-5,-41e-6,42e-6,-43e-6,44e-6,-45e-6,46e-6,-47e-6,47e-6,-48e-6,49e-6,-5e-5,51e-6,-52e-6,53e-6,-54e-6,55e-6,-56e-6,57e-6,-58e-6,59e-6,-6e-5,61e-6,-61e-6,62e-6,-63e-6,64e-6,-65e-6,66e-6,-67e-6,68e-6,-69e-6,7e-5,-71e-6,72e-6,-72e-6,73e-6,-74e-6,75e-6,-76e-6,77e-6,-78e-6,79e-6,-8e-5,8e-5,-81e-6,82e-6,-83e-6,84e-6,-85e-6,86e-6,-87e-6,88e-6,-88e-6,89e-6,-9e-5,91e-6,-92e-6,93e-6,-94e-6,94e-6,-95e-6,96e-6,-97e-6,98e-6,-99e-6,1e-4,-1e-4,101e-6,-102e-6,103e-6,-104e-6,105e-6,-105e-6,106e-6,-107e-6,108e-6,-109e-6,11e-5,-11e-5,111e-6,-112e-6,113e-6,-114e-6,115e-6,-115e-6,116e-6,-117e-6,118e-6,-119e-6,119e-6,-12e-5,121e-6,-122e-6,122e-6,-123e-6,124e-6,-125e-6,126e-6,-126e-6,127e-6,-128e-6,129e-6,-129e-6,13e-5,-131e-6,132e-6,-132e-6,133e-6,-134e-6,135e-6,-135e-6,136e-6,-137e-6,138e-6,-138e-6,139e-6,-14e-5,14e-5,-141e-6,142e-6,-142e-6,143e-6,-144e-6,145e-6,-145e-6,146e-6,-147e-6,147e-6,-148e-6,149e-6,-149e-6,15e-5,-151e-6,151e-6,-152e-6,153e-6,-153e-6,154e-6,-155e-6,155e-6,-156e-6,156e-6,-157e-6,158e-6,-158e-6,159e-6,-16e-5,16e-5,-161e-6,161e-6,-162e-6,162e-6,-163e-6,164e-6,-164e-6,165e-6,-165e-6,166e-6,-167e-6,167e-6,-168e-6,168e-6,-169e-6,169e-6,-17e-5,17e-5,-171e-6,171e-6,-172e-6,172e-6,-173e-6,173e-6,-174e-6,174e-6,-175e-6,175e-6,-176e-6,176e-6,-177e-6,177e-6,-178e-6,178e-6,-179e-6,179e-6,-18e-5,18e-5,-181e-6,181e-6,-181e-6,182e-6,-182e-6,183e-6,-183e-6,184e-6,-184e-6,184e-6,-185e-6,185e-6,-186e-6,186e-6,-186e-6,187e-6,-187e-6,187e-6,-188e-6,188e-6,-188e-6,189e-6,-189e-6,19e-5,-19e-5,19e-5,-19e-5,191e-6,-191e-6,191e-6,-192e-6,192e-6,-192e-6,193e-6,-193e-6,193e-6,-193e-6,194e-6,-194e-6,194e-6,-194e-6,195e-6,-195e-6,195e-6,-195e-6,196e-6,-196e-6,196e-6,-196e-6,196e-6,-197e-6,197e-6,-197e-6,197e-6,-197e-6,198e-6,-198e-6,198e-6,-198e-6,198e-6,-198e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,198e-6,-198e-6,198e-6,-198e-6,198e-6,-198e-6,197e-6,-197e-6,197e-6,-197e-6,197e-6,-196e-6,196e-6,-196e-6,196e-6,-196e-6,195e-6,-195e-6,195e-6,-195e-6,194e-6,-194e-6,194e-6,-193e-6,193e-6,-193e-6,193e-6,-192e-6,192e-6,-192e-6,191e-6,-191e-6,191e-6,-19e-5,19e-5,-19e-5,189e-6,-189e-6,189e-6,-188e-6,188e-6,-188e-6,187e-6,-187e-6,186e-6,-186e-6,186e-6,-185e-6,185e-6,-184e-6,184e-6,-183e-6,183e-6,-183e-6,182e-6,-182e-6,181e-6,-181e-6,18e-5,-18e-5,179e-6,-179e-6,178e-6,-178e-6,177e-6,-177e-6,176e-6,-176e-6,175e-6,-175e-6,174e-6,-174e-6,173e-6,-173e-6,172e-6,-171e-6,171e-6,-17e-5,17e-5,-169e-6,168e-6,-168e-6,167e-6,-167e-6,166e-6,-165e-6,165e-6,-164e-6,164e-6,-163e-6,162e-6,-162e-6,161e-6,-16e-5,16e-5,-159e-6,158e-6,-158e-6,157e-6,-156e-6,156e-6,-155e-6,154e-6,-153e-6,153e-6,-152e-6,151e-6,-151e-6,15e-5,-149e-6,148e-6,-148e-6,147e-6,-146e-6,145e-6,-145e-6,144e-6,-143e-6,142e-6,-142e-6,141e-6,-14e-5,139e-6,-138e-6,138e-6,-137e-6,149e-6,-148e-6,147e-6,-146e-6,145e-6,-144e-6,144e-6,-143e-6,142e-6,-141e-6,14e-5,-139e-6,138e-6,-137e-6,136e-6,-135e-6,134e-6,-133e-6,132e-6,-131e-6,13e-5,-129e-6,128e-6,-127e-6,126e-6,-125e-6,124e-6,-123e-6,122e-6,-121e-6,12e-5,-119e-6,118e-6,-117e-6,116e-6,-115e-6,114e-6,-113e-6,112e-6,-111e-6,11e-5,-108e-6,107e-6,-106e-6,105e-6,-104e-6,103e-6,-102e-6,101e-6,-1e-4,99e-6,-98e-6,96e-6,-95e-6,94e-6,-93e-6,92e-6,-91e-6,9e-5,-89e-6,87e-6,-86e-6,85e-6,-84e-6,83e-6,-82e-6,8e-5,-79e-6,78e-6,-77e-6,76e-6,-75e-6,74e-6,-72e-6,71e-6,-7e-5,69e-6,-68e-6,66e-6,-65e-6,64e-6,-63e-6,62e-6,-61e-6,59e-6,-58e-6,57e-6,-56e-6,54e-6,-53e-6,52e-6,-51e-6,5e-5,-48e-6,47e-6,-46e-6,45e-6,-43e-6,42e-6,-41e-6,4e-5,-39e-6,37e-6,-36e-6,35e-6,-34e-6,32e-6,-31e-6,3e-5,-29e-6,27e-6,-26e-6,25e-6,-24e-6,23e-6,-21e-6,2e-5,-19e-6,18e-6,-16e-6,15e-6,-14e-6,13e-6,-11e-6,1e-5,-9e-6,8e-6,-6e-6,5e-6,-4e-6,3e-6,-1e-6]}},{}],11:[function(require,module,exports){module.exports={real:[0,-1e-6,-.085114,.113655,-.053293,.034018,-.024299,.01707,-.015971,.01553,-.012639,.011335,-.011541,.01043,-.009167,.008078,-.007356,.007138,-.006327,.005447,-.00315,.002063,-.001783,.00164,-.001605,.001391,-.001283,.001259,-.001237,.001178,-.001159,.00114,-.001193,.001249,-.001231,.00133,-.001312,.001419,-.001489,.00147,-.001641,.001723,-.002245,.002587,-.003811,.004531,-.005556,.007028,-.009168,.010259,-.011842,.013671,-.013539,.01383,-.012496,.012382,-.010525,.008948,-.007155,.00476,-.004305,.003046,-.003021,.002571,-.002399,.002042,-.002026,.002011,-.001766,.0017,-.001688,.001676,-.001664,.001653,-.001641,.001681,-.00167,.002057,-.002044,.002031,-.002213,.0022,-.002186,.002311,-.002297,.002283,-.002647,.002631,-.002617,.002602,-.002751,.002736,-.002721,.002878,-.002863,.002936,-.002664,.00257,-.002804,.002877,-.002862,.002848,-.003204,.003189,-.003174,.003158,-.003144,.003129,-.003114,.0031,-.003086,.003072,-.003058,.00314,-.003126,.003112,-.003099,.003086,-.003073,.00306,-.003047,.003034,-.002756,.002745,-.002734,.002723,-.002712,.002701,-.002691,.00268,-.00267,.00266,-.00265,.00264,-.00263,.00262,-.00261,.002601,-.002591,.002582,-.002573,.002486,-.002477,.002469,-.00246,.002452,-.002443,.002435,-.002081,.002074,-.002067,.002061,-.002054,.002047,-.001861,.001855,-.001849,.001843,-.001837,.001831,-.001826,.001711,-.001706,.001701,-.001696,.001691,-.001685,.00168,-.001576,.001571,-.001566,.001562,-.001557,.001553,-.001456,.001452,-.001447,.001443,-.001439,.001435,-.001388,.001384,-.00138,.001376,-.001041,.001038,-.001036,.001033,-.00103,.001027,-.001025,.001022,-874e-6,872e-6,-87e-5,867e-6,-865e-6,837e-6,-835e-6,833e-6,-757e-6,755e-6,-754e-6,752e-6,-663e-6,662e-6,-66e-5,658e-6,-.001141,.001138,-.001136,.001133,-.00113,.001128,-755e-6,753e-6,-751e-6,773e-6,-771e-6,769e-6,-767e-6,766e-6,-764e-6,762e-6,-76e-5,759e-6,-757e-6,755e-6,-753e-6,752e-6,-798e-6,796e-6,-794e-6,792e-6,-791e-6,789e-6,-787e-6,786e-6,-784e-6,782e-6,-78e-5,779e-6,-777e-6,775e-6,-774e-6,772e-6,-771e-6,769e-6,-767e-6,766e-6,-764e-6,836e-6,-835e-6,833e-6,-831e-6,829e-6,-854e-6,852e-6,-85e-5,848e-6,-847e-6,845e-6,-843e-6,842e-6,-84e-5,838e-6,-837e-6,835e-6,-833e-6,832e-6,-83e-5,829e-6,-827e-6,825e-6,-824e-6,822e-6,-821e-6,819e-6,-818e-6,816e-6,-815e-6,813e-6,-812e-6,81e-5,-809e-6,783e-6,-781e-6,78e-5,-778e-6,777e-6,-775e-6,751e-6,-749e-6,748e-6,-747e-6,745e-6,-744e-6,743e-6,-741e-6,74e-5,-739e-6,737e-6,-736e-6,735e-6,-733e-6,732e-6,-731e-6,729e-6,-728e-6,727e-6,-726e-6,724e-6,-723e-6,722e-6,-721e-6,719e-6,-718e-6,717e-6,-716e-6,714e-6,-713e-6,712e-6,-711e-6,71e-5,-708e-6,707e-6,-706e-6,705e-6,-704e-6,702e-6,-701e-6,7e-4,-699e-6,698e-6,-697e-6,696e-6,-694e-6,693e-6,-692e-6,691e-6,-69e-5,689e-6,-688e-6,686e-6,-685e-6,684e-6,-704e-6,703e-6,-702e-6,701e-6,-7e-4,699e-6,-698e-6,696e-6,-695e-6,694e-6,-693e-6,692e-6,-691e-6,69e-5,-689e-6,688e-6,-686e-6,685e-6,-684e-6,683e-6,-682e-6,681e-6,-68e-5,679e-6,-678e-6,677e-6,-676e-6,675e-6,-674e-6,672e-6,-671e-6,67e-5,-669e-6,668e-6,-667e-6,666e-6,-665e-6,664e-6,-663e-6,662e-6,-661e-6,66e-5,-659e-6,658e-6,-657e-6,656e-6,-655e-6,654e-6,-653e-6,652e-6,-651e-6,65e-5,-649e-6,648e-6,-647e-6,646e-6,-645e-6,644e-6,-643e-6,642e-6,-641e-6,64e-5,-639e-6,638e-6,-637e-6,636e-6,-635e-6,634e-6,-614e-6,613e-6,-612e-6,611e-6,-61e-5,609e-6,-608e-6,607e-6,-607e-6,606e-6,-605e-6,604e-6,-603e-6,602e-6,-601e-6,6e-4,-599e-6,598e-6,-597e-6,596e-6,-596e-6,595e-6,-594e-6,593e-6,-592e-6,591e-6,-59e-5,589e-6,-588e-6,587e-6,-587e-6,586e-6,-585e-6,584e-6,-583e-6,582e-6,-581e-6,58e-5,-579e-6,579e-6,-578e-6,577e-6,-576e-6,575e-6,-574e-6,573e-6,-572e-6,571e-6,-571e-6,57e-5,-569e-6,568e-6,-567e-6,566e-6,-565e-6,564e-6,-564e-6,563e-6,-562e-6,561e-6,-56e-5,559e-6,-558e-6,558e-6,-557e-6,556e-6,-555e-6,554e-6,-553e-6,552e-6,-473e-6,472e-6,-472e-6,471e-6,-47e-5,469e-6,-469e-6,468e-6,-467e-6,466e-6,-466e-6,465e-6,-464e-6,463e-6,-463e-6,462e-6,-461e-6,461e-6,-46e-5,459e-6,-458e-6,458e-6,-457e-6,456e-6,-455e-6,455e-6,-454e-6,453e-6,-452e-6,452e-6,-451e-6,45e-5,-45e-5,449e-6,-448e-6,447e-6,-447e-6,446e-6,-445e-6,445e-6,-444e-6,443e-6,-442e-6,442e-6,-441e-6,44e-5,-439e-6,439e-6,-438e-6,437e-6,-437e-6,436e-6,-435e-6,434e-6,-434e-6,433e-6,-432e-6,431e-6,-431e-6,43e-5,-429e-6,429e-6,-428e-6,427e-6,-426e-6,426e-6,-425e-6,424e-6,-423e-6,423e-6,-422e-6,421e-6,-421e-6,42e-5,-419e-6,418e-6,-418e-6,417e-6,-416e-6,415e-6,-415e-6,414e-6,-413e-6,413e-6,-412e-6,411e-6,-41e-5,41e-5,-409e-6,408e-6,-407e-6,407e-6,-406e-6,405e-6,-405e-6,404e-6,-403e-6,402e-6,-402e-6,401e-6,-4e-4,399e-6,-399e-6,398e-6,-397e-6,396e-6,-396e-6,349e-6,-349e-6,348e-6,-347e-6,347e-6,-346e-6,345e-6,-345e-6,344e-6,-343e-6,343e-6,-342e-6,341e-6,-341e-6,34e-5,-34e-5,339e-6,-338e-6,338e-6,-337e-6,336e-6,-336e-6,335e-6,-334e-6,334e-6,-333e-6,332e-6,-332e-6,331e-6,-33e-5,33e-5,-329e-6,328e-6,-328e-6,327e-6,-326e-6,326e-6,-325e-6,324e-6,-324e-6,323e-6,-322e-6,322e-6,-321e-6,32e-5,-32e-5,319e-6,-318e-6,318e-6,-317e-6,316e-6,-316e-6,315e-6,-314e-6,314e-6,-313e-6,312e-6,-311e-6,311e-6,-31e-5,309e-6,-309e-6,308e-6,-307e-6,307e-6,-306e-6,305e-6,-305e-6,304e-6,-303e-6,303e-6,-302e-6,301e-6,-301e-6,3e-4,-299e-6,298e-6,-298e-6,297e-6,-296e-6,296e-6,-295e-6,294e-6,-294e-6,293e-6,-292e-6,291e-6,-291e-6,29e-5,-289e-6,271e-6,-271e-6,27e-5,-27e-5,269e-6,-268e-6,268e-6,-267e-6,266e-6,-266e-6,265e-6,-264e-6,264e-6,-263e-6,262e-6,-262e-6,261e-6,-26e-5,259e-6,-259e-6,258e-6,-257e-6,257e-6,-256e-6,255e-6,-255e-6,254e-6,-253e-6,253e-6,-252e-6,251e-6,-251e-6,25e-5,-249e-6,249e-6,-248e-6,247e-6,-247e-6,246e-6,-245e-6,245e-6,-244e-6,243e-6,-242e-6,242e-6,-241e-6,24e-5,-24e-5,239e-6,-238e-6,238e-6,-237e-6,236e-6,-235e-6,235e-6,-234e-6,233e-6,-233e-6,232e-6,-231e-6,231e-6,-23e-5,229e-6,-228e-6,228e-6,-227e-6,226e-6,-226e-6,225e-6,-224e-6,223e-6,-223e-6,222e-6,-221e-6,221e-6,-22e-5,219e-6,-218e-6,218e-6,-217e-6,216e-6,-216e-6,215e-6,-214e-6,213e-6,-213e-6,212e-6,-211e-6,21e-5,-21e-5,209e-6,-208e-6,208e-6,-207e-6,206e-6,-205e-6,205e-6,-204e-6,203e-6,-202e-6,178e-6,-178e-6,177e-6,-176e-6,176e-6,-175e-6,174e-6,-174e-6,173e-6,-172e-6,172e-6,-171e-6,17e-5,-17e-5,169e-6,-168e-6,168e-6,-167e-6,166e-6,-166e-6,165e-6,-164e-6,164e-6,-163e-6,162e-6,-162e-6,161e-6,-16e-5,16e-5,-159e-6,158e-6,-158e-6,157e-6,-156e-6,156e-6,-155e-6,154e-6,-154e-6,153e-6,-152e-6,152e-6,-151e-6,15e-5,-149e-6,149e-6,-148e-6,147e-6,-147e-6,146e-6,-145e-6,145e-6,-144e-6,143e-6,-143e-6,142e-6,-141e-6,141e-6,-14e-5,139e-6,-138e-6,138e-6,-137e-6,136e-6,-136e-6,135e-6,-134e-6,134e-6,-133e-6,132e-6,-131e-6,131e-6,-13e-5,129e-6,-129e-6,128e-6,-127e-6,126e-6,-126e-6,125e-6,-124e-6,124e-6,-123e-6,122e-6,-121e-6,121e-6,-12e-5,119e-6,-118e-6,118e-6,-117e-6,116e-6,-116e-6,115e-6,-114e-6,113e-6,-113e-6,112e-6,-111e-6,111e-6,-11e-5,109e-6,-108e-6,108e-6,-107e-6,106e-6,-105e-6,105e-6,-104e-6,103e-6,-103e-6,102e-6,-101e-6,1e-4,-1e-4,99e-6,-98e-6,97e-6,-97e-6,96e-6,-95e-6,94e-6,-94e-6,93e-6,-92e-6,91e-6,-91e-6,9e-5,-89e-6,88e-6,-88e-6,87e-6,-86e-6,85e-6,-85e-6,84e-6,-83e-6,83e-6,-82e-6,81e-6,-8e-5,79e-6,-79e-6,78e-6,-77e-6,76e-6,-76e-6,75e-6,-74e-6,73e-6,-73e-6,72e-6,-71e-6,7e-5,-7e-5,69e-6,-68e-6,67e-6,-67e-6,66e-6,-65e-6,64e-6,-64e-6,63e-6,-62e-6,61e-6,-6e-5,6e-5,-59e-6,58e-6,-57e-6,57e-6,-56e-6,55e-6,-54e-6,52e-6,-51e-6,51e-6,-5e-5,49e-6,-48e-6,48e-6,-47e-6,46e-6,-45e-6,45e-6,-44e-6,43e-6,-42e-6,42e-6,-41e-6,4e-5,-39e-6,39e-6,-38e-6,37e-6,-36e-6,36e-6,-35e-6,34e-6,-33e-6,33e-6,-32e-6,31e-6,-3e-5,29e-6,-29e-6,28e-6,-27e-6,26e-6,-26e-6,25e-6,-24e-6,23e-6,-23e-6,22e-6,-21e-6,2e-5,-2e-5,19e-6,-18e-6,17e-6,-17e-6,16e-6,-15e-6,14e-6,-14e-6,13e-6,-12e-6,11e-6,-11e-6,1e-5,-9e-6,8e-6,-8e-6,7e-6,-6e-6,5e-6,-5e-6,4e-6,-3e-6,2e-6,-2e-6,1e-6,0,-1e-6,2e-6,-2e-6,3e-6,-4e-6,5e-6,-5e-6,6e-6,-7e-6,8e-6,-8e-6,9e-6,-1e-5,11e-6,-11e-6,12e-6,-13e-6,14e-6,-14e-6,15e-6,-16e-6,17e-6,-17e-6,18e-6,-19e-6,2e-5,-2e-5,21e-6,-22e-6,23e-6,-24e-6,24e-6,-25e-6,26e-6,-27e-6,27e-6,-28e-6,29e-6,-3e-5,3e-5,-31e-6,32e-6,-33e-6,33e-6,-34e-6,35e-6,-36e-6,36e-6,-37e-6,38e-6,-39e-6,39e-6,-4e-5,41e-6,-41e-6,42e-6,-43e-6,44e-6,-44e-6,45e-6,-46e-6,47e-6,-47e-6,48e-6,-49e-6,5e-5,-5e-5,51e-6,-52e-6,53e-6,-53e-6,54e-6,-55e-6,56e-6,-56e-6,57e-6,-58e-6,59e-6,-59e-6,6e-5,-61e-6,62e-6,-62e-6,63e-6,-64e-6,65e-6,-65e-6,66e-6,-67e-6,67e-6,-68e-6,69e-6,-7e-5,7e-5,-71e-6,72e-6,-73e-6,73e-6,-74e-6,75e-6,-75e-6,76e-6,-77e-6,78e-6,-78e-6,79e-6,-8e-5,8e-5,-81e-6,82e-6,-83e-6,83e-6,-84e-6,85e-6,-85e-6,86e-6,-87e-6,87e-6,-88e-6,89e-6,-9e-5,9e-5,-91e-6,92e-6,-92e-6,93e-6,-94e-6,95e-6,-95e-6,96e-6,-97e-6,97e-6,-98e-6,99e-6,-99e-6,1e-4,-101e-6,101e-6,-102e-6,103e-6,-104e-6,104e-6,-105e-6,106e-6,-106e-6,107e-6,-108e-6,108e-6,-109e-6,109e-6,-11e-5,111e-6,-112e-6,112e-6,-113e-6,114e-6,-114e-6,115e-6,-116e-6,116e-6,-117e-6,118e-6,-118e-6,119e-6,-119e-6,12e-5,-121e-6,121e-6,-122e-6,123e-6,-123e-6,124e-6,-125e-6,125e-6,-126e-6,126e-6,-127e-6,128e-6,-128e-6,129e-6,-13e-5,13e-5,-131e-6,131e-6,-132e-6,133e-6,-133e-6,134e-6,-135e-6,135e-6,-136e-6,136e-6,-137e-6,138e-6,-138e-6,139e-6,-139e-6,14e-5,-14e-5,141e-6,-142e-6,142e-6,-143e-6,144e-6,-144e-6,145e-6,-145e-6,146e-6,-146e-6,147e-6,-148e-6,148e-6,-149e-6,149e-6,-15e-5,15e-5,-151e-6,152e-6,-152e-6,153e-6,-153e-6,154e-6,-154e-6,155e-6,-155e-6,156e-6,-156e-6,157e-6,-157e-6,158e-6,-159e-6,159e-6,-16e-5,16e-5,-161e-6,161e-6,-162e-6,162e-6,-163e-6,163e-6,-164e-6,164e-6,-165e-6,165e-6,-166e-6,166e-6,-167e-6,178e-6,-178e-6,179e-6,-179e-6,18e-5,-18e-5,181e-6,-181e-6,182e-6,-182e-6,183e-6,-183e-6,184e-6,-184e-6,185e-6,-185e-6,186e-6,-186e-6,187e-6,-187e-6,188e-6,-188e-6,189e-6,-189e-6,19e-5,-19e-5,191e-6,-191e-6,191e-6,-192e-6,192e-6,-193e-6,193e-6,-194e-6,194e-6,-194e-6,195e-6,-195e-6,196e-6,-196e-6,197e-6,-197e-6,197e-6,-198e-6,198e-6,-199e-6,199e-6,-199e-6,2e-4,-2e-4,201e-6,-201e-6,201e-6,-202e-6,202e-6,-202e-6,203e-6,-203e-6,204e-6,-204e-6,204e-6,-205e-6,205e-6,-205e-6,206e-6,-206e-6,206e-6,-207e-6,207e-6,-207e-6,208e-6,-208e-6,208e-6,-209e-6,209e-6,-209e-6,209e-6,-21e-5,21e-5,-21e-5,211e-6,-211e-6,211e-6,-211e-6,212e-6,-212e-6,212e-6,-213e-6,213e-6,-213e-6,213e-6,-214e-6,214e-6,-214e-6,214e-6,-215e-6,215e-6,-215e-6,215e-6,-215e-6,216e-6,-216e-6,216e-6,-216e-6,217e-6,-217e-6,217e-6,-217e-6,217e-6,-217e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-217e-6,217e-6,-217e-6,217e-6,-217e-6,216e-6,-216e-6,216e-6,-216e-6,215e-6,-215e-6,215e-6,-215e-6,215e-6,-214e-6,214e-6,-214e-6,213e-6,-213e-6,213e-6,-213e-6,212e-6,-212e-6,212e-6,-211e-6,211e-6,-211e-6,211e-6,-21e-5,21e-5,-21e-5,209e-6,-209e-6,209e-6,-208e-6,208e-6,-208e-6,207e-6,-207e-6,207e-6,-206e-6,206e-6,-205e-6,205e-6,-205e-6,204e-6,-204e-6,204e-6,-203e-6,203e-6,-202e-6,202e-6,-202e-6,201e-6,-201e-6,2e-4,-2e-4,199e-6,-199e-6,199e-6,-198e-6,198e-6,-197e-6,197e-6,-196e-6,196e-6,-195e-6,195e-6,-194e-6,194e-6,-193e-6,193e-6,-192e-6,192e-6,-191e-6,191e-6,-19e-5,19e-5,-189e-6,189e-6,-188e-6,188e-6,-187e-6,187e-6,-186e-6,186e-6,-185e-6,185e-6,-184e-6,183e-6,-183e-6,182e-6,-182e-6,181e-6,-181e-6,18e-5,-179e-6,179e-6,-178e-6,178e-6,-177e-6,176e-6,-176e-6,175e-6,-175e-6,174e-6,-173e-6,173e-6,-172e-6,171e-6,-171e-6,17e-5,-169e-6,169e-6,-168e-6,167e-6,-167e-6,166e-6,-165e-6,165e-6,-164e-6,163e-6,-163e-6,162e-6,-161e-6,161e-6,-16e-5,159e-6,-158e-6,158e-6,-157e-6,156e-6,-156e-6,155e-6,-154e-6,153e-6,-153e-6,152e-6,-151e-6,15e-5,-15e-5,149e-6,-148e-6,147e-6,-147e-6,146e-6,-145e-6,144e-6,-143e-6,143e-6,-142e-6,141e-6,-14e-5,139e-6,-139e-6,138e-6,-137e-6,136e-6,-135e-6,135e-6,-134e-6,133e-6,-132e-6,131e-6,-13e-5,13e-5,-129e-6,128e-6,-127e-6,126e-6,-125e-6,125e-6,-124e-6,123e-6,-122e-6,121e-6,-12e-5,119e-6,-118e-6,118e-6,-117e-6,116e-6,-115e-6,114e-6,-113e-6,112e-6,-111e-6,11e-5,-11e-5,109e-6,-108e-6,107e-6,-106e-6,105e-6,-104e-6,103e-6,-102e-6,101e-6,-1e-4,99e-6,-99e-6,98e-6,-97e-6,96e-6,-95e-6,94e-6,-93e-6,92e-6,-91e-6,9e-5,-89e-6,88e-6,-87e-6,86e-6,-85e-6,84e-6,-83e-6,82e-6,-81e-6,8e-5,-79e-6,78e-6,-77e-6,76e-6,-75e-6,74e-6,-73e-6,72e-6,-71e-6,7e-5,-69e-6,68e-6,-67e-6,66e-6,-65e-6,64e-6,-63e-6,62e-6,-61e-6,6e-5,-59e-6,58e-6,-57e-6,56e-6,-55e-6,54e-6,-53e-6,52e-6,-51e-6,5e-5,-49e-6,48e-6,-47e-6,46e-6,-45e-6,44e-6,-43e-6,42e-6,-41e-6,4e-5,-39e-6,38e-6,-37e-6,36e-6,-35e-6,33e-6,-32e-6,31e-6,-3e-5,29e-6,-28e-6,27e-6,-26e-6,25e-6,-24e-6,23e-6,-22e-6,21e-6,-2e-5,19e-6,-18e-6,17e-6,-16e-6,14e-6,-13e-6,12e-6,-11e-6,1e-5,-9e-6,8e-6,-7e-6,6e-6,-5e-6,4e-6,-3e-6,2e-6,-1e-6,0,1e-6,-3e-6,4e-6,-5e-6,6e-6,-7e-6,8e-6,-9e-6,1e-5,-11e-6,12e-6,-13e-6,14e-6,-15e-6,16e-6,-17e-6,18e-6,-2e-5,21e-6,-22e-6,23e-6,-24e-6,25e-6,-26e-6,27e-6,-28e-6,29e-6,-3e-5,31e-6,-32e-6,33e-6,-34e-6,35e-6,-36e-6,37e-6,-38e-6,39e-6,-41e-6,41e-6,-43e-6,44e-6,-45e-6,46e-6,-47e-6,48e-6,-49e-6,5e-5,-51e-6,52e-6,-53e-6,54e-6,-55e-6,56e-6,-57e-6,58e-6,-59e-6,6e-5,-61e-6,62e-6,-63e-6,64e-6,-65e-6,66e-6,-67e-6,68e-6,-69e-6,7e-5,-71e-6,72e-6,-73e-6,74e-6,-75e-6,76e-6,-77e-6,78e-6,-79e-6,8e-5,-81e-6,82e-6,-83e-6,84e-6,-85e-6,86e-6,-87e-6,88e-6,-89e-6,9e-5,-9e-5,91e-6,-92e-6,93e-6,-94e-6,95e-6,-96e-6,97e-6,-98e-6,99e-6,-1e-4,101e-6,-101e-6,102e-6,-103e-6,104e-6,-105e-6,106e-6,-107e-6,108e-6,-109e-6,109e-6,-11e-5,111e-6,-112e-6,113e-6,-114e-6,115e-6,-116e-6,116e-6,-117e-6,118e-6,-119e-6,12e-5,-121e-6,121e-6,-122e-6,123e-6,-124e-6,125e-6,-125e-6,126e-6,-127e-6,128e-6,-129e-6,129e-6,-13e-5,131e-6,-132e-6,133e-6,-133e-6,134e-6,-135e-6,136e-6,-149e-6,15e-5,-151e-6,152e-6,-153e-6,153e-6,-154e-6,155e-6,-156e-6,157e-6,-157e-6,158e-6,-159e-6,16e-5,-16e-5,161e-6,-162e-6,163e-6,-163e-6,164e-6,-165e-6,165e-6,-166e-6,167e-6,-168e-6,168e-6,-169e-6,17e-5,-17e-5,171e-6,-172e-6,172e-6,-173e-6,174e-6,-174e-6,175e-6,-175e-6,176e-6,-177e-6,177e-6,-178e-6,178e-6,-179e-6,18e-5,-18e-5,181e-6,-181e-6,182e-6,-182e-6,183e-6,-184e-6,184e-6,-185e-6,185e-6,-186e-6,186e-6,-187e-6,187e-6,-188e-6,188e-6,-189e-6,189e-6,-19e-5,19e-5,-19e-5,191e-6,-191e-6,192e-6,-192e-6,193e-6,-193e-6,193e-6,-194e-6,194e-6,-195e-6,195e-6,-195e-6,196e-6,-196e-6,196e-6,-197e-6,197e-6,-197e-6,198e-6,-198e-6,198e-6,-199e-6,199e-6,-199e-6,199e-6,-2e-4,2e-4,-2e-4,2e-4,-201e-6,201e-6,-201e-6,201e-6,-201e-6,202e-6,-202e-6,202e-6,-202e-6,202e-6,-203e-6,203e-6,-203e-6,203e-6,-203e-6,203e-6,-203e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6],
imag:[0,.292864,0,2e-6,-1e-6,1e-6,-1e-6,1e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-2e-6,0,0,0,0,0,0,0,0,0,0,0,0,3e-6,-3e-6,4e-6,-4e-6,2e-6,-3e-6,3e-6,-4e-6,5e-6,-6e-6,7e-6,-11e-6,13e-6,-18e-6,23e-6,-32e-6,37e-6,-44e-6,53e-6,-55e-6,58e-6,-55e-6,56e-6,-49e-6,43e-6,-36e-6,25e-6,-24e-6,17e-6,-18e-6,15e-6,-15e-6,13e-6,-13e-6,13e-6,-12e-6,12e-6,-12e-6,13e-6,-13e-6,13e-6,-13e-6,14e-6,-14e-6,18e-6,-19e-6,19e-6,-21e-6,21e-6,-22e-6,24e-6,-24e-6,25e-6,-29e-6,29e-6,-31e-6,31e-6,-33e-6,35e-6,-35e-6,37e-6,-39e-6,4e-5,-36e-6,35e-6,-41e-6,42e-6,-44e-6,44e-6,-5e-5,52e-6,-52e-6,52e-6,-54e-6,54e-6,-54e-6,56e-6,-56e-6,56e-6,-58e-6,6e-5,-6e-5,62e-6,-62e-6,62e-6,-64e-6,64e-6,-67e-6,67e-6,-61e-6,63e-6,-63e-6,63e-6,-65e-6,65e-6,-67e-6,67e-6,-67e-6,69e-6,-69e-6,71e-6,-71e-6,71e-6,-73e-6,73e-6,-73e-6,74e-6,-76e-6,73e-6,-75e-6,75e-6,-77e-6,77e-6,-79e-6,79e-6,-68e-6,69e-6,-69e-6,71e-6,-71e-6,72e-6,-66e-6,67e-6,-67e-6,69e-6,-69e-6,69e-6,-7e-5,66e-6,-67e-6,67e-6,-69e-6,69e-6,-7e-5,7e-5,-67e-6,67e-6,-68e-6,68e-6,-69e-6,69e-6,-66e-6,66e-6,-68e-6,68e-6,-69e-6,69e-6,-68e-6,68e-6,-69e-6,69e-6,-53e-6,53e-6,-54e-6,54e-6,-55e-6,55e-6,-56e-6,56e-6,-49e-6,49e-6,-49e-6,49e-6,-5e-5,49e-6,-49e-6,49e-6,-46e-6,46e-6,-46e-6,46e-6,-41e-6,41e-6,-42e-6,43e-6,-74e-6,75e-6,-75e-6,76e-6,-76e-6,77e-6,-52e-6,52e-6,-53e-6,55e-6,-55e-6,55e-6,-56e-6,56e-6,-57e-6,57e-6,-57e-6,58e-6,-58e-6,58e-6,-59e-6,59e-6,-63e-6,64e-6,-64e-6,65e-6,-65e-6,65e-6,-66e-6,66e-6,-67e-6,67e-6,-67e-6,68e-6,-68e-6,69e-6,-69e-6,7e-5,-7e-5,7e-5,-71e-6,71e-6,-72e-6,79e-6,-8e-5,8e-5,-81e-6,81e-6,-84e-6,85e-6,-85e-6,86e-6,-86e-6,87e-6,-87e-6,88e-6,-88e-6,88e-6,-89e-6,9e-5,-9e-5,91e-6,-91e-6,92e-6,-92e-6,92e-6,-93e-6,94e-6,-94e-6,95e-6,-95e-6,96e-6,-96e-6,97e-6,-97e-6,98e-6,-98e-6,96e-6,-96e-6,97e-6,-97e-6,98e-6,-98e-6,96e-6,-96e-6,97e-6,-97e-6,98e-6,-98e-6,99e-6,-99e-6,1e-4,-1e-4,101e-6,-101e-6,102e-6,-102e-6,103e-6,-103e-6,104e-6,-104e-6,105e-6,-105e-6,106e-6,-106e-6,107e-6,-107e-6,108e-6,-108e-6,109e-6,-109e-6,11e-5,-11e-5,111e-6,-111e-6,112e-6,-112e-6,113e-6,-113e-6,114e-6,-114e-6,115e-6,-115e-6,116e-6,-116e-6,117e-6,-118e-6,118e-6,-119e-6,119e-6,-12e-5,12e-5,-121e-6,121e-6,-122e-6,122e-6,-123e-6,123e-6,-128e-6,128e-6,-129e-6,129e-6,-13e-5,13e-5,-131e-6,131e-6,-132e-6,133e-6,-133e-6,134e-6,-134e-6,135e-6,-135e-6,136e-6,-136e-6,137e-6,-138e-6,138e-6,-139e-6,139e-6,-14e-5,14e-5,-141e-6,142e-6,-142e-6,143e-6,-143e-6,144e-6,-144e-6,145e-6,-145e-6,146e-6,-147e-6,147e-6,-148e-6,148e-6,-149e-6,149e-6,-15e-5,151e-6,-151e-6,152e-6,-152e-6,153e-6,-153e-6,154e-6,-155e-6,155e-6,-156e-6,156e-6,-157e-6,158e-6,-158e-6,159e-6,-159e-6,16e-5,-16e-5,161e-6,-162e-6,162e-6,-163e-6,163e-6,-164e-6,164e-6,-165e-6,166e-6,-161e-6,162e-6,-162e-6,163e-6,-163e-6,164e-6,-165e-6,165e-6,-166e-6,166e-6,-167e-6,168e-6,-168e-6,169e-6,-169e-6,17e-5,-17e-5,171e-6,-171e-6,172e-6,-173e-6,173e-6,-174e-6,174e-6,-175e-6,176e-6,-176e-6,177e-6,-177e-6,178e-6,-179e-6,179e-6,-18e-5,18e-5,-181e-6,181e-6,-182e-6,182e-6,-183e-6,184e-6,-184e-6,185e-6,-185e-6,186e-6,-187e-6,187e-6,-188e-6,188e-6,-189e-6,19e-5,-19e-5,191e-6,-191e-6,192e-6,-192e-6,193e-6,-194e-6,194e-6,-195e-6,195e-6,-196e-6,197e-6,-197e-6,198e-6,-198e-6,199e-6,-2e-4,2e-4,-201e-6,201e-6,-173e-6,174e-6,-174e-6,175e-6,-175e-6,176e-6,-176e-6,177e-6,-177e-6,178e-6,-178e-6,179e-6,-179e-6,18e-5,-18e-5,181e-6,-181e-6,182e-6,-182e-6,183e-6,-183e-6,184e-6,-184e-6,185e-6,-185e-6,186e-6,-186e-6,187e-6,-187e-6,188e-6,-188e-6,189e-6,-19e-5,19e-5,-191e-6,191e-6,-192e-6,192e-6,-193e-6,193e-6,-194e-6,194e-6,-195e-6,195e-6,-196e-6,196e-6,-197e-6,197e-6,-198e-6,198e-6,-199e-6,199e-6,-2e-4,2e-4,-201e-6,201e-6,-202e-6,202e-6,-203e-6,203e-6,-204e-6,204e-6,-205e-6,205e-6,-206e-6,206e-6,-207e-6,207e-6,-208e-6,208e-6,-209e-6,209e-6,-21e-5,21e-5,-211e-6,211e-6,-212e-6,213e-6,-213e-6,213e-6,-214e-6,215e-6,-215e-6,216e-6,-216e-6,217e-6,-217e-6,218e-6,-218e-6,219e-6,-219e-6,22e-5,-22e-5,221e-6,-221e-6,222e-6,-222e-6,223e-6,-223e-6,224e-6,-224e-6,225e-6,-225e-6,226e-6,-226e-6,227e-6,-227e-6,201e-6,-202e-6,202e-6,-203e-6,203e-6,-204e-6,204e-6,-205e-6,205e-6,-205e-6,206e-6,-206e-6,207e-6,-207e-6,208e-6,-208e-6,209e-6,-209e-6,21e-5,-21e-5,21e-5,-211e-6,211e-6,-212e-6,212e-6,-213e-6,213e-6,-214e-6,214e-6,-214e-6,215e-6,-215e-6,216e-6,-216e-6,217e-6,-217e-6,218e-6,-218e-6,218e-6,-219e-6,219e-6,-22e-5,22e-5,-221e-6,221e-6,-221e-6,222e-6,-222e-6,223e-6,-223e-6,224e-6,-224e-6,224e-6,-225e-6,225e-6,-226e-6,226e-6,-227e-6,227e-6,-227e-6,228e-6,-228e-6,229e-6,-229e-6,23e-5,-23e-5,23e-5,-231e-6,231e-6,-232e-6,232e-6,-233e-6,233e-6,-234e-6,234e-6,-234e-6,235e-6,-235e-6,236e-6,-236e-6,236e-6,-237e-6,237e-6,-238e-6,238e-6,-238e-6,239e-6,-239e-6,24e-5,-24e-5,226e-6,-227e-6,227e-6,-227e-6,228e-6,-228e-6,229e-6,-229e-6,229e-6,-23e-5,23e-5,-23e-5,231e-6,-231e-6,232e-6,-232e-6,232e-6,-233e-6,233e-6,-234e-6,234e-6,-234e-6,235e-6,-235e-6,235e-6,-236e-6,236e-6,-237e-6,237e-6,-237e-6,238e-6,-238e-6,238e-6,-239e-6,239e-6,-239e-6,24e-5,-24e-5,241e-6,-241e-6,241e-6,-242e-6,242e-6,-242e-6,243e-6,-243e-6,243e-6,-244e-6,244e-6,-244e-6,245e-6,-245e-6,246e-6,-246e-6,246e-6,-247e-6,247e-6,-247e-6,248e-6,-248e-6,248e-6,-249e-6,249e-6,-249e-6,25e-5,-25e-5,25e-5,-251e-6,251e-6,-251e-6,252e-6,-252e-6,252e-6,-253e-6,253e-6,-253e-6,254e-6,-254e-6,254e-6,-255e-6,255e-6,-255e-6,256e-6,-256e-6,256e-6,-257e-6,257e-6,-257e-6,258e-6,-258e-6,258e-6,-259e-6,259e-6,-259e-6,26e-5,-26e-5,26e-5,-26e-5,261e-6,-261e-6,231e-6,-231e-6,232e-6,-232e-6,232e-6,-232e-6,233e-6,-233e-6,233e-6,-234e-6,234e-6,-234e-6,234e-6,-235e-6,235e-6,-235e-6,235e-6,-236e-6,236e-6,-236e-6,236e-6,-237e-6,237e-6,-237e-6,237e-6,-238e-6,238e-6,-238e-6,238e-6,-239e-6,239e-6,-239e-6,239e-6,-239e-6,24e-5,-24e-5,24e-5,-24e-5,241e-6,-241e-6,241e-6,-241e-6,242e-6,-242e-6,242e-6,-242e-6,242e-6,-243e-6,243e-6,-243e-6,243e-6,-244e-6,244e-6,-244e-6,244e-6,-244e-6,245e-6,-245e-6,245e-6,-245e-6,245e-6,-246e-6,246e-6,-246e-6,246e-6,-246e-6,247e-6,-247e-6,247e-6,-247e-6,247e-6,-248e-6,248e-6,-248e-6,248e-6,-248e-6,248e-6,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-252e-6,252e-6,-252e-6,252e-6,-252e-6,252e-6,-252e-6,253e-6,-253e-6,253e-6,-253e-6,253e-6,-253e-6,253e-6,-254e-6,254e-6,-254e-6,254e-6,-254e-6,254e-6,-254e-6,254e-6,-255e-6,255e-6,-255e-6,255e-6,-255e-6,255e-6,-255e-6,255e-6,-255e-6,256e-6,-256e-6,256e-6,-256e-6,256e-6,-256e-6,256e-6,-256e-6,256e-6,-256e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,259e-6,-259e-6,259e-6,-259e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-248e-6,248e-6,-248e-6,248e-6,-248e-6,248e-6,-248e-6,248e-6,-248e-6,247e-6,-247e-6,247e-6,-247e-6,247e-6,-247e-6,247e-6,-247e-6,246e-6,-246e-6,246e-6,-246e-6,246e-6,-246e-6,246e-6,-245e-6,245e-6,-245e-6,245e-6,-245e-6,245e-6,-245e-6,244e-6,-244e-6,244e-6,-244e-6,244e-6,-243e-6,243e-6,-243e-6,243e-6,-243e-6,243e-6,-242e-6,242e-6,-242e-6,242e-6,-242e-6,241e-6,-241e-6,241e-6,-241e-6,241e-6,-24e-5,24e-5,-24e-5,24e-5,-239e-6,239e-6,-239e-6,239e-6,-239e-6,238e-6,-238e-6,238e-6,-238e-6,237e-6,-237e-6,237e-6,-237e-6,236e-6,-236e-6,236e-6,-236e-6,235e-6,-235e-6,235e-6,-235e-6,234e-6,-234e-6,234e-6,-233e-6,233e-6,-233e-6,233e-6,-232e-6,232e-6,-232e-6,231e-6,-231e-6,231e-6,-231e-6,23e-5,-23e-5,23e-5,-229e-6,229e-6,-229e-6,228e-6,-228e-6,228e-6,-227e-6,227e-6,-227e-6,226e-6,-226e-6,226e-6,-225e-6,225e-6,-225e-6,224e-6,-224e-6,224e-6,-223e-6,223e-6,-223e-6,222e-6,-222e-6,222e-6,-221e-6,221e-6,-22e-5,22e-5,-22e-5,219e-6,-219e-6,218e-6,-218e-6,218e-6,-217e-6,217e-6,-217e-6,216e-6,-216e-6,215e-6,-215e-6,214e-6,-214e-6,214e-6,-213e-6,213e-6,-212e-6,212e-6,-212e-6,211e-6,-211e-6,21e-5,-21e-5,209e-6,-209e-6,209e-6,-208e-6,208e-6,-207e-6,207e-6,-206e-6,206e-6,-205e-6,205e-6,-204e-6,204e-6,-203e-6,203e-6,-203e-6,202e-6,-202e-6,201e-6,-201e-6,2e-4,-2e-4,199e-6,-199e-6,198e-6,-198e-6,197e-6,-197e-6,196e-6,-196e-6,195e-6,-195e-6,194e-6,-194e-6,193e-6,-193e-6,192e-6,-191e-6,191e-6,-19e-5,19e-5,-189e-6,189e-6,-188e-6,188e-6,-187e-6,187e-6,-186e-6,185e-6,-185e-6,184e-6,-184e-6,183e-6,-183e-6,182e-6,-182e-6,181e-6,-18e-5,18e-5,-179e-6,179e-6,-178e-6,177e-6,-177e-6,176e-6,-176e-6,175e-6,-175e-6,174e-6,-173e-6,173e-6,-172e-6,172e-6,-171e-6,17e-5,-17e-5,169e-6,-168e-6,168e-6,-167e-6,167e-6,-166e-6,165e-6,-165e-6,164e-6,-163e-6,163e-6,-162e-6,161e-6,-161e-6,16e-5,-16e-5,159e-6,-158e-6,158e-6,-157e-6,156e-6,-156e-6,155e-6,-154e-6,154e-6,-153e-6,152e-6,-152e-6,151e-6,-15e-5,149e-6,-149e-6,148e-6,-147e-6,147e-6,-155e-6,155e-6,-154e-6,153e-6,-152e-6,152e-6,-151e-6,15e-5,-149e-6,149e-6,-148e-6,147e-6,-146e-6,145e-6,-145e-6,144e-6,-143e-6,142e-6,-142e-6,141e-6,-14e-5,139e-6,-139e-6,138e-6,-137e-6,136e-6,-135e-6,135e-6,-134e-6,133e-6,-132e-6,131e-6,-131e-6,13e-5,-129e-6,128e-6,-127e-6,127e-6,-126e-6,125e-6,-124e-6,123e-6,-122e-6,122e-6,-121e-6,12e-5,-119e-6,118e-6,-117e-6,117e-6,-116e-6,115e-6,-114e-6,113e-6,-112e-6,111e-6,-111e-6,11e-5,-109e-6,108e-6,-107e-6,107e-6,-106e-6,105e-6,-104e-6,103e-6,-102e-6,101e-6,-1e-4,1e-4,-99e-6,98e-6,-97e-6,96e-6,-95e-6,94e-6,-93e-6,93e-6,-92e-6,91e-6,-9e-5,89e-6,-88e-6,87e-6,-86e-6,85e-6,-85e-6,84e-6,-83e-6,82e-6,-81e-6,8e-5,-79e-6,78e-6,-77e-6,77e-6,-76e-6,75e-6,-74e-6,73e-6,-72e-6,71e-6,-7e-5,69e-6,-68e-6,67e-6,-66e-6,65e-6,-65e-6,64e-6,-63e-6,62e-6,-61e-6,6e-5,-59e-6,58e-6,-57e-6,56e-6,-55e-6,54e-6,-53e-6,52e-6,-52e-6,51e-6,-5e-5,49e-6,-48e-6,47e-6,-46e-6,45e-6,-44e-6,43e-6,-42e-6,41e-6,-4e-5,39e-6,-38e-6,37e-6,-36e-6,35e-6,-35e-6,34e-6,-33e-6,32e-6,-31e-6,3e-5,-29e-6,28e-6,-27e-6,26e-6,-25e-6,24e-6,-23e-6,22e-6,-21e-6,2e-5,-19e-6,18e-6,-17e-6,16e-6,-15e-6,15e-6,-14e-6,13e-6,-12e-6,11e-6,-1e-5,9e-6,-8e-6,7e-6,-6e-6,5e-6,-4e-6,3e-6,-2e-6,1e-6,0,-1e-6,2e-6,-3e-6,4e-6,-5e-6,6e-6,-7e-6,8e-6,-8e-6,9e-6,-1e-5,11e-6,-12e-6,13e-6,-14e-6,15e-6,-16e-6,17e-6,-18e-6,19e-6,-2e-5,21e-6,-22e-6,23e-6,-24e-6,25e-6,-26e-6,27e-6,-28e-6,29e-6,-3e-5,31e-6,-31e-6,32e-6,-33e-6,34e-6,-35e-6,36e-6,-37e-6,38e-6,-39e-6,4e-5,-41e-6,42e-6,-43e-6,44e-6,-45e-6,46e-6,-47e-6,47e-6,-48e-6,49e-6,-5e-5,51e-6,-52e-6,53e-6,-54e-6,55e-6,-56e-6,57e-6,-58e-6,59e-6,-6e-5,61e-6,-61e-6,62e-6,-63e-6,64e-6,-65e-6,66e-6,-67e-6,68e-6,-69e-6,7e-5,-71e-6,72e-6,-72e-6,73e-6,-74e-6,75e-6,-76e-6,77e-6,-78e-6,79e-6,-8e-5,8e-5,-81e-6,82e-6,-83e-6,84e-6,-85e-6,86e-6,-87e-6,88e-6,-88e-6,89e-6,-9e-5,91e-6,-92e-6,93e-6,-94e-6,94e-6,-95e-6,96e-6,-97e-6,98e-6,-99e-6,1e-4,-1e-4,101e-6,-102e-6,103e-6,-104e-6,105e-6,-105e-6,106e-6,-107e-6,108e-6,-109e-6,11e-5,-11e-5,111e-6,-112e-6,113e-6,-114e-6,115e-6,-115e-6,116e-6,-117e-6,118e-6,-119e-6,119e-6,-12e-5,121e-6,-122e-6,122e-6,-123e-6,124e-6,-125e-6,126e-6,-126e-6,127e-6,-128e-6,129e-6,-129e-6,13e-5,-131e-6,132e-6,-132e-6,133e-6,-134e-6,135e-6,-135e-6,136e-6,-137e-6,138e-6,-138e-6,139e-6,-14e-5,14e-5,-141e-6,142e-6,-142e-6,143e-6,-144e-6,145e-6,-145e-6,146e-6,-147e-6,147e-6,-148e-6,149e-6,-149e-6,15e-5,-151e-6,151e-6,-152e-6,153e-6,-153e-6,154e-6,-155e-6,155e-6,-156e-6,156e-6,-157e-6,158e-6,-158e-6,159e-6,-16e-5,16e-5,-161e-6,161e-6,-162e-6,162e-6,-163e-6,164e-6,-164e-6,165e-6,-165e-6,166e-6,-167e-6,167e-6,-168e-6,168e-6,-169e-6,169e-6,-17e-5,17e-5,-171e-6,171e-6,-172e-6,172e-6,-173e-6,173e-6,-174e-6,174e-6,-175e-6,175e-6,-176e-6,176e-6,-177e-6,177e-6,-178e-6,178e-6,-179e-6,179e-6,-18e-5,18e-5,-181e-6,181e-6,-181e-6,182e-6,-182e-6,183e-6,-183e-6,184e-6,-184e-6,184e-6,-185e-6,185e-6,-186e-6,186e-6,-186e-6,187e-6,-187e-6,187e-6,-188e-6,188e-6,-188e-6,189e-6,-189e-6,19e-5,-19e-5,19e-5,-19e-5,191e-6,-191e-6,191e-6,-192e-6,192e-6,-192e-6,193e-6,-193e-6,193e-6,-193e-6,194e-6,-194e-6,194e-6,-194e-6,195e-6,-195e-6,195e-6,-195e-6,196e-6,-196e-6,196e-6,-196e-6,196e-6,-197e-6,197e-6,-197e-6,197e-6,-197e-6,198e-6,-198e-6,198e-6,-198e-6,198e-6,-198e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,198e-6,-198e-6,198e-6,-198e-6,198e-6,-198e-6,197e-6,-197e-6,197e-6,-197e-6,197e-6,-196e-6,196e-6,-196e-6,196e-6,-196e-6,195e-6,-195e-6,195e-6,-195e-6,194e-6,-194e-6,194e-6,-193e-6,193e-6,-193e-6,193e-6,-192e-6,192e-6,-192e-6,191e-6,-191e-6,191e-6,-19e-5,19e-5,-19e-5,189e-6,-189e-6,189e-6,-188e-6,188e-6,-188e-6,187e-6,-187e-6,186e-6,-186e-6,186e-6,-185e-6,185e-6,-184e-6,184e-6,-183e-6,183e-6,-183e-6,182e-6,-182e-6,181e-6,-181e-6,18e-5,-18e-5,179e-6,-179e-6,178e-6,-178e-6,177e-6,-177e-6,176e-6,-176e-6,175e-6,-175e-6,174e-6,-174e-6,173e-6,-173e-6,172e-6,-171e-6,171e-6,-17e-5,17e-5,-169e-6,168e-6,-168e-6,167e-6,-167e-6,166e-6,-165e-6,165e-6,-164e-6,164e-6,-163e-6,162e-6,-162e-6,161e-6,-16e-5,16e-5,-159e-6,158e-6,-158e-6,157e-6,-156e-6,156e-6,-155e-6,154e-6,-153e-6,153e-6,-152e-6,151e-6,-151e-6,15e-5,-149e-6,148e-6,-148e-6,147e-6,-146e-6,145e-6,-145e-6,144e-6,-143e-6,142e-6,-142e-6,141e-6,-14e-5,139e-6,-138e-6,138e-6,-137e-6,149e-6,-148e-6,147e-6,-146e-6,145e-6,-144e-6,144e-6,-143e-6,142e-6,-141e-6,14e-5,-139e-6,138e-6,-137e-6,136e-6,-135e-6,134e-6,-133e-6,132e-6,-131e-6,13e-5,-129e-6,128e-6,-127e-6,126e-6,-125e-6,124e-6,-123e-6,122e-6,-121e-6,12e-5,-119e-6,118e-6,-117e-6,116e-6,-115e-6,114e-6,-113e-6,112e-6,-111e-6,11e-5,-108e-6,107e-6,-106e-6,105e-6,-104e-6,103e-6,-102e-6,101e-6,-1e-4,99e-6,-98e-6,96e-6,-95e-6,94e-6,-93e-6,92e-6,-91e-6,9e-5,-89e-6,87e-6,-86e-6,85e-6,-84e-6,83e-6,-82e-6,8e-5,-79e-6,78e-6,-77e-6,76e-6,-75e-6,74e-6,-72e-6,71e-6,-7e-5,69e-6,-68e-6,66e-6,-65e-6,64e-6,-63e-6,62e-6,-61e-6,59e-6,-58e-6,57e-6,-56e-6,54e-6,-53e-6,52e-6,-51e-6,5e-5,-48e-6,47e-6,-46e-6,45e-6,-43e-6,42e-6,-41e-6,4e-5,-39e-6,37e-6,-36e-6,35e-6,-34e-6,32e-6,-31e-6,3e-5,-29e-6,27e-6,-26e-6,25e-6,-24e-6,23e-6,-21e-6,2e-5,-19e-6,18e-6,-16e-6,15e-6,-14e-6,13e-6,-11e-6,1e-5,-9e-6,8e-6,-6e-6,5e-6,-4e-6,3e-6,-1e-6]}},{}],12:[function(require,module,exports){module.exports={real:[0,0,-.5,521e-6,-.001138,116e-6,-.001202,81e-6,-772e-6,116e-6,-752e-6,144e-6,-122e-6,27e-6,-623e-6,121e-6,-85e-6,55e-6,-175e-6,53e-6,-51e-6,52e-6,-117e-6,71e-6,-7e-5,33e-6,-42e-6,5e-5,-15e-6,25e-6,-4e-5,82e-6,-201e-6,49e-6,-25e-6,9e-6,-111e-6,81e-6,-42e-6,29e-6,-33e-6,24e-6,-33e-6,23e-6,-69e-6,82e-6,-83e-6,53e-6,-127e-6,45e-6,-8e-5,34e-6,-53e-6,29e-6,-6e-5,36e-6,-83e-6,98e-6,-102e-6,46e-6,-67e-6,71e-6,-89e-6,128e-6,-191e-6,195e-6,-266e-6,291e-6,-274e-6,245e-6,-198e-6,147e-6,-104e-6,79e-6,-65e-6,57e-6,-5e-5,45e-6,-41e-6,38e-6,-35e-6,33e-6,-3e-5,29e-6,-27e-6,26e-6,-24e-6,23e-6,-22e-6,21e-6,-2e-5,19e-6,-19e-6,18e-6,-17e-6,17e-6,-16e-6,16e-6,-15e-6,15e-6,-14e-6,14e-6,-13e-6,13e-6,-13e-6,12e-6,-12e-6,12e-6,-11e-6,11e-6,-11e-6,1e-5,-1e-5,1e-5,-1e-5,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,.002302,-3e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1e-6,0,0,0,-1e-6,1e-6,-1e-6,1e-6,-2e-6,2e-6,-2e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],13:[function(require,module,exports){module.exports={real:[0,-.056752,-.485551,.414947,.037289,-.089027,.041126,.025816,-195e-6,-.002759,-.019563,88e-5,-.017563,-.002858,.001327,-568e-6,-64e-6,-954e-6,-392e-6,-428e-6,.001213,-.001126,-21e-5,262e-6,32e-6,-7e-5,-23e-6,35e-6,59e-6,468e-6,205e-6,-136e-6,-39e-6,-18e-6,-28e-6,-4e-6,3e-6,-3e-6,-21e-6,5e-6,-25e-6,53e-6,15e-6,-5e-5,2e-6,-12e-6,-2e-6,-14e-6,17e-6,-3e-6,29e-6,-6e-6,-44e-6,7e-6,-8e-6,16e-6,2e-6,-13e-6,5e-6,-3e-6,3e-6,1e-5,27e-6,-35e-6,-101e-6,-19e-6,9e-6,-1e-5,3e-6,11e-6,-29e-6,-5e-6,114e-6,-78e-6,39e-6,11e-6,36e-6,31e-6,54e-6,61e-6,-64e-6,327e-6,-1e-5,235e-6,73e-6,36e-6,-122e-6,-153e-6,127e-6,54e-6,-419e-6,104e-6,44e-6,9e-6,-56e-6,209e-6,-268e-6,-17e-5,243e-6,-112e-6,-111e-6,-19e-6,-9e-6,143e-6,4e-6,175e-6,143e-6,-2e-5,4e-6,-12e-6,25e-6,21e-6,4e-6,-28e-6,18e-6,12e-6,-3e-6,0,-2e-6,7e-6,-5e-6,-7e-6,-21e-6,-14e-6,3e-6,2e-6,-5e-6,4e-6,-2e-6,0,2e-6,-2e-6,0,0,-2e-6,-4e-6,3e-6,1e-6,-1e-6,0,3e-6,-1e-6,1e-6,-1e-6,0,5e-6,0,1e-6,-3e-6,1e-6,2e-6,-2e-6,1e-6,1e-6,0,-1e-6,6e-6,13e-6,5e-6,-5e-6,1e-6,3e-6,-3e-6,-2e-6,5e-6,-15e-6,7e-6,-12e-6,-1e-6,-4e-6,-9e-6,-12e-6,-51e-6,5e-6,-39e-6,-5e-6,-21e-6,-1e-5,0,18e-6,-4e-6,16e-6,-13e-6,46e-6,7e-6,-1e-5,-6e-6,22e-6,-7e-6,2e-5,46e-6,-35e-6,24e-6,2e-5,0,1e-6,-19e-6,-11e-6,-16e-6,-49e-6,6e-6,-7e-6,-5e-6,3e-6,-9e-6,3e-6,1e-6,3e-6,-15e-6,-1e-6,2e-6,-2e-6,-6e-6,2e-6,7e-6,11e-6,2e-6,7e-6,-3e-6,3e-6,-2e-6,1e-6,3e-6,-2e-6,2e-6,-2e-6,4e-6,-1e-6,2e-6,2e-6,-1e-6,2e-6,1e-6,-1e-6,-1e-6,-1e-6,0,0,-1e-6,1e-6,0,2e-6,-1e-6,0,2e-6,-1e-6,0,0,-1e-6,-3e-6,-2e-6,-1e-6,3e-6,1e-6,0,0,5e-6,1e-6,1e-6,0,6e-6,3e-6,0,5e-6,1e-6,31e-6,17e-6,7e-6,13e-6,2e-6,0,-7e-6,-11e-6,24e-6,-17e-6,-1e-5,1e-5,-9e-6,6e-6,5e-6,0,-27e-6,4e-6,-6e-6,0,-12e-6,-14e-6,7e-6,3e-6,2e-6,15e-6,3e-6,22e-6,-1e-5,4e-6,21e-6,-8e-6,3e-6,-2e-6,3e-6,-8e-6,13e-6,3e-6,-6e-6,1e-6,1e-6,-2e-6,-4e-6,-5e-6,-2e-6,-5e-6,-3e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,-.142044,.119331,.086961,519e-6,.061124,-.008195,.003663,-.001992,-.005229,-.003499,.00294,.003171,.011203,387e-6,902e-6,-191e-6,55e-5,462e-6,-264e-6,833e-6,-158e-6,-38e-6,1e-5,-177e-6,-61e-6,129e-6,-167e-6,-71e-6,171e-6,137e-6,78e-6,-51e-6,-5e-5,2e-5,-47e-6,34e-6,-4e-6,-42e-6,3e-6,-15e-6,26e-6,-1e-6,-13e-6,-18e-6,-34e-6,7e-6,8e-6,-19e-6,-26e-6,6e-6,-3e-6,-2e-6,5e-6,1e-6,-13e-6,-6e-6,8e-6,-17e-6,7e-6,-13e-6,-12e-6,45e-6,3e-5,0,1e-6,-25e-6,14e-6,2e-6,-19e-6,-26e-6,2e-6,55e-6,5e-6,-11e-6,13e-6,47e-6,5e-6,5e-5,-79e-6,168e-6,223e-6,-42e-6,65e-6,-34e-6,25e-6,-2e-5,-176e-6,346e-6,8e-5,-175e-6,179e-6,5e-6,-24e-6,-9e-6,154e-6,-257e-6,-65e-6,19e-6,-3e-5,-7e-5,-3e-6,12e-6,1e-4,-9e-5,48e-6,-144e-6,-59e-6,-35e-6,-13e-6,5e-6,-2e-5,7e-6,-52e-6,22e-6,0,-1e-6,1e-5,-2e-6,-5e-6,8e-6,1e-5,-13e-6,-16e-6,5e-6,4e-6,3e-6,2e-6,4e-6,1e-6,-2e-6,2e-6,-1e-6,5e-6,-5e-6,-2e-6,3e-6,-1e-6,4e-6,0,0,0,3e-6,-3e-6,-1e-6,1e-6,-1e-6,-1e-6,1e-6,0,0,3e-6,-1e-6,3e-6,2e-6,-1e-5,-8e-6,4e-6,0,2e-6,-2e-6,1e-6,0,8e-6,5e-6,-24e-6,4e-6,0,3e-6,-12e-6,-8e-6,-21e-6,12e-6,12e-6,-53e-6,33e-6,-2e-5,-5e-6,-25e-6,-5e-6,59e-6,-8e-5,-61e-6,82e-6,-4e-5,-5e-6,8e-6,24e-6,-82e-6,67e-6,53e-6,-4e-5,8e-6,19e-6,8e-6,1e-5,-3e-5,42e-6,-14e-6,15e-6,17e-6,12e-6,19e-6,-8e-6,4e-6,-3e-6,18e-6,-12e-6,5e-6,0,-13e-6,7e-6,2e-6,-2e-6,-4e-6,0,6e-6,-1e-5,-8e-6,1e-6,-3e-6,-1e-6,-2e-6,-1e-6,0,1e-6,-3e-6,0,2e-6,-2e-6,0,-2e-6,0,-1e-6,0,-2e-6,1e-6,1e-6,0,0,0,0,-1e-6,0,-2e-6,0,-2e-6,-1e-6,4e-6,4e-6,-2e-6,-1e-6,0,1e-6,-3e-6,0,-1e-6,-7e-6,11e-6,-2e-6,2e-6,-4e-6,5e-6,6e-6,1e-5,8e-6,-15e-6,15e-6,-22e-6,0,2e-6,14e-6,7e-6,-18e-6,21e-6,39e-6,-32e-6,8e-6,0,-2e-6,-21e-6,35e-6,-16e-6,-36e-6,22e-6,-7e-6,-5e-6,-3e-6,-7e-6,8e-6,-23e-6,-9e-6,0,-14e-6,-6e-6,-16e-6,-5e-6,-3e-6,-3e-6,-9e-6,-1e-6,-3e-6,-5e-6,2e-6,-6e-6,-4e-6,-3e-6,-3e-6,-2e-6,-2e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}},{}],14:[function(require,module,exports){module.exports={real:[0,0,-.001193,975e-6,-.225597,556e-6,-341e-6,.146408,-401e-6,356e-6,-.082233,203e-6,-177e-6,.054735,-862e-6,714e-6,-.054117,464e-6,-438e-6,.042607,-199e-6,105e-6,-.04084,61e-6,-6e-5,.027337,-58e-6,57e-6,-.033029,5e-5,-49e-6,.037746,-47e-6,47e-6,-.040758,62e-6,-.001234,.008164,-.008056,.007953,-.007853,.007757,-.007665,.007575,-.007489,.007405,-.007103,.007028,-.006954,.006675,-.006608,.006543,-.00648,.006419,-.00636,.006302,-.005696,.005646,-.005597,.00555,-.005503,.005458,-.005414,.005371,-.005012,.004973,-.004936,.004899,-.004863,.004827,-.004793,.004759,-.004726,.003904,-.003878,.003852,-.003826,.003802,-.003777,.003753,-.00373,.003707,-.003684,.003662,-.003423,.003403,-.003384,.003364,-.003345,.003326,-.003308,.00329,-.003272,.003254,-.003237,.00322,-.003203,.003186,-.003074,.003059,-.003043,.003028,-.003014,.002999,-.002985,.00297,-.002956,.002942,-.002929,.002915,-.002902,.002889,-.002876,.002863,-.002851,.002839,-.002826,.002814,-.002802,.00279,-.002779,.002767,-.002756,.002745,-.002734,.002723,-.002712,.002701,-.002691,.00268,-.00267,.00266,-.00265,.00264,-.00263,.00262,-.00261,.002601,-.002591,.002582,-.002653,.002644,-.002634,.002625,-.002616,.002607,-.002598,.002589,-.00258,.002572,-.002563,.002555,-.002546,.002538,-.00253,.002521,-.002513,.002505,-.002497,.002489,-.002482,.002474,-.002466,.002459,-.002451,.002444,-.002436,.002429,-.002497,.00249,-.002482,.002475,-.002468,.002461,-.002453,.002446,-.002439,.002432,-.002426,.002419,-.002412,.002405,-.002399,.002392,-.002385,.002379,-.002373,.002366,-.00236,.002353,-.002347,.002341,-.002335,.002329,-.002323,.002317,-.002311,.002305,-.002299,.002293,-.002287,.002281,-.002276,.00227,-.002408,.002402,-.002396,.00239,-.002384,.002378,-.002373,.002367,-.002361,.002356,-.00235,.002345,-.002339,.002334,-.002328,.002323,-.002317,.002312,-.002307,.002301,-.002296,.002291,-.002286,.002281,-.002276,.00227,-.002265,.00226,-.002255,.00225,-.002246,.002241,-.002236,.002231,-.002226,.002221,-.002217,.002212,-.002207,.002202,-.002198,.002193,-.002189,.002184,-.00218,.002175,-.00217,.002166,-.002162,.002157,-.002153,.002148,-.002144,.00214,-.002135,.002198,-.002193,.002189,-.002185,.00218,-.002176,.002172,-.002167,.002163,-.002159,.002155,-.002151,.002146,-.002142,.002138,-.002134,.00213,-.002126,.002122,-.002118,.002114,-.00211,.002106,-.002102,.002098,-.002094,.00209,-.002086,.002083,-.002079,.002075,-.002071,.002067,-.002064,.00206,-.002056,.002052,-.002049,.002045,-.002041,.002038,-.002034,.002031,-.002027,.002023,-.00202,.002016,-.002013,.002009,-.002006,.002002,-.001999,.001995,-.001992,.001988,-.001985,.001981,-.001978,.001975,-.001971,.001968,-.001964,.001961,-.001958,.001954,-.001951,.001948,-.001945,.001941,-.001938,.001935,-.001932,.001928,-.001925,.001922,-.001919,.001916,-.001912,.001909,-.001906,.001903,-.0019,.001897,-.001894,.001891,-.001887,.001884,-.001881,.001878,-.001875,.001872,-.001869,.001866,-.001863,.00186,-.001857,.001854,-.001851,.001848,-.001845,.001842,-.001839,.001836,-.001833,.001831,-.001828,.001825,-.001822,.001819,-.001816,.001813,-.00181,.001807,-.001805,.001802,-.001799,.001796,-.001793,.001791,-.001788,.001785,-.001782,.001779,-.001777,.001774,-.001771,.001768,-.001766,.001763,-.00176,.001757,-.001755,.001752,-.001749,.001747,-.001744,.001741,-.001738,.001736,-.001733,.00173,-.001728,.001725,-.001722,.00172,-.001717,.001715,-.001712,.001709,-.001707,.001704,-.001701,.001699,-.001696,.001694,-.001691,.001689,-.001686,.001683,-.001681,.001678,-.001676,.001673,-.001671,.001668,-.001665,.001663,-.00166,.001658,-.001655,.001143,-.001142,.00114,-.001138,.001137,-.001135,.001133,-.001131,.00113,-.001128,.001126,-.001124,.001123,-.001121,.001119,-.001118,.001116,-.001114,.001112,-.001111,.001109,-.001107,.001106,-.001104,.001102,-.001101,.001099,-.001097,.001096,-.001094,.001092,-.001091,.001158,-.001156,.001154,-.001153,.001151,-.001149,.001147,-.001145,.001144,-.001142,.00114,-.001138,.001137,-.001135,.001133,-.001131,.00113,-.001128,.001126,-.001124,.001123,-.001121,.001119,-.001117,.001116,-.001114,.001112,-.00111,.001109,-.001107,.001105,-.001103,.001102,-.0011,.001098,-.001097,.001095,-.001093,.001091,-.00109,.001088,-.001086,.001084,-.001083,.001081,-.001079,.001078,-.001076,.001074,-.001072,.001071,-.001069,.001067,-.001065,.001064,-.001062,.00106,-.001059,.001057,-.001055,.001053,-.001052,.00105,-.001048,.001047,-.001045,.001043,-.001041,.00104,-.001038,.001036,-.001035,.001033,-.001031,.001029,-.001028,.001026,-.001024,.001023,-.001021,.001019,-.001017,.001016,-.001014,.001012,-.001011,.001009,-.001007,.001005,-.001004,.001002,-.001,999e-6,-997e-6,995e-6,-993e-6,992e-6,-99e-5,988e-6,-987e-6,985e-6,-983e-6,981e-6,-98e-5,978e-6,-976e-6,975e-6,-973e-6,971e-6,-969e-6,968e-6,-966e-6,964e-6,-962e-6,961e-6,-959e-6,957e-6,-956e-6,954e-6,-952e-6,95e-5,-949e-6,947e-6,-945e-6,943e-6,-942e-6,94e-5,-938e-6,937e-6,-935e-6,933e-6,-931e-6,93e-5,-928e-6,926e-6,-924e-6,923e-6,-921e-6,919e-6,-917e-6,916e-6,-914e-6,912e-6,-91e-5,909e-6,-907e-6,905e-6,-903e-6,902e-6,-9e-4,898e-6,-896e-6,895e-6,-814e-6,813e-6,-811e-6,809e-6,-808e-6,806e-6,-805e-6,803e-6,-801e-6,8e-4,-798e-6,796e-6,-795e-6,793e-6,-792e-6,79e-5,-788e-6,787e-6,-785e-6,783e-6,-782e-6,78e-5,-778e-6,777e-6,-775e-6,774e-6,-772e-6,77e-5,-769e-6,767e-6,-765e-6,764e-6,-762e-6,76e-5,-759e-6,757e-6,-755e-6,754e-6,-752e-6,75e-5,-749e-6,747e-6,-745e-6,744e-6,-742e-6,74e-5,-739e-6,737e-6,-735e-6,734e-6,-732e-6,73e-5,-729e-6,727e-6,-725e-6,724e-6,-722e-6,72e-5,-719e-6,717e-6,-715e-6,713e-6,-712e-6,71e-5,-708e-6,707e-6,-705e-6,703e-6,-702e-6,7e-4,-698e-6,696e-6,-695e-6,693e-6,-691e-6,689e-6,-688e-6,686e-6,-684e-6,683e-6,-681e-6,679e-6,-677e-6,676e-6,-674e-6,672e-6,-67e-5,669e-6,-667e-6,665e-6,-663e-6,662e-6,-66e-5,658e-6,-656e-6,655e-6,-653e-6,651e-6,-649e-6,648e-6,-646e-6,644e-6,-642e-6,64e-5,-639e-6,637e-6,-635e-6,633e-6,-632e-6,63e-5,-628e-6,626e-6,-624e-6,623e-6,-621e-6,619e-6,-617e-6,615e-6,-614e-6,612e-6,-61e-5,608e-6,-606e-6,604e-6,-603e-6,601e-6,-599e-6,597e-6,-595e-6,593e-6,-592e-6,59e-5,-588e-6,586e-6,-584e-6,582e-6,-581e-6,579e-6,-577e-6,575e-6,-573e-6,571e-6,-569e-6,568e-6,-566e-6,564e-6,-562e-6,56e-5,-558e-6,556e-6,-554e-6,553e-6,-551e-6,471e-6,-469e-6,467e-6,-466e-6,464e-6,-463e-6,461e-6,-459e-6,458e-6,-456e-6,454e-6,-453e-6,451e-6,-45e-5,448e-6,-446e-6,445e-6,-443e-6,441e-6,-44e-5,438e-6,-436e-6,435e-6,-433e-6,431e-6,-43e-5,428e-6,-426e-6,425e-6,-423e-6,421e-6,-42e-5,418e-6,-416e-6,415e-6,-413e-6,411e-6,-41e-5,408e-6,-406e-6,404e-6,-403e-6,401e-6,-399e-6,398e-6,-396e-6,394e-6,-393e-6,391e-6,-389e-6,387e-6,-386e-6,384e-6,-382e-6,381e-6,-379e-6,377e-6,-375e-6,374e-6,-372e-6,37e-5,-369e-6,367e-6,-365e-6,363e-6,-362e-6,36e-5,-358e-6,356e-6,-355e-6,353e-6,-351e-6,349e-6,-348e-6,346e-6,-344e-6,342e-6,-341e-6,339e-6,-337e-6,335e-6,-333e-6,332e-6,-33e-5,328e-6,-326e-6,325e-6,-323e-6,321e-6,-319e-6,317e-6,-316e-6,314e-6,-312e-6,31e-5,-308e-6,307e-6,-305e-6,303e-6,-301e-6,299e-6,-298e-6,296e-6,-294e-6,292e-6,-29e-5,289e-6,-287e-6,285e-6,-283e-6,281e-6,-28e-5,278e-6,-276e-6,274e-6,-272e-6,27e-5,-269e-6,267e-6,-265e-6,263e-6,-261e-6,259e-6,-258e-6,256e-6,-254e-6,252e-6,-25e-5,248e-6,-246e-6,245e-6,-243e-6,241e-6,-239e-6,237e-6,-235e-6,233e-6,-232e-6,23e-5,-228e-6,226e-6,-224e-6,222e-6,-22e-5,219e-6,-217e-6,215e-6,-213e-6,211e-6,-209e-6,207e-6,-205e-6,203e-6,-202e-6,2e-4,-198e-6,196e-6,-194e-6,192e-6,-19e-5,188e-6,-186e-6,185e-6,-183e-6,181e-6,-179e-6,177e-6,-175e-6,173e-6,-171e-6,169e-6,-167e-6,165e-6,-164e-6,162e-6,-16e-5,158e-6,-156e-6,154e-6,-152e-6,15e-5,-148e-6,146e-6,-144e-6,142e-6,-141e-6,139e-6,-137e-6,135e-6,-133e-6,131e-6,-129e-6,112e-6,-111e-6,109e-6,-107e-6,106e-6,-104e-6,102e-6,-1e-4,99e-6,-97e-6,95e-6,-93e-6,92e-6,-9e-5,88e-6,-87e-6,85e-6,-83e-6,81e-6,-8e-5,78e-6,-76e-6,75e-6,-73e-6,71e-6,-69e-6,68e-6,-66e-6,64e-6,-62e-6,61e-6,-59e-6,57e-6,-56e-6,54e-6,-52e-6,5e-5,-49e-6,47e-6,-45e-6,43e-6,-42e-6,4e-5,-38e-6,36e-6,-35e-6,33e-6,-31e-6,3e-5,-28e-6,26e-6,-24e-6,23e-6,-21e-6,19e-6,-17e-6,16e-6,-14e-6,12e-6,-1e-5,9e-6,-7e-6,5e-6,-3e-6,2e-6,0,-2e-6,3e-6,-5e-6,7e-6,-9e-6,1e-5,-12e-6,14e-6,-16e-6,17e-6,-19e-6,21e-6,-23e-6,24e-6,-26e-6,28e-6,-3e-5,31e-6,-33e-6,35e-6,-36e-6,38e-6,-4e-5,42e-6,-43e-6,45e-6,-47e-6,49e-6,-5e-5,52e-6,-54e-6,56e-6,-57e-6,59e-6,-61e-6,62e-6,-64e-6,66e-6,-68e-6,69e-6,-71e-6,73e-6,-75e-6,76e-6,-78e-6,8e-5,-81e-6,83e-6,-85e-6,87e-6,-88e-6,9e-5,-92e-6,93e-6,-95e-6,97e-6,-99e-6,1e-4,-102e-6,104e-6,-105e-6,107e-6,-109e-6,111e-6,-112e-6,114e-6,-116e-6,117e-6,-119e-6,121e-6,-122e-6,124e-6,-126e-6,128e-6,-129e-6,131e-6,-133e-6,134e-6,-136e-6,138e-6,-139e-6,141e-6,-143e-6,144e-6,-146e-6,148e-6,-149e-6,151e-6,-153e-6,154e-6,-156e-6,158e-6,-159e-6,161e-6,-163e-6,164e-6,-166e-6,168e-6,-169e-6,171e-6,-173e-6,174e-6,-176e-6,178e-6,-179e-6,181e-6,-183e-6,184e-6,-186e-6,188e-6,-189e-6,191e-6,-192e-6,194e-6,-196e-6,197e-6,-199e-6,201e-6,-202e-6,204e-6,-205e-6,207e-6,-209e-6,21e-5,-212e-6,213e-6,-215e-6,217e-6,-218e-6,22e-5,-221e-6,223e-6,-224e-6,226e-6,-228e-6,229e-6,-231e-6,232e-6,-201e-6,202e-6,-203e-6,205e-6,-206e-6,207e-6,-209e-6,21e-5,-211e-6,213e-6,-214e-6,215e-6,-217e-6,218e-6,-219e-6,22e-5,-222e-6,223e-6,-224e-6,226e-6,-227e-6,228e-6,-23e-5,231e-6,-232e-6,233e-6,-235e-6,236e-6,-237e-6,238e-6,-24e-5,241e-6,-242e-6,244e-6,-245e-6,246e-6,-247e-6,249e-6,-25e-5,251e-6,-252e-6,253e-6,-255e-6,256e-6,-257e-6,258e-6,-26e-5,261e-6,-262e-6,263e-6,-264e-6,266e-6,-267e-6,268e-6,-269e-6,27e-5,-272e-6,273e-6,-274e-6,275e-6,-276e-6,277e-6,-279e-6,28e-5,-281e-6,282e-6,-283e-6,284e-6,-285e-6,287e-6,-288e-6,289e-6,-29e-5,291e-6,-292e-6,293e-6,-294e-6,295e-6,-297e-6,298e-6,-299e-6,3e-4,-301e-6,302e-6,-303e-6,304e-6,-305e-6,306e-6,-307e-6,308e-6,-309e-6,311e-6,-312e-6,313e-6,-314e-6,315e-6,-316e-6,317e-6,-318e-6,319e-6,-32e-5,321e-6,-322e-6,323e-6,-324e-6,325e-6,-326e-6,327e-6,-328e-6,329e-6,-33e-5,331e-6,-331e-6,332e-6,-333e-6,334e-6,-335e-6,336e-6,-337e-6,338e-6,-339e-6,34e-5,-341e-6,342e-6,-343e-6,343e-6,-344e-6,345e-6,-346e-6,347e-6,-348e-6,349e-6,-35e-5,35e-5,-351e-6,352e-6,-353e-6,354e-6,-355e-6,355e-6,-356e-6,357e-6,-358e-6,359e-6,-359e-6,36e-5,-361e-6,362e-6,-363e-6,363e-6,-364e-6,365e-6,-366e-6,366e-6,-367e-6,368e-6,-368e-6,369e-6,-37e-5,371e-6,-371e-6,372e-6,-373e-6,373e-6,-374e-6,375e-6,-375e-6,376e-6,-377e-6,377e-6,-378e-6,379e-6,-379e-6,38e-5,-381e-6,381e-6,-382e-6,382e-6,-383e-6,384e-6,-384e-6,385e-6,-385e-6,386e-6,-387e-6,387e-6,-388e-6,388e-6,-389e-6,389e-6,-39e-5,39e-5,-391e-6,391e-6,-392e-6,392e-6,-393e-6,393e-6,-394e-6,394e-6,-395e-6,395e-6,-396e-6,396e-6,-396e-6,397e-6,-397e-6,398e-6,-398e-6,399e-6,-399e-6,399e-6,-4e-4,4e-4,-4e-4,401e-6,-401e-6,402e-6,-402e-6,402e-6,-403e-6,403e-6,-403e-6,404e-6,-404e-6,404e-6,-404e-6,405e-6,-405e-6,405e-6,-406e-6,406e-6,-406e-6,406e-6,-406e-6,407e-6,-407e-6,407e-6,-407e-6,408e-6,-408e-6,408e-6,-408e-6,408e-6,-291e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-291e-6,291e-6,-291e-6,291e-6,-291e-6,291e-6,-291e-6,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,289e-6,-289e-6,289e-6,-289e-6,289e-6,-288e-6,288e-6,-288e-6,288e-6,-288e-6,287e-6,-287e-6,287e-6,-287e-6,286e-6,-286e-6,286e-6,-286e-6,285e-6,-285e-6,285e-6,-284e-6,284e-6,-284e-6,283e-6,-283e-6,283e-6,-282e-6,282e-6,-282e-6,281e-6,-281e-6,281e-6,-28e-5,28e-5,-28e-5,279e-6,-279e-6,278e-6,-278e-6,278e-6,-277e-6,277e-6,-276e-6,276e-6,-276e-6,275e-6,-275e-6,274e-6,-274e-6,273e-6,-273e-6,272e-6,-272e-6,271e-6,-271e-6,27e-5,-27e-5,269e-6,-269e-6,268e-6,-268e-6,267e-6,-267e-6,266e-6,-266e-6,265e-6,-265e-6,264e-6,-263e-6,263e-6,-262e-6,262e-6,-261e-6,261e-6,-26e-5,259e-6,-259e-6,258e-6,-258e-6,257e-6,-256e-6,256e-6,-255e-6,254e-6,-254e-6,253e-6,-252e-6,252e-6,-251e-6,25e-5,-25e-5,249e-6,-248e-6,248e-6,-247e-6,246e-6,-245e-6,245e-6,-244e-6,243e-6,-243e-6,242e-6,-241e-6,24e-5,-24e-5,239e-6,-238e-6,237e-6,-236e-6,236e-6,-235e-6,234e-6,-233e-6,232e-6,-232e-6,231e-6,-23e-5,229e-6,-228e-6,228e-6,-227e-6,226e-6,-225e-6,224e-6,-223e-6,222e-6,-222e-6,221e-6,-22e-5,219e-6,-218e-6,217e-6,-216e-6,215e-6,-214e-6,214e-6,-213e-6,212e-6,-211e-6,21e-5,-209e-6,208e-6,-207e-6,206e-6,-205e-6,204e-6,-203e-6,202e-6,-201e-6,2e-4,-199e-6,198e-6,-197e-6,196e-6,-195e-6,194e-6,-193e-6,192e-6,-191e-6,19e-5,-189e-6,188e-6,-187e-6,186e-6,-185e-6,184e-6,-183e-6,182e-6,-181e-6,18e-5,-179e-6,177e-6,-176e-6,175e-6,-174e-6,173e-6,-172e-6,171e-6,-17e-5,169e-6,-168e-6,166e-6,-165e-6,164e-6,-163e-6,162e-6,-161e-6,16e-5,-159e-6,157e-6,-156e-6,155e-6,-154e-6,153e-6,-152e-6,15e-5,-149e-6,148e-6,-147e-6,146e-6,-144e-6,143e-6,-142e-6,141e-6,-14e-5,138e-6,-137e-6,136e-6,-135e-6,134e-6,-132e-6,131e-6,-13e-5,129e-6,-127e-6,126e-6,-125e-6,124e-6,-122e-6,121e-6,-12e-5,119e-6,-117e-6,116e-6,-115e-6,114e-6,-112e-6,111e-6,-11e-5,108e-6,-107e-6,106e-6,-105e-6,103e-6,-102e-6,101e-6,-99e-6,98e-6,-97e-6,95e-6,-94e-6,93e-6,-92e-6,9e-5,-89e-6,88e-6,-86e-6,85e-6,-84e-6,82e-6,-81e-6,8e-5,-78e-6,77e-6,-76e-6,74e-6,-73e-6,71e-6,-7e-5,69e-6,-67e-6,55e-6,-54e-6,53e-6,-52e-6,5e-5,-49e-6,48e-6,-47e-6,46e-6,-45e-6,44e-6,-42e-6,41e-6,-4e-5,39e-6,-38e-6,37e-6,-36e-6,34e-6,-33e-6,32e-6,-31e-6,3e-5,-29e-6,27e-6,-26e-6,25e-6,-24e-6,23e-6,-22e-6,21e-6,-19e-6,18e-6,-17e-6,16e-6,-15e-6,14e-6,-12e-6,11e-6,-1e-5,9e-6,-8e-6,7e-6,-5e-6,4e-6,-3e-6,2e-6,-1e-6,0,2e-6,-3e-6,4e-6,-5e-6,6e-6,-7e-6,9e-6,-1e-5,11e-6,-12e-6,13e-6,-14e-6,16e-6,-17e-6,18e-6,-19e-6,2e-5,-21e-6,23e-6,-24e-6,25e-6,-26e-6,27e-6,-28e-6,29e-6,-31e-6,32e-6,-33e-6,34e-6,-35e-6,36e-6,-38e-6,39e-6,-4e-5,41e-6,-42e-6,43e-6,-44e-6,46e-6,-47e-6,48e-6,-49e-6,5e-5,-51e-6,52e-6,-54e-6,55e-6,-56e-6,57e-6,-58e-6,59e-6,-6e-5,61e-6,-62e-6,64e-6,-65e-6,66e-6,-67e-6,68e-6,-69e-6,7e-5,-71e-6,72e-6,-74e-6,75e-6,-76e-6,77e-6,-78e-6,79e-6,-8e-5,81e-6,-82e-6,83e-6,-84e-6,85e-6,-87e-6,88e-6,-89e-6,9e-5,-91e-6,92e-6,-93e-6,94e-6,-95e-6,96e-6,-97e-6,98e-6,-99e-6,1e-4,-101e-6,102e-6,-103e-6,104e-6,-105e-6,106e-6,-107e-6,108e-6,-109e-6,11e-5,-111e-6,112e-6,-113e-6,114e-6,-115e-6,116e-6,-117e-6,118e-6,-119e-6,12e-5,-121e-6,122e-6,-123e-6,124e-6,-125e-6,126e-6,-127e-6,128e-6,-129e-6,129e-6,-13e-5,131e-6,-132e-6,133e-6,-134e-6,135e-6,-136e-6,137e-6,-138e-6,138e-6,-139e-6,14e-5,-141e-6,142e-6,-143e-6,144e-6,-144e-6,145e-6,-146e-6,147e-6,-148e-6,149e-6,-149e-6,15e-5,-151e-6,152e-6,-153e-6,153e-6,-154e-6,155e-6,-156e-6,157e-6,-157e-6,158e-6,-159e-6,16e-5,-16e-5,161e-6,-162e-6,163e-6,-163e-6,164e-6,-165e-6,165e-6,-166e-6,167e-6,-168e-6,168e-6,-169e-6,17e-5,-17e-5,171e-6,-172e-6,172e-6,-173e-6,174e-6,-174e-6,175e-6,-175e-6,176e-6,-177e-6,177e-6,-178e-6,178e-6,-179e-6,18e-5,-18e-5,181e-6,-181e-6,182e-6,-182e-6,183e-6,-184e-6,184e-6,-185e-6,185e-6,-186e-6,186e-6,-187e-6,187e-6,-188e-6,188e-6,-189e-6,189e-6,-19e-5,19e-5,-19e-5,191e-6,-191e-6,192e-6,-192e-6,193e-6,-193e-6,193e-6,-194e-6,194e-6,-195e-6,195e-6,-195e-6,196e-6,-196e-6,196e-6,-197e-6,197e-6,-197e-6,198e-6,-198e-6,198e-6,-199e-6,199e-6,-199e-6,199e-6,-2e-4,2e-4,-2e-4,2e-4,-201e-6,201e-6,-201e-6,201e-6,-201e-6,202e-6,-202e-6,202e-6,-202e-6,202e-6,-203e-6,203e-6,-203e-6,203e-6,-203e-6,203e-6,-203e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,186e-6,-186e-6,186e-6,-186e-6,186e-6,-186e-6,186e-6,-186e-6,186e-6,-186e-6,186e-6,-186e-6,186e-6,-186e-6,186e-6],imag:[0,.267096,0,0,-5e-6,0,0,11e-6,0,0,-12e-6,0,0,14e-6,0,0,-21e-6,0,0,23e-6,0,0,-3e-5,0,0,26e-6,0,0,-39e-6,0,0,54e-6,0,0,-71e-6,0,-2e-6,17e-6,-17e-6,18e-6,-19e-6,2e-5,-2e-5,21e-6,-22e-6,22e-6,-23e-6,23e-6,-24e-6,24e-6,-25e-6,25e-6,-26e-6,27e-6,-28e-6,29e-6,-27e-6,27e-6,-28e-6,29e-6,-3e-5,3e-5,-31e-6,32e-6,-31e-6,31e-6,-32e-6,33e-6,-34e-6,34e-6,-35e-6,36e-6,-37e-6,31e-6,-32e-6,32e-6,-33e-6,34e-6,-34e-6,35e-6,-36e-6,36e-6,-37e-6,38e-6,-36e-6,37e-6,-37e-6,38e-6,-39e-6,39e-6,-4e-5,41e-6,-41e-6,42e-6,-43e-6,44e-6,-44e-6,45e-6,-44e-6,45e-6,-46e-6,46e-6,-47e-6,48e-6,-48e-6,49e-6,-5e-5,5e-5,-51e-6,52e-6,-53e-6,53e-6,-54e-6,55e-6,-56e-6,56e-6,-57e-6,58e-6,-58e-6,59e-6,-6e-5,61e-6,-61e-6,62e-6,-63e-6,64e-6,-65e-6,65e-6,-66e-6,67e-6,-68e-6,68e-6,-69e-6,7e-5,-71e-6,72e-6,-72e-6,73e-6,-74e-6,75e-6,-78e-6,79e-6,-8e-5,8e-5,-81e-6,82e-6,-83e-6,84e-6,-85e-6,86e-6,-86e-6,87e-6,-88e-6,89e-6,-9e-5,91e-6,-92e-6,93e-6,-93e-6,94e-6,-95e-6,96e-6,-97e-6,98e-6,-99e-6,1e-4,-101e-6,102e-6,-106e-6,107e-6,-108e-6,108e-6,-109e-6,11e-5,-111e-6,112e-6,-113e-6,114e-6,-115e-6,116e-6,-117e-6,118e-6,-119e-6,12e-5,-121e-6,122e-6,-123e-6,124e-6,-125e-6,126e-6,-127e-6,128e-6,-129e-6,13e-5,-131e-6,132e-6,-133e-6,134e-6,-135e-6,136e-6,-137e-6,138e-6,-139e-6,14e-5,-15e-5,151e-6,-153e-6,154e-6,-155e-6,156e-6,-157e-6,158e-6,-159e-6,16e-5,-161e-6,163e-6,-164e-6,165e-6,-166e-6,167e-6,-168e-6,169e-6,-171e-6,172e-6,-173e-6,174e-6,-175e-6,176e-6,-178e-6,179e-6,-18e-5,181e-6,-182e-6,183e-6,-185e-6,186e-6,-187e-6,188e-6,-189e-6,191e-6,-192e-6,193e-6,-194e-6,195e-6,-197e-6,198e-6,-199e-6,2e-4,-201e-6,203e-6,-204e-6,205e-6,-206e-6,207e-6,-209e-6,21e-5,-211e-6,212e-6,-214e-6,222e-6,-223e-6,224e-6,-225e-6,227e-6,-228e-6,229e-6,-231e-6,232e-6,-233e-6,234e-6,-236e-6,237e-6,-238e-6,24e-5,-241e-6,242e-6,-244e-6,245e-6,-246e-6,248e-6,-249e-6,25e-5,-252e-6,253e-6,-254e-6,256e-6,-257e-6,258e-6,-26e-5,261e-6,-262e-6,264e-6,-265e-6,266e-6,-268e-6,269e-6,-27e-5,272e-6,-273e-6,275e-6,-276e-6,277e-6,-279e-6,28e-5,-281e-6,283e-6,-284e-6,286e-6,-287e-6,288e-6,-29e-5,291e-6,-293e-6,294e-6,-295e-6,297e-6,-298e-6,3e-4,-301e-6,302e-6,-304e-6,305e-6,-307e-6,308e-6,-309e-6,311e-6,-312e-6,314e-6,-315e-6,317e-6,-318e-6,319e-6,-321e-6,322e-6,-324e-6,325e-6,-327e-6,328e-6,-329e-6,331e-6,-332e-6,334e-6,-335e-6,337e-6,-338e-6,34e-5,-341e-6,343e-6,-344e-6,345e-6,-347e-6,348e-6,-35e-5,351e-6,-353e-6,354e-6,-356e-6,357e-6,-359e-6,36e-5,-362e-6,363e-6,-365e-6,366e-6,-368e-6,369e-6,-371e-6,372e-6,-374e-6,375e-6,-377e-6,378e-6,-38e-5,381e-6,-383e-6,384e-6,-386e-6,387e-6,-389e-6,39e-5,-392e-6,393e-6,-395e-6,396e-6,-398e-6,399e-6,-401e-6,402e-6,-404e-6,405e-6,-407e-6,408e-6,-41e-5,411e-6,-413e-6,415e-6,-416e-6,418e-6,-419e-6,421e-6,-422e-6,424e-6,-425e-6,427e-6,-428e-6,43e-5,-432e-6,433e-6,-435e-6,436e-6,-438e-6,439e-6,-441e-6,442e-6,-444e-6,446e-6,-447e-6,449e-6,-45e-5,452e-6,-453e-6,455e-6,-457e-6,458e-6,-46e-5,461e-6,-463e-6,464e-6,-466e-6,323e-6,-325e-6,326e-6,-327e-6,328e-6,-329e-6,33e-5,-331e-6,332e-6,-333e-6,334e-6,-336e-6,337e-6,-338e-6,339e-6,-34e-5,341e-6,-342e-6,343e-6,-344e-6,346e-6,-347e-6,348e-6,-349e-6,35e-5,-351e-6,352e-6,-353e-6,354e-6,-356e-6,357e-6,-358e-6,382e-6,-383e-6,384e-6,-385e-6,386e-6,-388e-6,389e-6,-39e-5,391e-6,-392e-6,393e-6,-395e-6,396e-6,-397e-6,398e-6,-399e-6,401e-6,-402e-6,403e-6,-404e-6,405e-6,-407e-6,408e-6,-409e-6,41e-5,-411e-6,413e-6,-414e-6,415e-6,-416e-6,417e-6,-419e-6,42e-5,-421e-6,422e-6,-423e-6,425e-6,-426e-6,427e-6,-428e-6,429e-6,-431e-6,432e-6,-433e-6,434e-6,-436e-6,437e-6,-438e-6,439e-6,-44e-5,442e-6,-443e-6,444e-6,-445e-6,446e-6,-448e-6,449e-6,-45e-5,451e-6,-452e-6,454e-6,-455e-6,456e-6,-457e-6,458e-6,-46e-5,461e-6,-462e-6,463e-6,-465e-6,466e-6,-467e-6,468e-6,-469e-6,471e-6,-472e-6,473e-6,-474e-6,475e-6,-477e-6,478e-6,-479e-6,48e-5,-482e-6,483e-6,-484e-6,485e-6,-486e-6,488e-6,-489e-6,49e-5,-491e-6,492e-6,-494e-6,495e-6,-496e-6,497e-6,-498e-6,5e-4,-501e-6,502e-6,-503e-6,505e-6,-506e-6,507e-6,-508e-6,509e-6,-511e-6,512e-6,-513e-6,514e-6,-515e-6,517e-6,-518e-6,519e-6,-52e-5,521e-6,-523e-6,524e-6,-525e-6,526e-6,-527e-6,529e-6,-53e-5,531e-6,-532e-6,533e-6,-535e-6,536e-6,-537e-6,538e-6,-539e-6,541e-6,-542e-6,543e-6,-544e-6,545e-6,-547e-6,548e-6,-549e-6,55e-5,-551e-6,553e-6,-554e-6,555e-6,-556e-6,557e-6,-559e-6,56e-5,-561e-6,562e-6,-563e-6,564e-6,-516e-6,517e-6,-518e-6,519e-6,-52e-5,521e-6,-522e-6,523e-6,-524e-6,526e-6,-527e-6,528e-6,-529e-6,53e-5,-531e-6,532e-6,-533e-6,534e-6,-535e-6,536e-6,-537e-6,538e-6,-539e-6,54e-5,-542e-6,543e-6,-544e-6,545e-6,-546e-6,547e-6,-548e-6,549e-6,-55e-5,551e-6,-552e-6,553e-6,-554e-6,555e-6,-556e-6,557e-6,-558e-6,559e-6,-56e-5,561e-6,-563e-6,564e-6,-565e-6,566e-6,-567e-6,568e-6,-569e-6,57e-5,-571e-6,572e-6,-573e-6,574e-6,-575e-6,576e-6,-577e-6,578e-6,-579e-6,58e-5,-581e-6,582e-6,-583e-6,584e-6,-585e-6,586e-6,-587e-6,588e-6,-589e-6,59e-5,-591e-6,592e-6,-593e-6,594e-6,-595e-6,596e-6,-597e-6,598e-6,-599e-6,6e-4,-601e-6,602e-6,-603e-6,604e-6,-605e-6,606e-6,-607e-6,608e-6,-609e-6,61e-5,-611e-6,612e-6,-613e-6,614e-6,-615e-6,615e-6,-616e-6,617e-6,-618e-6,619e-6,-62e-5,621e-6,-622e-6,623e-6,-624e-6,625e-6,-626e-6,627e-6,-628e-6,629e-6,-63e-5,631e-6,-631e-6,632e-6,-633e-6,634e-6,-635e-6,636e-6,-637e-6,638e-6,-639e-6,64e-5,-641e-6,641e-6,-642e-6,643e-6,-644e-6,645e-6,-646e-6,647e-6,-648e-6,649e-6,-649e-6,65e-5,-651e-6,652e-6,-653e-6,654e-6,-655e-6,655e-6,-656e-6,657e-6,-658e-6,659e-6,-66e-5,661e-6,-661e-6,662e-6,-663e-6,664e-6,-665e-6,571e-6,-572e-6,572e-6,-573e-6,574e-6,-574e-6,575e-6,-576e-6,577e-6,-577e-6,578e-6,-579e-6,579e-6,-58e-5,581e-6,-581e-6,582e-6,-583e-6,583e-6,-584e-6,585e-6,-585e-6,586e-6,-587e-6,587e-6,-588e-6,589e-6,-589e-6,59e-5,-591e-6,591e-6,-592e-6,592e-6,-593e-6,594e-6,-594e-6,595e-6,-596e-6,596e-6,-597e-6,597e-6,-598e-6,599e-6,-599e-6,6e-4,-6e-4,601e-6,-602e-6,602e-6,-603e-6,603e-6,-604e-6,604e-6,-605e-6,606e-6,-606e-6,607e-6,-607e-6,608e-6,-608e-6,609e-6,-61e-5,61e-5,-611e-6,611e-6,-612e-6,612e-6,-613e-6,613e-6,-614e-6,614e-6,-615e-6,615e-6,-616e-6,616e-6,-617e-6,617e-6,-618e-6,618e-6,-619e-6,619e-6,-62e-5,62e-5,-621e-6,621e-6,-622e-6,622e-6,-623e-6,623e-6,-624e-6,624e-6,-625e-6,625e-6,-625e-6,626e-6,-626e-6,627e-6,-627e-6,628e-6,-628e-6,628e-6,-629e-6,629e-6,-63e-5,63e-5,-63e-5,631e-6,-631e-6,632e-6,-632e-6,632e-6,-633e-6,633e-6,-634e-6,634e-6,-634e-6,635e-6,-635e-6,635e-6,-636e-6,636e-6,-636e-6,637e-6,-637e-6,637e-6,-638e-6,638e-6,-638e-6,639e-6,-639e-6,639e-6,-64e-5,64e-5,-64e-5,64e-5,-641e-6,641e-6,-641e-6,642e-6,-642e-6,642e-6,-642e-6,643e-6,-643e-6,643e-6,-643e-6,644e-6,-644e-6,644e-6,-644e-6,644e-6,-645e-6,645e-6,-645e-6,645e-6,-645e-6,646e-6,-646e-6,646e-6,-646e-6,646e-6,-647e-6,647e-6,-647e-6,647e-6,-647e-6,647e-6,-648e-6,648e-6,-648e-6,648e-6,-648e-6,648e-6,-648e-6,648e-6,-649e-6,649e-6,-649e-6,649e-6,-649e-6,649e-6,-649e-6,649e-6,-649e-6,649e-6,-649e-6,649e-6,-65e-5,65e-5,-65e-5,65e-5,-65e-5,575e-6,-575e-6,575e-6,-575e-6,575e-6,-575e-6,575e-6,-575e-6,575e-6,-575e-6,575e-6,-575e-6,575e-6,-575e-6,575e-6,-574e-6,574e-6,-574e-6,574e-6,-574e-6,574e-6,-574e-6,574e-6,-574e-6,574e-6,-574e-6,574e-6,-574e-6,574e-6,-573e-6,573e-6,-573e-6,573e-6,-573e-6,573e-6,-573e-6,573e-6,-572e-6,572e-6,-572e-6,572e-6,-572e-6,572e-6,-572e-6,571e-6,-571e-6,571e-6,-571e-6,571e-6,-57e-5,57e-5,-57e-5,57e-5,-57e-5,569e-6,-569e-6,569e-6,-569e-6,568e-6,-568e-6,568e-6,-568e-6,567e-6,-567e-6,567e-6,-567e-6,566e-6,-566e-6,566e-6,-566e-6,565e-6,-565e-6,565e-6,-564e-6,564e-6,-564e-6,563e-6,-563e-6,563e-6,-562e-6,562e-6,-562e-6,561e-6,-561e-6,561e-6,-56e-5,56e-5,-559e-6,559e-6,-559e-6,558e-6,-558e-6,557e-6,-557e-6,557e-6,-556e-6,556e-6,-555e-6,555e-6,-554e-6,554e-6,-553e-6,553e-6,-553e-6,552e-6,-552e-6,551e-6,-551e-6,55e-5,-55e-5,549e-6,-549e-6,548e-6,-548e-6,547e-6,-547e-6,546e-6,-545e-6,545e-6,-544e-6,544e-6,-543e-6,543e-6,-542e-6,542e-6,-541e-6,54e-5,-54e-5,539e-6,-539e-6,538e-6,-537e-6,537e-6,-536e-6,535e-6,-535e-6,534e-6,-534e-6,533e-6,-532e-6,532e-6,-531e-6,53e-5,-53e-5,529e-6,-528e-6,527e-6,-527e-6,526e-6,-525e-6,525e-6,-524e-6,523e-6,-522e-6,522e-6,-521e-6,52e-5,-519e-6,519e-6,-518e-6,517e-6,-516e-6,516e-6,-515e-6,514e-6,-513e-6,512e-6,-512e-6,511e-6,-51e-5,509e-6,-508e-6,507e-6,-507e-6,506e-6,-505e-6,504e-6,-503e-6,502e-6,-501e-6,501e-6,-5e-4,499e-6,-498e-6,497e-6,-496e-6,495e-6,-494e-6,493e-6,-492e-6,491e-6,-49e-5,489e-6,-489e-6,488e-6,-487e-6,486e-6,-485e-6,484e-6,-483e-6,482e-6,-481e-6,48e-5,-479e-6,41e-5,-409e-6,408e-6,-407e-6,406e-6,-405e-6,404e-6,-403e-6,403e-6,-402e-6,401e-6,-4e-4,399e-6,-398e-6,397e-6,-396e-6,395e-6,-394e-6,393e-6,-392e-6,391e-6,-39e-5,389e-6,-388e-6,387e-6,-386e-6,385e-6,-384e-6,383e-6,-382e-6,381e-6,-38e-5,379e-6,-378e-6,377e-6,-376e-6,375e-6,-374e-6,373e-6,-372e-6,371e-6,-37e-5,369e-6,-368e-6,367e-6,-366e-6,364e-6,-363e-6,362e-6,-361e-6,36e-5,-359e-6,358e-6,-357e-6,356e-6,-354e-6,353e-6,-352e-6,351e-6,-35e-5,349e-6,-348e-6,346e-6,-345e-6,344e-6,-343e-6,342e-6,-341e-6,339e-6,-338e-6,337e-6,-336e-6,335e-6,-333e-6,332e-6,-331e-6,33e-5,-328e-6,327e-6,-326e-6,325e-6,-324e-6,322e-6,-321e-6,32e-5,-318e-6,317e-6,-316e-6,315e-6,-313e-6,312e-6,-311e-6,31e-5,-308e-6,307e-6,-306e-6,304e-6,-303e-6,302e-6,-3e-4,299e-6,-298e-6,296e-6,-295e-6,294e-6,-292e-6,291e-6,-29e-5,288e-6,-287e-6,286e-6,-284e-6,283e-6,-281e-6,28e-5,-279e-6,277e-6,-276e-6,274e-6,-273e-6,272e-6,-27e-5,269e-6,-267e-6,266e-6,-265e-6,263e-6,-262e-6,26e-5,-259e-6,257e-6,-256e-6,255e-6,-253e-6,252e-6,-25e-5,249e-6,-247e-6,246e-6,-244e-6,243e-6,-241e-6,24e-5,-238e-6,237e-6,-235e-6,234e-6,-232e-6,231e-6,-229e-6,228e-6,-226e-6,225e-6,-223e-6,222e-6,-22e-5,219e-6,-217e-6,215e-6,-214e-6,212e-6,-211e-6,209e-6,-208e-6,206e-6,-205e-6,203e-6,-201e-6,2e-4,-198e-6,197e-6,-195e-6,194e-6,-192e-6,19e-5,-189e-6,187e-6,-186e-6,184e-6,-182e-6,181e-6,-179e-6,177e-6,-176e-6,174e-6,-173e-6,171e-6,-169e-6,168e-6,-166e-6,164e-6,-163e-6,161e-6,-16e-5,158e-6,-156e-6,155e-6,-153e-6,151e-6,-15e-5,148e-6,-146e-6,145e-6,-143e-6,141e-6,-14e-5,138e-6,-136e-6,135e-6,-133e-6,131e-6,-129e-6,128e-6,-126e-6,124e-6,-123e-6,121e-6,-119e-6,118e-6,-116e-6,114e-6,-112e-6,111e-6,-109e-6,107e-6,-106e-6,104e-6,-102e-6,1e-4,-99e-6,97e-6,-95e-6,94e-6,-92e-6,9e-5,-88e-6,87e-6,-85e-6,83e-6,-81e-6,8e-5,-78e-6,76e-6,-74e-6,52e-6,-51e-6,49e-6,-48e-6,47e-6,-46e-6,44e-6,-43e-6,42e-6,-41e-6,39e-6,-38e-6,37e-6,-36e-6,34e-6,-33e-6,32e-6,-31e-6,29e-6,-28e-6,27e-6,-25e-6,24e-6,-23e-6,22e-6,-2e-5,19e-6,-18e-6,17e-6,-15e-6,14e-6,-13e-6,12e-6,-1e-5,9e-6,-8e-6,7e-6,-5e-6,4e-6,-3e-6,1e-6,0,-1e-6,2e-6,-4e-6,5e-6,-6e-6,7e-6,-9e-6,1e-5,-11e-6,12e-6,-14e-6,15e-6,-16e-6,18e-6,-19e-6,2e-5,-21e-6,23e-6,-24e-6,25e-6,-26e-6,28e-6,-29e-6,3e-5,-31e-6,33e-6,-34e-6,35e-6,-36e-6,38e-6,-39e-6,4e-5,-41e-6,43e-6,-44e-6,45e-6,-46e-6,48e-6,-49e-6,5e-5,-51e-6,53e-6,-54e-6,55e-6,-56e-6,58e-6,-59e-6,6e-5,-61e-6,63e-6,-64e-6,65e-6,-66e-6,68e-6,-69e-6,7e-5,-71e-6,72e-6,-74e-6,75e-6,-76e-6,77e-6,-79e-6,8e-5,-81e-6,82e-6,-83e-6,85e-6,-86e-6,87e-6,-88e-6,89e-6,-91e-6,92e-6,-93e-6,94e-6,-95e-6,97e-6,-98e-6,99e-6,-1e-4,101e-6,-103e-6,104e-6,-105e-6,106e-6,-107e-6,108e-6,-11e-5,111e-6,-112e-6,113e-6,-114e-6,115e-6,-117e-6,118e-6,-119e-6,12e-5,-121e-6,122e-6,-123e-6,125e-6,-126e-6,127e-6,-128e-6,129e-6,-13e-5,131e-6,-132e-6,134e-6,-135e-6,136e-6,-137e-6,138e-6,-139e-6,14e-5,-141e-6,142e-6,-143e-6,145e-6,-146e-6,147e-6,-148e-6,149e-6,-15e-5,151e-6,-152e-6,153e-6,-154e-6,155e-6,-156e-6,157e-6,-158e-6,159e-6,-16e-5,161e-6,-162e-6,163e-6,-165e-6,166e-6,-167e-6,168e-6,-169e-6,17e-5,-171e-6,172e-6,-173e-6,174e-6,-174e-6,175e-6,-176e-6,177e-6,-178e-6,179e-6,-18e-5,181e-6,-182e-6,183e-6,-184e-6,185e-6,-186e-6,187e-6,-188e-6,189e-6,-19e-5,191e-6,-191e-6,192e-6,-193e-6,194e-6,-195e-6,196e-6,-197e-6,198e-6,-199e-6,199e-6,-2e-4,201e-6,-202e-6,203e-6,-204e-6,205e-6,-205e-6,206e-6,-207e-6,208e-6,-209e-6,209e-6,-21e-5,211e-6,-212e-6,213e-6,-213e-6,214e-6,-215e-6,216e-6,-217e-6,217e-6,-218e-6,219e-6,-22e-5,22e-5,-221e-6,222e-6,-222e-6,223e-6,-224e-6,225e-6,-225e-6,226e-6,-227e-6,227e-6,-228e-6,229e-6,-229e-6,23e-5,-231e-6,231e-6,-232e-6,233e-6,-233e-6,234e-6,-234e-6,235e-6,-236e-6,236e-6,-237e-6,237e-6,-238e-6,239e-6,-239e-6,24e-5,-24e-5,241e-6,-241e-6,242e-6,-243e-6,243e-6,-244e-6,244e-6,-245e-6,245e-6,-246e-6,246e-6,-247e-6,247e-6,-248e-6,248e-6,-248e-6,249e-6,-249e-6,25e-5,-25e-5,251e-6,-251e-6,252e-6,-252e-6,252e-6,-253e-6,253e-6,-254e-6,254e-6,-254e-6,255e-6,-255e-6,255e-6,-256e-6,256e-6,-256e-6,257e-6,-257e-6,257e-6,-258e-6,258e-6,-258e-6,258e-6,-259e-6,215e-6,-216e-6,216e-6,-216e-6,216e-6,-216e-6,217e-6,-217e-6,217e-6,-217e-6,217e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-217e-6,217e-6,-217e-6,217e-6,-217e-6,216e-6,-216e-6,216e-6,-216e-6,216e-6,-215e-6,215e-6,-215e-6,215e-6,-214e-6,214e-6,-214e-6,214e-6,-213e-6,213e-6,-213e-6,212e-6,-212e-6,212e-6,-211e-6,211e-6,-211e-6,211e-6,-21e-5,21e-5,-209e-6,209e-6,-209e-6,208e-6,-208e-6,208e-6,-207e-6,207e-6,-206e-6,206e-6,-206e-6,205e-6,-205e-6,204e-6,-204e-6,203e-6,-203e-6,203e-6,-202e-6,202e-6,-201e-6,201e-6,-2e-4,2e-4,-199e-6,199e-6,-198e-6,198e-6,-197e-6,197e-6,-196e-6,196e-6,-195e-6,194e-6,-194e-6,193e-6,-193e-6,192e-6,-192e-6,191e-6,-19e-5,19e-5,-189e-6,189e-6,-188e-6,187e-6,-187e-6,186e-6,-185e-6,185e-6,-184e-6,183e-6,-183e-6,182e-6,-181e-6,181e-6,-18e-5,179e-6,-179e-6,178e-6,-177e-6,177e-6,-176e-6,175e-6,-174e-6,174e-6,-173e-6,172e-6,-171e-6,171e-6,-17e-5,169e-6,-168e-6,168e-6,-167e-6,166e-6,-165e-6,164e-6,-164e-6,163e-6,-162e-6,161e-6,-16e-5,159e-6,-159e-6,158e-6,-157e-6,156e-6,-155e-6,154e-6,-153e-6,153e-6,-152e-6,151e-6,-15e-5,149e-6,-148e-6,147e-6,-146e-6,145e-6,-144e-6,144e-6,-143e-6,142e-6,-141e-6,14e-5,-139e-6,138e-6,-137e-6,136e-6,-135e-6,134e-6,-133e-6,132e-6,-131e-6,13e-5,-129e-6,128e-6,-127e-6,126e-6,-125e-6,124e-6,-123e-6,122e-6,-121e-6,12e-5,-119e-6,118e-6,-117e-6,116e-6,-115e-6,114e-6,-113e-6,112e-6,-111e-6,11e-5,-108e-6,107e-6,-106e-6,105e-6,-104e-6,103e-6,-102e-6,101e-6,-1e-4,99e-6,-98e-6,96e-6,-95e-6,94e-6,-93e-6,92e-6,-91e-6,9e-5,-89e-6,87e-6,-86e-6,85e-6,-84e-6,83e-6,-82e-6,81e-6,-79e-6,78e-6,-77e-6,76e-6,-75e-6,74e-6,-72e-6,71e-6,-7e-5,69e-6,-68e-6,66e-6,-65e-6,64e-6,-63e-6,62e-6,-6e-5,59e-6,-58e-6,57e-6,-56e-6,54e-6,-53e-6,52e-6,-51e-6,5e-5,-48e-6,47e-6,-46e-6,45e-6,-44e-6,42e-6,-41e-6,4e-5,-39e-6,37e-6,-36e-6,35e-6,-34e-6,32e-6,-31e-6,3e-5,-29e-6,27e-6,-26e-6,25e-6,-24e-6,23e-6,-21e-6,2e-5,-17e-6,16e-6,-15e-6,14e-6,-13e-6,11e-6,-1e-5,9e-6,-8e-6,7e-6,-6e-6,5e-6,-3e-6,2e-6,-1e-6]}},{}],15:[function(require,module,exports){module.exports={real:[0,0,-.265053,.031303,-.066069,.013133,-.009975,.007226,-.031381,.005814,-.004185,.00364,-.002811,.002464,-.002233,.002158,-.021544,.001203,-.001169,89e-5,-868e-6,847e-6,-732e-6,716e-6,-701e-6,687e-6,-653e-6,641e-6,-61e-5,564e-6,-434e-6,118e-6,-.013082,114e-6,-112e-6,111e-6,-109e-6,108e-6,-106e-6,8e-5,-79e-6,78e-6,-77e-6,76e-6,-75e-6,74e-6,-73e-6,72e-6,-72e-6,71e-6,-7e-5,7e-5,-69e-6,68e-6,-68e-6,67e-6,-49e-6,48e-6,-48e-6,48e-6,-47e-6,47e-6,-46e-6,46e-6,-.007244,45e-6,-45e-6,45e-6,-44e-6,44e-6,-44e-6,43e-6,-43e-6,43e-6,-43e-6,42e-6,-42e-6,42e-6,-41e-6,34e-6,-34e-6,34e-6,-34e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-31e-6,31e-6,-31e-6,31e-6,-3e-5,3e-5,-3e-5,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-27e-6,26e-6,-26e-6,26e-6,-26e-6,26e-6,-26e-6,26e-6,-26e-6,26e-6,-26e-6,25e-6,-.003235,25e-6,-25e-6,25e-6,-25e-6,25e-6,-25e-6,25e-6,-2e-5,2e-5,-2e-5,2e-5,-2e-5,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,21e-6,-21e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-24e-6,24e-6,-24e-6,24e-6,-24e-6,24e-6,-24e-6,24e-6,-24e-6,24e-6,-24e-6,24e-6,-24e-6,24e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-.001577,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,18e-6,-18e-6,18e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-17e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-388e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-16e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
imag:[0,.163431,-2e-6,0,-2e-6,0,-1e-6,1e-6,-3e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-8e-6,1e-6,-1e-6,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,0,-2e-5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-44e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-79e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-155e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-161e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,9e-6,-9e-6,9e-6,-9e-6,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],16:[function(require,module,exports){module.exports={real:[0,-1e-6,-.001193,975e-6,-.225597,556e-6,-341e-6,.146408,-401e-6,356e-6,-.082233,203e-6,-177e-6,.054735,-862e-6,714e-6,-.054117,464e-6,-438e-6,.042607,-199e-6,105e-6,-.04084,61e-6,-6e-5,.027337,-58e-6,57e-6,-.033029,5e-5,-49e-6,.037746,-47e-6,47e-6,-.040758,62e-6,-.001234,.008164,-.008056,.007953,-.007853,.007757,-.007665,.007575,-.007489,.007405,-.007103,.007028,-.006954,.006675,-.006608,.006543,-.00648,.006419,-.00636,.006302,-.005696,.005646,-.005597,.00555,-.005503,.005458,-.005414,.005371,-.005012,.004973,-.004936,.004899,-.004863,.004827,-.004793,.004759,-.004726,.003904,-.003878,.003852,-.003826,.003802,-.003777,.003753,-.00373,.003707,-.003684,.003662,-.003423,.003403,-.003384,.003364,-.003345,.003326,-.003308,.00329,-.003272,.003254,-.003237,.00322,-.003203,.003186,-.003074,.003059,-.003043,.003028,-.003014,.002999,-.002985,.00297,-.002956,.002942,-.002929,.002915,-.002902,.002889,-.002876,.002863,-.002851,.002839,-.002826,.002814,-.002802,.00279,-.002779,.002767,-.002756,.002745,-.002734,.002723,-.002712,.002701,-.002691,.00268,-.00267,.00266,-.00265,.00264,-.00263,.00262,-.00261,.002601,-.002591,.002582,-.002653,.002644,-.002634,.002625,-.002616,.002607,-.002598,.002589,-.00258,.002572,-.002563,.002555,-.002546,.002538,-.00253,.002521,-.002513,.002505,-.002497,.002489,-.002482,.002474,-.002466,.002459,-.002451,.002444,-.002436,.002429,-.002497,.00249,-.002482,.002475,-.002468,.002461,-.002453,.002446,-.002439,.002432,-.002426,.002419,-.002412,.002405,-.002399,.002392,-.002385,.002379,-.002373,.002366,-.00236,.002353,-.002347,.002341,-.002335,.002329,-.002323,.002317,-.002311,.002305,-.002299,.002293,-.002287,.002281,-.002276,.00227,-.002408,.002402,-.002396,.00239,-.002384,.002378,-.002373,.002367,-.002361,.002356,-.00235,.002345,-.002339,.002334,-.002328,.002323,-.002317,.002312,-.002307,.002301,-.002296,.002291,-.002286,.002281,-.002276,.00227,-.002265,.00226,-.002255,.00225,-.002246,.002241,-.002236,.002231,-.002226,.002221,-.002217,.002212,-.002207,.002202,-.002198,.002193,-.002189,.002184,-.00218,.002175,-.00217,.002166,-.002162,.002157,-.002153,.002148,-.002144,.00214,-.002135,.002198,-.002193,.002189,-.002185,.00218,-.002176,.002172,-.002167,.002163,-.002159,.002155,-.002151,.002146,-.002142,.002138,-.002134,.00213,-.002126,.002122,-.002118,.002114,-.00211,.002106,-.002102,.002098,-.002094,.00209,-.002086,.002083,-.002079,.002075,-.002071,.002067,-.002064,.00206,-.002056,.002052,-.002049,.002045,-.002041,.002038,-.002034,.002031,-.002027,.002023,-.00202,.002016,-.002013,.002009,-.002006,.002002,-.001999,.001995,-.001992,.001988,-.001985,.001981,-.001978,.001975,-.001971,.001968,-.001964,.001961,-.001958,.001954,-.001951,.001948,-.001945,.001941,-.001938,.001935,-.001932,.001928,-.001925,.001922,-.001919,.001916,-.001912,.001909,-.001906,.001903,-.0019,.001897,-.001894,.001891,-.001887,.001884,-.001881,.001878,-.001875,.001872,-.001869,.001866,-.001863,.00186,-.001857,.001854,-.001851,.001848,-.001845,.001842,-.001839,.001836,-.001833,.001831,-.001828,.001825,-.001822,.001819,-.001816,.001813,-.00181,.001807,-.001805,.001802,-.001799,.001796,-.001793,.001791,-.001788,.001785,-.001782,.001779,-.001777,.001774,-.001771,.001768,-.001766,.001763,-.00176,.001757,-.001755,.001752,-.001749,.001747,-.001744,.001741,-.001738,.001736,-.001733,.00173,-.001728,.001725,-.001722,.00172,-.001717,.001715,-.001712,.001709,-.001707,.001704,-.001701,.001699,-.001696,.001694,-.001691,.001689,-.001686,.001683,-.001681,.001678,-.001676,.001673,-.001671,.001668,-.001665,.001663,-.00166,.001658,-.001655,.001143,-.001142,.00114,-.001138,.001137,-.001135,.001133,-.001131,.00113,-.001128,.001126,-.001124,.001123,-.001121,.001119,-.001118,.001116,-.001114,.001112,-.001111,.001109,-.001107,.001106,-.001104,.001102,-.001101,.001099,-.001097,.001096,-.001094,.001092,-.001091,.001158,-.001156,.001154,-.001153,.001151,-.001149,.001147,-.001145,.001144,-.001142,.00114,-.001138,.001137,-.001135,.001133,-.001131,.00113,-.001128,.001126,-.001124,.001123,-.001121,.001119,-.001117,.001116,-.001114,.001112,-.00111,.001109,-.001107,.001105,-.001103,.001102,-.0011,.001098,-.001097,.001095,-.001093,.001091,-.00109,.001088,-.001086,.001084,-.001083,.001081,-.001079,.001078,-.001076,.001074,-.001072,.001071,-.001069,.001067,-.001065,.001064,-.001062,.00106,-.001059,.001057,-.001055,.001053,-.001052,.00105,-.001048,.001047,-.001045,.001043,-.001041,.00104,-.001038,.001036,-.001035,.001033,-.001031,.001029,-.001028,.001026,-.001024,.001023,-.001021,.001019,-.001017,.001016,-.001014,.001012,-.001011,.001009,-.001007,.001005,-.001004,.001002,-.001,999e-6,-997e-6,995e-6,-993e-6,992e-6,-99e-5,988e-6,-987e-6,985e-6,-983e-6,981e-6,-98e-5,978e-6,-976e-6,975e-6,-973e-6,971e-6,-969e-6,968e-6,-966e-6,964e-6,-962e-6,961e-6,-959e-6,957e-6,-956e-6,954e-6,-952e-6,95e-5,-949e-6,947e-6,-945e-6,943e-6,-942e-6,94e-5,-938e-6,937e-6,-935e-6,933e-6,-931e-6,93e-5,-928e-6,926e-6,-924e-6,923e-6,-921e-6,919e-6,-917e-6,916e-6,-914e-6,912e-6,-91e-5,909e-6,-907e-6,905e-6,-903e-6,902e-6,-9e-4,898e-6,-896e-6,895e-6,-814e-6,813e-6,-811e-6,809e-6,-808e-6,806e-6,-805e-6,803e-6,-801e-6,8e-4,-798e-6,796e-6,-795e-6,793e-6,-792e-6,79e-5,-788e-6,787e-6,-785e-6,783e-6,-782e-6,78e-5,-778e-6,777e-6,-775e-6,774e-6,-772e-6,77e-5,-769e-6,767e-6,-765e-6,764e-6,-762e-6,76e-5,-759e-6,757e-6,-755e-6,754e-6,-752e-6,75e-5,-749e-6,747e-6,-745e-6,744e-6,-742e-6,74e-5,-739e-6,737e-6,-735e-6,734e-6,-732e-6,73e-5,-729e-6,727e-6,-725e-6,724e-6,-722e-6,72e-5,-719e-6,717e-6,-715e-6,713e-6,-712e-6,71e-5,-708e-6,707e-6,-705e-6,703e-6,-702e-6,7e-4,-698e-6,696e-6,-695e-6,693e-6,-691e-6,689e-6,-688e-6,686e-6,-684e-6,683e-6,-681e-6,679e-6,-677e-6,676e-6,-674e-6,672e-6,-67e-5,669e-6,-667e-6,665e-6,-663e-6,662e-6,-66e-5,658e-6,-656e-6,655e-6,-653e-6,651e-6,-649e-6,648e-6,-646e-6,644e-6,-642e-6,64e-5,-639e-6,637e-6,-635e-6,633e-6,-632e-6,63e-5,-628e-6,626e-6,-624e-6,623e-6,-621e-6,619e-6,-617e-6,615e-6,-614e-6,612e-6,-61e-5,608e-6,-606e-6,604e-6,-603e-6,601e-6,-599e-6,597e-6,-595e-6,593e-6,-592e-6,59e-5,-588e-6,586e-6,-584e-6,582e-6,-581e-6,579e-6,-577e-6,575e-6,-573e-6,571e-6,-569e-6,568e-6,-566e-6,564e-6,-562e-6,56e-5,-558e-6,556e-6,-554e-6,553e-6,-551e-6,471e-6,-469e-6,467e-6,-466e-6,464e-6,-463e-6,461e-6,-459e-6,458e-6,-456e-6,454e-6,-453e-6,451e-6,-45e-5,448e-6,-446e-6,445e-6,-443e-6,441e-6,-44e-5,438e-6,-436e-6,435e-6,-433e-6,431e-6,-43e-5,428e-6,-426e-6,425e-6,-423e-6,421e-6,-42e-5,418e-6,-416e-6,415e-6,-413e-6,411e-6,-41e-5,408e-6,-406e-6,404e-6,-403e-6,401e-6,-399e-6,398e-6,-396e-6,394e-6,-393e-6,391e-6,-389e-6,387e-6,-386e-6,384e-6,-382e-6,381e-6,-379e-6,377e-6,-375e-6,374e-6,-372e-6,37e-5,-369e-6,367e-6,-365e-6,363e-6,-362e-6,36e-5,-358e-6,356e-6,-355e-6,353e-6,-351e-6,349e-6,-348e-6,346e-6,-344e-6,342e-6,-341e-6,339e-6,-337e-6,335e-6,-333e-6,332e-6,-33e-5,328e-6,-326e-6,325e-6,-323e-6,321e-6,-319e-6,317e-6,-316e-6,314e-6,-312e-6,31e-5,-308e-6,307e-6,-305e-6,303e-6,-301e-6,299e-6,-298e-6,296e-6,-294e-6,292e-6,-29e-5,289e-6,-287e-6,285e-6,-283e-6,281e-6,-28e-5,278e-6,-276e-6,274e-6,-272e-6,27e-5,-269e-6,267e-6,-265e-6,263e-6,-261e-6,259e-6,-258e-6,256e-6,-254e-6,252e-6,-25e-5,248e-6,-246e-6,245e-6,-243e-6,241e-6,-239e-6,237e-6,-235e-6,233e-6,-232e-6,23e-5,-228e-6,226e-6,-224e-6,222e-6,-22e-5,219e-6,-217e-6,215e-6,-213e-6,211e-6,-209e-6,207e-6,-205e-6,203e-6,-202e-6,2e-4,-198e-6,196e-6,-194e-6,192e-6,-19e-5,188e-6,-186e-6,185e-6,-183e-6,181e-6,-179e-6,177e-6,-175e-6,173e-6,-171e-6,169e-6,-167e-6,165e-6,-164e-6,162e-6,-16e-5,158e-6,-156e-6,154e-6,-152e-6,15e-5,-148e-6,146e-6,-144e-6,142e-6,-141e-6,139e-6,-137e-6,135e-6,-133e-6,131e-6,-129e-6,112e-6,-111e-6,109e-6,-107e-6,106e-6,-104e-6,102e-6,-1e-4,99e-6,-97e-6,95e-6,-93e-6,92e-6,-9e-5,88e-6,-87e-6,85e-6,-83e-6,81e-6,-8e-5,78e-6,-76e-6,75e-6,-73e-6,71e-6,-69e-6,68e-6,-66e-6,64e-6,-62e-6,61e-6,-59e-6,57e-6,-56e-6,54e-6,-52e-6,5e-5,-49e-6,47e-6,-45e-6,43e-6,-42e-6,4e-5,-38e-6,36e-6,-35e-6,33e-6,-31e-6,3e-5,-28e-6,26e-6,-24e-6,23e-6,-21e-6,19e-6,-17e-6,16e-6,-14e-6,12e-6,-1e-5,9e-6,-7e-6,5e-6,-3e-6,2e-6,0,-2e-6,3e-6,-5e-6,7e-6,-9e-6,1e-5,-12e-6,14e-6,-16e-6,17e-6,-19e-6,21e-6,-23e-6,24e-6,-26e-6,28e-6,-3e-5,31e-6,-33e-6,35e-6,-36e-6,38e-6,-4e-5,42e-6,-43e-6,45e-6,-47e-6,49e-6,-5e-5,52e-6,-54e-6,56e-6,-57e-6,59e-6,-61e-6,62e-6,-64e-6,66e-6,-68e-6,69e-6,-71e-6,73e-6,-75e-6,76e-6,-78e-6,8e-5,-81e-6,83e-6,-85e-6,87e-6,-88e-6,9e-5,-92e-6,93e-6,-95e-6,97e-6,-99e-6,1e-4,-102e-6,104e-6,-105e-6,107e-6,-109e-6,111e-6,-112e-6,114e-6,-116e-6,117e-6,-119e-6,121e-6,-122e-6,124e-6,-126e-6,128e-6,-129e-6,131e-6,-133e-6,134e-6,-136e-6,138e-6,-139e-6,141e-6,-143e-6,144e-6,-146e-6,148e-6,-149e-6,151e-6,-153e-6,154e-6,-156e-6,158e-6,-159e-6,161e-6,-163e-6,164e-6,-166e-6,168e-6,-169e-6,171e-6,-173e-6,174e-6,-176e-6,178e-6,-179e-6,181e-6,-183e-6,184e-6,-186e-6,188e-6,-189e-6,191e-6,-192e-6,194e-6,-196e-6,197e-6,-199e-6,201e-6,-202e-6,204e-6,-205e-6,207e-6,-209e-6,21e-5,-212e-6,213e-6,-215e-6,217e-6,-218e-6,22e-5,-221e-6,223e-6,-224e-6,226e-6,-228e-6,229e-6,-231e-6,232e-6,-201e-6,202e-6,-203e-6,205e-6,-206e-6,207e-6,-209e-6,21e-5,-211e-6,213e-6,-214e-6,215e-6,-217e-6,218e-6,-219e-6,22e-5,-222e-6,223e-6,-224e-6,226e-6,-227e-6,228e-6,-23e-5,231e-6,-232e-6,233e-6,-235e-6,236e-6,-237e-6,238e-6,-24e-5,241e-6,-242e-6,244e-6,-245e-6,246e-6,-247e-6,249e-6,-25e-5,251e-6,-252e-6,253e-6,-255e-6,256e-6,-257e-6,258e-6,-26e-5,261e-6,-262e-6,263e-6,-264e-6,266e-6,-267e-6,268e-6,-269e-6,27e-5,-272e-6,273e-6,-274e-6,275e-6,-276e-6,277e-6,-279e-6,28e-5,-281e-6,282e-6,-283e-6,284e-6,-285e-6,287e-6,-288e-6,289e-6,-29e-5,291e-6,-292e-6,293e-6,-294e-6,295e-6,-297e-6,298e-6,-299e-6,3e-4,-301e-6,302e-6,-303e-6,304e-6,-305e-6,306e-6,-307e-6,308e-6,-309e-6,311e-6,-312e-6,313e-6,-314e-6,315e-6,-316e-6,317e-6,-318e-6,319e-6,-32e-5,321e-6,-322e-6,323e-6,-324e-6,325e-6,-326e-6,327e-6,-328e-6,329e-6,-33e-5,331e-6,-331e-6,332e-6,-333e-6,334e-6,-335e-6,336e-6,-337e-6,338e-6,-339e-6,34e-5,-341e-6,342e-6,-343e-6,343e-6,-344e-6,345e-6,-346e-6,347e-6,-348e-6,349e-6,-35e-5,35e-5,-351e-6,352e-6,-353e-6,354e-6,-355e-6,355e-6,-356e-6,357e-6,-358e-6,359e-6,-359e-6,36e-5,-361e-6,362e-6,-363e-6,363e-6,-364e-6,365e-6,-366e-6,366e-6,-367e-6,368e-6,-368e-6,369e-6,-37e-5,371e-6,-371e-6,372e-6,-373e-6,373e-6,-374e-6,375e-6,-375e-6,376e-6,-377e-6,377e-6,-378e-6,379e-6,-379e-6,38e-5,-381e-6,381e-6,-382e-6,382e-6,-383e-6,384e-6,-384e-6,385e-6,-385e-6,386e-6,-387e-6,387e-6,-388e-6,388e-6,-389e-6,389e-6,-39e-5,39e-5,-391e-6,391e-6,-392e-6,392e-6,-393e-6,393e-6,-394e-6,394e-6,-395e-6,395e-6,-396e-6,396e-6,-396e-6,397e-6,-397e-6,398e-6,-398e-6,399e-6,-399e-6,399e-6,-4e-4,4e-4,-4e-4,401e-6,-401e-6,402e-6,-402e-6,402e-6,-403e-6,403e-6,-403e-6,404e-6,-404e-6,404e-6,-404e-6,405e-6,-405e-6,405e-6,-406e-6,406e-6,-406e-6,406e-6,-406e-6,407e-6,-407e-6,407e-6,-407e-6,408e-6,-408e-6,408e-6,-408e-6,408e-6,-291e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-292e-6,292e-6,-291e-6,291e-6,-291e-6,291e-6,-291e-6,291e-6,-291e-6,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,289e-6,-289e-6,289e-6,-289e-6,289e-6,-288e-6,288e-6,-288e-6,288e-6,-288e-6,287e-6,-287e-6,287e-6,-287e-6,286e-6,-286e-6,286e-6,-286e-6,285e-6,-285e-6,285e-6,-284e-6,284e-6,-284e-6,283e-6,-283e-6,283e-6,-282e-6,282e-6,-282e-6,281e-6,-281e-6,281e-6,-28e-5,28e-5,-28e-5,279e-6,-279e-6,278e-6,-278e-6,278e-6,-277e-6,277e-6,-276e-6,276e-6,-276e-6,275e-6,-275e-6,274e-6,-274e-6,273e-6,-273e-6,272e-6,-272e-6,271e-6,-271e-6,27e-5,-27e-5,269e-6,-269e-6,268e-6,-268e-6,267e-6,-267e-6,266e-6,-266e-6,265e-6,-265e-6,264e-6,-263e-6,263e-6,-262e-6,262e-6,-261e-6,261e-6,-26e-5,259e-6,-259e-6,258e-6,-258e-6,257e-6,-256e-6,256e-6,-255e-6,254e-6,-254e-6,253e-6,-252e-6,252e-6,-251e-6,25e-5,-25e-5,249e-6,-248e-6,248e-6,-247e-6,246e-6,-245e-6,245e-6,-244e-6,243e-6,-243e-6,242e-6,-241e-6,24e-5,-24e-5,239e-6,-238e-6,237e-6,-236e-6,236e-6,-235e-6,234e-6,-233e-6,232e-6,-232e-6,231e-6,-23e-5,229e-6,-228e-6,228e-6,-227e-6,226e-6,-225e-6,224e-6,-223e-6,222e-6,-222e-6,221e-6,-22e-5,219e-6,-218e-6,217e-6,-216e-6,215e-6,-214e-6,214e-6,-213e-6,212e-6,-211e-6,21e-5,-209e-6,208e-6,-207e-6,206e-6,-205e-6,204e-6,-203e-6,202e-6,-201e-6,2e-4,-199e-6,198e-6,-197e-6,196e-6,-195e-6,194e-6,-193e-6,192e-6,-191e-6,19e-5,-189e-6,188e-6,-187e-6,186e-6,-185e-6,184e-6,-183e-6,182e-6,-181e-6,18e-5,-179e-6,177e-6,-176e-6,175e-6,-174e-6,173e-6,-172e-6,171e-6,-17e-5,169e-6,-168e-6,166e-6,-165e-6,164e-6,-163e-6,162e-6,-161e-6,16e-5,-159e-6,157e-6,-156e-6,155e-6,-154e-6,153e-6,-152e-6,15e-5,-149e-6,148e-6,-147e-6,146e-6,-144e-6,143e-6,-142e-6,141e-6,-14e-5,138e-6,-137e-6,136e-6,-135e-6,134e-6,-132e-6,131e-6,-13e-5,129e-6,-127e-6,126e-6,-125e-6,124e-6,-122e-6,121e-6,-12e-5,119e-6,-117e-6,116e-6,-115e-6,114e-6,-112e-6,111e-6,-11e-5,108e-6,-107e-6,106e-6,-105e-6,103e-6,-102e-6,101e-6,-99e-6,98e-6,-97e-6,95e-6,-94e-6,93e-6,-92e-6,9e-5,-89e-6,88e-6,-86e-6,85e-6,-84e-6,82e-6,-81e-6,8e-5,-78e-6,77e-6,-76e-6,74e-6,-73e-6,71e-6,-7e-5,69e-6,-67e-6,55e-6,-54e-6,53e-6,-52e-6,5e-5,-49e-6,48e-6,-47e-6,46e-6,-45e-6,44e-6,-42e-6,41e-6,-4e-5,39e-6,-38e-6,37e-6,-36e-6,34e-6,-33e-6,32e-6,-31e-6,3e-5,-29e-6,27e-6,-26e-6,25e-6,-24e-6,23e-6,-22e-6,21e-6,-19e-6,18e-6,-17e-6,16e-6,-15e-6,14e-6,-12e-6,11e-6,-1e-5,9e-6,-8e-6,7e-6,-5e-6,4e-6,-3e-6,2e-6,-1e-6,0,2e-6,-3e-6,4e-6,-5e-6,6e-6,-7e-6,9e-6,-1e-5,11e-6,-12e-6,13e-6,-14e-6,16e-6,-17e-6,18e-6,-19e-6,2e-5,-21e-6,23e-6,-24e-6,25e-6,-26e-6,27e-6,-28e-6,29e-6,-31e-6,32e-6,-33e-6,34e-6,-35e-6,36e-6,-38e-6,39e-6,-4e-5,41e-6,-42e-6,43e-6,-44e-6,46e-6,-47e-6,48e-6,-49e-6,5e-5,-51e-6,52e-6,-54e-6,55e-6,-56e-6,57e-6,-58e-6,59e-6,-6e-5,61e-6,-62e-6,64e-6,-65e-6,66e-6,-67e-6,68e-6,-69e-6,7e-5,-71e-6,72e-6,-74e-6,75e-6,-76e-6,77e-6,-78e-6,79e-6,-8e-5,81e-6,-82e-6,83e-6,-84e-6,85e-6,-87e-6,88e-6,-89e-6,9e-5,-91e-6,92e-6,-93e-6,94e-6,-95e-6,96e-6,-97e-6,98e-6,-99e-6,1e-4,-101e-6,102e-6,-103e-6,104e-6,-105e-6,106e-6,-107e-6,108e-6,-109e-6,11e-5,-111e-6,112e-6,-113e-6,114e-6,-115e-6,116e-6,-117e-6,118e-6,-119e-6,12e-5,-121e-6,122e-6,-123e-6,124e-6,-125e-6,126e-6,-127e-6,128e-6,-129e-6,129e-6,-13e-5,131e-6,-132e-6,133e-6,-134e-6,135e-6,-136e-6,137e-6,-138e-6,138e-6,-139e-6,14e-5,-141e-6,142e-6,-143e-6,144e-6,-144e-6,145e-6,-146e-6,147e-6,-148e-6,149e-6,-149e-6,15e-5,-151e-6,152e-6,-153e-6,153e-6,-154e-6,155e-6,-156e-6,157e-6,-157e-6,158e-6,-159e-6,16e-5,-16e-5,161e-6,-162e-6,163e-6,-163e-6,164e-6,-165e-6,165e-6,-166e-6,167e-6,-168e-6,168e-6,-169e-6,17e-5,-17e-5,171e-6,-172e-6,172e-6,-173e-6,174e-6,-174e-6,175e-6,-175e-6,176e-6,-177e-6,177e-6,-178e-6,178e-6,-179e-6,18e-5,-18e-5,181e-6,-181e-6,182e-6,-182e-6,183e-6,-184e-6,184e-6,-185e-6,185e-6,-186e-6,186e-6,-187e-6,187e-6,-188e-6,188e-6,-189e-6,189e-6,-19e-5,19e-5,-19e-5,191e-6,-191e-6,192e-6,-192e-6,193e-6,-193e-6,193e-6,-194e-6,194e-6,-195e-6,195e-6,-195e-6,196e-6,-196e-6,196e-6,-197e-6,197e-6,-197e-6,198e-6,-198e-6,198e-6,-199e-6,199e-6,-199e-6,199e-6,-2e-4,2e-4,-2e-4,2e-4,-201e-6,201e-6,-201e-6,201e-6,-201e-6,202e-6,-202e-6,202e-6,-202e-6,202e-6,-203e-6,203e-6,-203e-6,203e-6,-203e-6,203e-6,-203e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,186e-6,-186e-6,186e-6,-186e-6,186e-6,-186e-6,186e-6,-186e-6,186e-6,-186e-6,186e-6,-186e-6,186e-6,-186e-6,186e-6],imag:[0,.670914,0,0,-5e-6,0,0,11e-6,0,0,-12e-6,0,0,14e-6,0,0,-21e-6,0,0,23e-6,0,0,-3e-5,0,0,26e-6,0,0,-39e-6,0,0,54e-6,0,0,-71e-6,0,-2e-6,17e-6,-17e-6,18e-6,-19e-6,2e-5,-2e-5,21e-6,-22e-6,22e-6,-23e-6,23e-6,-24e-6,24e-6,-25e-6,25e-6,-26e-6,27e-6,-28e-6,29e-6,-27e-6,27e-6,-28e-6,29e-6,-3e-5,3e-5,-31e-6,32e-6,-31e-6,31e-6,-32e-6,33e-6,-34e-6,34e-6,-35e-6,36e-6,-37e-6,31e-6,-32e-6,32e-6,-33e-6,34e-6,-34e-6,35e-6,-36e-6,36e-6,-37e-6,38e-6,-36e-6,37e-6,-37e-6,38e-6,-39e-6,39e-6,-4e-5,41e-6,-41e-6,42e-6,-43e-6,44e-6,-44e-6,45e-6,-44e-6,45e-6,-46e-6,46e-6,-47e-6,48e-6,-48e-6,49e-6,-5e-5,5e-5,-51e-6,52e-6,-53e-6,53e-6,-54e-6,55e-6,-56e-6,56e-6,-57e-6,58e-6,-58e-6,59e-6,-6e-5,61e-6,-61e-6,62e-6,-63e-6,64e-6,-65e-6,65e-6,-66e-6,67e-6,-68e-6,68e-6,-69e-6,7e-5,-71e-6,72e-6,-72e-6,73e-6,-74e-6,75e-6,-78e-6,79e-6,-8e-5,8e-5,-81e-6,82e-6,-83e-6,84e-6,-85e-6,86e-6,-86e-6,87e-6,-88e-6,89e-6,-9e-5,91e-6,-92e-6,93e-6,-93e-6,94e-6,-95e-6,96e-6,-97e-6,98e-6,-99e-6,1e-4,-101e-6,102e-6,-106e-6,107e-6,-108e-6,108e-6,-109e-6,11e-5,-111e-6,112e-6,-113e-6,114e-6,-115e-6,116e-6,-117e-6,118e-6,-119e-6,12e-5,-121e-6,122e-6,-123e-6,124e-6,-125e-6,126e-6,-127e-6,128e-6,-129e-6,13e-5,-131e-6,132e-6,-133e-6,134e-6,-135e-6,136e-6,-137e-6,138e-6,-139e-6,14e-5,-15e-5,151e-6,-153e-6,154e-6,-155e-6,156e-6,-157e-6,158e-6,-159e-6,16e-5,-161e-6,163e-6,-164e-6,165e-6,-166e-6,167e-6,-168e-6,169e-6,-171e-6,172e-6,-173e-6,174e-6,-175e-6,176e-6,-178e-6,179e-6,-18e-5,181e-6,-182e-6,183e-6,-185e-6,186e-6,-187e-6,188e-6,-189e-6,191e-6,-192e-6,193e-6,-194e-6,195e-6,-197e-6,198e-6,-199e-6,2e-4,-201e-6,203e-6,-204e-6,205e-6,-206e-6,207e-6,-209e-6,21e-5,-211e-6,212e-6,-214e-6,222e-6,-223e-6,224e-6,-225e-6,227e-6,-228e-6,229e-6,-231e-6,232e-6,-233e-6,234e-6,-236e-6,237e-6,-238e-6,24e-5,-241e-6,242e-6,-244e-6,245e-6,-246e-6,248e-6,-249e-6,25e-5,-252e-6,253e-6,-254e-6,256e-6,-257e-6,258e-6,-26e-5,261e-6,-262e-6,264e-6,-265e-6,266e-6,-268e-6,269e-6,-27e-5,272e-6,-273e-6,275e-6,-276e-6,277e-6,-279e-6,28e-5,-281e-6,283e-6,-284e-6,286e-6,-287e-6,288e-6,-29e-5,291e-6,-293e-6,294e-6,-295e-6,297e-6,-298e-6,3e-4,-301e-6,302e-6,-304e-6,305e-6,-307e-6,308e-6,-309e-6,311e-6,-312e-6,314e-6,-315e-6,317e-6,-318e-6,319e-6,-321e-6,322e-6,-324e-6,325e-6,-327e-6,328e-6,-329e-6,331e-6,-332e-6,334e-6,-335e-6,337e-6,-338e-6,34e-5,-341e-6,343e-6,-344e-6,345e-6,-347e-6,348e-6,-35e-5,351e-6,-353e-6,354e-6,-356e-6,357e-6,-359e-6,36e-5,-362e-6,363e-6,-365e-6,366e-6,-368e-6,369e-6,-371e-6,372e-6,-374e-6,375e-6,-377e-6,378e-6,-38e-5,381e-6,-383e-6,384e-6,-386e-6,387e-6,-389e-6,39e-5,-392e-6,393e-6,-395e-6,396e-6,-398e-6,399e-6,-401e-6,402e-6,-404e-6,405e-6,-407e-6,408e-6,-41e-5,411e-6,-413e-6,415e-6,-416e-6,418e-6,-419e-6,421e-6,-422e-6,424e-6,-425e-6,427e-6,-428e-6,43e-5,-432e-6,433e-6,-435e-6,436e-6,-438e-6,439e-6,-441e-6,442e-6,-444e-6,446e-6,-447e-6,449e-6,-45e-5,452e-6,-453e-6,455e-6,-457e-6,458e-6,-46e-5,461e-6,-463e-6,464e-6,-466e-6,323e-6,-325e-6,326e-6,-327e-6,328e-6,-329e-6,33e-5,-331e-6,332e-6,-333e-6,334e-6,-336e-6,337e-6,-338e-6,339e-6,-34e-5,341e-6,-342e-6,343e-6,-344e-6,346e-6,-347e-6,348e-6,-349e-6,35e-5,-351e-6,352e-6,-353e-6,354e-6,-356e-6,357e-6,-358e-6,382e-6,-383e-6,384e-6,-385e-6,386e-6,-388e-6,389e-6,-39e-5,391e-6,-392e-6,393e-6,-395e-6,396e-6,-397e-6,398e-6,-399e-6,401e-6,-402e-6,403e-6,-404e-6,405e-6,-407e-6,408e-6,-409e-6,41e-5,-411e-6,413e-6,-414e-6,415e-6,-416e-6,417e-6,-419e-6,42e-5,-421e-6,422e-6,-423e-6,425e-6,-426e-6,427e-6,-428e-6,429e-6,-431e-6,432e-6,-433e-6,434e-6,-436e-6,437e-6,-438e-6,439e-6,-44e-5,442e-6,-443e-6,444e-6,-445e-6,446e-6,-448e-6,449e-6,-45e-5,451e-6,-452e-6,454e-6,-455e-6,456e-6,-457e-6,458e-6,-46e-5,461e-6,-462e-6,463e-6,-465e-6,466e-6,-467e-6,468e-6,-469e-6,471e-6,-472e-6,473e-6,-474e-6,475e-6,-477e-6,478e-6,-479e-6,48e-5,-482e-6,483e-6,-484e-6,485e-6,-486e-6,488e-6,-489e-6,49e-5,-491e-6,492e-6,-494e-6,495e-6,-496e-6,497e-6,-498e-6,5e-4,-501e-6,502e-6,-503e-6,505e-6,-506e-6,507e-6,-508e-6,509e-6,-511e-6,512e-6,-513e-6,514e-6,-515e-6,517e-6,-518e-6,519e-6,-52e-5,521e-6,-523e-6,524e-6,-525e-6,526e-6,-527e-6,529e-6,-53e-5,531e-6,-532e-6,533e-6,-535e-6,536e-6,-537e-6,538e-6,-539e-6,541e-6,-542e-6,543e-6,-544e-6,545e-6,-547e-6,548e-6,-549e-6,55e-5,-551e-6,553e-6,-554e-6,555e-6,-556e-6,557e-6,-559e-6,56e-5,-561e-6,562e-6,-563e-6,564e-6,-516e-6,517e-6,-518e-6,519e-6,-52e-5,521e-6,-522e-6,523e-6,-524e-6,526e-6,-527e-6,528e-6,-529e-6,53e-5,-531e-6,532e-6,-533e-6,534e-6,-535e-6,536e-6,-537e-6,538e-6,-539e-6,54e-5,-542e-6,543e-6,-544e-6,545e-6,-546e-6,547e-6,-548e-6,549e-6,-55e-5,551e-6,-552e-6,553e-6,-554e-6,555e-6,-556e-6,557e-6,-558e-6,559e-6,-56e-5,561e-6,-563e-6,564e-6,-565e-6,566e-6,-567e-6,568e-6,-569e-6,57e-5,-571e-6,572e-6,-573e-6,574e-6,-575e-6,576e-6,-577e-6,578e-6,-579e-6,58e-5,-581e-6,582e-6,-583e-6,584e-6,-585e-6,586e-6,-587e-6,588e-6,-589e-6,59e-5,-591e-6,592e-6,-593e-6,594e-6,-595e-6,596e-6,-597e-6,598e-6,-599e-6,6e-4,-601e-6,602e-6,-603e-6,604e-6,-605e-6,606e-6,-607e-6,608e-6,-609e-6,61e-5,-611e-6,612e-6,-613e-6,614e-6,-615e-6,615e-6,-616e-6,617e-6,-618e-6,619e-6,-62e-5,621e-6,-622e-6,623e-6,-624e-6,625e-6,-626e-6,627e-6,-628e-6,629e-6,-63e-5,631e-6,-631e-6,632e-6,-633e-6,634e-6,-635e-6,636e-6,-637e-6,638e-6,-639e-6,64e-5,-641e-6,641e-6,-642e-6,643e-6,-644e-6,645e-6,-646e-6,647e-6,-648e-6,649e-6,-649e-6,65e-5,-651e-6,652e-6,-653e-6,654e-6,-655e-6,655e-6,-656e-6,657e-6,-658e-6,659e-6,-66e-5,661e-6,-661e-6,662e-6,-663e-6,664e-6,-665e-6,571e-6,-572e-6,572e-6,-573e-6,574e-6,-574e-6,575e-6,-576e-6,577e-6,-577e-6,578e-6,-579e-6,579e-6,-58e-5,581e-6,-581e-6,582e-6,-583e-6,583e-6,-584e-6,585e-6,-585e-6,586e-6,-587e-6,587e-6,-588e-6,589e-6,-589e-6,59e-5,-591e-6,591e-6,-592e-6,592e-6,-593e-6,594e-6,-594e-6,595e-6,-596e-6,596e-6,-597e-6,597e-6,-598e-6,599e-6,-599e-6,6e-4,-6e-4,601e-6,-602e-6,602e-6,-603e-6,603e-6,-604e-6,604e-6,-605e-6,606e-6,-606e-6,607e-6,-607e-6,608e-6,-608e-6,609e-6,-61e-5,61e-5,-611e-6,611e-6,-612e-6,612e-6,-613e-6,613e-6,-614e-6,614e-6,-615e-6,615e-6,-616e-6,616e-6,-617e-6,617e-6,-618e-6,618e-6,-619e-6,619e-6,-62e-5,62e-5,-621e-6,621e-6,-622e-6,622e-6,-623e-6,623e-6,-624e-6,624e-6,-625e-6,625e-6,-625e-6,626e-6,-626e-6,627e-6,-627e-6,628e-6,-628e-6,628e-6,-629e-6,629e-6,-63e-5,63e-5,-63e-5,631e-6,-631e-6,632e-6,-632e-6,632e-6,-633e-6,633e-6,-634e-6,634e-6,-634e-6,635e-6,-635e-6,635e-6,-636e-6,636e-6,-636e-6,637e-6,-637e-6,637e-6,-638e-6,638e-6,-638e-6,639e-6,-639e-6,639e-6,-64e-5,64e-5,-64e-5,64e-5,-641e-6,641e-6,-641e-6,642e-6,-642e-6,642e-6,-642e-6,643e-6,-643e-6,643e-6,-643e-6,644e-6,-644e-6,644e-6,-644e-6,644e-6,-645e-6,645e-6,-645e-6,645e-6,-645e-6,646e-6,-646e-6,646e-6,-646e-6,646e-6,-647e-6,647e-6,-647e-6,647e-6,-647e-6,647e-6,-648e-6,648e-6,-648e-6,648e-6,-648e-6,648e-6,-648e-6,648e-6,-649e-6,649e-6,-649e-6,649e-6,-649e-6,649e-6,-649e-6,649e-6,-649e-6,649e-6,-649e-6,649e-6,-65e-5,65e-5,-65e-5,65e-5,-65e-5,575e-6,-575e-6,575e-6,-575e-6,575e-6,-575e-6,575e-6,-575e-6,575e-6,-575e-6,575e-6,-575e-6,575e-6,-575e-6,575e-6,-574e-6,574e-6,-574e-6,574e-6,-574e-6,574e-6,-574e-6,574e-6,-574e-6,574e-6,-574e-6,574e-6,-574e-6,574e-6,-573e-6,573e-6,-573e-6,573e-6,-573e-6,573e-6,-573e-6,573e-6,-572e-6,572e-6,-572e-6,572e-6,-572e-6,572e-6,-572e-6,571e-6,-571e-6,571e-6,-571e-6,571e-6,-57e-5,57e-5,-57e-5,57e-5,-57e-5,569e-6,-569e-6,569e-6,-569e-6,568e-6,-568e-6,568e-6,-568e-6,567e-6,-567e-6,567e-6,-567e-6,566e-6,-566e-6,566e-6,-566e-6,565e-6,-565e-6,565e-6,-564e-6,564e-6,-564e-6,563e-6,-563e-6,563e-6,-562e-6,562e-6,-562e-6,561e-6,-561e-6,561e-6,-56e-5,56e-5,-559e-6,559e-6,-559e-6,558e-6,-558e-6,557e-6,-557e-6,557e-6,-556e-6,556e-6,-555e-6,555e-6,-554e-6,554e-6,-553e-6,553e-6,-553e-6,552e-6,-552e-6,551e-6,-551e-6,55e-5,-55e-5,549e-6,-549e-6,548e-6,-548e-6,547e-6,-547e-6,546e-6,-545e-6,545e-6,-544e-6,544e-6,-543e-6,543e-6,-542e-6,542e-6,-541e-6,54e-5,-54e-5,539e-6,-539e-6,538e-6,-537e-6,537e-6,-536e-6,535e-6,-535e-6,534e-6,-534e-6,533e-6,-532e-6,532e-6,-531e-6,53e-5,-53e-5,529e-6,-528e-6,527e-6,-527e-6,526e-6,-525e-6,525e-6,-524e-6,523e-6,-522e-6,522e-6,-521e-6,52e-5,-519e-6,519e-6,-518e-6,517e-6,-516e-6,516e-6,-515e-6,514e-6,-513e-6,512e-6,-512e-6,511e-6,-51e-5,509e-6,-508e-6,507e-6,-507e-6,506e-6,-505e-6,504e-6,-503e-6,502e-6,-501e-6,501e-6,-5e-4,499e-6,-498e-6,497e-6,-496e-6,495e-6,-494e-6,493e-6,-492e-6,491e-6,-49e-5,489e-6,-489e-6,488e-6,-487e-6,486e-6,-485e-6,484e-6,-483e-6,482e-6,-481e-6,48e-5,-479e-6,41e-5,-409e-6,408e-6,-407e-6,406e-6,-405e-6,404e-6,-403e-6,403e-6,-402e-6,401e-6,-4e-4,399e-6,-398e-6,397e-6,-396e-6,395e-6,-394e-6,393e-6,-392e-6,391e-6,-39e-5,389e-6,-388e-6,387e-6,-386e-6,385e-6,-384e-6,383e-6,-382e-6,381e-6,-38e-5,379e-6,-378e-6,377e-6,-376e-6,375e-6,-374e-6,373e-6,-372e-6,371e-6,-37e-5,369e-6,-368e-6,367e-6,-366e-6,364e-6,-363e-6,362e-6,-361e-6,36e-5,-359e-6,358e-6,-357e-6,356e-6,-354e-6,353e-6,-352e-6,351e-6,-35e-5,349e-6,-348e-6,346e-6,-345e-6,344e-6,-343e-6,342e-6,-341e-6,339e-6,-338e-6,337e-6,-336e-6,335e-6,-333e-6,332e-6,-331e-6,33e-5,-328e-6,327e-6,-326e-6,325e-6,-324e-6,322e-6,-321e-6,32e-5,-318e-6,317e-6,-316e-6,315e-6,-313e-6,312e-6,-311e-6,31e-5,-308e-6,307e-6,-306e-6,304e-6,-303e-6,302e-6,-3e-4,299e-6,-298e-6,296e-6,-295e-6,294e-6,-292e-6,291e-6,-29e-5,288e-6,-287e-6,286e-6,-284e-6,283e-6,-281e-6,28e-5,-279e-6,277e-6,-276e-6,274e-6,-273e-6,272e-6,-27e-5,269e-6,-267e-6,266e-6,-265e-6,263e-6,-262e-6,26e-5,-259e-6,257e-6,-256e-6,255e-6,-253e-6,252e-6,-25e-5,249e-6,-247e-6,246e-6,-244e-6,243e-6,-241e-6,24e-5,-238e-6,237e-6,-235e-6,234e-6,-232e-6,231e-6,-229e-6,228e-6,-226e-6,225e-6,-223e-6,222e-6,-22e-5,219e-6,-217e-6,215e-6,-214e-6,212e-6,-211e-6,209e-6,-208e-6,206e-6,-205e-6,203e-6,-201e-6,2e-4,-198e-6,197e-6,-195e-6,194e-6,-192e-6,19e-5,-189e-6,187e-6,-186e-6,184e-6,-182e-6,181e-6,-179e-6,177e-6,-176e-6,174e-6,-173e-6,171e-6,-169e-6,168e-6,-166e-6,164e-6,-163e-6,161e-6,-16e-5,158e-6,-156e-6,155e-6,-153e-6,151e-6,-15e-5,148e-6,-146e-6,145e-6,-143e-6,141e-6,-14e-5,138e-6,-136e-6,135e-6,-133e-6,131e-6,-129e-6,128e-6,-126e-6,124e-6,-123e-6,121e-6,-119e-6,118e-6,-116e-6,114e-6,-112e-6,111e-6,-109e-6,107e-6,-106e-6,104e-6,-102e-6,1e-4,-99e-6,97e-6,-95e-6,94e-6,-92e-6,9e-5,-88e-6,87e-6,-85e-6,83e-6,-81e-6,8e-5,-78e-6,76e-6,-74e-6,52e-6,-51e-6,49e-6,-48e-6,47e-6,-46e-6,44e-6,-43e-6,42e-6,-41e-6,39e-6,-38e-6,37e-6,-36e-6,34e-6,-33e-6,32e-6,-31e-6,29e-6,-28e-6,27e-6,-25e-6,24e-6,-23e-6,22e-6,-2e-5,19e-6,-18e-6,17e-6,-15e-6,14e-6,-13e-6,12e-6,-1e-5,9e-6,-8e-6,7e-6,-5e-6,4e-6,-3e-6,1e-6,0,-1e-6,2e-6,-4e-6,5e-6,-6e-6,7e-6,-9e-6,1e-5,-11e-6,12e-6,-14e-6,15e-6,-16e-6,18e-6,-19e-6,2e-5,-21e-6,23e-6,-24e-6,25e-6,-26e-6,28e-6,-29e-6,3e-5,-31e-6,33e-6,-34e-6,35e-6,-36e-6,38e-6,-39e-6,4e-5,-41e-6,43e-6,-44e-6,45e-6,-46e-6,48e-6,-49e-6,5e-5,-51e-6,53e-6,-54e-6,55e-6,-56e-6,58e-6,-59e-6,6e-5,-61e-6,63e-6,-64e-6,65e-6,-66e-6,68e-6,-69e-6,7e-5,-71e-6,72e-6,-74e-6,75e-6,-76e-6,77e-6,-79e-6,8e-5,-81e-6,82e-6,-83e-6,85e-6,-86e-6,87e-6,-88e-6,89e-6,-91e-6,92e-6,-93e-6,94e-6,-95e-6,97e-6,-98e-6,99e-6,-1e-4,101e-6,-103e-6,104e-6,-105e-6,106e-6,-107e-6,108e-6,-11e-5,111e-6,-112e-6,113e-6,-114e-6,115e-6,-117e-6,118e-6,-119e-6,12e-5,-121e-6,122e-6,-123e-6,125e-6,-126e-6,127e-6,-128e-6,129e-6,-13e-5,131e-6,-132e-6,134e-6,-135e-6,136e-6,-137e-6,138e-6,-139e-6,14e-5,-141e-6,142e-6,-143e-6,145e-6,-146e-6,147e-6,-148e-6,149e-6,-15e-5,151e-6,-152e-6,153e-6,-154e-6,155e-6,-156e-6,157e-6,-158e-6,159e-6,-16e-5,161e-6,-162e-6,163e-6,-165e-6,166e-6,-167e-6,168e-6,-169e-6,17e-5,-171e-6,172e-6,-173e-6,174e-6,-174e-6,175e-6,-176e-6,177e-6,-178e-6,179e-6,-18e-5,181e-6,-182e-6,183e-6,-184e-6,185e-6,-186e-6,187e-6,-188e-6,189e-6,-19e-5,191e-6,-191e-6,192e-6,-193e-6,194e-6,-195e-6,196e-6,-197e-6,198e-6,-199e-6,199e-6,-2e-4,201e-6,-202e-6,203e-6,-204e-6,205e-6,-205e-6,206e-6,-207e-6,208e-6,-209e-6,209e-6,-21e-5,211e-6,-212e-6,213e-6,-213e-6,214e-6,-215e-6,216e-6,-217e-6,217e-6,-218e-6,219e-6,-22e-5,22e-5,-221e-6,222e-6,-222e-6,223e-6,-224e-6,225e-6,-225e-6,226e-6,-227e-6,227e-6,-228e-6,229e-6,-229e-6,23e-5,-231e-6,231e-6,-232e-6,233e-6,-233e-6,234e-6,-234e-6,235e-6,-236e-6,236e-6,-237e-6,237e-6,-238e-6,239e-6,-239e-6,24e-5,-24e-5,241e-6,-241e-6,242e-6,-243e-6,243e-6,-244e-6,244e-6,-245e-6,245e-6,-246e-6,246e-6,-247e-6,247e-6,-248e-6,248e-6,-248e-6,249e-6,-249e-6,25e-5,-25e-5,251e-6,-251e-6,252e-6,-252e-6,252e-6,-253e-6,253e-6,-254e-6,254e-6,-254e-6,255e-6,-255e-6,255e-6,-256e-6,256e-6,-256e-6,257e-6,-257e-6,257e-6,-258e-6,258e-6,-258e-6,258e-6,-259e-6,215e-6,-216e-6,216e-6,-216e-6,216e-6,-216e-6,217e-6,-217e-6,217e-6,-217e-6,217e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-217e-6,217e-6,-217e-6,217e-6,-217e-6,216e-6,-216e-6,216e-6,-216e-6,216e-6,-215e-6,215e-6,-215e-6,215e-6,-214e-6,214e-6,-214e-6,214e-6,-213e-6,213e-6,-213e-6,212e-6,-212e-6,212e-6,-211e-6,211e-6,-211e-6,211e-6,-21e-5,21e-5,-209e-6,209e-6,-209e-6,208e-6,-208e-6,208e-6,-207e-6,207e-6,-206e-6,206e-6,-206e-6,205e-6,-205e-6,204e-6,-204e-6,203e-6,-203e-6,203e-6,-202e-6,202e-6,-201e-6,201e-6,-2e-4,2e-4,-199e-6,199e-6,-198e-6,198e-6,-197e-6,197e-6,-196e-6,196e-6,-195e-6,194e-6,-194e-6,193e-6,-193e-6,192e-6,-192e-6,191e-6,-19e-5,19e-5,-189e-6,189e-6,-188e-6,187e-6,-187e-6,186e-6,-185e-6,185e-6,-184e-6,183e-6,-183e-6,182e-6,-181e-6,181e-6,-18e-5,179e-6,-179e-6,178e-6,-177e-6,177e-6,-176e-6,175e-6,-174e-6,174e-6,-173e-6,172e-6,-171e-6,171e-6,-17e-5,169e-6,-168e-6,168e-6,-167e-6,166e-6,-165e-6,164e-6,-164e-6,163e-6,-162e-6,161e-6,-16e-5,159e-6,-159e-6,158e-6,-157e-6,156e-6,-155e-6,154e-6,-153e-6,153e-6,-152e-6,151e-6,-15e-5,149e-6,-148e-6,147e-6,-146e-6,145e-6,-144e-6,144e-6,-143e-6,142e-6,-141e-6,14e-5,-139e-6,138e-6,-137e-6,136e-6,-135e-6,134e-6,-133e-6,132e-6,-131e-6,13e-5,-129e-6,128e-6,-127e-6,126e-6,-125e-6,124e-6,-123e-6,122e-6,-121e-6,12e-5,-119e-6,118e-6,-117e-6,116e-6,-115e-6,114e-6,-113e-6,112e-6,-111e-6,11e-5,-108e-6,107e-6,-106e-6,105e-6,-104e-6,103e-6,-102e-6,101e-6,-1e-4,99e-6,-98e-6,96e-6,-95e-6,94e-6,-93e-6,92e-6,-91e-6,9e-5,-89e-6,87e-6,-86e-6,85e-6,-84e-6,83e-6,-82e-6,81e-6,-79e-6,78e-6,-77e-6,76e-6,-75e-6,74e-6,-72e-6,71e-6,-7e-5,69e-6,-68e-6,66e-6,-65e-6,64e-6,-63e-6,62e-6,-6e-5,59e-6,-58e-6,57e-6,-56e-6,54e-6,-53e-6,52e-6,-51e-6,5e-5,-48e-6,47e-6,-46e-6,45e-6,-44e-6,42e-6,-41e-6,4e-5,-39e-6,37e-6,-36e-6,35e-6,-34e-6,32e-6,-31e-6,3e-5,-29e-6,27e-6,-26e-6,25e-6,-24e-6,23e-6,-21e-6,2e-5,-17e-6,16e-6,-15e-6,14e-6,-13e-6,11e-6,-1e-5,9e-6,-8e-6,7e-6,-6e-6,5e-6,-3e-6,2e-6,-1e-6]
}},{}],17:[function(require,module,exports){module.exports={real:[0,0,-.282095,0,-.199471,0,-.162868,0,-.141047,0,-.126157,0,-.115165,0,-.106622,0,-.099736,0,-.094032,0,-.089206,0,-.085055,0,-.081434,0,-.078239,0,-.075393,0,-.072837,0,-.070524,0,-.068418,0,-.06649,0,-.064717,0,-.063078,0,-.061558,0,-.060143,0,-.058821,0,-.057582,0,-.056419,0,-.055323,0,-.054289,0,-.053311,0,-.052384,0,-.051503,0,-.050666,0,-.049868,0,-.049106,0,-.048379,0,-.047683,0,-.047016,0,-.046376,0,-.045762,0,-.045171,0,-.044603,0,-.044056,0,-.043528,0,-.043019,0,-.042527,0,-.042052,0,-.041593,0,-.041148,0,-.040717,0,-.040299,0,-.039894,0,-.039501,0,-.03912,0,-.038749,0,-.038388,0,-.038038,0,-.037697,0,-.037364,0,-.037041,0,-.036726,0,-.036418,0,-.036119,0,-.035826,0,-.035541,0,-.035262,0,-.03499,0,-.034723,0,-.034463,0,-.034209,0,-.03396,0,-.033717,0,-.033478,0,-.033245,0,-.033017,0,-.032793,0,-.032574,0,-.032358,0,-.032148,0,-.031941,0,-.031738,0,-.031539,0,-.031344,0,-.031152,0,-.030964,0,-.030779,0,-.030597,0,-.030419,0,-.030244,0,-.030071,0,-.029902,0,-.029735,0,-.029572,0,-.02941,0,-.029252,0,-.029096,0,-.028942,0,-.028791,0,-.028642,0,-.028496,0,-.028352,0,-.028209,0,-.028069,0,-.027932,0,-.027796,0,-.027662,0,-.02753,0,-.027399,0,-.027271,0,-.027145,0,-.02702,0,-.026897,0,-.026775,0,-.026655,0,-.026537,0,-.026421,0,-.026305,0,-.026192,0,-.02608,0,-.025969,0,-.02586,0,-.025752,0,-.025645,0,-.02554,0,-.025436,0,-.025333,0,-.025231,0,-.025131,0,-.025032,0,-.024934,0,-.024837,0,-.024741,0,-.024647,0,-.024553,0,-.024461,0,-.024369,0,-.024279,0,-.024189,0,-.024101,0,-.024014,0,-.023927,0,-.023841,0,-.023757,0,-.023673,0,-.02359,0,-.023508,0,-.023427,0,-.023346,0,-.023267,0,-.023188,0,-.02311,0,-.023033,0,-.022957,0,-.022881,0,-.022806,0,-.022732,0,-.022658,0,-.022586,0,-.022514,0,-.022442,0,-.022372,0,-.022302,0,-.022232,0,-.022163,0,-.022095,0,-.022028,0,-.021961,0,-.021895,0,-.021829,0,-.021764,0,-.0217,0,-.021636,0,-.021572,0,-.02151,0,-.021447,0,-.021386,0,-.021324,0,-.021264,0,-.021204,0,-.021144,0,-.021085,0,-.021026,0,-.020968,0,-.02091,0,-.020853,0,-.020796,0,-.02074,0,-.020684,0,-.020629,0,-.020574,0,-.020519,0,-.020465,0,-.020412,0,-.020358,0,-.020306,0,-.020253,0,-.020201,0,-.02015,0,-.020098,0,-.020048,0,-.019997,0,-.019947,0,-.019897,0,-.019848,0,-.019799,0,-.019751,0,-.019702,0,-.019654,0,-.019607,0,-.01956,0,-.019513,0,-.019466,0,-.01942,0,-.019374,0,-.019329,0,-.019284,0,-.019239,0,-.019194,0,-.01915,0,-.019106,0,-.019062,0,-.019019,0,-.018976,0,-.018933,0,-.01889,0,-.018848,0,-.018806,0,-.018765,0,-.018723,0,-.018682,0,-.018641,0,-.018601,0,-.01856,0,-.01852,0,-.018481,0,-.018441,0,-.018402,0,-.018363,0,-.018324,0,-.018285,0,-.018247,0,-.018209,0,-.018171,0,-.018134,0,-.018096,0,-.018059,0,-.018022,0,-.017986,0,-.017949,0,-.017913,0,-.017877,0,-.017841,0,-.017806,0,-.01777,0,-.017735,0,-.0177,0,-.017665,0,-.017631,0,-.017597,0,-.017562,0,-.017529,0,-.017495,0,-.017461,0,-.017428,0,-.017395,0,-.017362,0,-.017329,0,-.017296,0,-.017264,0,-.017232,0,-.0172,0,-.017168,0,-.017136,0,-.017105,0,-.017073,0,-.017042,0,-.017011,0,-.01698,0,-.016949,0,-.016919,0,-.016889,0,-.016858,0,-.016828,0,-.016798,0,-.016769,0,-.016739,0,-.01671,0,-.016681,0,-.016652,0,-.016623,0,-.016594,0,-.016565,0,-.016537,0,-.016508,0,-.01648,0,-.016452,0,-.016424,0,-.016396,0,-.016369,0,-.016341,0,-.016314,0,-.016287,0,-.01626,0,-.016233,0,-.016206,0,-.016179,0,-.016153,0,-.016126,0,-.0161,0,-.016074,0,-.016048,0,-.016022,0,-.015996,0,-.01597,0,-.015945,0,-.01592,0,-.015894,0,-.015869,0,-.015844,0,-.015819,0,-.015794,0,-.01577,0,-.015745,0,-.015721,0,-.015696,0,-.015672,0,-.015648,0,-.015624,0,-.0156,0,-.015576,0,-.015552,0,-.015529,0,-.015505,0,-.015482,0,-.015459,0,-.015436,0,-.015412,0,-.01539,0,-.015367,0,-.015344,0,-.015321,0,-.015299,0,-.015276,0,-.015254,0,-.015232,0,-.01521,0,-.015187,0,-.015166,0,-.015144,0,-.015122,0,-.0151,0,-.015079,0,-.015057,0,-.015036,0,-.015014,0,-.014993,0,-.014972,0,-.014951,0,-.01493,0,-.014909,0,-.014888,0,-.014868,0,-.014847,0,-.014827,0,-.014806,0,-.014786,0,-.014766,0,-.014745,0,-.014725,0,-.014705,0,-.014685,0,-.014665,0,-.014646,0,-.014626,0,-.014606,0,-.014587,0,-.014567,0,-.014548,0,-.014529,0,-.014509,0,-.01449,0,-.014471,0,-.014452,0,-.014433,0,-.014414,0,-.014396,0,-.014377,0,-.014358,0,-.01434,0,-.014321,0,-.014303,0,-.014284,0,-.014266,0,-.014248,0,-.01423,0,-.014212,0,-.014194,0,-.014176,0,-.014158,0,-.01414,0,-.014122,0,-.014105,0,-.014087,0,-.01407,0,-.014052,0,-.014035,0,-.014017,0,-.014,0,-.013983,0,-.013966,0,-.013949,0,-.013932,0,-.013915,0,-.013898,0,-.013881,0,-.013864,0,-.013847,0,-.013831,0,-.013814,0,-.013798,0,-.013781,0,-.013765,0,-.013748,0,-.013732,0,-.013716,0,-.0137,0,-.013684,0,-.013668,0,-.013652,0,-.013636,0,-.01362,0,-.013604,0,-.013588,0,-.013572,0,-.013557,0,-.013541,0,-.013525,0,-.01351,0,-.013494,0,-.013479,0,-.013464,0,-.013448,0,-.013433,0,-.013418,0,-.013403,0,-.013388,0,-.013373,0,-.013358,0,-.013343,0,-.013328,0,-.013313,0,-.013298,0,-.013283,0,-.013269,0,-.013254,0,-.013239,0,-.013225,0,-.01321,0,-.013196,0,-.013181,0,-.013167,0,-.013153,0,-.013138,0,-.013124,0,-.01311,0,-.013096,0,-.013082,0,-.013068,0,-.013054,0,-.01304,0,-.013026,0,-.013012,0,-.012998,0,-.012984,0,-.012971,0,-.012957,0,-.012943,0,-.01293,0,-.012916,0,-.012903,0,-.012889,0,-.012876,0,-.012862,0,-.012849,0,-.012836,0,-.012822,0,-.012809,0,-.012796,0,-.012783,0,-.01277,0,-.012757,0,-.012744,0,-.012731,0,-.012718,0,-.012705,0,-.012692,0,-.012679,0,-.012666,0,-.012654,0,-.012641,0,-.012628,0,-.012616,0,-.012603,0,-.012591,0,-.012578,0,-.012566,0,-.012553,0,-.012541,0,-.012528,0,-.012516,0,-.012504,0,-.012491,0,-.012479,0,-.012467,0,-.012455,0,-.012443,0,-.012431,0,-.012419,0,-.012407,0,-.012395,0,-.012383,0,-.012371,0,-.012359,0,-.012347,0,-.012335,0,-.012323,0,-.012312,0,-.0123,0,-.012288,0,-.012277,0,-.012265,0,-.012253,0,-.012242,0,-.01223,0,-.012219,0,-.012207,0,-.012196,0,-.012185,0,-.012173,0,-.012162,0,-.012151,0,-.012139,0,-.012128,0,-.012117,0,-.012106,0,-.012095,0,-.012084,0,-.012073,0,-.012062,0,-.01205,0,-.01204,0,-.012029,0,-.012018,0,-.012007,0,-.011996,0,-.011985,0,-.011974,0,-.011963,0,-.011953,0,-.011942,0,-.011931,0,-.011921,0,-.01191,0,-.011899,0,-.011889,0,-.011878,0,-.011868,0,-.011857,0,-.011847,0,-.011836,0,-.011826,0,-.011816,0,-.011805,0,-.011795,0,-.011785,0,-.011774,0,-.011764,0,-.011754,0,-.011744,0,-.011734,0,-.011723,0,-.011713,0,-.011703,0,-.011693,0,-.011683,0,-.011673,0,-.011663,0,-.011653,0,-.011643,0,-.011633,0,-.011624,0,-.011614,0,-.011604,0,-.011594,0,-.011584,0,-.011574,0,-.011565,0,-.011555,0,-.011545,0,-.011536,0,-.011526,0,-.011516,0,-.011507,0,-.011497,0,-.011488,0,-.011478,0,-.011469,0,-.011459,0,-.01145,0,-.01144,0,-.011431,0,-.011422,0,-.011412,0,-.011403,0,-.011394,0,-.011384,0,-.011375,0,-.011366,0,-.011357,0,-.011348,0,-.011338,0,-.011329,0,-.01132,0,-.011311,0,-.011302,0,-.011293,0,-.011284,0,-.011275,0,-.011266,0,-.011257,0,-.011248,0,-.011239,0,-.01123,0,-.011221,0,-.011212,0,-.011203,0,-.011195,0,-.011186,0,-.011177,0,-.011168,0,-.011159,0,-.011151,0,-.011142,0,-.011133,0,-.011125,0,-.011116,0,-.011107,0,-.011099,0,-.01109,0,-.011082,0,-.011073,0,-.011065,0,-.011056,0,-.011048,0,-.011039,0,-.011031,0,-.011022,0,-.011014,0,-.011006,0,-.010997,0,-.010989,0,-.010981,0,-.010972,0,-.010964,0,-.010956,0,-.010947,0,-.010939,0,-.010931,0,-.010923,0,-.010915,0,-.010906,0,-.010898,0,-.01089,0,-.010882,0,-.010874,0,-.010866,0,-.010858,0,-.01085,0,-.010842,0,-.010834,0,-.010826,0,-.010818,0,-.01081,0,-.010802,0,-.010794,0,-.010786,0,-.010778,0,-.01077,0,-.010763,0,-.010755,0,-.010747,0,-.010739,0,-.010731,0,-.010724,0,-.010716,0,-.010708,0,-.0107,0,-.010693,0,-.010685,0,-.010677,0,-.01067,0,-.010662,0,-.010655,0,-.010647,0,-.010639,0,-.010632,0,-.010624,0,-.010617,0,-.010609,0,-.010602,0,-.010594,0,-.010587,0,-.010579,0,-.010572,0,-.010565,0,-.010557,0,-.01055,0,-.010542,0,-.010535,0,-.010528,0,-.01052,0,-.010513,0,-.010506,0,-.010498,0,-.010491,0,-.010484,0,-.010477,0,-.01047,0,-.010462,0,-.010455,0,-.010448,0,-.010441,0,-.010434,0,-.010427,0,-.010419,0,-.010412,0,-.010405,0,-.010398,0,-.010391,0,-.010384,0,-.010377,0,-.01037,0,-.010363,0,-.010356,0,-.010349,0,-.010342,0,-.010335,0,-.010328,0,-.010321,0,-.010314,0,-.010308,0,-.010301,0,-.010294,0,-.010287,0,-.01028,0,-.010273,0,-.010266,0,-.01026,0,-.010253,0,-.010246,0,-.010239,0,-.010233,0,-.010226,0,-.010219,0,-.010213,0,-.010206,0,-.010199,0,-.010192,0,-.010186,0,-.010179,0,-.010173,0,-.010166,0,-.010159,0,-.010153,0,-.010146,0,-.01014,0,-.010133,0,-.010127,0,-.01012,0,-.010114,0,-.010107,0,-.010101,0,-.010094,0,-.010088,0,-.010081,0,-.010075,0,-.010068,0,-.010062,0,-.010056,0,-.010049,0,-.010043,0,-.010036,0,-.01003,0,-.010024,0,-.010017,0,-.010011,0,-.010005,0,-.009999,0,-.009992,0,-.009986,0,-.00998,0,-.009974,0,-.009967,0,-.009961,0,-.009955,0,-.009949,0,-.009943,0,-.009936,0,-.00993,0,-.009924,0,-.009918,0,-.009912,0,-.009906,0,-.0099,0,-.009893,0,-.009887,0,-.009881,0,-.009875,0,-.009869,0,-.009863,0,-.009857,0,-.009851,0,-.009845,0,-.009839,0,-.009833,0,-.009827,0,-.009821,0,-.009815,0,-.009809,0,-.009803,0,-.009798,0,-.009792,0,-.009786,0,-.00978,0,-.009774,0,-.009768,0,-.009762,0,-.009756,0,-.009751,0,-.009745,0,-.009739,0,-.009733,0,-.009727,0,-.009722,0,-.009716,0,-.00971,0,-.009704,0,-.009699,0,-.009693,0,-.009687,0,-.009681,0,-.009676,0,-.00967,0,-.009664,0,-.009659,0,-.009653,0,-.009647,0,-.009642,0,-.009636,0,-.009631,0,-.009625,0,-.009619,0,-.009614,0,-.009608,0,-.009603,0,-.009597,0,-.009592,0,-.009586,0,-.00958,0,-.009575,0,-.009569,0,-.009564,0,-.009558,0,-.009553,0,-.009547,0,-.009542,0,-.009537,0,-.009531,0,-.009526,0,-.00952,0,-.009515,0,-.009509,0,-.009504,0,-.009499,0,-.009493,0,-.009488,0,-.009483,0,-.009477,0,-.009472,0,-.009466,0,-.009461,0,-.009456,0,-.009451,0,-.009445,0,-.00944,0,-.009435,0,-.009429,0,-.009424,0,-.009419,0,-.009414,0,-.009408,0,-.009403,0,-.009398,0,-.009393,0,-.009388,0,-.009382,0,-.009377,0,-.009372,0,-.009367,0,-.009362,0,-.009356,0,-.009351,0,-.009346,0,-.009341,0,-.009336,0,-.009331,0,-.009326,0,-.009321,0,-.009316,0,-.009311,0,-.009305,0,-.0093,0,-.009295,0,-.00929,0,-.009285,0,-.00928,0,-.009275,0,-.00927,0,-.009265,0,-.00926,0,-.009255,0,-.00925,0,-.009245,0,-.00924,0,-.009235,0,-.00923,0,-.009225,0,-.009221,0,-.009216,0,-.009211,0,-.009206,0,-.009201,0,-.009196,0,-.009191,0,-.009186,0,-.009181,0,-.009177,0,-.009172,0,-.009167,0,-.009162,0,-.009157,0,-.009152,0,-.009148,0,-.009143,0,-.009138,0,-.009133,0,-.009128,0,-.009124,0,-.009119,0,-.009114,0,-.009109,0,-.009105,0,-.0091,0,-.009095,0,-.00909,0,-.009086,0,-.009081,0,-.009076,0,-.009072,0,-.009067,0,-.009062,0,-.009058,0,-.009053,0,-.009048,0,-.009044,0,-.009039,0,-.009034,0,-.00903,0,-.009025,0,-.00902,0,-.009016,0,-.009011,0,-.009007,0,-.009002,0,-.008997,0,-.008993,0,-.008988,0,-.008984,0,-.008979,0,-.008975,0,-.00897,0,-.008966,0,-.008961,0,-.008957,0,-.008952,0,-.008948,0,-.008943,0,-.008939,0,-.008934,0,-.00893,0,-.008925,0,-.008921,0,-.008916,0,-.008912,0,-.008907,0,-.008903,0,-.008898,0,-.008894,0,-.00889,0,-.008885,0,-.008881,0,-.008876,0,-.008872,0,-.008868,0,-.008863,0,-.008859,0,-.008854,0,-.00885,0,-.008846,0,-.008841,0,-.008837,0,-.008833,0,-.008828,0,-.008824,0,-.00882,0],imag:[0,.099736,0,.230329,0,.178412,0,.150786,0,.132981,0,.120286,0,.110647,0,.103006,0,.096758,0,.091524,0,.087056,0,.083185,0,.079788,0,.076776,0,.074082,0,.071652,0,.069447,0,.067434,0,.065586,0,.063882,0,.062304,0,.060838,0,.059471,0,.058192,0,.056992,0,.055863,0,.054799,0,.053793,0,.052841,0,.051938,0,.051079,0,.050262,0,.049483,0,.048739,0,.048027,0,.047346,0,.046693,0,.046066,0,.045464,0,.044885,0,.044327,0,.04379,0,.043271,0,.042771,0,.042288,0,.041821,0,.041368,0,.040931,0,.040506,0,.040095,0,.039696,0,.039309,0,.038933,0,.038567,0,.038212,0,.037866,0,.037529,0,.037202,0,.036882,0,.036571,0,.036267,0,.035971,0,.035682,0,.0354,0,.035125,0,.034856,0,.034593,0,.034335,0,.034084,0,.033838,0,.033597,0,.033361,0,.03313,0,.032904,0,.032683,0,.032465,0,.032253,0,.032044,0,.031839,0,.031638,0,.031441,0,.031248,0,.031058,0,.030871,0,.030688,0,.030508,0,.030331,0,.030157,0,.029986,0,.029818,0,.029653,0,.029491,0,.029331,0,.029174,0,.029019,0,.028866,0,.028716,0,.028569,0,.028423,0,.02828,0,.028139,0,.028,0,.027863,0,.027728,0,.027595,0,.027464,0,.027335,0,.027208,0,.027082,0,.026958,0,.026836,0,.026715,0,.026596,0,.026479,0,.026363,0,.026248,0,.026136,0,.026024,0,.025914,0,.025805,0,.025698,0,.025592,0,.025487,0,.025384,0,.025282,0,.025181,0,.025081,0,.024983,0,.024885,0,.024789,0,.024694,0,.0246,0,.024507,0,.024415,0,.024324,0,.024234,0,.024145,0,.024057,0,.02397,0,.023884,0,.023799,0,.023715,0,.023631,0,.023549,0,.023467,0,.023386,0,.023306,0,.023227,0,.023149,0,.023071,0,.022995,0,.022919,0,.022843,0,.022769,0,.022695,0,.022622,0,.02255,0,.022478,0,.022407,0,.022336,0,.022267,0,.022198,0,.022129,0,.022062,0,.021994,0,.021928,0,.021862,0,.021797,0,.021732,0,.021668,0,.021604,0,.021541,0,.021478,0,.021416,0,.021355,0,.021294,0,.021234,0,.021174,0,.021114,0,.021055,0,.020997,0,.020939,0,.020882,0,.020825,0,.020768,0,.020712,0,.020656,0,.020601,0,.020547,0,.020492,0,.020438,0,.020385,0,.020332,0,.020279,0,.020227,0,.020175,0,.020124,0,.020073,0,.020022,0,.019972,0,.019922,0,.019873,0,.019824,0,.019775,0,.019726,0,.019678,0,.019631,0,.019583,0,.019536,0,.01949,0,.019443,0,.019397,0,.019352,0,.019306,0,.019261,0,.019216,0,.019172,0,.019128,0,.019084,0,.01904,0,.018997,0,.018954,0,.018912,0,.018869,0,.018827,0,.018785,0,.018744,0,.018703,0,.018662,0,.018621,0,.018581,0,.01854,0,.018501,0,.018461,0,.018421,0,.018382,0,.018343,0,.018305,0,.018266,0,.018228,0,.01819,0,.018153,0,.018115,0,.018078,0,.018041,0,.018004,0,.017967,0,.017931,0,.017895,0,.017859,0,.017823,0,.017788,0,.017753,0,.017718,0,.017683,0,.017648,0,.017614,0,.017579,0,.017545,0,.017512,0,.017478,0,.017445,0,.017411,0,.017378,0,.017345,0,.017313,0,.01728,0,.017248,0,.017216,0,.017184,0,.017152,0,.01712,0,.017089,0,.017058,0,.017026,0,.016996,0,.016965,0,.016934,0,.016904,0,.016873,0,.016843,0,.016813,0,.016784,0,.016754,0,.016725,0,.016695,0,.016666,0,.016637,0,.016608,0,.016579,0,.016551,0,.016523,0,.016494,0,.016466,0,.016438,0,.01641,0,.016383,0,.016355,0,.016328,0,.0163,0,.016273,0,.016246,0,.016219,0,.016193,0,.016166,0,.016139,0,.016113,0,.016087,0,.016061,0,.016035,0,.016009,0,.015983,0,.015958,0,.015932,0,.015907,0,.015882,0,.015857,0,.015832,0,.015807,0,.015782,0,.015757,0,.015733,0,.015708,0,.015684,0,.01566,0,.015636,0,.015612,0,.015588,0,.015564,0,.015541,0,.015517,0,.015494,0,.01547,0,.015447,0,.015424,0,.015401,0,.015378,0,.015355,0,.015333,0,.01531,0,.015288,0,.015265,0,.015243,0,.015221,0,.015198,0,.015176,0,.015155,0,.015133,0,.015111,0,.015089,0,.015068,0,.015046,0,.015025,0,.015004,0,.014983,0,.014962,0,.014941,0,.01492,0,.014899,0,.014878,0,.014857,0,.014837,0,.014816,0,.014796,0,.014776,0,.014755,0,.014735,0,.014715,0,.014695,0,.014675,0,.014656,0,.014636,0,.014616,0,.014597,0,.014577,0,.014558,0,.014538,0,.014519,0,.0145,0,.014481,0,.014462,0,.014443,0,.014424,0,.014405,0,.014386,0,.014368,0,.014349,0,.01433,0,.014312,0,.014294,0,.014275,0,.014257,0,.014239,0,.014221,0,.014203,0,.014185,0,.014167,0,.014149,0,.014131,0,.014114,0,.014096,0,.014078,0,.014061,0,.014043,0,.014026,0,.014009,0,.013992,0,.013974,0,.013957,0,.01394,0,.013923,0,.013906,0,.013889,0,.013873,0,.013856,0,.013839,0,.013823,0,.013806,0,.013789,0,.013773,0,.013757,0,.01374,0,.013724,0,.013708,0,.013692,0,.013676,0,.01366,0,.013644,0,.013628,0,.013612,0,.013596,0,.01358,0,.013564,0,.013549,0,.013533,0,.013518,0,.013502,0,.013487,0,.013471,0,.013456,0,.013441,0,.013425,0,.01341,0,.013395,0,.01338,0,.013365,0,.01335,0,.013335,0,.01332,0,.013305,0,.013291,0,.013276,0,.013261,0,.013247,0,.013232,0,.013218,0,.013203,0,.013189,0,.013174,0,.01316,0,.013146,0,.013131,0,.013117,0,.013103,0,.013089,0,.013075,0,.013061,0,.013047,0,.013033,0,.013019,0,.013005,0,.012991,0,.012978,0,.012964,0,.01295,0,.012937,0,.012923,0,.012909,0,.012896,0,.012883,0,.012869,0,.012856,0,.012842,0,.012829,0,.012816,0,.012803,0,.01279,0,.012776,0,.012763,0,.01275,0,.012737,0,.012724,0,.012711,0,.012698,0,.012686,0,.012673,0,.01266,0,.012647,0,.012635,0,.012622,0,.012609,0,.012597,0,.012584,0,.012572,0,.012559,0,.012547,0,.012534,0,.012522,0,.01251,0,.012497,0,.012485,0,.012473,0,.012461,0,.012449,0,.012437,0,.012425,0,.012413,0,.012401,0,.012389,0,.012377,0,.012365,0,.012353,0,.012341,0,.012329,0,.012317,0,.012306,0,.012294,0,.012282,0,.012271,0,.012259,0,.012248,0,.012236,0,.012225,0,.012213,0,.012202,0,.01219,0,.012179,0,.012168,0,.012156,0,.012145,0,.012134,0,.012123,0,.012111,0,.0121,0,.012089,0,.012078,0,.012067,0,.012056,0,.012045,0,.012034,0,.012023,0,.012012,0,.012001,0,.01199,0,.01198,0,.011969,0,.011958,0,.011947,0,.011937,0,.011926,0,.011915,0,.011905,0,.011894,0,.011884,0,.011873,0,.011863,0,.011852,0,.011842,0,.011831,0,.011821,0,.01181,0,.0118,0,.01179,0,.01178,0,.011769,0,.011759,0,.011749,0,.011739,0,.011729,0,.011718,0,.011708,0,.011698,0,.011688,0,.011678,0,.011668,0,.011658,0,.011648,0,.011638,0,.011628,0,.011619,0,.011609,0,.011599,0,.011589,0,.011579,0,.01157,0,.01156,0,.01155,0,.011541,0,.011531,0,.011521,0,.011512,0,.011502,0,.011493,0,.011483,0,.011474,0,.011464,0,.011455,0,.011445,0,.011436,0,.011426,0,.011417,0,.011408,0,.011398,0,.011389,0,.01138,0,.011371,0,.011361,0,.011352,0,.011343,0,.011334,0,.011325,0,.011316,0,.011306,0,.011297,0,.011288,0,.011279,0,.01127,0,.011261,0,.011252,0,.011243,0,.011234,0,.011226,0,.011217,0,.011208,0,.011199,0,.01119,0,.011181,0,.011173,0,.011164,0,.011155,0,.011146,0,.011138,0,.011129,0,.01112,0,.011112,0,.011103,0,.011095,0,.011086,0,.011077,0,.011069,0,.01106,0,.011052,0,.011043,0,.011035,0,.011027,0,.011018,0,.01101,0,.011001,0,.010993,0,.010985,0,.010976,0,.010968,0,.01096,0,.010952,0,.010943,0,.010935,0,.010927,0,.010919,0,.01091,0,.010902,0,.010894,0,.010886,0,.010878,0,.01087,0,.010862,0,.010854,0,.010846,0,.010838,0,.01083,0,.010822,0,.010814,0,.010806,0,.010798,0,.01079,0,.010782,0,.010774,0,.010767,0,.010759,0,.010751,0,.010743,0,.010735,0,.010728,0,.01072,0,.010712,0,.010704,0,.010697,0,.010689,0,.010681,0,.010674,0,.010666,0,.010658,0,.010651,0,.010643,0,.010636,0,.010628,0,.010621,0,.010613,0,.010606,0,.010598,0,.010591,0,.010583,0,.010576,0,.010568,0,.010561,0,.010553,0,.010546,0,.010539,0,.010531,0,.010524,0,.010517,0,.010509,0,.010502,0,.010495,0,.010488,0,.01048,0,.010473,0,.010466,0,.010459,0,.010452,0,.010444,0,.010437,0,.01043,0,.010423,0,.010416,0,.010409,0,.010402,0,.010395,0,.010388,0,.010381,0,.010374,0,.010367,0,.01036,0,.010353,0,.010346,0,.010339,0,.010332,0,.010325,0,.010318,0,.010311,0,.010304,0,.010297,0,.01029,0,.010284,0,.010277,0,.01027,0,.010263,0,.010256,0,.01025,0,.010243,0,.010236,0,.010229,0,.010223,0,.010216,0,.010209,0,.010202,0,.010196,0,.010189,0,.010183,0,.010176,0,.010169,0,.010163,0,.010156,0,.01015,0,.010143,0,.010136,0,.01013,0,.010123,0,.010117,0,.01011,0,.010104,0,.010097,0,.010091,0,.010084,0,.010078,0,.010072,0,.010065,0,.010059,0,.010052,0,.010046,0,.01004,0,.010033,0,.010027,0,.010021,0,.010014,0,.010008,0,.010002,0,.009995,0,.009989,0,.009983,0,.009977,0,.00997,0,.009964,0,.009958,0,.009952,0,.009946,0,.009939,0,.009933,0,.009927,0,.009921,0,.009915,0,.009909,0,.009903,0,.009897,0,.00989,0,.009884,0,.009878,0,.009872,0,.009866,0,.00986,0,.009854,0,.009848,0,.009842,0,.009836,0,.00983,0,.009824,0,.009818,0,.009812,0,.009806,0,.009801,0,.009795,0,.009789,0,.009783,0,.009777,0,.009771,0,.009765,0,.009759,0,.009754,0,.009748,0,.009742,0,.009736,0,.00973,0,.009725,0,.009719,0,.009713,0,.009707,0,.009701,0,.009696,0,.00969,0,.009684,0,.009679,0,.009673,0,.009667,0,.009662,0,.009656,0,.00965,0,.009645,0,.009639,0,.009633,0,.009628,0,.009622,0,.009617,0,.009611,0,.009605,0,.0096,0,.009594,0,.009589,0,.009583,0,.009578,0,.009572,0,.009567,0,.009561,0,.009556,0,.00955,0,.009545,0,.009539,0,.009534,0,.009528,0,.009523,0,.009518,0,.009512,0,.009507,0,.009501,0,.009496,0,.009491,0,.009485,0,.00948,0,.009474,0,.009469,0,.009464,0,.009458,0,.009453,0,.009448,0,.009443,0,.009437,0,.009432,0,.009427,0,.009421,0,.009416,0,.009411,0,.009406,0,.009401,0,.009395,0,.00939,0,.009385,0,.00938,0,.009375,0,.009369,0,.009364,0,.009359,0,.009354,0,.009349,0,.009344,0,.009339,0,.009333,0,.009328,0,.009323,0,.009318,0,.009313,0,.009308,0,.009303,0,.009298,0,.009293,0,.009288,0,.009283,0,.009278,0,.009273,0,.009268,0,.009263,0,.009258,0,.009253,0,.009248,0,.009243,0,.009238,0,.009233,0,.009228,0,.009223,0,.009218,0,.009213,0,.009208,0,.009203,0,.009198,0,.009194,0,.009189,0,.009184,0,.009179,0,.009174,0,.009169,0,.009164,0,.00916,0,.009155,0,.00915,0,.009145,0,.00914,0,.009136,0,.009131,0,.009126,0,.009121,0,.009116,0,.009112,0,.009107,0,.009102,0,.009097,0,.009093,0,.009088,0,.009083,0,.009079,0,.009074,0,.009069,0,.009065,0,.00906,0,.009055,0,.009051,0,.009046,0,.009041,0,.009037,0,.009032,0,.009027,0,.009023,0,.009018,0,.009013,0,.009009,0,.009004,0,.009,0,.008995,0,.008991,0,.008986,0,.008981,0,.008977,0,.008972,0,.008968,0,.008963,0,.008959,0,.008954,0,.00895,0,.008945,0,.008941,0,.008936,0,.008932,0,.008927,0,.008923,0,.008918,0,.008914,0,.008909,0,.008905,0,.008901,0,.008896,0,.008892,0,.008887,0,.008883,0,.008879,0,.008874,0,.00887,0,.008865,0,.008861,0,.008857,0,.008852,0,.008848,0,.008844,0,.008839,0,.008835,0,.008831,0,.008826,0,.008822,0,.008818]}},{}],18:[function(require,module,exports){module.exports={realimag:[0,.079577,0,.106103,0,.063662,0,.045473,0,.035368,0,.028937,0,.024485,0,.021221,0,.018724,0,.016753,0,.015158,0,.01384,0,.012732,0,.011789,0,.010976,0,.010268,0,.009646,0,.009095,0,.008603,0,.008162,0,.007764,0,.007403,0,.007074,0,.006773,0,.006496,0,.006241,0,.006006,0,.005787,0,.005584,0,.005395,0,.005218,0,.005053,0,.004897,0,.004751,0,.004613,0,.004483,0,.00436,0,.004244,0,.004134,0,.004029,0,.00393,0,.003835,0,.003745,0,.003659,0,.003577,0,.003498,0,.003423,0,.003351,0,.003282,0,.003215,0,.003152,0,.00309,0,.003032,0,.002975,0,.00292,0,.002868,0,.002817,0,.002768,0,.002721,0,.002675,0,.002631,0,.002588,0,.002546,0,.002506,0,.002468,0,.00243,0,.002393,0,.002358,0,.002323,0,.00229,0,.002258,0,.002226,0,.002195,0,.002165,0,.002136,0,.002108,0,.00208,0,.002054,0,.002027,0,.002002,0,.001977,0,.001953,0,.001929,0,.001906,0,.001883,0,.001861,0,.00184,0,.001819,0,.001798,0,.001778,0,.001759,0,.001739,0,.001721,0,.001702,0,.001684,0,.001667,0,.001649,0,.001632,0,.001616,0,.0016,0,.001584,0,.001568,0,.001553,0,.001538,0,.001523,0,.001509,0,.001494,0,.001481,0,.001467,0,.001453,0,.00144,0,.001427,0,.001415,0,.001402,0,.00139,0,.001378,0,.001366,0,.001355,0,.001343,0,.001332,0,.001321,0,.00131,0,.001299,0,.001289,0,.001278,0,.001268,0,.001258,0,.001248,0,.001239,0,.001229,0,.00122,0,.00121,0,.001201,0,.001192,0,.001183,0,.001175,0,.001166,0,.001157,0,.001149,0,.001141,0,.001133,0,.001125,0,.001117,0,.001109,0,.001101,0,.001094,0,.001086,0,.001079,0,.001072,0,.001065,0,.001058,0,.001051,0,.001044,0,.001037,0,.00103,0,.001024,0,.001017,0,.001011,0,.001004,0,998e-6,0,992e-6,0,985e-6,0,979e-6,0,973e-6,0,968e-6,0,962e-6,0,956e-6,0,95e-5,0,945e-6,0,939e-6,0,933e-6,0,928e-6,0,923e-6,0,917e-6,0,912e-6,0,907e-6,0,902e-6,0,897e-6,0,892e-6,0,887e-6,0,882e-6,0,877e-6,0,872e-6,0,867e-6,0,863e-6,0,858e-6,0,853e-6,0,849e-6,0,844e-6,0,84e-5,0,835e-6,0,831e-6,0,827e-6,0,823e-6,0,818e-6,0,814e-6,0,81e-5,0,806e-6,0,802e-6,0,798e-6,0,794e-6,0,79e-5,0,786e-6,0,782e-6,0,778e-6,0,774e-6,0,771e-6,0,767e-6,0,763e-6,0,76e-5,0,756e-6,0,753e-6,0,749e-6,0,745e-6,0,742e-6,0,739e-6,0,735e-6,0,732e-6,0,728e-6,0,725e-6,0,722e-6,0,719e-6,0,715e-6,0,712e-6,0,709e-6,0,706e-6,0,703e-6,0,7e-4,0,697e-6,0,693e-6,0,69e-5,0,687e-6,0,685e-6,0,682e-6,0,679e-6,0,676e-6,0,673e-6,0,67e-5,0,667e-6,0,665e-6,0,662e-6,0,659e-6,0,656e-6,0,654e-6,0,651e-6,0,648e-6,0,646e-6,0,643e-6,0,64e-5,0,638e-6,0,635e-6,0,633e-6,0,63e-5,0,628e-6,0,625e-6,0,623e-6,0,62e-5,0,618e-6,0,616e-6,0,613e-6,0,611e-6,0,609e-6,0,606e-6,0,604e-6,0,602e-6,0,599e-6,0,597e-6,0,595e-6,0,593e-6,0,591e-6,0,588e-6,0,586e-6,0,584e-6,0,582e-6,0,58e-5,0,578e-6,0,576e-6,0,574e-6,0,571e-6,0,569e-6,0,567e-6,0,565e-6,0,563e-6,0,561e-6,0,559e-6,0,557e-6,0,556e-6,0,554e-6,0,552e-6,0,55e-5,0,548e-6,0,546e-6,0,544e-6,0,542e-6,0,54e-5,0,539e-6,0,537e-6,0,535e-6,0,533e-6,0,531e-6,0,53e-5,0,528e-6,0,526e-6,0,524e-6,0,523e-6,0,521e-6,0,519e-6,0,518e-6,0,516e-6,0,514e-6,0,513e-6,0,511e-6,0,509e-6,0,508e-6,0,506e-6,0,504e-6,0,503e-6,0,501e-6,0,5e-4,0,498e-6,0,497e-6,0,495e-6,0,494e-6,0,492e-6,0,49e-5,0,489e-6,0,487e-6,0,486e-6,0,484e-6,0,483e-6,0,482e-6,0,48e-5,0,479e-6,0,477e-6,0,476e-6,0,474e-6,0,473e-6,0,472e-6,0,47e-5,0,469e-6,0,467e-6,0,466e-6,0,465e-6,0,463e-6,0,462e-6,0,461e-6,0,459e-6,0,458e-6,0,457e-6,0,455e-6,0,454e-6,0,453e-6,0,452e-6,0,45e-5,0,449e-6,0,448e-6,0,446e-6,0,445e-6,0,444e-6,0,443e-6,0,441e-6,0,44e-5,0,439e-6,0,438e-6,0,437e-6,0,435e-6,0,434e-6,0,433e-6,0,432e-6,0,431e-6,0,43e-5,0,428e-6,0,427e-6,0,426e-6,0,425e-6,0,424e-6,0,423e-6,0,422e-6,0,42e-5,0,419e-6,0,418e-6,0,417e-6,0,416e-6,0,415e-6,0,414e-6,0,413e-6,0,412e-6,0,411e-6,0,41e-5,0,409e-6,0,408e-6,0,407e-6,0,405e-6,0,404e-6,0,403e-6,0,402e-6,0,401e-6,0,4e-4,0,399e-6,0,398e-6,0,397e-6,0,396e-6,0,395e-6,0,394e-6,0,393e-6,0,392e-6,0,392e-6,0,391e-6,0,39e-5,0,389e-6,0,388e-6,0,387e-6,0,386e-6,0,385e-6,0,384e-6,0,383e-6,0,382e-6,0,381e-6,0,38e-5,0,379e-6,0,378e-6,0,378e-6,0,377e-6,0,376e-6,0,375e-6,0,374e-6,0,373e-6,0,372e-6,0,371e-6,0,371e-6,0,37e-5,0,369e-6,0,368e-6,0,367e-6,0,366e-6,0,365e-6,0,365e-6,0,364e-6,0,363e-6,0,362e-6,0,361e-6,0,36e-5,0,36e-5,0,359e-6,0,358e-6,0,357e-6,0,356e-6,0,356e-6,0,355e-6,0,354e-6,0,353e-6,0,353e-6,0,352e-6,0,351e-6,0,35e-5,0,349e-6,0,349e-6,0,348e-6,0,347e-6,0,346e-6,0,346e-6,0,345e-6,0,344e-6,0,343e-6,0,343e-6,0,342e-6,0,341e-6,0,34e-5,0,34e-5,0,339e-6,0,338e-6,0,338e-6,0,337e-6,0,336e-6,0,335e-6,0,335e-6,0,334e-6,0,333e-6,0,333e-6,0,332e-6,0,331e-6,0,331e-6,0,33e-5,0,329e-6,0,328e-6,0,328e-6,0,327e-6,0,326e-6,0,326e-6,0,325e-6,0,324e-6,0,324e-6,0,323e-6,0,323e-6,0,322e-6,0,321e-6,0,321e-6,0,32e-5,0,319e-6,0,319e-6,0,318e-6,0,317e-6,0,317e-6,0,316e-6,0,315e-6,0,315e-6,0,314e-6,0,314e-6,0,313e-6,0,312e-6,0,312e-6,0,311e-6,0,311e-6,0,31e-5,0,309e-6,0,309e-6,0,308e-6,0,308e-6,0,307e-6,0,306e-6,0,306e-6,0,305e-6,0,305e-6,0,304e-6,0,303e-6,0,303e-6,0,302e-6,0,302e-6,0,301e-6,0,301e-6,0,3e-4,0,299e-6,0,299e-6,0,298e-6,0,298e-6,0,297e-6,0,297e-6,0,296e-6,0,296e-6,0,295e-6,0,294e-6,0,294e-6,0,293e-6,0,293e-6,0,292e-6,0,292e-6,0,291e-6,0,291e-6,0,29e-5,0,29e-5,0,289e-6,0,289e-6,0,288e-6,0,288e-6,0,287e-6,0,287e-6,0,286e-6,0,285e-6,0,285e-6,0,284e-6,0,284e-6,0,283e-6,0,283e-6,0,282e-6,0,282e-6,0,281e-6,0,281e-6,0,28e-5,0,28e-5,0,279e-6,0,279e-6,0,278e-6,0,278e-6,0,278e-6,0,277e-6,0,277e-6,0,276e-6,0,276e-6,0,275e-6,0,275e-6,0,274e-6,0,274e-6,0,273e-6,0,273e-6,0,272e-6,0,272e-6,0,271e-6,0,271e-6,0,27e-5,0,27e-5,0,27e-5,0,269e-6,0,269e-6,0,268e-6,0,268e-6,0,267e-6,0,267e-6,0,266e-6,0,266e-6,0,265e-6,0,265e-6,0,265e-6,0,264e-6,0,264e-6,0,263e-6,0,263e-6,0,262e-6,0,262e-6,0,262e-6,0,261e-6,0,261e-6,0,26e-5,0,26e-5,0,259e-6,0,259e-6,0,259e-6,0,258e-6,0,258e-6,0,257e-6,0,257e-6,0,256e-6,0,256e-6,0,256e-6,0,255e-6,0,255e-6,0,254e-6,0,254e-6,0,254e-6,0,253e-6,0,253e-6,0,252e-6,0,252e-6,0,252e-6,0,251e-6,0,251e-6,0,25e-5,0,25e-5,0,25e-5,0,249e-6,0,249e-6,0,248e-6,0,248e-6,0,248e-6,0,247e-6,0,247e-6,0,247e-6,0,246e-6,0,246e-6,0,245e-6,0,245e-6,0,245e-6,0,244e-6,0,244e-6,0,244e-6,0,243e-6,0,243e-6,0,242e-6,0,242e-6,0,242e-6,0,241e-6,0,241e-6,0,241e-6,0,24e-5,0,24e-5,0,24e-5,0,239e-6,0,239e-6,0,238e-6,0,238e-6,0,238e-6,0,237e-6,0,237e-6,0,237e-6,0,236e-6,0,236e-6,0,236e-6,0,235e-6,0,235e-6,0,235e-6,0,234e-6,0,234e-6,0,234e-6,0,233e-6,0,233e-6,0,233e-6,0,232e-6,0,232e-6,0,231e-6,0,231e-6,0,231e-6,0,23e-5,0,23e-5,0,23e-5,0,229e-6,0,229e-6,0,229e-6,0,229e-6,0,228e-6,0,228e-6,0,228e-6,0,227e-6,0,227e-6,0,227e-6,0,226e-6,0,226e-6,0,226e-6,0,225e-6,0,225e-6,0,225e-6,0,224e-6,0,224e-6,0,224e-6,0,223e-6,0,223e-6,0,223e-6,0,222e-6,0,222e-6,0,222e-6,0,222e-6,0,221e-6,0,221e-6,0,221e-6,0,22e-5,0,22e-5,0,22e-5,0,219e-6,0,219e-6,0,219e-6,0,218e-6,0,218e-6,0,218e-6,0,218e-6,0,217e-6,0,217e-6,0,217e-6,0,216e-6,0,216e-6,0,216e-6,0,216e-6,0,215e-6,0,215e-6,0,215e-6,0,214e-6,0,214e-6,0,214e-6,0,213e-6,0,213e-6,0,213e-6,0,213e-6,0,212e-6,0,212e-6,0,212e-6,0,212e-6,0,211e-6,0,211e-6,0,211e-6,0,21e-5,0,21e-5,0,21e-5,0,21e-5,0,209e-6,0,209e-6,0,209e-6,0,208e-6,0,208e-6,0,208e-6,0,208e-6,0,207e-6,0,207e-6,0,207e-6,0,207e-6,0,206e-6,0,206e-6,0,206e-6,0,205e-6,0,205e-6,0,205e-6,0,205e-6,0,204e-6,0,204e-6,0,204e-6,0,204e-6,0,203e-6,0,203e-6,0,203e-6,0,203e-6,0,202e-6,0,202e-6,0,202e-6,0,202e-6,0,201e-6,0,201e-6,0,201e-6,0,201e-6,0,2e-4,0,2e-4,0,2e-4,0,2e-4,0,199e-6,0,199e-6,0,199e-6,0,199e-6,0,198e-6,0,198e-6,0,198e-6,0,198e-6,0,197e-6,0,197e-6,0,197e-6,0,197e-6,0,196e-6,0,196e-6,0,196e-6,0,196e-6,0,195e-6,0,195e-6,0,195e-6,0,195e-6,0,194e-6,0,194e-6,0,194e-6,0,194e-6,0,194e-6,0,193e-6,0,193e-6,0,193e-6,0,193e-6,0,192e-6,0,192e-6,0,192e-6,0,192e-6,0,191e-6,0,191e-6,0,191e-6,0,191e-6,0,19e-5,0,19e-5,0,19e-5,0,19e-5,0,19e-5,0,189e-6,0,189e-6,0,189e-6,0,189e-6,0,188e-6,0,188e-6,0,188e-6,0,188e-6,0,188e-6,0,187e-6,0,187e-6,0,187e-6,0,187e-6,0,186e-6,0,186e-6,0,186e-6,0,186e-6,0,186e-6,0,185e-6,0,185e-6,0,185e-6,0,185e-6,0,185e-6,0,184e-6,0,184e-6,0,184e-6,0,184e-6,0,183e-6,0,183e-6,0,183e-6,0,183e-6,0,183e-6,0,182e-6,0,182e-6,0,182e-6,0,182e-6,0,182e-6,0,181e-6,0,181e-6,0,181e-6,0,181e-6,0,181e-6,0,18e-5,0,18e-5,0,18e-5,0,18e-5,0,18e-5,0,179e-6,0,179e-6,0,179e-6,0,179e-6,0,179e-6,0,178e-6,0,178e-6,0,178e-6,0,178e-6,0,178e-6,0,177e-6,0,177e-6,0,177e-6,0,177e-6,0,177e-6,0,176e-6,0,176e-6,0,176e-6,0,176e-6,0,176e-6,0,175e-6,0,175e-6,0,175e-6,0,175e-6,0,175e-6,0,174e-6,0,174e-6,0,174e-6,0,174e-6,0,174e-6,0,173e-6,0,173e-6,0,173e-6,0,173e-6,0,173e-6,0,173e-6,0,172e-6,0,172e-6,0,172e-6,0,172e-6,0,172e-6,0,171e-6,0,171e-6,0,171e-6,0,171e-6,0,171e-6,0,17e-5,0,17e-5,0,17e-5,0,17e-5,0,17e-5,0,17e-5,0,169e-6,0,169e-6,0,169e-6,0,169e-6,0,169e-6,0,169e-6,0,168e-6,0,168e-6,0,168e-6,0,168e-6,0,168e-6,0,167e-6,0,167e-6,0,167e-6,0,167e-6,0,167e-6,0,167e-6,0,166e-6,0,166e-6,0,166e-6,0,166e-6,0,166e-6,0,166e-6,0,165e-6,0,165e-6,0,165e-6,0,165e-6,0,165e-6,0,165e-6,0,164e-6,0,164e-6,0,164e-6,0,164e-6,0,164e-6,0,163e-6,0,163e-6,0,163e-6,0,163e-6,0,163e-6,0,163e-6,0,162e-6,0,162e-6,0,162e-6,0,162e-6,0,162e-6,0,162e-6,0,161e-6,0,161e-6,0,161e-6,0,161e-6,0,161e-6,0,161e-6,0,161e-6,0,16e-5,0,16e-5,0,16e-5,0,16e-5,0,16e-5,0,16e-5,0,159e-6,0,159e-6,0,159e-6,0,159e-6,0,159e-6,0,159e-6,0,158e-6,0,158e-6,0,158e-6,0,158e-6,0,158e-6,0,158e-6,0,158e-6,0,157e-6,0,157e-6,0,157e-6,0,157e-6,0,157e-6,0,157e-6,0,156e-6,0,156e-6,0,156e-6,0,156e-6,0,156e-6,0,156e-6,0,156e-6]
}},{}],19:[function(require,module,exports){module.exports={real:[0,.126773,.017974,-.018236,-572e-6,.018139,-.001907,.002945,-.007326,.005861,958e-6,.001293,-.001846,-.002062,.001217,-753e-6,.001256,-.001891,-.002088,.001745,-204e-6,173e-6,-884e-6,.002247,-.00241,.002232,.002181,-.003279,.003242,-95e-5,-.001026,.002184,-.003085,.002124,-.002152,-.001293,.002599,-.002155,-.002941,.002503,.002728,-.001087,901e-6,.001888,-.002741,.002782,-.002764,.001516,-.001023,-.001274,.001432,-.002487,.002618,-.00191,.001318,-263e-6,-.001235,.00215,-.002365,.002234,-981e-6,604e-6,32e-5,-442e-6,.001822,-.001934,528e-6,-68e-5,-302e-6,.001319,-.00185,.001594,-.001648,65e-5,-618e-6,-763e-6,747e-6,-.001512,.001385,-.001188,802e-6,728e-6,-843e-6,.001206,-.001445,.001227,-.001186,-298e-6,-425e-6,-.001364,437e-6,-.00135,.001139,-642e-6,-374e-6,923e-6,-.001139,224e-6,-.001272,.001266,-643e-6,204e-6,-17e-6,-.001054,-.001249,-.001247,.001118,-955e-6,-.001001,121e-6,-.001124,892e-6,-.00105,-692e-6,.001116,-923e-6,-601e-6,-.001035,94e-6,-626e-6,494e-6,-222e-6,-828e-6,203e-6,-.001105,-212e-6,-.001105,-89e-5,-.001009,-97e-5,-.001022,-.001044,-.001018,-.001014,-921e-6,-681e-6,-.001038,-811e-6,-.001011,-766e-6,-843e-6,-.00102,-62e-5,-869e-6,-.001005,-.001001,-934e-6,-999e-6,-986e-6,-806e-6,-909e-6,-986e-6,-946e-6,-979e-6,-912e-6,-751e-6,-971e-6,-805e-6,-872e-6,-801e-6,-869e-6,-789e-6,-867e-6,-866e-6,-822e-6,-785e-6,-851e-6,-853e-6,-853e-6,-82e-5,-745e-6,-841e-6,-843e-6,-801e-6,-799e-6,-835e-6,-834e-6,-79e-5,-815e-6,-764e-6,-795e-6,-708e-6,-787e-6,-818e-6,-806e-6,-742e-6,-808e-6,-783e-6,-745e-6,-766e-6,-766e-6,-64e-5,-769e-6,-747e-6,-741e-6,-766e-6,-744e-6,-747e-6,-759e-6,-76e-5,-749e-6,-698e-6,-736e-6,-753e-6,-742e-6,-743e-6,-747e-6,-74e-5,-716e-6,-739e-6,-74e-5,-731e-6,-723e-6,-717e-6,-716e-6,-693e-6,-679e-6,-631e-6,-604e-6,-564e-6,-485e-6,-444e-6,-345e-6,-282e-6,-179e-6,-9e-5,13e-6,107e-6,182e-6,272e-6,354e-6,428e-6,479e-6,53e-5,58e-5,613e-6,63e-5,645e-6,622e-6,631e-6,629e-6,627e-6,632e-6,634e-6,626e-6,62e-5,625e-6,627e-6,617e-6,61e-5,617e-6,62e-5,609e-6,602e-6,611e-6,614e-6,602e-6,595e-6,605e-6,609e-6,596e-6,588e-6,599e-6,604e-6,59e-5,581e-6,594e-6,6e-4,585e-6,575e-6,589e-6,595e-6,579e-6,57e-5,585e-6,591e-6,574e-6,565e-6,581e-6,587e-6,57e-5,56e-5,576e-6,583e-6,566e-6,555e-6,572e-6,579e-6,562e-6,551e-6,569e-6,576e-6,558e-6,547e-6,565e-6,572e-6,554e-6,543e-6,561e-6,569e-6,55e-5,539e-6,558e-6,566e-6,547e-6,536e-6,555e-6,562e-6,543e-6,532e-6,551e-6,559e-6,54e-5,529e-6,548e-6,556e-6,537e-6,525e-6,545e-6,553e-6,534e-6,522e-6,542e-6,55e-5,531e-6,519e-6,539e-6,547e-6,528e-6,516e-6,536e-6,544e-6,525e-6,513e-6,533e-6,541e-6,522e-6,51e-5,531e-6,539e-6,52e-5,508e-6,528e-6,536e-6,517e-6,505e-6,525e-6,533e-6,514e-6,502e-6,522e-6,53e-5,512e-6,5e-4,52e-5,528e-6,509e-6,497e-6,517e-6,525e-6,507e-6,495e-6,514e-6,522e-6,504e-6,492e-6,512e-6,52e-5,502e-6,49e-5,51e-5,518e-6,499e-6,487e-6,507e-6,515e-6,497e-6,485e-6,505e-6,512e-6,495e-6,483e-6,502e-6,51e-5,493e-6,481e-6,5e-4,508e-6,491e-6,478e-6,498e-6,505e-6,488e-6,476e-6,495e-6,503e-6,486e-6,474e-6,493e-6,501e-6,484e-6,472e-6,491e-6,498e-6,482e-6,47e-5,489e-6,496e-6,48e-5,468e-6,487e-6,494e-6,479e-6,466e-6,485e-6,492e-6,476e-6,463e-6,482e-6,49e-5,474e-6,462e-6,48e-5,488e-6,472e-6,46e-5,478e-6,485e-6,47e-5,458e-6,476e-6,483e-6,468e-6,456e-6,474e-6,481e-6,467e-6,455e-6,472e-6,479e-6,465e-6,452e-6,471e-6,477e-6,463e-6,451e-6,468e-6,475e-6,461e-6,449e-6,467e-6,473e-6,459e-6,447e-6,465e-6,471e-6,458e-6,446e-6,463e-6,469e-6,456e-6,444e-6,461e-6,467e-6,454e-6,442e-6,459e-6,465e-6,452e-6,441e-6,457e-6,464e-6,451e-6,44e-5,456e-6,462e-6,449e-6,438e-6,454e-6,46e-5,447e-6,435e-6,452e-6,458e-6,446e-6,434e-6,45e-5,456e-6,445e-6,433e-6,449e-6,455e-6,443e-6,434e-6,447e-6,453e-6,441e-6,429e-6,449e-6,445e-6,441e-6,423e-6,458e-6,468e-6,468e-6,455e-6,469e-6,476e-6,464e-6,452e-6,468e-6,474e-6,462e-6,449e-6,466e-6,473e-6,462e-6,448e-6,465e-6,47e-5,459e-6,447e-6,464e-6,469e-6,457e-6,446e-6,462e-6,467e-6,456e-6,444e-6,46e-5,466e-6,454e-6,442e-6,458e-6,464e-6,453e-6,441e-6,457e-6,462e-6,451e-6,44e-5,455e-6,46e-5,45e-5,439e-6,454e-6,459e-6,448e-6,436e-6,452e-6,457e-6,447e-6,436e-6,45e-5,456e-6,445e-6,434e-6,449e-6,454e-6,444e-6,432e-6,448e-6,452e-6,443e-6,43e-5,446e-6,451e-6,441e-6,429e-6,444e-6,449e-6,44e-5,429e-6,443e-6,448e-6,438e-6,427e-6,442e-6,446e-6,437e-6,425e-6,44e-5,445e-6,436e-6,424e-6,438e-6,443e-6,435e-6,423e-6,436e-6,442e-6,433e-6,421e-6,436e-6,44e-5,431e-6,42e-5,435e-6,439e-6,43e-5,418e-6,434e-6,438e-6,429e-6,417e-6,432e-6,436e-6,428e-6,417e-6,43e-5,435e-6,427e-6,416e-6,429e-6,433e-6,425e-6,414e-6,428e-6,432e-6,424e-6,413e-6,427e-6,431e-6,422e-6,411e-6,426e-6,429e-6,422e-6,41e-5,424e-6,428e-6,42e-5,41e-5,423e-6,427e-6,419e-6,409e-6,421e-6,425e-6,418e-6,406e-6,42e-5,424e-6,417e-6,406e-6,419e-6,423e-6,415e-6,405e-6,418e-6,421e-6,414e-6,404e-6,416e-6,42e-5,413e-6,402e-6,415e-6,419e-6,412e-6,403e-6,414e-6,418e-6,41e-5,401e-6,426e-6,429e-6,422e-6,411e-6,425e-6,428e-6,421e-6,411e-6,423e-6,427e-6,42e-5,41e-5,422e-6,425e-6,419e-6,408e-6,421e-6,424e-6,418e-6,408e-6,42e-5,423e-6,417e-6,407e-6,419e-6,422e-6,415e-6,405e-6,418e-6,421e-6,414e-6,403e-6,416e-6,419e-6,414e-6,403e-6,415e-6,418e-6,412e-6,402e-6,414e-6,417e-6,411e-6,401e-6,413e-6,416e-6,41e-5,4e-4,412e-6,415e-6,409e-6,399e-6,411e-6,414e-6,408e-6,399e-6,41e-5,412e-6,407e-6,398e-6,409e-6,411e-6,406e-6,396e-6,407e-6,41e-5,405e-6,395e-6,407e-6,409e-6,404e-6,395e-6,406e-6,408e-6,403e-6,393e-6,404e-6,407e-6,402e-6,391e-6,404e-6,406e-6,401e-6,39e-5,402e-6,405e-6,399e-6,391e-6,401e-6,404e-6,399e-6,389e-6,4e-4,403e-6,398e-6,389e-6,399e-6,401e-6,396e-6,387e-6,398e-6,4e-4,396e-6,386e-6,397e-6,399e-6,395e-6,386e-6,396e-6,398e-6,394e-6,384e-6,395e-6,397e-6,393e-6,384e-6,394e-6,396e-6,392e-6,383e-6,393e-6,395e-6,391e-6,382e-6,393e-6,394e-6,39e-5,381e-6,391e-6,393e-6,389e-6,38e-5,39e-5,392e-6,388e-6,379e-6,39e-5,391e-6,387e-6,379e-6,389e-6,39e-5,386e-6,378e-6,388e-6,389e-6,386e-6,376e-6,387e-6,388e-6,385e-6,376e-6,386e-6,388e-6,384e-6,374e-6,385e-6,387e-6,384e-6,374e-6,384e-6,386e-6,382e-6,374e-6,383e-6,385e-6,381e-6,37e-5,382e-6,384e-6,38e-5,371e-6,381e-6,383e-6,379e-6,371e-6,38e-5,382e-6,378e-6,37e-5,38e-5,381e-6,378e-6,369e-6,379e-6,38e-5,377e-6,368e-6,378e-6,379e-6,376e-6,367e-6,377e-6,378e-6,375e-6,366e-6,376e-6,377e-6,374e-6,366e-6,376e-6,376e-6,374e-6,366e-6,374e-6,376e-6,373e-6,364e-6,373e-6,375e-6,372e-6,362e-6,373e-6,374e-6,372e-6,363e-6,372e-6,373e-6,37e-5,362e-6,371e-6,372e-6,369e-6,361e-6,37e-5,371e-6,368e-6,361e-6,37e-5,371e-6,368e-6,362e-6,368e-6,37e-5,367e-6,359e-6,368e-6,369e-6,366e-6,358e-6,367e-6,368e-6,366e-6,358e-6,366e-6,367e-6,365e-6,359e-6,366e-6,367e-6,365e-6,355e-6,365e-6,366e-6,363e-6,354e-6,364e-6,365e-6,363e-6,353e-6,363e-6,364e-6,362e-6,355e-6,362e-6,363e-6,361e-6,352e-6,362e-6,362e-6,36e-5,353e-6,361e-6,362e-6,359e-6,351e-6,36e-5,361e-6,359e-6,351e-6,36e-5,36e-5,358e-6,351e-6,359e-6,359e-6,357e-6,348e-6,358e-6,359e-6,357e-6,349e-6,357e-6,357e-6,355e-6,349e-6,357e-6,357e-6,356e-6,348e-6,356e-6,356e-6,355e-6,347e-6,355e-6,356e-6,354e-6,346e-6,354e-6,355e-6,352e-6,347e-6,354e-6,354e-6,352e-6,346e-6,353e-6,353e-6,351e-6,344e-6,352e-6,353e-6,351e-6,342e-6,351e-6,351e-6,35e-5,342e-6,35e-5,351e-6,348e-6,343e-6,35e-5,351e-6,34e-5,342e-6,35e-5,35e-5,338e-6,348e-6,348e-6,348e-6,348e-6,341e-6,349e-6,348e-6,347e-6,336e-6,348e-6,347e-6,347e-6,337e-6,347e-6,347e-6,346e-6,34e-5,346e-6,345e-6,345e-6,34e-5,345e-6,346e-6,345e-6,337e-6,345e-6,345e-6,344e-6,337e-6,344e-6,344e-6,343e-6,338e-6,343e-6,343e-6,342e-6,337e-6,343e-6,343e-6,341e-6,334e-6,342e-6,342e-6,341e-6,334e-6,342e-6,342e-6,341e-6,332e-6,341e-6,341e-6,34e-5,332e-6,34e-5,34e-5,338e-6,332e-6,34e-5,339e-6,338e-6,331e-6,339e-6,339e-6,338e-6,332e-6,339e-6,338e-6,338e-6,332e-6,338e-6,338e-6,337e-6,331e-6,337e-6,337e-6,336e-6,329e-6,337e-6,336e-6,336e-6,33e-5,336e-6,336e-6,336e-6,328e-6,335e-6,336e-6,335e-6,328e-6,335e-6,334e-6,334e-6,326e-6,334e-6,334e-6,333e-6,326e-6,334e-6,334e-6,332e-6,326e-6,333e-6,333e-6,332e-6,325e-6,332e-6,333e-6,331e-6,325e-6,332e-6,332e-6,331e-6,345e-6,352e-6,35e-5,352e-6,347e-6,351e-6,351e-6,351e-6,343e-6,351e-6,35e-5,35e-5,344e-6,35e-5,35e-5,349e-6,342e-6,35e-5,35e-5,349e-6,342e-6,349e-6,349e-6,348e-6,341e-6,348e-6,348e-6,348e-6,341e-6,347e-6,347e-6,347e-6,339e-6,347e-6,346e-6,347e-6,34e-5,347e-6,346e-6,345e-6,339e-6,346e-6,345e-6,346e-6,34e-5,345e-6,345e-6,345e-6,338e-6,345e-6,344e-6,344e-6,336e-6,344e-6,344e-6,343e-6,337e-6,344e-6,343e-6,342e-6,336e-6,343e-6,343e-6,342e-6,338e-6,343e-6,342e-6,342e-6,337e-6,342e-6,342e-6,341e-6,334e-6,341e-6,341e-6,341e-6,335e-6,341e-6,341e-6,34e-5,334e-6,34e-5,339e-6,339e-6,333e-6,339e-6,339e-6,339e-6,334e-6,339e-6,339e-6,339e-6,332e-6,338e-6,338e-6,338e-6,332e-6,338e-6,337e-6,337e-6,331e-6,337e-6,337e-6,337e-6,33e-5,337e-6,336e-6,336e-6,33e-5,337e-6,336e-6,336e-6,33e-5,336e-6,335e-6,336e-6,328e-6,336e-6,335e-6,335e-6,329e-6,335e-6,334e-6,334e-6,33e-5,334e-6,334e-6,334e-6,328e-6,334e-6,334e-6,333e-6,327e-6,333e-6,333e-6,333e-6,327e-6,333e-6,332e-6,332e-6,328e-6,332e-6,331e-6,331e-6,325e-6,332e-6,331e-6,331e-6,326e-6,331e-6,329e-6,331e-6,325e-6,331e-6,33e-5,33e-5,324e-6,33e-5,329e-6,33e-5,324e-6,329e-6,328e-6,329e-6,325e-6,328e-6,328e-6,329e-6,323e-6,329e-6,328e-6,328e-6,323e-6,328e-6,327e-6,328e-6,322e-6,328e-6,327e-6,327e-6,321e-6,327e-6,327e-6,327e-6,321e-6,327e-6,326e-6,326e-6,319e-6,326e-6,325e-6,326e-6,321e-6,325e-6,325e-6,325e-6,316e-6,325e-6,324e-6,325e-6,318e-6,325e-6,324e-6,324e-6,319e-6,324e-6,323e-6,324e-6,32e-5,324e-6,322e-6,323e-6,318e-6,323e-6,322e-6,323e-6,318e-6,323e-6,322e-6,322e-6,316e-6,322e-6,321e-6,322e-6,317e-6,322e-6,321e-6,322e-6,315e-6,321e-6,32e-5,321e-6,317e-6,321e-6,32e-5,321e-6,315e-6,321e-6,319e-6,32e-5,314e-6,32e-5,319e-6,319e-6,312e-6,319e-6,318e-6,319e-6,314e-6,319e-6,317e-6,319e-6,311e-6,319e-6,317e-6,318e-6,314e-6,318e-6,318e-6,318e-6,312e-6,318e-6,316e-6,317e-6,332e-6,337e-6,336e-6,337e-6,329e-6,337e-6,336e-6,336e-6,331e-6,336e-6,334e-6,336e-6,33e-5,336e-6,334e-6,335e-6,329e-6,335e-6,334e-6,335e-6,33e-5,335e-6,333e-6,334e-6,33e-5,335e-6,332e-6,334e-6,328e-6,334e-6,332e-6,333e-6,33e-5,334e-6,333e-6,333e-6,329e-6,333e-6,331e-6,333e-6,326e-6,333e-6,331e-6,332e-6,325e-6,332e-6,331e-6,331e-6,327e-6,331e-6,33e-5,331e-6,326e-6,331e-6,329e-6,331e-6,325e-6,33e-5,33e-5,331e-6,323e-6,33e-5,329e-6,33e-5,325e-6,33e-5,328e-6,329e-6,324e-6,329e-6,328e-6,329e-6,325e-6,329e-6,328e-6,329e-6,323e-6,329e-6,327e-6,327e-6,323e-6,328e-6,326e-6,328e-6,321e-6,328e-6,326e-6,327e-6,323e-6,327e-6,325e-6,327e-6,324e-6,327e-6,325e-6,326e-6,323e-6,326e-6,325e-6,326e-6,321e-6,326e-6,324e-6,325e-6,321e-6,325e-6,324e-6,325e-6,32e-5,325e-6,324e-6,324e-6,319e-6,325e-6,323e-6,324e-6,32e-5,324e-6,321e-6,324e-6,314e-6,324e-6,323e-6,308e-6,305e-6,323e-6,322e-6,323e-6,319e-6,323e-6,321e-6,323e-6,319e-6,323e-6,32e-5,322e-6,316e-6,322e-6,32e-5,322e-6,317e-6,322e-6,321e-6,321e-6,316e-6,321e-6,32e-5,321e-6,315e-6,321e-6,318e-6,32e-5,315e-6,319e-6,314e-6,32e-5,32e-5,319e-6,317e-6,32e-5,313e-6,32e-5,318e-6,319e-6,316e-6,319e-6,317e-6,319e-6,314e-6,318e-6,316e-6,319e-6,314e-6,318e-6,316e-6,318e-6,314e-6,318e-6,315e-6,318e-6,345e-6,348e-6,345e-6,348e-6,342e-6,348e-6,346e-6,347e-6,342e-6,347e-6,346e-6,347e-6,341e-6,347e-6,345e-6,346e-6,344e-6,346e-6,344e-6,346e-6,341e-6,346e-6,342e-6,346e-6,341e-6,345e-6,344e-6,344e-6,344e-6,344e-6,344e-6,343e-6,342e-6,345e-6,342e-6,344e-6,34e-5,344e-6,342e-6,344e-6,34e-5,344e-6,342e-6,344e-6,338e-6,343e-6,341e-6,342e-6,337e-6,343e-6,341e-6,343e-6,338e-6,343e-6,341e-6,342e-6,337e-6,342e-6,339e-6,342e-6,337e-6,342e-6,339e-6,341e-6,336e-6,341e-6,339e-6,341e-6,336e-6,341e-6,336e-6,34e-5,333e-6,34e-5,339e-6,34e-5,335e-6,34e-5,338e-6,339e-6,337e-6,339e-6,337e-6,339e-6,335e-6,339e-6,337e-6,339e-6,333e-6,339e-6,335e-6,338e-6,335e-6,339e-6,337e-6,338e-6,334e-6,338e-6,336e-6,338e-6,333e-6,337e-6,335e-6,337e-6,335e-6,337e-6,336e-6,337e-6,332e-6,337e-6,333e-6,337e-6,332e-6,336e-6,335e-6,336e-6,328e-6,336e-6,334e-6,335e-6,33e-5,336e-6,333e-6,335e-6,33e-5,335e-6,332e-6,335e-6,332e-6,335e-6,332e-6,335e-6,33e-5,334e-6,333e-6,334e-6,327e-6,334e-6,332e-6,334e-6,329e-6,334e-6,331e-6,333e-6,329e-6,333e-6,33e-5,333e-6,329e-6,333e-6,331e-6,333e-6,328e-6,333e-6,33e-5,332e-6,327e-6,332e-6,33e-5,332e-6,327e-6,332e-6,329e-6,331e-6,328e-6,331e-6,331e-6,331e-6,326e-6,331e-6,329e-6,331e-6,326e-6,331e-6,329e-6,33e-5,326e-6,33e-5,329e-6,33e-5,325e-6,33e-5,326e-6,33e-5,325e-6,329e-6,328e-6,329e-6,326e-6,329e-6,325e-6,329e-6,325e-6,329e-6,325e-6,329e-6,323e-6,328e-6,325e-6,328e-6,324e-6,328e-6,324e-6,328e-6,325e-6,328e-6,325e-6,327e-6,322e-6,327e-6,325e-6,327e-6,323e-6,327e-6,324e-6,327e-6,321e-6,326e-6,324e-6,326e-6,322e-6,326e-6,325e-6,326e-6,32e-5,326e-6,323e-6,326e-6,321e-6,325e-6,318e-6,379e-6,376e-6,379e-6,375e-6,379e-6,373e-6,379e-6,375e-6,378e-6,373e-6,378e-6,375e-6,378e-6,373e-6,378e-6,376e-6,377e-6,373e-6,377e-6,374e-6,377e-6,374e-6,377e-6,372e-6,377e-6,372e-6,376e-6,373e-6,376e-6,372e-6,376e-6,374e-6,376e-6,369e-6,376e-6,371e-6,375e-6,371e-6,375e-6,372e-6,375e-6,369e-6,375e-6,371e-6,375e-6,37e-5,374e-6,372e-6,374e-6,372e-6,374e-6,37e-5,374e-6,368e-6,374e-6,371e-6,373e-6,369e-6,373e-6,37e-5,373e-6,368e-6,373e-6,369e-6,373e-6,366e-6,372e-6,369e-6,372e-6,368e-6,372e-6,367e-6,372e-6,366e-6,372e-6,369e-6,371e-6,368e-6,371e-6,367e-6,371e-6,367e-6,371e-6,368e-6,371e-6,366e-6,37e-5,367e-6,37e-5,366e-6,37e-5,365e-6,37e-5,365e-6,37e-5,367e-6,369e-6,362e-6,369e-6,367e-6,369e-6,364e-6,369e-6,364e-6,369e-6,364e-6,369e-6,366e-6,368e-6,364e-6,368e-6,366e-6,368e-6,362e-6,368e-6,365e-6,368e-6,364e-6,367e-6,365e-6,367e-6,361e-6,367e-6,357e-6,367e-6,362e-6,367e-6,366e-6,366e-6,362e-6,366e-6,364e-6,366e-6,362e-6,366e-6,361e-6,365e-6,363e-6,365e-6,362e-6,365e-6,362e-6,365e-6,36e-5,365e-6,36e-5,365e-6,361e-6,364e-6,36e-5,364e-6,36e-5,364e-6,358e-6,364e-6,361e-6,364e-6,359e-6,363e-6,357e-6,363e-6,361e-6,363e-6,361e-6,363e-6,36e-5,363e-6,407e-6,41e-5,403e-6,41e-5,406e-6,41e-5,404e-6,409e-6,407e-6,409e-6,405e-6,409e-6,405e-6,409e-6,403e-6,409e-6,402e-6,408e-6,404e-6,408e-6,404e-6,408e-6,402e-6,408e-6,406e-6,408e-6,404e-6,407e-6,403e-6,407e-6,404e-6,407e-6,402e-6,406e-6,402e-6,406e-6,402e-6,406e-6,402e-6,406e-6,402e-6,405e-6,399e-6,404e-6,397e-6,406e-6,394e-6,404e-6,393e-6,405e-6,398e-6,405e-6,366e-6,369e-6,364e-6,369e-6,366e-6,369e-6,367e-6,369e-6,365e-6,368e-6,364e-6,368e-6,366e-6,368e-6,364e-6,368e-6,363e-6,368e-6,363e-6,367e-6,364e-6,367e-6,363e-6,367e-6,364e-6,367e-6,364e-6,367e-6,363e-6,367e-6,362e-6,366e-6,363e-6,366e-6,362e-6,366e-6,365e-6],imag:[0,-.049064,-.06626,.053048,-.003642,.016123,-.016702,-.003665,.002182,.00251,.003818,-.002636,.001435,-.001056,.001955,.002094,-.00175,892e-6,-171e-6,.001398,.002456,.003367,-.003502,.003155,.002928,-.002971,.001835,-748e-6,-63e-5,.003104,-.003022,.002255,-799e-6,-.00231,.00222,-.002864,.001688,-.002168,-668e-6,.001613,-.001096,.002791,-.002819,.002233,-921e-6,66e-5,596e-6,-.002351,.002573,-.002426,.002304,-.001014,473e-6,.001579,-.002072,.002419,-.002071,.001044,-144e-6,-728e-6,.002113,-.00223,.002269,-.00223,.001087,831e-6,-.002021,.001959,-.002036,.001317,-24e-6,914e-6,784e-6,-.001691,.001415,-.00133,.001328,-73e-6,-587e-6,906e-6,-.00125,.001284,-.0012,819e-6,11e-5,-668e-6,722e-6,-.001349,.001306,69e-6,.001286,-6e-6,-712e-6,.001172,-.001275,947e-6,-657e-6,.001289,-277e-6,272e-6,.001117,-.001266,.001276,-708e-6,-189e-6,-164e-6,-563e-6,8e-4,-732e-6,.001228,497e-6,-837e-6,616e-6,-995e-6,46e-5,-769e-6,.001035,591e-6,.001183,.001002,.001068,.001151,-822e-6,.001144,343e-6,-.001133,311e-6,718e-6,361e-6,445e-6,-294e-6,181e-6,278e-6,278e-6,-499e-6,791e-6,53e-6,644e-6,206e-6,-686e-6,582e-6,-56e-6,-807e-6,-522e-6,-101e-6,-112e-6,-368e-6,-54e-6,-145e-6,581e-6,392e-6,-41e-6,27e-5,-42e-6,35e-5,-62e-5,-22e-6,363e-6,114e-6,356e-6,-94e-6,37e-5,61e-6,5e-6,265e-6,-353e-6,-116e-6,66e-6,4e-6,226e-6,406e-6,89e-6,16e-6,257e-6,256e-6,45e-6,15e-6,26e-5,154e-6,316e-6,22e-5,418e-6,231e-6,-3e-6,127e-6,334e-6,72e-6,41e-6,238e-6,149e-6,139e-6,439e-6,94e-6,198e-6,212e-6,66e-6,186e-6,163e-6,73e-6,36e-6,12e-5,292e-6,17e-5,1e-5,115e-6,99e-6,-37e-6,-93e-6,204e-6,64e-6,9e-6,106e-6,144e-6,163e-6,158e-6,234e-6,268e-6,363e-6,404e-6,455e-6,537e-6,569e-6,632e-6,661e-6,694e-6,71e-5,714e-6,704e-6,687e-6,655e-6,613e-6,562e-6,517e-6,462e-6,395e-6,338e-6,302e-6,266e-6,203e-6,168e-6,169e-6,171e-6,146e-6,132e-6,159e-6,177e-6,154e-6,14e-5,173e-6,192e-6,163e-6,146e-6,182e-6,201e-6,168e-6,15e-5,188e-6,207e-6,171e-6,15e-5,192e-6,213e-6,173e-6,15e-5,195e-6,216e-6,174e-6,149e-6,197e-6,219e-6,174e-6,148e-6,198e-6,221e-6,173e-6,146e-6,198e-6,222e-6,172e-6,144e-6,198e-6,222e-6,171e-6,142e-6,198e-6,222e-6,17e-5,139e-6,197e-6,221e-6,168e-6,137e-6,196e-6,221e-6,166e-6,135e-6,194e-6,221e-6,164e-6,132e-6,193e-6,219e-6,162e-6,129e-6,191e-6,218e-6,16e-5,126e-6,189e-6,217e-6,158e-6,123e-6,188e-6,215e-6,156e-6,12e-5,186e-6,214e-6,154e-6,117e-6,184e-6,212e-6,152e-6,114e-6,182e-6,21e-5,15e-5,112e-6,18e-5,208e-6,147e-6,11e-5,178e-6,207e-6,146e-6,106e-6,175e-6,206e-6,143e-6,104e-6,174e-6,204e-6,141e-6,102e-6,171e-6,202e-6,138e-6,99e-6,169e-6,2e-4,136e-6,98e-6,167e-6,199e-6,135e-6,95e-6,166e-6,197e-6,133e-6,93e-6,163e-6,195e-6,131e-6,9e-5,161e-6,193e-6,129e-6,87e-6,159e-6,192e-6,127e-6,85e-6,158e-6,19e-5,125e-6,83e-6,155e-6,189e-6,123e-6,82e-6,153e-6,186e-6,121e-6,81e-6,151e-6,185e-6,119e-6,78e-6,149e-6,183e-6,117e-6,76e-6,148e-6,182e-6,116e-6,72e-6,146e-6,179e-6,115e-6,72e-6,143e-6,177e-6,113e-6,7e-5,142e-6,176e-6,111e-6,67e-6,139e-6,175e-6,111e-6,63e-6,135e-6,173e-6,109e-6,66e-6,137e-6,173e-6,107e-6,63e-6,136e-6,171e-6,106e-6,6e-5,133e-6,169e-6,104e-6,6e-5,132e-6,168e-6,104e-6,57e-6,131e-6,166e-6,101e-6,57e-6,128e-6,164e-6,99e-6,55e-6,126e-6,164e-6,98e-6,53e-6,125e-6,162e-6,98e-6,52e-6,123e-6,161e-6,96e-6,49e-6,122e-6,159e-6,94e-6,48e-6,12e-5,156e-6,93e-6,47e-6,119e-6,156e-6,91e-6,46e-6,119e-6,156e-6,91e-6,46e-6,117e-6,152e-6,91e-6,43e-6,114e-6,15e-5,88e-6,4e-5,115e-6,15e-5,87e-6,39e-6,114e-6,152e-6,85e-6,38e-6,11e-5,15e-5,88e-6,38e-6,108e-6,145e-6,85e-6,37e-6,106e-6,138e-6,82e-6,31e-6,106e-6,148e-6,56e-6,82e-6,1e-4,158e-6,144e-6,101e-6,1e-4,147e-6,89e-6,37e-6,112e-6,152e-6,86e-6,33e-6,109e-6,153e-6,87e-6,3e-5,101e-6,151e-6,81e-6,35e-6,107e-6,147e-6,78e-6,31e-6,106e-6,146e-6,78e-6,3e-5,103e-6,144e-6,81e-6,29e-6,104e-6,146e-6,78e-6,27e-6,102e-6,142e-6,76e-6,27e-6,101e-6,142e-6,78e-6,3e-5,101e-6,14e-5,76e-6,26e-6,99e-6,143e-6,76e-6,25e-6,98e-6,138e-6,76e-6,24e-6,98e-6,139e-6,74e-6,26e-6,96e-6,14e-5,72e-6,24e-6,93e-6,139e-6,71e-6,19e-6,93e-6,138e-6,73e-6,21e-6,92e-6,133e-6,71e-6,24e-6,92e-6,133e-6,7e-5,18e-6,91e-6,134e-6,69e-6,23e-6,9e-5,133e-6,7e-5,16e-6,87e-6,131e-6,78e-6,2e-5,88e-6,133e-6,66e-6,16e-6,89e-6,13e-5,65e-6,15e-6,88e-6,132e-6,63e-6,14e-6,85e-6,13e-5,64e-6,17e-6,84e-6,127e-6,66e-6,13e-6,83e-6,125e-6,63e-6,9e-6,82e-6,125e-6,61e-6,11e-6,8e-5,125e-6,61e-6,11e-6,83e-6,126e-6,6e-5,14e-6,79e-6,124e-6,61e-6,11e-6,8e-5,121e-6,6e-5,11e-6,79e-6,119e-6,62e-6,14e-6,77e-6,126e-6,58e-6,5e-6,76e-6,12e-5,58e-6,8e-6,78e-6,119e-6,56e-6,9e-6,75e-6,117e-6,59e-6,8e-6,75e-6,119e-6,57e-6,9e-6,74e-6,113e-6,57e-6,3e-6,76e-6,113e-6,56e-6,6e-6,75e-6,12e-5,56e-6,7e-6,74e-6,117e-6,58e-6,7e-6,73e-6,118e-6,58e-6,15e-6,7e-5,119e-6,54e-6,3e-6,72e-6,114e-6,53e-6,1e-6,69e-6,114e-6,52e-6,4e-6,73e-6,114e-6,52e-6,5e-6,7e-5,117e-6,52e-6,2e-6,67e-6,115e-6,54e-6,4e-6,67e-6,114e-6,51e-6,3e-6,7e-5,114e-6,48e-6,-3e-6,67e-6,112e-6,52e-6,-3e-6,65e-6,11e-5,49e-6,-2e-6,63e-6,108e-6,49e-6,-1e-6,66e-6,107e-6,47e-6,-2e-6,66e-6,108e-6,51e-6,-1e-6,66e-6,11e-5,46e-6,-5e-6,6e-5,104e-6,44e-6,-3e-6,63e-6,108e-6,47e-6,-5e-6,62e-6,11e-5,44e-6,0,61e-6,109e-6,47e-6,-3e-6,63e-6,103e-6,47e-6,-5e-6,58e-6,105e-6,45e-6,-5e-6,58e-6,102e-6,45e-6,-4e-6,61e-6,105e-6,44e-6,-3e-6,58e-6,104e-6,47e-6,-1e-6,6e-5,102e-6,43e-6,-9e-6,58e-6,105e-6,45e-6,-5e-6,56e-6,99e-6,44e-6,-5e-6,56e-6,1e-4,44e-6,-8e-6,53e-6,101e-6,4e-5,-7e-6,54e-6,1e-4,44e-6,-6e-6,54e-6,101e-6,41e-6,-12e-6,56e-6,99e-6,39e-6,-7e-6,56e-6,96e-6,41e-6,-12e-6,55e-6,98e-6,41e-6,-9e-6,53e-6,1e-4,37e-6,-9e-6,51e-6,96e-6,39e-6,-6e-6,51e-6,99e-6,39e-6,-9e-6,45e-6,96e-6,39e-6,-5e-6,5e-5,94e-6,41e-6,-12e-6,52e-6,103e-6,38e-6,-15e-6,5e-5,97e-6,37e-6,-16e-6,53e-6,94e-6,38e-6,-1e-5,51e-6,95e-6,37e-6,-9e-6,47e-6,92e-6,38e-6,-13e-6,49e-6,92e-6,33e-6,-16e-6,49e-6,93e-6,39e-6,-11e-6,5e-5,93e-6,37e-6,-11e-6,49e-6,9e-5,33e-6,-15e-6,47e-6,89e-6,35e-6,-14e-6,46e-6,92e-6,37e-6,-14e-6,44e-6,94e-6,32e-6,-13e-6,41e-6,9e-5,37e-6,-19e-6,46e-6,89e-6,34e-6,-14e-6,5e-5,88e-6,36e-6,-15e-6,48e-6,85e-6,31e-6,0,43e-6,79e-6,36e-6,-16e-6,42e-6,87e-6,33e-6,-13e-6,44e-6,88e-6,32e-6,-15e-6,39e-6,87e-6,32e-6,-22e-6,39e-6,79e-6,31e-6,-9e-6,37e-6,89e-6,32e-6,-17e-6,48e-6,9e-5,33e-6,-12e-6,41e-6,91e-6,34e-6,3e-6,43e-6,82e-6,37e-6,-8e-6,44e-6,9e-5,31e-6,-16e-6,46e-6,83e-6,32e-6,-16e-6,43e-6,87e-6,29e-6,-23e-6,39e-6,86e-6,27e-6,-14e-6,4e-5,8e-5,3e-5,-2e-5,42e-6,91e-6,31e-6,-14e-6,37e-6,82e-6,32e-6,-26e-6,43e-6,81e-6,28e-6,-16e-6,33e-6,8e-5,31e-6,-19e-6,32e-6,81e-6,31e-6,-12e-6,4e-5,83e-6,3e-5,-2e-5,45e-6,73e-6,27e-6,-24e-6,37e-6,75e-6,31e-6,-24e-6,41e-6,8e-5,26e-6,-17e-6,37e-6,87e-6,29e-6,-28e-6,41e-6,83e-6,4e-5,-22e-6,52e-6,77e-6,28e-6,-5e-6,85e-6,77e-6,17e-6,19e-6,92e-6,38e-6,34e-6,-31e-6,35e-6,73e-6,18e-6,-18e-6,35e-6,93e-6,2e-5,-25e-6,28e-6,86e-6,25e-6,-22e-6,25e-6,7e-5,31e-6,-38e-6,32e-6,68e-6,3e-5,-18e-6,29e-6,79e-6,25e-6,-25e-6,3e-5,73e-6,21e-6,-18e-6,37e-6,68e-6,25e-6,-23e-6,37e-6,7e-5,26e-6,-22e-6,37e-6,8e-5,24e-6,-21e-6,33e-6,76e-6,21e-6,-23e-6,3e-5,81e-6,25e-6,-13e-6,33e-6,78e-6,23e-6,-21e-6,4e-5,75e-6,25e-6,-27e-6,36e-6,77e-6,26e-6,-27e-6,36e-6,7e-5,2e-5,-22e-6,29e-6,69e-6,24e-6,-18e-6,33e-6,71e-6,21e-6,-28e-6,3e-5,75e-6,22e-6,-27e-6,3e-5,66e-6,21e-6,-9e-6,25e-6,73e-6,27e-6,4e-6,24e-6,7e-5,21e-6,-25e-6,32e-6,78e-6,27e-6,-23e-6,32e-6,75e-6,22e-6,-18e-6,34e-6,7e-5,22e-6,-21e-6,26e-6,75e-6,21e-6,-16e-6,32e-6,71e-6,19e-6,-23e-6,26e-6,75e-6,21e-6,-43e-6,26e-6,62e-6,25e-6,-25e-6,24e-6,78e-6,27e-6,-28e-6,32e-6,73e-6,23e-6,-24e-6,34e-6,79e-6,24e-6,-21e-6,3e-5,72e-6,23e-6,-26e-6,33e-6,77e-6,22e-6,-3e-5,29e-6,74e-6,28e-6,-27e-6,32e-6,78e-6,21e-6,-37e-6,27e-6,71e-6,15e-6,-27e-6,33e-6,72e-6,18e-6,-31e-6,23e-6,67e-6,24e-6,-31e-6,25e-6,73e-6,21e-6,-27e-6,31e-6,78e-6,23e-6,-24e-6,32e-6,7e-5,22e-6,-3e-5,36e-6,76e-6,17e-6,-17e-6,34e-6,63e-6,18e-6,-28e-6,26e-6,62e-6,2e-5,-24e-6,27e-6,75e-6,24e-6,-27e-6,26e-6,67e-6,23e-6,-24e-6,31e-6,68e-6,2e-5,-31e-6,31e-6,71e-6,26e-6,-27e-6,3e-5,63e-6,17e-6,-27e-6,26e-6,7e-5,24e-6,-32e-6,22e-6,66e-6,18e-6,-28e-6,27e-6,71e-6,23e-6,-26e-6,24e-6,72e-6,18e-6,-32e-6,25e-6,67e-6,19e-6,-29e-6,29e-6,67e-6,16e-6,-33e-6,2e-5,73e-6,15e-6,-29e-6,28e-6,68e-6,21e-6,-29e-6,28e-6,57e-6,19e-6,-22e-6,26e-6,63e-6,16e-6,-22e-6,2e-5,68e-6,15e-6,-22e-6,21e-6,66e-6,19e-6,-23e-6,23e-6,58e-6,19e-6,-28e-6,27e-6,7e-5,19e-6,-21e-6,2e-5,62e-6,16e-6,-39e-6,21e-6,63e-6,17e-6,-22e-6,27e-6,69e-6,15e-6,-27e-6,22e-6,64e-6,22e-6,-32e-6,23e-6,56e-6,37e-6,-28e-6,17e-6,65e-6,1e-5,-3e-5,18e-6,62e-6,14e-6,-3e-5,23e-6,66e-6,2e-5,-25e-6,21e-6,66e-6,9e-6,-23e-6,22e-6,64e-6,14e-6,-26e-6,22e-6,7e-5,17e-6,-26e-6,21e-6,61e-6,22e-6,-3e-5,25e-6,78e-6,1e-5,-29e-6,18e-6,66e-6,15e-6,-26e-6,19e-6,62e-6,18e-6,-3e-5,22e-6,53e-6,9e-6,-33e-6,17e-6,59e-6,14e-6,-32e-6,19e-6,59e-6,16e-6,-28e-6,21e-6,68e-6,15e-6,-35e-6,18e-6,6e-5,19e-6,-28e-6,17e-6,67e-6,18e-6,-33e-6,25e-6,55e-6,13e-6,-31e-6,16e-6,64e-6,13e-6,-28e-6,15e-6,63e-6,14e-6,-27e-6,25e-6,7e-5,15e-6,-32e-6,24e-6,57e-6,13e-6,-39e-6,2e-5,7e-5,13e-6,-32e-6,17e-6,56e-6,15e-6,-21e-6,21e-6,63e-6,16e-6,-32e-6,27e-6,65e-6,16e-6,-29e-6,14e-6,72e-6,14e-6,-28e-6,2e-5,61e-6,12e-6,-38e-6,21e-6,65e-6,14e-6,-35e-6,21e-6,65e-6,2e-5,-29e-6,17e-6,61e-6,1e-5,-35e-6,22e-6,59e-6,8e-6,-44e-6,13e-6,64e-6,16e-6,-38e-6,28e-6,54e-6,3e-6,-23e-6,23e-6,52e-6,18e-6,-37e-6,17e-6,67e-6,9e-6,-35e-6,15e-6,71e-6,16e-6,-34e-6,23e-6,58e-6,18e-6,-33e-6,17e-6,59e-6,13e-6,-38e-6,12e-6,62e-6,19e-6,-29e-6,12e-6,69e-6,8e-6,-31e-6,19e-6,58e-6,16e-6,-39e-6,24e-6,59e-6,17e-6,-31e-6,17e-6,56e-6,11e-6,-32e-6,16e-6,63e-6,1e-5,-36e-6,29e-6,57e-6,12e-6,-42e-6,18e-6,69e-6,13e-6,-37e-6,13e-6,56e-6,9e-6,-36e-6,11e-6,45e-6,14e-6,-3e-5,14e-6,48e-6,13e-6,-3e-5,12e-6,58e-6,4e-6,-39e-6,23e-6,54e-6,14e-6,-3e-5,18e-6,59e-6,1e-5,-27e-6,19e-6,6e-5,5e-6,-35e-6,1e-5,55e-6,6e-6,-42e-6,-6e-6,81e-6,-1e-6,-19e-6,1e-4,108e-6,-19e-6,-34e-6,15e-6,54e-6,13e-6,-35e-6,11e-6,52e-6,6e-6,-39e-6,22e-6,64e-6,14e-6,-4e-5,13e-6,53e-6,8e-6,-24e-6,16e-6,59e-6,1e-5,-32e-6,14e-6,6e-5,11e-6,-42e-6,19e-6,59e-6,29e-6,-65e-6,12e-6,12e-6,21e-6,-43e-6,14e-6,64e-6,7e-6,-32e-6,19e-6,48e-6,3e-6,-34e-6,7e-6,58e-6,21e-6,-39e-6,9e-6,54e-6,8e-6,-37e-6,11e-6,53e-6,1e-5,-41e-6,8e-6,48e-6,13e-6,-45e-6,6e-6,64e-6,3e-6,-38e-6,18e-6,62e-6,14e-6,-29e-6,14e-6,65e-6,14e-6,-37e-6,15e-6,45e-6,1e-5,-4e-5,5e-6,59e-6,0,-51e-6,13e-6,58e-6,14e-6,-36e-6,33e-6,27e-6,-25e-6,-27e-6,41e-6,45e-6,1e-5,-41e-6,14e-6,55e-6,1e-5,-37e-6,9e-6,53e-6,6e-6,-34e-6,4e-6,62e-6,8e-6,-43e-6,26e-6,65e-6,9e-6,-41e-6,11e-6,55e-6,11e-6,-35e-6,14e-6,58e-6,8e-6,-47e-6,1e-5,56e-6,5e-6,-41e-6,13e-6,61e-6,4e-6,-4e-5,13e-6,56e-6,17e-6,-55e-6,18e-6,73e-6,14e-6,-35e-6,11e-6,59e-6,3e-6,-38e-6,18e-6,47e-6,17e-6,-42e-6,15e-6,56e-6,-2e-6,-37e-6,5e-6,63e-6,1e-5,-52e-6,19e-6,47e-6,1e-6,-29e-6,-2e-6,56e-6,9e-6,-36e-6,9e-6,59e-6,12e-6,-43e-6,6e-6,39e-6,4e-6,-32e-6,7e-6,58e-6,1e-6,-52e-6,9e-6,54e-6,7e-6,-31e-6,7e-6,72e-6,6e-6,-36e-6,22e-6,64e-6,6e-6,-43e-6,11e-6,6e-5,11e-6,-43e-6,1e-5,48e-6,8e-6,-43e-6,7e-6,54e-6,5e-6,-33e-6,15e-6,68e-6,17e-6,-34e-6,13e-6,57e-6,8e-6,-44e-6,14e-6,51e-6,18e-6,-44e-6,9e-6,5e-5,14e-6,-36e-6,11e-6,55e-6,1e-6,-44e-6,3e-6,56e-6,3e-6,-33e-6,0,57e-6,2e-6,-42e-6,12e-6,49e-6,6e-6,-22e-6,16e-6,58e-6,8e-6,-36e-6,12e-6,57e-6,9e-6,-36e-6,5e-6,56e-6,6e-6,-27e-6,4e-6,55e-6,7e-6,-47e-6,9e-6,52e-6,6e-6,-35e-6,5e-6,49e-6,1e-6,-51e-6,8e-6,49e-6,-2e-6,-49e-6,0,58e-6,2e-6,-43e-6,4e-6,55e-6,3e-6,-49e-6,3e-6,44e-6,-4e-6,-38e-6,-14e-6,6e-5,8e-6,-41e-6,-2e-6,49e-6,4e-6,-4e-5,7e-6,58e-6,7e-6,-4e-5,12e-6,52e-6,1e-6,-32e-6,2e-6,59e-6,6e-6,-44e-6,8e-6,52e-6,1e-6,-67e-6,12e-6,48e-6,0,-57e-6,9e-6,64e-6,5e-6,-51e-6,17e-6,64e-6,3e-6,-51e-6,-3e-6,6e-5,8e-6,-36e-6,6e-6,57e-6,1e-6,-48e-6,7e-6,5e-5,1e-5,-62e-6,11e-6,61e-6,11e-6,-48e-6,6e-6,54e-6,-1e-6,-4e-5,-2e-6,72e-6,-1e-6,-56e-6,9e-6,55e-6,-5e-6,-46e-6,4e-6,66e-6,-3e-6,-54e-6,3e-6,59e-6,6e-6,-4e-5,9e-6,42e-6,0,-53e-6,12e-6,66e-6,8e-6,-42e-6,3e-6,58e-6,4e-6,-47e-6,4e-6,58e-6,-1e-6,-55e-6,9e-6,69e-6,-3e-6,-5e-5,-5e-6,52e-6,4e-6,-59e-6,1e-6,65e-6,5e-6,-47e-6,2e-6,52e-6,3e-6,-55e-6,6e-6,52e-6,-3e-6,-41e-6,1e-6,57e-6,4e-6,-5e-5,1e-6,58e-6,-3e-6,-58e-6,4e-6,59e-6,8e-6,-47e-6,8e-6,72e-6,6e-6,-43e-6,-2e-6,58e-6,0,-57e-6,5e-6,59e-6,2e-6,-44e-6,3e-6,56e-6,1e-6,-4e-5,8e-6,63e-6,3e-6,-44e-6,-1e-6,52e-6,4e-6,-45e-6,0,68e-6,-3e-6,-84e-6,1e-6,57e-6,-2e-6,-4e-6,1e-6,53e-6,-6e-6,-35e-6,-7e-6,52e-6,5e-6,-57e-6,17e-6,44e-6,-4e-6,-53e-6,3e-6,45e-6,7e-6,-58e-6,3e-6,56e-6,9e-6,-54e-6,11e-6,58e-6,2e-6,-55e-6,-6e-6,65e-6,9e-6,-48e-6,-1e-6,58e-6,9e-6,-66e-6,-3e-6,39e-6,-6e-6,-41e-6,11e-6,47e-6,-2e-6,-49e-6,4e-6,76e-6,-7e-6,-57e-6,1e-6,67e-6,9e-6,-41e-6,-3e-6,55e-6,5e-6,-55e-6,-1e-6,66e-6,1e-6,-7e-5,0,59e-6,5e-6,-57e-6,4e-6,68e-6,6e-6,-36e-6,4e-6,55e-6,-15e-6,-56e-6,9e-6,51e-6,-9e-6,-61e-6,-18e-6,59e-6,13e-6,-58e-6,-4e-6,58e-6,-3e-6,-59e-6,22e-6,75e-6,41e-6,-82e-6,2e-6,97e-6,31e-6,-98e-6,-3e-6,76e-6,0,-5e-5,0,62e-6,7e-6,-47e-6,6e-6,31e-6,-4e-6,-51e-6,4e-6,54e-6,6e-6,-38e-6,8e-6,52e-6,2e-6,-56e-6,1e-6,55e-6,0,-52e-6,5e-6,55e-6,1e-5,-51e-6,0,47e-6,12e-6,-49e-6,0,54e-6,-9e-6,-45e-6,12e-6,54e-6,0,-3e-5]}},{}],20:[function(require,module,exports){module.exports={real:[0,-1e-6,-.269882,.107057,-.002942,.013992,-.009736,.001942,-.005952,.00175,-.001294,.001534,-433e-6,.001327,-653e-6,677e-6,-264e-6,338e-6,-501e-6,94e-5,-752e-6,.001031,-.001881,812e-6,-.001156,.001026,-888e-6,871e-6,-757e-6,699e-6,-667e-6,617e-6,-607e-6,598e-6,-589e-6,599e-6,-628e-6,619e-6,-611e-6,603e-6,-596e-6,571e-6,-514e-6,478e-6,-473e-6,467e-6,-462e-6,457e-6,-452e-6,361e-6,-358e-6,354e-6,-351e-6,347e-6,-344e-6,341e-6,-338e-6,335e-6,-332e-6,25e-5,-248e-6,246e-6,-244e-6,242e-6,-24e-5,238e-6,-236e-6,234e-6,-233e-6,181e-6,-179e-6,178e-6,-177e-6,176e-6,-175e-6,173e-6,-172e-6,171e-6,-17e-5,169e-6,-168e-6,167e-6,-134e-6,133e-6,-132e-6,131e-6,-131e-6,13e-5,-129e-6,128e-6,-128e-6,127e-6,-126e-6,126e-6,-125e-6,124e-6,-124e-6,123e-6,-122e-6,122e-6,-121e-6,121e-6,-12e-5,119e-6,-119e-6,118e-6,-95e-6,94e-6,-94e-6,94e-6,-93e-6,93e-6,-92e-6,92e-6,-92e-6,91e-6,-91e-6,9e-5,-9e-5,9e-5,-89e-6,89e-6,-89e-6,88e-6,-88e-6,87e-6,-87e-6,87e-6,-86e-6,86e-6,-86e-6,85e-6,-85e-6,85e-6,-84e-6,84e-6,-84e-6,84e-6,-83e-6,83e-6,-78e-6,77e-6,-77e-6,77e-6,-77e-6,76e-6,-76e-6,76e-6,-76e-6,75e-6,-75e-6,75e-6,-75e-6,74e-6,-74e-6,74e-6,-74e-6,73e-6,-73e-6,73e-6,-73e-6,72e-6,-72e-6,72e-6,-72e-6,72e-6,-71e-6,71e-6,-71e-6,71e-6,-7e-5,7e-5,-7e-5,7e-5,-7e-5,69e-6,-69e-6,69e-6,-69e-6,69e-6,-69e-6,68e-6,-68e-6,68e-6,-68e-6,68e-6,-67e-6,67e-6,-67e-6,67e-6,-67e-6,66e-6,-66e-6,66e-6,-66e-6,66e-6,-66e-6,65e-6,-65e-6,65e-6,-65e-6,65e-6,-65e-6,64e-6,-64e-6,64e-6,-64e-6,64e-6,-64e-6,64e-6,-63e-6,63e-6,-63e-6,63e-6,-63e-6,63e-6,-62e-6,57e-6,-57e-6,57e-6,-56e-6,56e-6,-56e-6,56e-6,-56e-6,56e-6,-56e-6,56e-6,-55e-6,55e-6,-55e-6,55e-6,-55e-6,55e-6,-55e-6,55e-6,-54e-6,54e-6,-54e-6,54e-6,-54e-6,54e-6,-54e-6,54e-6,-54e-6,53e-6,-53e-6,53e-6,-53e-6,53e-6,-53e-6,53e-6,-53e-6,53e-6,-52e-6,52e-6,-52e-6,52e-6,-52e-6,52e-6,-52e-6,52e-6,-52e-6,52e-6,-51e-6,51e-6,-51e-6,51e-6,-51e-6,51e-6,-51e-6,51e-6,-51e-6,51e-6,-5e-5,5e-5,-5e-5,5e-5,-5e-5,5e-5,-5e-5,5e-5,-5e-5,5e-5,-49e-6,49e-6,-49e-6,49e-6,-49e-6,49e-6,-49e-6,49e-6,-49e-6,49e-6,-49e-6,48e-6,-48e-6,48e-6,-48e-6,48e-6,-48e-6,48e-6,-48e-6,48e-6,-48e-6,48e-6,-48e-6,47e-6,-47e-6,47e-6,-47e-6,47e-6,-47e-6,47e-6,-47e-6,47e-6,-47e-6,47e-6,-47e-6,46e-6,-46e-6,46e-6,-46e-6,46e-6,-46e-6,46e-6,-46e-6,46e-6,-46e-6,46e-6,-46e-6,46e-6,-45e-6,45e-6,-45e-6,45e-6,-45e-6,45e-6,-45e-6,45e-6,-45e-6,45e-6,-45e-6,45e-6,-45e-6,45e-6,-44e-6,44e-6,-44e-6,44e-6,-44e-6,44e-6,-44e-6,44e-6,-44e-6,44e-6,-44e-6,44e-6,-44e-6,44e-6,-43e-6,43e-6,-43e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,26e-6,-26e-6,26e-6,-26e-6,26e-6,-26e-6,26e-6,-26e-6,26e-6,-26e-6,26e-6,-26e-6,26e-6,-26e-6,26e-6,-26e-6,26e-6,-26e-6,26e-6,-26e-6,26e-6,-26e-6,26e-6,-25e-6,25e-6,-25e-6,25e-6,-25e-6,25e-6,-25e-6,25e-6,-25e-6,25e-6,-25e-6,25e-6,-25e-6,25e-6,-25e-6,25e-6,-25e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6],
imag:[0,.5,-2e-6,1e-6,0,1e-6,-1e-6,0,-1e-6,0,0,0,0,0,0,0,0,0,0,1e-6,0,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,2e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,2e-6,-2e-6,2e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,9e-6,-9e-6,9e-6,-9e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,9e-6,-9e-6,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-1e-5,1e-5,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-13e-6,13e-6,-13e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-11e-6,11e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],21:[function(require,module,exports){module.exports={real:[0,-.867611,.328068,.139449,.063681,-.180347,-.107318,.02568,-.195668,-.162557,-.17598,.121916,.024771,-.097123,.062144,-.005063,-.151144,-.358389,-.016781,-.028287,.014708,.066692,-.005924,-.024762,.007058,-.021288,-.015686,-.0104,.002762,.006183,-.004794,.00689,.006268,-.015178,-.015342,-.072055,.035109,.00109,.010667,-.001808,-.002684,-.006622,.013941,.011645,-.005769,-.003513,-.015747,-.004779,.008298,533e-6,-.002409,-.002894,.003932,.04675,-.016478,.003333,-.004184,-497e-6,.003726,.002107,-.007549,.003077,-.006366,-22e-5,-.002142,21e-5,-.003421,-.004822,-.001397,-46e-5,.002735,-.002267,-.00142,-.001985,-.011486,-.002439,-.001589,.024558,.001752,-.001668,-5e-6,.001741,.00131,778e-6,-.001206,.002049,503e-6,-.001847,.003654,-961e-6,.006906,515e-6,-21e-5,-792e-6,-95e-6,-.0021,327e-6,-608e-6,.003331,-441e-6,-576e-6,.001806,94e-6,112e-6,-114e-6,368e-6,35e-5,-563e-6,-773e-6,.002585,-974e-6,508e-6,779e-6,-553e-6,914e-6,-.001332,314e-6,624e-6,-659e-6,-96e-6,83e-5,-233e-6,-603e-6,491e-6,11e-6,-979e-6,-926e-6,202e-6,639e-6,108e-6,-108e-6,-706e-6,346e-6,-127e-6,-335e-6,294e-6,-149e-6,22e-6,-158e-6,208e-6,-403e-6,272e-6,302e-6,454e-6,-678e-6,-637e-6,87e-6,-65e-6,65e-6,15e-6,-81e-6,89e-6,132e-6,23e-6,-5e-6,-19e-6,102e-6,-59e-6,9e-5,98e-6,64e-6,-91e-6,-24e-6,182e-6,91e-6,-137e-6,-21e-6,-177e-6,501e-6,633e-6,-37e-5,-246e-6,-409e-6,465e-6,281e-6,314e-6,-22e-6,63e-6,-269e-6,96e-6,148e-6,-145e-6,412e-6,271e-6,37e-6,-383e-6,-325e-6,24e-5,458e-6,262e-6,62e-6,96e-6,72e-6,-157e-6,119e-6,42e-5,-315e-6,-194e-6,142e-6,-2e-4,103e-6,-173e-6,-146e-6,473e-6,-524e-6,95e-6,-11e-6,-211e-6,-18e-5,-11e-5,-1e-5,96e-6,-415e-6,133e-6,59e-6,-607e-6,38e-6,-13e-6,528e-6,-41e-6,77e-6,-129e-6,-129e-6,-.001255,-36e-6,-448e-6,186e-6,-5e-5,-227e-6,304e-6,13e-6,31e-6,-15e-5,-39e-6,266e-6,264e-6,-.002439,-403e-6,43e-6,553e-6,34e-5,281e-6,199e-6,-229e-6,-106e-6,34e-5,287e-6,334e-6,-132e-6,-13e-6,-34e-6,253e-6,-918e-6,816e-6,-477e-6,-.001332,-369e-6,314e-6,-629e-6,.001364,-.001412,-.001414,-947e-6,.001043,69e-5,-.00145,.001128,.001508,425e-6,497e-6,-.001362,-767e-6,968e-6,892e-6,883e-6,-.001317,.001587,-.001788,.00213,.00108,.002059,.001364,-.002122,-.001687,.001852,.002171,.002003,-353e-6,.00201,.00269,.002175,.002046,-5e-5,.001711,.001021,-.001577,.002725,.002176,.002361,-.002857,.002776,838e-6,-.002115,.002408,.002769,293e-6,.002835,-.001176,.001161,.001226,-.001721,-.001767,-.001729,-.002033,-.003013,-.002362,-.002609,-.002523,-.002859,-.00271,-.002879,-.002929,-.002871,-.002907,-.002991,-.003175,-.003095,-.0031,-.003163,-.003156,-.003057,-.003047,-.003127,-.003127,-.003016,-.003001,-.003095,-.003104,-.00298,-.002959,-.003066,-.003083,-.002946,-.003105,-.003231,-.003257,-.0031,-.003064,-.003207,-.003238,-.00307,-.00303,-.003182,-.003222,-.003037,-.002994,-.003259,-.003304,-.003108,-.003054,-.003237,-.003288,-.003079,-.003023,-.00322,-.003272,-.003055,-.002989,-.003197,-.003257,-.003029,-.002966,-.003178,-.003242,-.003198,-.003122,-.00336,-.003434,-.003175,-.003094,-.003343,-.003419,-.003151,-.003072,-.003324,-.003406,-.003133,-.003044,-.003311,-.003396,-.003114,-.00302,-.003292,-.003381,-.003088,-.003,-.003275,-.003366,-.003072,-.00298,-.003261,-.003354,-.003148,-.003052,-.003346,-.003448,-.003122,-.003026,-.003331,-.003434,-.003116,-.003012,-.003317,-.00342,-.003091,-.002992,-.003302,-.003409,-.003077,-.002969,-.003292,-.003397,-.003059,-.002952,-.003271,-.003384,-.003046,-.002936,-.003262,-.003373,-.003036,-.002915,-.003248,-.003362,-.003018,-.002899,-.003237,-.003349,-.003009,-.002798,-.003126,-.003239,-.002904,-.002782,-.003113,-.003226,-.002888,-.002769,-.003102,-.003217,-.002878,-.002754,-.002996,-.003107,-.002776,-.002658,-.002988,-.003098,-.002767,-.002643,-.002976,-.003087,-.002754,-.002629,-.002967,-.003078,-.002745,-.002622,-.002954,-.003065,-.002734,-.002613,-.002943,-.003056,-.002723,-.0026,-.002933,-.003047,-.002714,-.002585,-.002922,-.003036,-.002706,-.002575,-.002914,-.003025,-.002697,-.002565,-.002905,-.003016,-.002683,-.002552,-.002897,-.003006,-.002674,-.002547,-.002884,-.002996,-.002662,-.002536,-.002873,-.002985,-.002651,-.002526,-.002867,-.002977,-.002667,-.002511,-.002857,-.002966,-.002643,-.002507,-.002845,-.002958,-.002627,-.002494,-.002841,-.002949,-.002633,-.002486,-.002831,-.002937,-.002619,-.002477,-.00282,-.002928,-.002612,-.002467,-.002812,-.00292,-.002599,-.00246,-.002803,-.002912,-.002589,-.002453,-.002792,-.002902,-.002585,-.002444,-.002786,-.002892,-.002575,-.002434,-.002775,-.002883,-.002574,-.002421,-.002771,-.002873,-.002564,-.002418,-.002756,-.002864,-.002553,-.002408,-.00275,-.002855,-.002551,-.002399,-.002742,-.002847,-.002548,-.002389,-.002738,-.002836,-.002537,-.002385,-.002726,-.002827,-.002531,-.002378,-.00272,-.002819,-.002517,-.002373,-.002628,-.002726,-.002439,-.002287,-.002621,-.002717,-.002429,-.002286,-.002614,-.002709,-.002427,-.002274,-.002608,-.002701,-.002417,-.002272,-.002601,-.002691,-.002416,-.002263,-.002593,-.002683,-.002418,-.00227,-.002583,-.002675,-.002403,-.002256,-.002572,-.002668,-.002394,-.002246,-.002567,-.002658,-.002403,-.002241,-.002558,-.002651,-.002379,-.002239,-.002555,-.002643,-.002392,-.002234,-.002549,-.002634,-.002374,-.002226,-.002548,-.002627,-.002375,-.002214,-.00254,-.002619,-.002359,-.002217,-.002525,-.002612,-.002356,-.002213,-.002522,-.002604,-.002348,-.002193,-.002504,-.002596,-.002352,-.002193,-.002509,-.002587,-.002342,-.002187,-.002496,-.002582,-.002339,-.002182,-.00249,-.002572,-.002359,-.002179,-.002492,-.002566,-.002329,-.002175,-.00249,-.002558,-.002402,-.002145,-.002496,-.00255,-.002331,-.002077,-.002522,-.002543,-.002289,-.002133,-.002467,-.002536,-.002309,-.002171,-.002461,-.002528,-.002412,-.002071,-.002442,-.002521,-.002419,-.0022,-.002458,-.002514,-.002298,-.002139,-.002434,-.002507,-.002131,-.002135,-.002436,-.002499,-.002288,-.002131,-.002427,-.002492,-.002303,-.002122,-.002422,-.002485,-.002281,-.002105,-.002415,-.002478,-.002278,-.002106,-.002407,-.002471,-.002263,-.002118,-.002403,-.002464,-.002268,-.002102,-.002395,-.002457,-.002257,-.002082,-.002385,-.00245,-.00224,-.002097,-.002383,-.002443,-.002198,-.002099,-.002375,-.002437,-.00224,-.002077,-.002371,-.00243,-.002237,-.00208,-.002361,-.002422,-.002238,-.002061,-.00236,-.002416,-.002234,-.002063,-.002353,-.00241,-.002224,-.002057,-.002353,-.002403,-.002212,-.002073,-.002345,-.002397,-.002205,-.00205,-.002337,-.002391,-.00221,-.002055,-.002332,-.002385,-.002221,-.002038,-.002327,-.002378,-.002218,-.002042,-.002321,-.002372,-.00221,-.002029,-.002317,-.002365,-.002202,-.002047,-.002313,-.002357,-.002186,-.002024,-.002305,-.002353,-.002178,-.002041,-.002298,-.002345,-.002187,-.002022,-.002298,-.002341,-.002193,-.002012,-.00229,-.002334,-.002193,-.002015,-.002284,-.002327,-.002152,-.002008,-.002278,-.002321,-.002168,-.002001,-.002277,-.002316,-.002165,-.002002,-.002271,-.00231,-.002161,-.002002,-.002268,-.002303,-.002156,-.001992,-.002261,-.002298,-.002153,-.002003,-.002254,-.002294,-.002163,-.001985,-.00225,-.002286,-.002158,-.001987,-.002244,-.002281,-.002139,-.001968,-.00224,-.002274,-.00214,-.001969,-.002234,-.002267,-.002136,-.001968,-.002227,-.002263,-.002129,-.001962,-.002226,-.002257,-.002135,-.001963,-.002221,-.002251,-.002128,-.001957,-.002215,-.002247,-.002125,-.001956,-.002211,-.002242,-.002113,-.00195,-.002206,-.002234,-.002113,-.00195,-.002202,-.00223,-.002112,-.001951,-.002196,-.002223,-.002111,-.001945,-.002193,-.002219,-.002102,-.001922,-.00219,-.002212,-.002097,-.001932,-.002183,-.002208,-.002091,-.001928,-.002178,-.002202,-.002093,-.001922,-.002175,-.002199,-.002082,-.001911,-.002168,-.002192,-.002085,-.001917,-.002167,-.002186,-.002074,-.00193,-.00216,-.002182,-.002075,-.001908,-.002156,-.002177,-.002072,-.001914,-.002151,-.002174,-.002076,-.001902,-.002148,-.002169,-.002066,-.001901,-.002144,-.002162,-.002071,-.001886,-.002139,-.002156,-.002061,-.00191,-.002137,-.002151,-.002054,-.001895,-.00213,-.002148,-.002043,-.00189,-.002129,-.00214,-.002042,-.00189,-.002123,-.002136,-.002049,-.001883,-.002122,-.002132,-.002045,-.001879,-.002115,-.002127,-.002054,-.001882,-.002111,-.00212,-.002048,-.001875,-.002104,-.002117,-.002047,-.001873,-.002101,-.002113,-.002036,-.001882,-.002096,-.002108,-.002035,-.001868,-.002095,-.002101,-.002026,-.001863,-.002092,-.002099,-.002018,-.001863,-.00209,-.002094,-.002016,-.001862,-.002081,-.002086,-.002016,-.001849,-.00208,-.002084,-.002009,-.001857,-.002076,-.002079,-.002011,-.001837,-.00207,-.002072,-.002009,-.001852,-.002065,-.00207,-.002011,-.001844,-.002064,-.002067,-.002003,-.00184,-.00206,-.002064,-.002003,-.001813,-.002055,-.002054,-.00199,-.001822,-.002048,-.002053,-.00199,-.001821,-.002047,-.002043,-.002,-.001838,-.002045,-.002046,-.001966,-.001802,-.002038,-.002036,-.001961,-.001819,-.002037,-.002038,-.001994,-.001818,-.002032,-.002031,-.002024,-.001815,-.002026,-.002022,-.001968,-.001814,-.002024,-.002029,-.001975,-.001811,-.002023,-.002021,-.001963,-.001807,-.002019,-.002012,-.001954,-.001798,-.001952,-.001947,-.001901,-.001742,-.00195,-.001949,-.001901,-.001744,-.001947,-.001939,-.001896,-.001727,-.001942,-.001934,-.001897,-.001743,-.001936,-.001934,-.001896,-.001723,-.001936,-.001929,-.001875,-.001741,-.001934,-.001921,-.001892,-.001724,-.001929,-.001919,-.001892,-.001737,-.001927,-.001919,-.001876,-.001727,-.001921,-.001909,-.001872,-.00172,-.001918,-.001907,-.001869,-.001715,-.001915,-.001905,-.001865,-.001713,-.001913,-.001901,-.001865,-.001718,-.00191,-.001896,-.001863,-.001715,-.001906,-.001894,-.001854,-.001719,-.001903,-.001894,-.001857,-.001706,-.001901,-.001889,-.001865,-.001694,-.001895,-.001883,-.001858,-.001693,-.001891,-.001875,-.001852,-.001696,-.001891,-.001872,-.001842,-.001697,-.001887,-.001871,-.001849,-.00169,-.001885,-.001868,-.001836,-.001698,-.001879,-.001864,-.001845,-.001699,-.001878,-.001859,-.001839,-.001696,-.001874,-.001858,-.001839,-.00168,-.001873,-.001854,-.001833,-.00169,-.001867,-.001846,-.001835,-.001684,-.001866,-.001845,-.001831,-.00168,-.001861,-.001841,-.001819,-.001675,-.00186,-.001841,-.001824,-.001664,-.001857,-.00183,-.00182,-.001676,-.001855,-.001833,-.001822,-.001677,-.001849,-.001826,-.001809,-.00168,-.001845,-.001824,-.001811,-.001663,-.001843,-.00182,-.001811,-.001646,-.001842,-.001818,-.001816,-.001654,-.001838,-.001811,-.001802,-.001649,-.001835,-.001806,-.001802,-.001664,-.001834,-.001805,-.001796,-.00146,-.001618,-.001595,-.001579,-.001457,-.001614,-.001596,-.001586,-.001461,-.001614,-.001589,-.001592,-.001464,-.001609,-.001586,-.001588,-.001448,-.001608,-.00159,-.001584,-.001467,-.001608,-.001576,-.001582,-.001463,-.001602,-.00158,-.001581,-.001451,-.001599,-.001577,-.00158,-.001448,-.001594,-.001571,-.001576,-.001458,-.001596,-.001567,-.001571,-.001438,-.001593,-.001563,-.001561,-.001441,-.001591,-.00156,-.001571,-.001441,-.00159,-.001562,-.001557,-.001443,-.001588,-.001558,-.00155,-.001435,-.001585,-.001557,-.001545,-.001444,-.001582,-.00156,-.001553,-.001445,-.001579,-.001545,-.001561,-.001435,-.00158,-.001551,-.001528,-.00142,-.001573,-.001546,-.001551,-.001429,-.001571,-.001538,-.001527,-.001434,-.001568,-.001529,-.001553,-.001422,-.001568,-.001525,-.001543,-.001409,-.001567,-.001536,-.00152,-.001417,-.001563,-.001533,-.001549,-.00142,-.00156,-.001537,-.001551,-.001416,-.001554,-.00153,-.001531,-.001413,-.001556,-.001531,-.001527,-.001422,-.001552,-.001518,-.001533,-.001399,-.001552,-.001516,-.001526,-.001407,-.001546,-.001507,-.001523,-.001409,-.001547,-.001509,-.00153,-.001414,-.001545,-.001528,-.001534,-.001401,-.001544,-.001507,-.001531,-.001445,-.00154,-.001463,-.001524,-.001392,-.001519,-.001441,-.00151,-.001389,-.00153,-.001503,-.001535,-.001403,-.001535,-.001497,-.001523,-.001445,-.00152,-.001505,-.001525,-.001448,-.001532,-.001455,-.001508,-.001422,-.001523,-.001496,-.001501,-.001305,-.001526,-.001484,-.001505,-.001405,-.001524,-.00149,-.001517,-.001388,-.001522,-.001487,-.001499,-.001397,-.001517,-.001478,-.001499,-.001367,-.001516,-.00148,-.001491,-.0014,-.001513,-.001476,-.001491,-.001383,-.001513,-.001476,-.001487,-.001388,-.001511,-.001479,-.001489,-.00135,-.001508,-.001463,-.001504,-.001298,-.001502,-.00146,-.001504,-.001369,-.001502,-.001472,-.001488,-.001367,-.0015,-.001481,-.001499,-.001357,-.001501,-.001467,-.001466,-.001358,-.001498,-.001439,-.001486,-.001355,-.001495,-.00146,-.001477,-.00137,-.001492,-.001455,-.001477,-.001367,-.001492,-.001461,-.001485,-.001355,-.001486,-.001446,-.00148,-.001354,-.001487,-.001444,-.001475,-.001357,-.001484,-.001439,-.00147,-.001327,-.001485,-.001432,-.001477,-.00136,-.00148,-.001434,-.001453,-.001354,-.001478,-.001439,-.001469,-.001335,-.00148,-.001436,-.001468,-.001341,-.001476,-.001438,-.001447,-.001353,-.001473,-.001436,-.001456,-.001337,-.001472,-.001428,-.001462,-.001339,-.001469,-.001431,-.001457,-.00134,-.001468,-.001424,-.001457,-.00134,-.001465,-.001427,-.001462,-.001336,-.001464,-.001421,-.001442,-.001345,-.00146,-.001423,-.001455,-.001343,-.001461,-.001405,-.001449,-.001341,-.001458,-.001405,-.001453,-.001335,-.001455,-.00141,-.001444,-.001331,-.001454,-.00141,-.001448,-.001335,-.001453,-.001406,-.001433,-.001333,-.001448,-.001396,-.001435,-.001331,-.001447,-.001413,-.001439,-.001343,-.001448,-.001405,-.00144,-.001327,-.001446,-.001396,-.001438,-.001339,-.001445,-.001398,-.001437,-.001335,-.001442,-.001385,-.001436,-.001324,-.001439,-.001398,-.001432,-.001318,-.001436,-.001384,-.001429,-.001338,-.001436,-.001394,-.001431,-.0013,-.001433,-.001393,-.001424,-.00132,-.00143,-.001402,-.001426,-.001322,-.00143,-.001389,-.001425,-.001314,-.001427,-.001371,-.00142,-.00131,-.001428,-.001382,-.001421,-.001315,-.001425,-.001361,-.00141,-.001314,-.001423,-.001363,-.001417,-.001319,-.001421,-.001368,-.001406,-.001322,-.00142,-.00137,-.001415,-.001308,-.001417,-.001362,-.001413,-.0013,-.001417,-.001375,-.001408,-.001313,-.001415,-.00136,-.001401,-.001301,-.001414,-.001368,-.00141,-.001299,-.001411,-.00136,-.001409,-.001301,-.001409,-.001365,-.001399,-.001305,-.001407,-.001354,-.001396,-.001285,-.001405,-.001347,-.00139,-.001295,-.001405,-.00136,-.001399,-.001301,-.001404,-.001352,-.001392,-.00129,-.001402,-.001352,-.001388,-.001308,-.001399,-.001343,-.001393,-.001305,-.001397,-.001337,-.001393,-.001294,-.001395,-.001344,-.001389,-.001292,-.001394,-.001338,-.001389,-.001284,-.001393,-.001336,-.001387,-.001286,-.00139,-.001332,-.001384,-.001131,-.001229,-.001175,-.001224,-.001146,-.001227,-.001179,-.001226,-.001128,-.001226,-.001171,-.001224,-.001122,-.001224,-.001174,-.001222,-.001133,-.001222,-.001201,-.001223,-.001125,-.00122,-.001183,-.001217,-.001099,-.001219,-.001201,-.001217,-.001123,-.001216,-.001181,-.001218,-.001108,-.001217,-.001161,-.001203,-.001096,-.001205,-.001185,-.001194,-.001149,-.0012,-.001187,-.001204,-.001124,-.001213,-.001122,-.001192,-.001125,-.001208,-.00119,-.001208,-.001146,-.001211,-.001196,-.001182,-.001171,-.001209,-.001119,-.001196,-.001091,-.001207,-.001104,-.001157,-.001068,-.001203,-.001169,-.001194,-.001119,-.001205,-.001149,-.001172,-.001117,-.001204,-.001161,-.001203,-.001085,-.001201,-.001125,-.001188,-.00111,-.001201,-.001152,-.001195,-.001082,-.001199,-.001165,-.001193,-.001134,-.001194,-.00114,-.001191,-.001139,-.001197,-.001195,-.001189,-.001071,-.001106,-.00113,-.001189,-.001103,-.001194,-.00113,-.001193,-.001133,-.001193,-.001144,-.001174,-.001141,-.001191,-.00104,-.001187,-.00109,-.001189,-.00116,-.001189,-.001124,-.001187,-.001079,-.001179,-.001127,-.001187,-.001131,-.001185,-.001083,-.001186,-.001123,-.00117,-.001102,-.001183,-.001141,-.001183,-.001111,-.001183,-.001098,-.001126,-.001118,-.001182,-.001137,-.001182,-.001105,-.001179,-.001147,-.001177,-.001113,-.001176,-.001136,-.001165,-.001086,-.001177,-.001121,-.001176,-.001056,-.001176,-.001165,-.001176,-.001105,-.001173,-.001138,-.00117,-.001104,-.001174,-.001095,-.001164,-.00109,-.001171,-.001146,-.001158,-.001097,-.001151,-.001119,-.00117,-.0011,-.00117,-.001065,-.001165,-.001104,-.001168,-.00115,-.001162,-.001116,-.001167,-.001149,-.001167,-.001107,-.001167,-.001091,-.001161,-.001106,-.001165,-.001088,-.001116,-.001048,-.001164,-.001084,-.001161,-.00107,-.001161,-.001083,-.001132,-.001073,-.00109,-.00107,-.001149,-.001057,-.001158,-.001109,-.001149,-.001086,-.001158,-.001097,-.00115,-.001035,-.001158,-.001099,-.001155,-.0011,-.001155,-.00112,-.001155,-.001108,-.001154,-.001155,-.001154,-.001082,-.001123,-.00109,-.001144,-.001068,-.001151,-.001078,-.001141,-.001094,-.001149,-.001114,-.001147,-.001081,-.001151,-999e-6,-.00113,-.001032,-.001144,-.001129,-.001145,-.001076,-.001147,-.001053,-.00114,-.001107,-.001147,-.001076,-.001146,-.00106,-.001144,-.001097,-.00114,-.001084,-.001144,-.001093,-957e-6,-.001133,-.001142,-.001059,-.001117,-.001049,-.00114,-.001051,-.001139,-.001089,-.001138,-.0011,-.00111,-.001087,-.001139,-.0011,-.001139,-.001057,-.001136,-.001061,-.001034,-961e-6,-.001137,-.001124,-.001131,-.001084,-.001134,-.001062,-.001047,-.001055,-.001132,-.001105,-.001134,-.001085,-.001134,-.001076,-.001133,-.001064,-.001131,-883e-6,-.001132,-.001114,-.00113,-.001066,-.001131,-.001059,-.00113,-.001078,-.001128,-.00103,-.001095,-.001017,-.001094,-.001082,-.001094,-.001053,-.001093,-.001033,-.001093,-.001053,-.00109,-.001044,-.001091,-.001002,-.001082,-.00105,-.001091,-.00103,-.00109,-.001,-.001086,-.001011,-.001088,-.001025,-.001088,-.001037,-.001088,-.001,-.001084,-995e-6,-.001072,-.00101,-.001086,-.001025,-.001086,-986e-6,-.001085,-.001046,-.001085,-.00102,-.00108,-948e-6,-.001083,-.001068,-.001083,-.001083,-.001082,-.001016,-.001081,-994e-6,-.001061,-.001026,-.001081,-.001063,-.001073,-.001007,-.001079,-.001035,-.001076,-861e-6,-.001072,-.00104,-.001077,-987e-6,-.001062,-.001063,-.001067,-.001059,-.001069,-976e-6,-.001074,-.001031,-.001075,-.001036,-.001073,-.001066,-.001057,-995e-6,-724e-6,-.001048,-.001051,-994e-6,-.001073,-.001045,-.001069,-.001013,-.001072,-.001025],imag:[0,-.497243,.018673,-.020198,-.017604,-.430734,.488347,-.157997,-.023562,.260166,.076547,.124548,.01569,.070011,.057046,-.01783,-.032054,.083384,-.011498,-.047527,-.003573,.110977,-.006572,.006369,.00763,.001274,.004114,-.009236,347e-6,93e-5,.004793,-.003242,.015217,.037997,-.00386,.015361,.014582,.001194,.005652,463e-6,-.007904,-293e-6,.00921,-.013974,-.006174,-.006603,.014409,.003326,-.004958,.004583,.00883,-.009965,-.002324,-.037972,.013709,.005383,-.005886,-.002452,-305e-6,-.002838,542e-6,-667e-6,.002558,-528e-6,-.003103,582e-6,.001331,.001201,.005073,-.002067,-744e-6,-.002453,.004466,.008069,-.009327,-.001561,-.006064,-.002048,781e-6,-858e-6,-.001096,545e-6,719e-6,675e-6,.001862,.00112,-.00112,-.00195,839e-6,-938e-6,-.002301,-.00161,-.001311,-934e-6,-.002205,.001769,.001188,-577e-6,-41e-5,-.001239,.001265,-.001105,534e-6,84e-6,-.001053,-357e-6,-989e-6,-.001426,-273e-6,981e-6,951e-6,-112e-6,-47e-6,-612e-6,828e-6,-.001537,381e-6,-968e-6,64e-5,567e-6,455e-6,-374e-6,-633e-6,.00105,.001184,-106e-6,-103e-6,-525e-6,-327e-6,-55e-6,708e-6,173e-6,-66e-6,259e-6,-115e-6,-9e-5,234e-6,-299e-6,142e-6,701e-6,784e-6,-52e-5,193e-6,-52e-5,29e-5,448e-6,-103e-6,-102e-6,-335e-6,21e-6,142e-6,55e-6,-44e-6,113e-6,146e-6,98e-6,58e-6,-26e-6,1e-5,109e-6,77e-6,51e-6,39e-6,156e-6,58e-6,-233e-6,-17e-5,-126e-6,-47e-6,-45e-6,-231e-6,226e-6,-321e-6,305e-6,487e-6,6e-5,-32e-5,0,-52e-6,-99e-6,117e-6,26e-6,-122e-6,228e-6,-24e-6,-4e-6,-123e-6,-248e-6,-399e-6,292e-6,486e-6,-293e-6,-254e-6,197e-6,148e-6,95e-6,-256e-6,184e-6,-635e-6,38e-5,-15e-5,129e-6,24e-6,75e-6,548e-6,29e-6,-315e-6,-201e-6,2e-6,-206e-6,47e-6,15e-5,-116e-6,309e-6,-154e-6,334e-6,-49e-6,184e-6,23e-5,-446e-6,-186e-6,-176e-6,-149e-6,213e-6,29e-6,493e-6,-22e-5,-142e-6,205e-6,22e-5,266e-6,121e-6,77e-6,-119e-6,-65e-6,332e-6,.00124,-203e-6,-139e-6,-.001462,301e-6,314e-6,-219e-6,-98e-6,-252e-6,218e-6,-47e-6,-133e-6,-12e-6,-323e-6,-52e-6,-91e-6,-42e-6,-419e-6,-781e-6,569e-6,-.001397,-.001408,.001295,453e-6,-25e-5,224e-6,-.00107,972e-6,.001245,57e-5,-.00107,366e-6,-.00149,-.001621,-.001005,.001505,-.001444,-.001488,-.00149,.001283,922e-6,.001287,-545e-6,-.001911,747e-6,.00171,-511e-6,-.001379,-.001142,-48e-6,-83e-5,.002135,791e-6,-.001165,-.001958,-.002085,.002916,.002356,-.002721,-.002436,-982e-6,-.001905,-.001661,379e-6,759e-6,-.002748,.001937,-.00155,-709e-6,-.002839,-282e-6,-.00259,-.002592,-.002557,-.002248,-.002205,-.00223,-.002452,-.001017,-.002122,-.001801,-.001912,-.001346,-.001617,-.001279,-.001147,-.001273,-.001177,-927e-6,-984e-6,-.001199,-.001172,-972e-6,-978e-6,-.001241,-.001251,-.001019,-.001005,-.001287,-.00131,-.001055,-.001013,-.001321,-.001356,-.001078,-.001015,-.001352,-.001484,-.001168,-.001078,-.00146,-.001522,-.001178,-.001073,-.001477,-.001546,-.001189,-.001062,-.0015,-.001575,-.00123,-.001086,-.001551,-.001645,-.001233,-.001075,-.001565,-.001662,-.001223,-.001063,-.001572,-.001684,-.001233,-.001049,-.001581,-.001688,-.00123,-.001033,-.001683,-.00181,-.001304,-.001079,-.001686,-.00182,-.001296,-.001065,-.00169,-.001822,-.001293,-.001043,-.001686,-.001831,-.001277,-.001011,-.001681,-.001836,-.001274,-.001001,-.001692,-.001835,-.00127,-987e-6,-.001684,-.001835,-.001257,-967e-6,-.001736,-.001891,-.001289,-969e-6,-.001746,-.001899,-.001281,-955e-6,-.00172,-.001889,-.001269,-939e-6,-.00173,-.001889,-.001258,-917e-6,-.001721,-.001894,-.001239,-897e-6,-.001718,-.001889,-.001246,-882e-6,-.001708,-.001884,-.001225,-859e-6,-.001693,-.001886,-.001216,-834e-6,-.001692,-.001882,-.0012,-822e-6,-.001676,-.001818,-.001154,-767e-6,-.00162,-.001815,-.001147,-76e-5,-.001617,-.001807,-.001135,-731e-6,-.001605,-.001803,-.001092,-704e-6,-.001555,-.001743,-.001072,-68e-5,-.001543,-.001741,-.001065,-664e-6,-.001538,-.001736,-.001051,-64e-5,-.001526,-.001722,-.001047,-64e-5,-.001518,-.001713,-.001039,-614e-6,-.001511,-.001709,-.001027,-595e-6,-.0015,-.001708,-.00102,-581e-6,-.001488,-.001699,-.001004,-572e-6,-.001478,-.001691,-99e-5,-553e-6,-.001478,-.001689,-976e-6,-538e-6,-.001469,-.001674,-977e-6,-526e-6,-.001466,-.001669,-969e-6,-519e-6,-.00146,-.001661,-95e-5,-49e-5,-.001405,-.001663,-943e-6,-485e-6,-.001425,-.001647,-943e-6,-461e-6,-.001429,-.001646,-916e-6,-446e-6,-.001395,-.001637,-911e-6,-446e-6,-.001396,-.00163,-908e-6,-429e-6,-.001386,-.001626,-897e-6,-412e-6,-.001386,-.001615,-889e-6,-382e-6,-.001381,-.001605,-887e-6,-375e-6,-.001367,-.001601,-869e-6,-37e-5,-.001362,-.001596,-867e-6,-361e-6,-.001342,-.001596,-846e-6,-356e-6,-.001337,-.001581,-86e-5,-336e-6,-.001335,-.001578,-843e-6,-324e-6,-.001318,-.001573,-833e-6,-302e-6,-.001301,-.001569,-811e-6,-312e-6,-.001301,-.001557,-816e-6,-307e-6,-.001291,-.00155,-803e-6,-29e-5,-.001296,-.00154,-778e-6,-255e-6,-.001239,-.001497,-769e-6,-249e-6,-.001238,-.001482,-758e-6,-234e-6,-.001221,-.001483,-746e-6,-226e-6,-.001221,-.001469,-736e-6,-236e-6,-.001203,-.001467,-731e-6,-221e-6,-.001179,-.001439,-736e-6,-213e-6,-.001188,-.001444,-741e-6,-186e-6,-.001188,-.001444,-726e-6,-201e-6,-.001148,-.001435,-726e-6,-173e-6,-.001178,-.001422,-704e-6,-168e-6,-.001131,-.001415,-696e-6,-176e-6,-.00115,-.001412,-666e-6,-158e-6,-.001127,-.001415,-663e-6,-151e-6,-.001143,-.001394,-688e-6,-128e-6,-.00113,-.001384,-668e-6,-123e-6,-.001127,-.001402,-703e-6,-108e-6,-.0011,-.001387,-651e-6,-131e-6,-.001103,-.001381,-67e-5,-6e-5,-.00109,-.001374,-661e-6,-103e-6,-.001025,-.001363,-623e-6,-63e-6,-.001075,-.001356,-598e-6,-78e-6,-877e-6,-.001389,-535e-6,-65e-6,-.001032,-.001474,-342e-6,-65e-6,-.001105,-.001379,-598e-6,35e-6,-.001045,-.001303,-59e-5,-55e-6,-754e-6,-.001445,-633e-6,-5e-5,-703e-6,-.001223,-535e-6,-5e-6,-.001015,-.001313,-605e-6,8e-6,-.001316,-.001306,-568e-6,-28e-6,-.001002,-.001299,-573e-6,-18e-6,-947e-6,-.001301,-565e-6,18e-6,-982e-6,-.001314,-565e-6,-18e-6,-972e-6,-.001299,-568e-6,5e-6,-987e-6,-.001266,-552e-6,15e-6,-959e-6,-.001279,-557e-6,25e-6,-967e-6,-.001299,-57e-5,13e-6,-989e-6,-.001261,-55e-5,62e-6,-.001065,-.001244,-554e-6,34e-6,-956e-6,-.001269,-542e-6,49e-6,-945e-6,-.001251,-554e-6,83e-6,-927e-6,-.001269,-529e-6,7e-5,-919e-6,-.001254,-534e-6,57e-6,-927e-6,-.001251,-503e-6,75e-6,-938e-6,-.001212,-508e-6,83e-6,-938e-6,-.001239,-518e-6,73e-6,-91e-5,-.001217,-51e-5,6e-5,-866e-6,-.001233,-502e-6,73e-6,-858e-6,-.001215,-5e-4,73e-6,-86e-5,-.001225,-489e-6,93e-6,-863e-6,-.001182,-482e-6,14e-5,-888e-6,-.00121,-489e-6,104e-6,-891e-6,-.001168,-492e-6,142e-6,-852e-6,-.00119,-464e-6,101e-6,-822e-6,-.001194,-472e-6,117e-6,-803e-6,-.001178,-471e-6,145e-6,-893e-6,-.001179,-474e-6,145e-6,-837e-6,-.001178,-451e-6,127e-6,-829e-6,-.001166,-451e-6,137e-6,-824e-6,-.001155,-438e-6,153e-6,-821e-6,-.00116,-443e-6,137e-6,-811e-6,-.00113,-448e-6,124e-6,-769e-6,-.00115,-44e-5,155e-6,-767e-6,-.001135,-44e-5,145e-6,-803e-6,-.001157,-435e-6,166e-6,-785e-6,-.001145,-435e-6,184e-6,-779e-6,-.001137,-445e-6,176e-6,-782e-6,-.001135,-422e-6,184e-6,-751e-6,-.001124,-42e-5,187e-6,-753e-6,-.001123,-422e-6,174e-6,-746e-6,-.001114,-417e-6,174e-6,-764e-6,-.001114,-414e-6,205e-6,-748e-6,-.001103,-409e-6,184e-6,-736e-6,-.001091,-409e-6,21e-5,-723e-6,-.001091,-396e-6,199e-6,-733e-6,-.001122,-389e-6,215e-6,-733e-6,-.001093,-396e-6,21e-5,-736e-6,-.001091,-396e-6,212e-6,-712e-6,-.001091,-383e-6,197e-6,-73e-5,-.0011,-399e-6,218e-6,-707e-6,-.001079,-372e-6,228e-6,-722e-6,-.001047,-388e-6,218e-6,-707e-6,-.001076,-379e-6,218e-6,-7e-4,-.001056,-379e-6,205e-6,-672e-6,-.001067,-372e-6,199e-6,-688e-6,-.00106,-366e-6,228e-6,-658e-6,-.001076,-369e-6,234e-6,-671e-6,-.001024,-353e-6,241e-6,-677e-6,-.001041,-366e-6,228e-6,-697e-6,-.00104,-34e-5,257e-6,-684e-6,-.001032,-35e-5,247e-6,-649e-6,-.001033,-331e-6,247e-6,-648e-6,-.001031,-34e-5,251e-6,-603e-6,-.001018,-341e-6,27e-5,-607e-6,-.001021,-356e-6,257e-6,-594e-6,-.001015,-347e-6,254e-6,-616e-6,-989e-6,-347e-6,257e-6,-603e-6,-.001005,-328e-6,276e-6,-617e-6,-.001005,-315e-6,26e-5,-63e-5,-996e-6,-302e-6,267e-6,-62e-5,-989e-6,-331e-6,289e-6,-607e-6,-.001005,-311e-6,276e-6,-613e-6,-98e-5,-308e-6,28e-5,-594e-6,-.001008,-321e-6,302e-6,-584e-6,-972e-6,-324e-6,279e-6,-562e-6,-977e-6,-305e-6,273e-6,-575e-6,-976e-6,-302e-6,266e-6,-562e-6,-.001017,-305e-6,308e-6,-591e-6,-991e-6,-327e-6,286e-6,-575e-6,-986e-6,-302e-6,324e-6,-523e-6,-945e-6,-289e-6,273e-6,-626e-6,-.001002,-308e-6,318e-6,-629e-6,-964e-6,-289e-6,273e-6,-498e-6,-957e-6,-295e-6,299e-6,-337e-6,-954e-6,-308e-6,331e-6,-565e-6,-947e-6,-299e-6,254e-6,-527e-6,-944e-6,-276e-6,279e-6,-553e-6,-944e-6,-273e-6,318e-6,-571e-6,-953e-6,-283e-6,308e-6,-52e-5,-919e-6,-271e-6,274e-6,-505e-6,-906e-6,-268e-6,314e-6,-508e-6,-932e-6,-274e-6,321e-6,-492e-6,-893e-6,-286e-6,296e-6,-479e-6,-922e-6,-265e-6,302e-6,-542e-6,-881e-6,-249e-6,33e-5,-467e-6,-906e-6,-258e-6,321e-6,-452e-6,-872e-6,-252e-6,299e-6,-499e-6,-884e-6,-265e-6,339e-6,-501e-6,-891e-6,-265e-6,327e-6,-498e-6,-893e-6,-258e-6,318e-6,-498e-6,-888e-6,-243e-6,324e-6,-486e-6,-871e-6,-243e-6,33e-5,-48e-5,-869e-6,-246e-6,321e-6,-498e-6,-853e-6,-24e-5,297e-6,-476e-6,-872e-6,-232e-6,31e-5,-428e-6,-887e-6,-249e-6,323e-6,-441e-6,-882e-6,-253e-6,349e-6,-454e-6,-87e-5,-231e-6,349e-6,-48e-5,-859e-6,-232e-6,336e-6,-436e-6,-865e-6,-223e-6,332e-6,-475e-6,-842e-6,-245e-6,336e-6,-423e-6,-834e-6,-227e-6,345e-6,-437e-6,-833e-6,-231e-6,331e-6,-419e-6,-855e-6,-214e-6,336e-6,-432e-6,-83e-5,-231e-6,358e-6,-411e-6,-833e-6,-218e-6,349e-6,-41e-5,-834e-6,-227e-6,353e-6,-449e-6,-837e-6,-21e-5,336e-6,-414e-6,-852e-6,-205e-6,376e-6,-415e-6,-821e-6,-201e-6,345e-6,-393e-6,-812e-6,-222e-6,363e-6,-437e-6,-798e-6,-227e-6,354e-6,-415e-6,-825e-6,-218e-6,362e-6,-401e-6,-852e-6,-205e-6,354e-6,-358e-6,-829e-6,-205e-6,375e-6,-41e-5,-833e-6,-21e-5,38e-5,-397e-6,-795e-6,-183e-6,371e-6,-411e-6,-722e-6,-181e-6,321e-6,-39e-5,-722e-6,-189e-6,301e-6,-347e-6,-707e-6,-166e-6,324e-6,-305e-6,-695e-6,-185e-6,328e-6,-313e-6,-722e-6,-174e-6,293e-6,-321e-6,-676e-6,-151e-6,348e-6,-316e-6,-679e-6,-178e-6,317e-6,-309e-6,-698e-6,-182e-6,317e-6,-301e-6,-699e-6,-201e-6,332e-6,-305e-6,-671e-6,-166e-6,34e-5,-317e-6,-707e-6,-17e-5,347e-6,-352e-6,-695e-6,-158e-6,348e-6,-293e-6,-688e-6,-139e-6,328e-6,-348e-6,-679e-6,-143e-6,332e-6,-367e-6,-69e-5,-143e-6,328e-6,-375e-6,-664e-6,-15e-5,297e-6,-332e-6,-657e-6,-158e-6,359e-6,-274e-6,-671e-6,-108e-6,32e-5,-413e-6,-698e-6,-162e-6,328e-6,-305e-6,-672e-6,-162e-6,355e-6,-398e-6,-657e-6,-162e-6,382e-6,-263e-6,-676e-6,-143e-6,386e-6,-305e-6,-699e-6,-116e-6,332e-6,-394e-6,-676e-6,-139e-6,332e-6,-243e-6,-664e-6,-151e-6,301e-6,-216e-6,-667e-6,-181e-6,325e-6,-316e-6,-668e-6,-143e-6,305e-6,-324e-6,-641e-6,-153e-6,353e-6,-28e-5,-686e-6,-126e-6,354e-6,-305e-6,-664e-6,-17e-5,38e-5,-31e-5,-654e-6,-131e-6,362e-6,-258e-6,-637e-6,-131e-6,258e-6,-214e-6,-659e-6,-113e-6,35e-5,-222e-6,-55e-5,-127e-6,498e-6,-249e-6,-668e-6,-275e-6,55e-5,-314e-6,-668e-6,-184e-6,336e-6,-126e-6,-634e-6,-113e-6,354e-6,-21e-5,-524e-6,-227e-6,305e-6,-175e-6,-51e-5,-87e-6,485e-6,-275e-6,-571e-6,-162e-6,327e-6,-301e-6,-799e-6,-105e-6,371e-6,-266e-6,-602e-6,-109e-6,332e-6,-17e-5,-633e-6,-1e-4,336e-6,-275e-6,-607e-6,-14e-5,366e-6,-262e-6,-668e-6,-127e-6,349e-6,-296e-6,-589e-6,-131e-6,354e-6,-283e-6,-624e-6,-109e-6,345e-6,-292e-6,-607e-6,-105e-6,323e-6,-271e-6,-682e-6,-109e-6,38e-5,-144e-6,-773e-6,-157e-6,385e-6,-122e-6,-632e-6,-135e-6,323e-6,-24e-5,-633e-6,-135e-6,267e-6,-127e-6,-65e-5,-92e-6,327e-6,-331e-6,-642e-6,-105e-6,427e-6,-205e-6,-643e-6,-109e-6,34e-5,-253e-6,-606e-6,-122e-6,35e-5,-24e-5,-607e-6,-1e-4,314e-6,-162e-6,-628e-6,-149e-6,371e-6,-188e-6,-625e-6,-113e-6,371e-6,-214e-6,-615e-6,-118e-6,379e-6,-231e-6,-672e-6,-83e-6,397e-6,-162e-6,-597e-6,-122e-6,385e-6,-301e-6,-607e-6,-118e-6,357e-6,-196e-6,-641e-6,-52e-6,358e-6,-188e-6,-625e-6,-96e-6,341e-6,-302e-6,-593e-6,-105e-6,341e-6,-24e-5,-625e-6,-96e-6,367e-6,-183e-6,-615e-6,-109e-6,345e-6,-209e-6,-607e-6,-92e-6,367e-6,-192e-6,-602e-6,-1e-4,345e-6,-135e-6,-607e-6,-92e-6,363e-6,-262e-6,-581e-6,-113e-6,345e-6,-157e-6,-58e-5,-83e-6,406e-6,-196e-6,-581e-6,-87e-6,397e-6,-14e-5,-589e-6,-105e-6,371e-6,-205e-6,-594e-6,-87e-6,367e-6,-157e-6,-58e-5,-83e-6,371e-6,-245e-6,-581e-6,-122e-6,401e-6,-222e-6,-58e-5,-109e-6,327e-6,-179e-6,-545e-6,-74e-6,353e-6,-153e-6,-58e-5,-74e-6,38e-5,-157e-6,-545e-6,-57e-6,367e-6,-144e-6,-55e-5,-79e-6,406e-6,-144e-6,-572e-6,-87e-6,35e-5,-157e-6,-581e-6,-1e-4,397e-6,-166e-6,-529e-6,-7e-5,35e-5,-135e-6,-611e-6,-92e-6,349e-6,-183e-6,-564e-6,-109e-6,301e-6,-148e-6,-554e-6,-83e-6,349e-6,-136e-6,-567e-6,-105e-6,406e-6,-17e-5,-572e-6,-57e-6,362e-6,-14e-5,-555e-6,-79e-6,428e-6,-214e-6,-554e-6,-83e-6,415e-6,-148e-6,-537e-6,-92e-6,393e-6,-218e-6,-524e-6,-66e-6,379e-6,-127e-6,-554e-6,-87e-6,4e-4,-125e-6,-567e-6,-6e-5,344e-6,-158e-6,-533e-6,-7e-5,394e-6,-204e-6,-557e-6,-46e-6,357e-6,-107e-6,-557e-6,-7e-5,381e-6,-98e-6,-548e-6,-7e-5,357e-6,-177e-6,-534e-6,-79e-6,389e-6,-19e-5,-575e-6,-93e-6,409e-6,-213e-6,-548e-6,-56e-6,353e-6,-13e-5,-53e-5,-5e-6,376e-6,-181e-6,-552e-6,-46e-6,372e-6,-195e-6,-501e-6,-6e-5,395e-6,-139e-6,-506e-6,-74e-6,409e-6,-116e-6,-529e-6,-79e-6,38e-5,-139e-6,-53e-5,-74e-6,395e-6,-13e-5,-543e-6,-42e-6,394e-6,-13e-5,-534e-6,-7e-5,404e-6,-139e-6,-484e-6,-49e-6,362e-6,-111e-6,-444e-6,-53e-6,345e-6,-66e-6,-484e-6,-41e-6,366e-6,-7e-5,-493e-6,-58e-6,349e-6,-74e-6,-464e-6,-7e-5,234e-6,-33e-6,-48e-5,-74e-6,308e-6,-107e-6,-533e-6,-7e-5,217e-6,-86e-6,-476e-6,-94e-6,303e-6,-35e-6,-506e-6,-44e-6,367e-6,-187e-6,-528e-6,-17e-5,275e-6,-232e-6,-397e-6,192e-6,258e-6,-157e-6,-459e-6,-31e-6,463e-6,-227e-6,-453e-6,-105e-6,231e-6,-1e-4,-394e-6,-31e-6,188e-6,-262e-6,-306e-6,-26e-6,459e-6,-175e-6,-519e-6,-57e-6,489e-6,-345e-6,-562e-6,-92e-6,297e-6,-171e-6,-45e-5,17e-6,363e-6,-28e-5,-45e-5,-31e-6,319e-6,26e-6,-519e-6,-57e-6,423e-6,-179e-6,-459e-6,-17e-6,34e-5,-118e-6,-519e-6,-44e-6,284e-6,-118e-6,-388e-6,-1e-4,367e-6,-131e-6,-371e-6,17e-6,-7e-5,-131e-6,-531e-6,455e-6,388e-6,-118e-6,-458e-6,-17e-6,384e-6,48e-6,-375e-6,17e-6,336e-6,-209e-6,-345e-6,-31e-6,581e-6,-96e-6,-479e-6,-57e-6,266e-6,-22e-6,-388e-6,-61e-6,498e-6,-148e-6,-376e-6,-28e-6,362e-6,-73e-6,-486e-6,-39e-6,38e-5,-189e-6,-436e-6,61e-6,317e-6,-61e-6,-408e-6,-45e-6,44e-5,-362e-6,-386e-6,-22e-6,323e-6,6e-6,-418e-6,-61e-6,28e-5,89e-6,-392e-6,-95e-6,317e-6,-184e-6,-457e-6,-5e-5,362e-6,-67e-6,-52e-5,-39e-6,167e-6,-39e-6,-402e-6,-73e-6,296e-6,106e-6,-401e-6,-22e-6,424e-6,-15e-5,-436e-6,-67e-6,251e-6,-185e-6,-412e-6,218e-6,345e-6,-61e-6,-402e-6,28e-6,485e-6,-111e-6,-385e-6,-45e-6,212e-6,-128e-6,-346e-6,5e-5,206e-6,-11e-6,-369e-6,-17e-6,414e-6,-106e-6,-369e-6,17e-6,418e-6,-335e-6,-507e-6,-22e-6,425e-6,-84e-6,-457e-6,61e-6,424e-6,-262e-6,-447e-6,-402e-6,451e-6,167e-6,-481e-6,-72e-6,34e-5,-162e-6,-407e-6,62e-6,373e-6,-14e-5,-52e-5,11e-6,363e-6,67e-6,-358e-6,-61e-6,29e-5,-61e-6,-33e-5,5e-5,22e-6,45e-6,-402e-6,268e-6,38e-5,-151e-6,-436e-6,-61e-6,408e-6,162e-6,-363e-6,84e-6,29e-5,-1e-4,-396e-6,-6e-6,57e-5,-212e-6,-507e-6,-112e-6,212e-6,-89e-6,-401e-6,-56e-6,457e-6,-134e-6,-302e-6,22e-6,396e-6,6e-6,-435e-6,-56e-6,329e-6,-112e-6,-369e-6,-39e-6,34e-5,-627e-6,-156e-6,56e-6,429e-6,-24e-5,-452e-6,78e-6,447e-6,78e-6,-341e-6,-84e-6,302e-6,262e-6,-345e-6,-39e-6,296e-6,0,-425e-6,-84e-6,413e-6,475e-6,-609e-6,-17e-6,173e-6,117e-6,-341e-6,-78e-6,403e-6,44e-5,-419e-6,-89e-6,257e-6,17e-6,-33e-5,-34e-6,357e-6,-45e-6,-39e-5,61e-6,71e-5,0,-201e-6,67e-6,379e-6,-6e-6,-396e-6,28e-6,341e-6,-73e-6,-374e-6,38e-6,406e-6,-22e-6,-162e-6,-5e-6,297e-6,-38e-6,-357e-6,0,292e-6,76e-6,-319e-6,54e-6,433e-6,141e-6,-298e-6,11e-6,358e-6,0,-433e-6,-86e-6,406e-6,6e-5,-369e-6,-27e-6,33e-5,-22e-6,-427e-6,87e-6,438e-6,-179e-6,-4e-4,43e-6,358e-6,-16e-6,-455e-6,16e-6,287e-6,-11e-6,-367e-6,92e-6,526e-6,32e-6,-184e-6,-22e-6,11e-6,-38e-6,-373e-6,-38e-6,427e-6,211e-6,-342e-6,16e-6,195e-6,125e-6,-39e-5,-38e-6,309e-6,-87e-6,-65e-5,-124e-6,287e-6,-49e-6,-434e-6,184e-6,179e-6,-152e-6,-195e-6,13e-5,455e-6,-76e-6,-309e-6,43e-6,288e-6,-76e-6,-141e-6,-195e-6,406e-6,-794e-6,-232e-6,217e-6,405e-6,0,-244e-6,92e-6,352e-6,-11e-6,-314e-6]
}},{}],22:[function(require,module,exports){module.exports={real:[0,-1e-6,-.249268,.113655,-.053293,.034018,-.024299,.01707,-.015971,.01553,-.012639,.011335,-.011541,.01043,-.009167,.008078,-.007356,.007138,-.006327,.005447,-.005309,.004444,-.004343,.003643,-.003567,.003091,-.003031,.002885,-.002747,.002618,-.003095,.003045,-.002906,.002862,-.00282,.002779,-.002741,.002703,-.002509,.002477,-.002446,.002416,-.002387,.002359,-.002332,.002306,-.002281,.002257,-.002037,.002016,-.001996,.001976,-.001957,.001939,-.001921,.001903,-.001886,.00187,-.001853,.001838,-.001612,.001599,-.001586,.001573,-.001561,.001549,-.001537,.001525,-.001299,.001289,-.00128,.001271,-.001262,.001417,-.001641,.001631,-.00162,.001609,-.001599,.001589,-.001579,.001569,-.00156,.00155,-.001541,.001532,-.001619,.00161,-.001601,.001592,-.001583,.001574,-.001566,.001557,-.001549,.001541,-.001533,.001525,-.001517,.00151,-.001502,.001495,-.001487,.00148,-.001473,.001466,-.001459,.001452,-.001446,.001439,-.001432,.001426,-.00142,.001413,-.001407,.001401,-.001395,.001389,-.001383,.001377,-.001372,.001366,-.00136,.001355,-.001349,.001344,-.001339,.001333,-.001328,.001323,-.001318,.001313,-.001308,.001303,-.001298,.001293,-.001288,.001284,-.001279,.001397,-.001392,.001387,-.001383,.001378,-.001373,.001368,-.001363,.001359,-.001354,.00135,-.001345,.001341,-.001336,.001332,-.001328,.001323,-.001319,.001315,-.001311,.001306,-.001302,.001298,-.001294,.00129,-.001286,.001282,-.001279,.001275,-.001271,.001267,-.001263,.00126,-.001256,.001252,-.001249,.001245,-.001242,.001238,-.001234,.001231,-.001228,.001224,-.001221,.001217,-.001214,.001211,-.001207,.001204,-.001201,.001198,-.001195,.001191,-.001188,.001185,-.001182,.001179,-.001176,.001173,-.00117,.001167,-.001164,.001161,-.001158,.001155,-.001152,.00115,-.001147,.001144,-.001141,.001138,-.001136,.001133,-.00113,.001128,-755e-6,753e-6,-751e-6,773e-6,-771e-6,769e-6,-767e-6,766e-6,-764e-6,762e-6,-76e-5,759e-6,-757e-6,755e-6,-753e-6,752e-6,-798e-6,796e-6,-794e-6,792e-6,-791e-6,789e-6,-787e-6,786e-6,-784e-6,782e-6,-78e-5,779e-6,-777e-6,775e-6,-774e-6,772e-6,-771e-6,769e-6,-767e-6,766e-6,-764e-6,836e-6,-835e-6,833e-6,-831e-6,829e-6,-854e-6,852e-6,-85e-5,848e-6,-847e-6,845e-6,-843e-6,842e-6,-84e-5,838e-6,-837e-6,835e-6,-833e-6,832e-6,-83e-5,829e-6,-827e-6,825e-6,-824e-6,822e-6,-821e-6,819e-6,-818e-6,816e-6,-815e-6,813e-6,-812e-6,81e-5,-809e-6,783e-6,-781e-6,78e-5,-778e-6,777e-6,-775e-6,751e-6,-749e-6,748e-6,-747e-6,745e-6,-744e-6,743e-6,-741e-6,74e-5,-739e-6,737e-6,-736e-6,735e-6,-733e-6,732e-6,-731e-6,729e-6,-728e-6,727e-6,-726e-6,724e-6,-723e-6,722e-6,-721e-6,719e-6,-718e-6,717e-6,-716e-6,714e-6,-713e-6,712e-6,-711e-6,71e-5,-708e-6,707e-6,-706e-6,705e-6,-704e-6,702e-6,-701e-6,7e-4,-699e-6,698e-6,-697e-6,696e-6,-694e-6,693e-6,-692e-6,691e-6,-69e-5,689e-6,-688e-6,686e-6,-685e-6,684e-6,-704e-6,703e-6,-702e-6,701e-6,-7e-4,699e-6,-698e-6,696e-6,-695e-6,694e-6,-693e-6,692e-6,-691e-6,69e-5,-689e-6,688e-6,-686e-6,685e-6,-684e-6,683e-6,-682e-6,681e-6,-68e-5,679e-6,-678e-6,677e-6,-676e-6,675e-6,-674e-6,672e-6,-671e-6,67e-5,-669e-6,668e-6,-667e-6,666e-6,-665e-6,664e-6,-663e-6,662e-6,-661e-6,66e-5,-659e-6,658e-6,-657e-6,656e-6,-655e-6,654e-6,-653e-6,652e-6,-651e-6,65e-5,-649e-6,648e-6,-647e-6,646e-6,-645e-6,644e-6,-643e-6,642e-6,-641e-6,64e-5,-639e-6,638e-6,-637e-6,636e-6,-635e-6,634e-6,-614e-6,613e-6,-612e-6,611e-6,-61e-5,609e-6,-608e-6,607e-6,-607e-6,606e-6,-605e-6,604e-6,-603e-6,602e-6,-601e-6,6e-4,-599e-6,598e-6,-597e-6,596e-6,-596e-6,595e-6,-594e-6,593e-6,-592e-6,591e-6,-59e-5,589e-6,-588e-6,587e-6,-587e-6,586e-6,-585e-6,584e-6,-583e-6,582e-6,-581e-6,58e-5,-579e-6,579e-6,-578e-6,577e-6,-576e-6,575e-6,-574e-6,573e-6,-572e-6,571e-6,-571e-6,57e-5,-569e-6,568e-6,-567e-6,566e-6,-565e-6,564e-6,-564e-6,563e-6,-562e-6,561e-6,-56e-5,559e-6,-558e-6,558e-6,-557e-6,556e-6,-555e-6,554e-6,-553e-6,552e-6,-473e-6,472e-6,-472e-6,471e-6,-47e-5,469e-6,-469e-6,468e-6,-467e-6,466e-6,-466e-6,465e-6,-464e-6,463e-6,-463e-6,462e-6,-461e-6,461e-6,-46e-5,459e-6,-458e-6,458e-6,-457e-6,456e-6,-455e-6,455e-6,-454e-6,453e-6,-452e-6,452e-6,-451e-6,45e-5,-45e-5,449e-6,-448e-6,447e-6,-447e-6,446e-6,-445e-6,445e-6,-444e-6,443e-6,-442e-6,442e-6,-441e-6,44e-5,-439e-6,439e-6,-438e-6,437e-6,-437e-6,436e-6,-435e-6,434e-6,-434e-6,433e-6,-432e-6,431e-6,-431e-6,43e-5,-429e-6,429e-6,-428e-6,427e-6,-426e-6,426e-6,-425e-6,424e-6,-423e-6,423e-6,-422e-6,421e-6,-421e-6,42e-5,-419e-6,418e-6,-418e-6,417e-6,-416e-6,415e-6,-415e-6,414e-6,-413e-6,413e-6,-412e-6,411e-6,-41e-5,41e-5,-409e-6,408e-6,-407e-6,407e-6,-406e-6,405e-6,-405e-6,404e-6,-403e-6,402e-6,-402e-6,401e-6,-4e-4,399e-6,-399e-6,398e-6,-397e-6,396e-6,-396e-6,349e-6,-349e-6,348e-6,-347e-6,347e-6,-346e-6,345e-6,-345e-6,344e-6,-343e-6,343e-6,-342e-6,341e-6,-341e-6,34e-5,-34e-5,339e-6,-338e-6,338e-6,-337e-6,336e-6,-336e-6,335e-6,-334e-6,334e-6,-333e-6,332e-6,-332e-6,331e-6,-33e-5,33e-5,-329e-6,328e-6,-328e-6,327e-6,-326e-6,326e-6,-325e-6,324e-6,-324e-6,323e-6,-322e-6,322e-6,-321e-6,32e-5,-32e-5,319e-6,-318e-6,318e-6,-317e-6,316e-6,-316e-6,315e-6,-314e-6,314e-6,-313e-6,312e-6,-311e-6,311e-6,-31e-5,309e-6,-309e-6,308e-6,-307e-6,307e-6,-306e-6,305e-6,-305e-6,304e-6,-303e-6,303e-6,-302e-6,301e-6,-301e-6,3e-4,-299e-6,298e-6,-298e-6,297e-6,-296e-6,296e-6,-295e-6,294e-6,-294e-6,293e-6,-292e-6,291e-6,-291e-6,29e-5,-289e-6,271e-6,-271e-6,27e-5,-27e-5,269e-6,-268e-6,268e-6,-267e-6,266e-6,-266e-6,265e-6,-264e-6,264e-6,-263e-6,262e-6,-262e-6,261e-6,-26e-5,259e-6,-259e-6,258e-6,-257e-6,257e-6,-256e-6,255e-6,-255e-6,254e-6,-253e-6,253e-6,-252e-6,251e-6,-251e-6,25e-5,-249e-6,249e-6,-248e-6,247e-6,-247e-6,246e-6,-245e-6,245e-6,-244e-6,243e-6,-242e-6,242e-6,-241e-6,24e-5,-24e-5,239e-6,-238e-6,238e-6,-237e-6,236e-6,-235e-6,235e-6,-234e-6,233e-6,-233e-6,232e-6,-231e-6,231e-6,-23e-5,229e-6,-228e-6,228e-6,-227e-6,226e-6,-226e-6,225e-6,-224e-6,223e-6,-223e-6,222e-6,-221e-6,221e-6,-22e-5,219e-6,-218e-6,218e-6,-217e-6,216e-6,-216e-6,215e-6,-214e-6,213e-6,-213e-6,212e-6,-211e-6,21e-5,-21e-5,209e-6,-208e-6,208e-6,-207e-6,206e-6,-205e-6,205e-6,-204e-6,203e-6,-202e-6,178e-6,-178e-6,177e-6,-176e-6,176e-6,-175e-6,174e-6,-174e-6,173e-6,-172e-6,172e-6,-171e-6,17e-5,-17e-5,169e-6,-168e-6,168e-6,-167e-6,166e-6,-166e-6,165e-6,-164e-6,164e-6,-163e-6,162e-6,-162e-6,161e-6,-16e-5,16e-5,-159e-6,158e-6,-158e-6,157e-6,-156e-6,156e-6,-155e-6,154e-6,-154e-6,153e-6,-152e-6,152e-6,-151e-6,15e-5,-149e-6,149e-6,-148e-6,147e-6,-147e-6,146e-6,-145e-6,145e-6,-144e-6,143e-6,-143e-6,142e-6,-141e-6,14e-5,-14e-5,139e-6,-138e-6,138e-6,-137e-6,136e-6,-136e-6,135e-6,-134e-6,133e-6,-133e-6,132e-6,-131e-6,131e-6,-13e-5,129e-6,-129e-6,128e-6,-127e-6,126e-6,-126e-6,125e-6,-124e-6,124e-6,-123e-6,122e-6,-121e-6,121e-6,-12e-5,119e-6,-119e-6,118e-6,-117e-6,116e-6,-116e-6,115e-6,-114e-6,113e-6,-113e-6,112e-6,-111e-6,111e-6,-11e-5,109e-6,-108e-6,108e-6,-107e-6,106e-6,-105e-6,105e-6,-104e-6,103e-6,-103e-6,102e-6,-101e-6,1e-4,-1e-4,99e-6,-98e-6,97e-6,-97e-6,96e-6,-95e-6,94e-6,-94e-6,93e-6,-92e-6,91e-6,-91e-6,9e-5,-89e-6,88e-6,-88e-6,87e-6,-86e-6,85e-6,-85e-6,84e-6,-83e-6,82e-6,-82e-6,81e-6,-8e-5,79e-6,-79e-6,78e-6,-77e-6,76e-6,-76e-6,75e-6,-74e-6,73e-6,-73e-6,72e-6,-71e-6,7e-5,-7e-5,69e-6,-68e-6,67e-6,-67e-6,66e-6,-65e-6,64e-6,-64e-6,63e-6,-62e-6,61e-6,-61e-6,6e-5,-59e-6,58e-6,-57e-6,57e-6,-56e-6,55e-6,-54e-6,52e-6,-51e-6,51e-6,-5e-5,49e-6,-48e-6,48e-6,-47e-6,46e-6,-45e-6,45e-6,-44e-6,43e-6,-42e-6,42e-6,-41e-6,4e-5,-39e-6,39e-6,-38e-6,37e-6,-36e-6,36e-6,-35e-6,34e-6,-33e-6,33e-6,-32e-6,31e-6,-3e-5,3e-5,-29e-6,28e-6,-27e-6,27e-6,-26e-6,25e-6,-24e-6,23e-6,-23e-6,22e-6,-21e-6,2e-5,-2e-5,19e-6,-18e-6,17e-6,-17e-6,16e-6,-15e-6,14e-6,-14e-6,13e-6,-12e-6,11e-6,-11e-6,1e-5,-9e-6,8e-6,-8e-6,7e-6,-6e-6,5e-6,-5e-6,4e-6,-3e-6,2e-6,-2e-6,1e-6,0,-1e-6,2e-6,-2e-6,3e-6,-4e-6,5e-6,-5e-6,6e-6,-7e-6,8e-6,-8e-6,9e-6,-1e-5,11e-6,-11e-6,12e-6,-13e-6,14e-6,-14e-6,15e-6,-16e-6,17e-6,-17e-6,18e-6,-19e-6,2e-5,-2e-5,21e-6,-22e-6,23e-6,-23e-6,24e-6,-25e-6,26e-6,-27e-6,27e-6,-28e-6,29e-6,-3e-5,3e-5,-31e-6,32e-6,-33e-6,33e-6,-34e-6,35e-6,-36e-6,36e-6,-37e-6,38e-6,-39e-6,39e-6,-4e-5,41e-6,-42e-6,42e-6,-43e-6,44e-6,-45e-6,45e-6,-46e-6,47e-6,-48e-6,48e-6,-49e-6,5e-5,-5e-5,51e-6,-52e-6,53e-6,-53e-6,54e-6,-55e-6,56e-6,-56e-6,57e-6,-58e-6,59e-6,-59e-6,6e-5,-61e-6,62e-6,-62e-6,63e-6,-64e-6,65e-6,-65e-6,66e-6,-67e-6,67e-6,-68e-6,69e-6,-7e-5,7e-5,-71e-6,72e-6,-73e-6,73e-6,-74e-6,75e-6,-75e-6,76e-6,-77e-6,78e-6,-78e-6,79e-6,-8e-5,8e-5,-81e-6,82e-6,-83e-6,83e-6,-84e-6,85e-6,-85e-6,86e-6,-87e-6,88e-6,-88e-6,89e-6,-9e-5,9e-5,-91e-6,92e-6,-92e-6,93e-6,-94e-6,95e-6,-95e-6,96e-6,-97e-6,97e-6,-98e-6,99e-6,-99e-6,1e-4,-101e-6,101e-6,-102e-6,103e-6,-103e-6,104e-6,-105e-6,106e-6,-106e-6,107e-6,-108e-6,108e-6,-109e-6,11e-5,-11e-5,111e-6,-112e-6,112e-6,-113e-6,114e-6,-114e-6,115e-6,-116e-6,116e-6,-117e-6,117e-6,-118e-6,119e-6,-119e-6,12e-5,-121e-6,121e-6,-122e-6,123e-6,-123e-6,124e-6,-125e-6,125e-6,-126e-6,126e-6,-127e-6,128e-6,-128e-6,129e-6,-13e-5,13e-5,-131e-6,131e-6,-132e-6,133e-6,-133e-6,134e-6,-135e-6,135e-6,-136e-6,136e-6,-137e-6,138e-6,-138e-6,139e-6,-139e-6,14e-5,-141e-6,141e-6,-142e-6,142e-6,-143e-6,144e-6,-144e-6,145e-6,-145e-6,146e-6,-146e-6,147e-6,-148e-6,148e-6,-149e-6,149e-6,-15e-5,15e-5,-151e-6,152e-6,-152e-6,153e-6,-153e-6,154e-6,-154e-6,155e-6,-155e-6,156e-6,-156e-6,157e-6,-157e-6,158e-6,-159e-6,159e-6,-16e-5,16e-5,-161e-6,161e-6,-162e-6,162e-6,-163e-6,163e-6,-164e-6,164e-6,-165e-6,165e-6,-166e-6,166e-6,-167e-6,178e-6,-178e-6,179e-6,-179e-6,18e-5,-18e-5,181e-6,-181e-6,182e-6,-182e-6,183e-6,-183e-6,184e-6,-184e-6,185e-6,-185e-6,186e-6,-186e-6,187e-6,-187e-6,188e-6,-188e-6,189e-6,-189e-6,19e-5,-19e-5,191e-6,-191e-6,191e-6,-192e-6,192e-6,-193e-6,193e-6,-194e-6,194e-6,-194e-6,195e-6,-195e-6,196e-6,-196e-6,197e-6,-197e-6,197e-6,-198e-6,198e-6,-199e-6,199e-6,-199e-6,2e-4,-2e-4,201e-6,-201e-6,201e-6,-202e-6,202e-6,-202e-6,203e-6,-203e-6,204e-6,-204e-6,204e-6,-205e-6,205e-6,-205e-6,206e-6,-206e-6,206e-6,-207e-6,207e-6,-207e-6,208e-6,-208e-6,208e-6,-209e-6,209e-6,-209e-6,209e-6,-21e-5,21e-5,-21e-5,211e-6,-211e-6,211e-6,-211e-6,212e-6,-212e-6,212e-6,-213e-6,213e-6,-213e-6,213e-6,-214e-6,214e-6,-214e-6,214e-6,-215e-6,215e-6,-215e-6,215e-6,-215e-6,216e-6,-216e-6,216e-6,-216e-6,217e-6,-217e-6,217e-6,-217e-6,217e-6,-217e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,222e-6,-222e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-217e-6,217e-6,-217e-6,217e-6,-217e-6,216e-6,-216e-6,216e-6,-216e-6,215e-6,-215e-6,215e-6,-215e-6,215e-6,-214e-6,214e-6,-214e-6,213e-6,-213e-6,213e-6,-213e-6,212e-6,-212e-6,212e-6,-211e-6,211e-6,-211e-6,211e-6,-21e-5,21e-5,-21e-5,209e-6,-209e-6,209e-6,-208e-6,208e-6,-208e-6,207e-6,-207e-6,207e-6,-206e-6,206e-6,-205e-6,205e-6,-205e-6,204e-6,-204e-6,204e-6,-203e-6,203e-6,-202e-6,202e-6,-202e-6,201e-6,-201e-6,2e-4,-2e-4,199e-6,-199e-6,199e-6,-198e-6,198e-6,-197e-6,197e-6,-196e-6,196e-6,-195e-6,195e-6,-194e-6,194e-6,-193e-6,193e-6,-192e-6,192e-6,-191e-6,191e-6,-19e-5,19e-5,-189e-6,189e-6,-188e-6,188e-6,-187e-6,187e-6,-186e-6,186e-6,-185e-6,185e-6,-184e-6,183e-6,-183e-6,182e-6,-182e-6,181e-6,-181e-6,18e-5,-179e-6,179e-6,-178e-6,178e-6,-177e-6,176e-6,-176e-6,175e-6,-175e-6,174e-6,-173e-6,173e-6,-172e-6,171e-6,-171e-6,17e-5,-169e-6,169e-6,-168e-6,167e-6,-167e-6,166e-6,-165e-6,165e-6,-164e-6,163e-6,-163e-6,162e-6,-161e-6,161e-6,-16e-5,159e-6,-158e-6,158e-6,-157e-6,156e-6,-156e-6,155e-6,-154e-6,153e-6,-153e-6,152e-6,-151e-6,15e-5,-15e-5,149e-6,-148e-6,147e-6,-147e-6,146e-6,-145e-6,144e-6,-143e-6,143e-6,-142e-6,141e-6,-14e-5,139e-6,-139e-6,138e-6,-137e-6,136e-6,-135e-6,135e-6,-134e-6,133e-6,-132e-6,131e-6,-13e-5,13e-5,-129e-6,128e-6,-127e-6,126e-6,-125e-6,125e-6,-124e-6,123e-6,-122e-6,121e-6,-12e-5,119e-6,-118e-6,118e-6,-117e-6,116e-6,-115e-6,114e-6,-113e-6,112e-6,-111e-6,11e-5,-11e-5,109e-6,-108e-6,107e-6,-106e-6,105e-6,-104e-6,103e-6,-102e-6,101e-6,-1e-4,99e-6,-99e-6,98e-6,-97e-6,96e-6,-95e-6,94e-6,-93e-6,92e-6,-91e-6,9e-5,-89e-6,88e-6,-87e-6,86e-6,-85e-6,84e-6,-83e-6,82e-6,-81e-6,8e-5,-79e-6,78e-6,-77e-6,76e-6,-75e-6,74e-6,-73e-6,72e-6,-71e-6,7e-5,-69e-6,68e-6,-67e-6,66e-6,-65e-6,64e-6,-63e-6,62e-6,-61e-6,6e-5,-59e-6,58e-6,-57e-6,56e-6,-55e-6,54e-6,-53e-6,52e-6,-51e-6,5e-5,-49e-6,48e-6,-47e-6,46e-6,-45e-6,44e-6,-43e-6,42e-6,-41e-6,4e-5,-39e-6,38e-6,-37e-6,36e-6,-35e-6,33e-6,-32e-6,31e-6,-3e-5,29e-6,-28e-6,27e-6,-26e-6,25e-6,-24e-6,23e-6,-22e-6,21e-6,-2e-5,19e-6,-18e-6,17e-6,-16e-6,14e-6,-13e-6,12e-6,-11e-6,1e-5,-9e-6,8e-6,-7e-6,6e-6,-5e-6,4e-6,-3e-6,2e-6,-1e-6,0,1e-6,-3e-6,4e-6,-5e-6,6e-6,-7e-6,8e-6,-9e-6,1e-5,-11e-6,12e-6,-13e-6,14e-6,-15e-6,16e-6,-17e-6,18e-6,-2e-5,21e-6,-22e-6,23e-6,-24e-6,25e-6,-26e-6,27e-6,-28e-6,29e-6,-3e-5,31e-6,-32e-6,33e-6,-34e-6,35e-6,-36e-6,37e-6,-38e-6,39e-6,-41e-6,42e-6,-43e-6,44e-6,-45e-6,46e-6,-47e-6,48e-6,-49e-6,5e-5,-51e-6,52e-6,-53e-6,54e-6,-55e-6,56e-6,-57e-6,58e-6,-59e-6,6e-5,-61e-6,62e-6,-63e-6,64e-6,-65e-6,66e-6,-67e-6,68e-6,-69e-6,7e-5,-71e-6,72e-6,-73e-6,74e-6,-75e-6,76e-6,-77e-6,78e-6,-79e-6,8e-5,-81e-6,82e-6,-83e-6,84e-6,-85e-6,86e-6,-87e-6,88e-6,-89e-6,89e-6,-9e-5,91e-6,-92e-6,93e-6,-94e-6,95e-6,-96e-6,97e-6,-98e-6,99e-6,-1e-4,101e-6,-101e-6,102e-6,-103e-6,104e-6,-105e-6,106e-6,-107e-6,108e-6,-109e-6,109e-6,-11e-5,111e-6,-112e-6,113e-6,-114e-6,115e-6,-116e-6,116e-6,-117e-6,118e-6,-119e-6,12e-5,-121e-6,121e-6,-122e-6,123e-6,-124e-6,125e-6,-125e-6,126e-6,-127e-6,128e-6,-129e-6,129e-6,-13e-5,131e-6,-132e-6,133e-6,-133e-6,134e-6,-135e-6,136e-6,-149e-6,15e-5,-151e-6,152e-6,-153e-6,153e-6,-154e-6,155e-6,-156e-6,157e-6,-157e-6,158e-6,-159e-6,16e-5,-16e-5,161e-6,-162e-6,163e-6,-163e-6,164e-6,-165e-6,165e-6,-166e-6,167e-6,-168e-6,168e-6,-169e-6,17e-5,-17e-5,171e-6,-172e-6,172e-6,-173e-6,174e-6,-174e-6,175e-6,-175e-6,176e-6,-177e-6,177e-6,-178e-6,178e-6,-179e-6,18e-5,-18e-5,181e-6,-181e-6,182e-6,-182e-6,183e-6,-184e-6,184e-6,-185e-6,185e-6,-186e-6,186e-6,-187e-6,187e-6,-188e-6,188e-6,-189e-6,189e-6,-19e-5,19e-5,-19e-5,191e-6,-191e-6,192e-6,-192e-6,193e-6,-193e-6,193e-6,-194e-6,194e-6,-195e-6,195e-6,-195e-6,196e-6,-196e-6,196e-6,-197e-6,197e-6,-197e-6,198e-6,-198e-6,198e-6,-199e-6,199e-6,-199e-6,199e-6,-2e-4,2e-4,-2e-4,2e-4,-201e-6,201e-6,-201e-6,201e-6,-201e-6,202e-6,-202e-6,202e-6,-202e-6,202e-6,-203e-6,203e-6,-203e-6,203e-6,-203e-6,203e-6,-203e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,204e-6],imag:[0,.493552,-1e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-4e-6,4e-6,-4e-6,5e-6,-5e-6,5e-6,-5e-6,6e-6,-5e-6,6e-6,-6e-6,6e-6,-6e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,8e-6,-8e-6,8e-6,-8e-6,9e-6,-9e-6,9e-6,-9e-6,1e-5,-9e-6,9e-6,-9e-6,9e-6,-1e-5,1e-5,-1e-5,1e-5,-9e-6,9e-6,-9e-6,1e-5,-1e-5,11e-6,-13e-6,14e-6,-14e-6,14e-6,-15e-6,15e-6,-15e-6,15e-6,-16e-6,16e-6,-16e-6,17e-6,-18e-6,18e-6,-19e-6,19e-6,-19e-6,2e-5,-2e-5,2e-5,-21e-6,21e-6,-21e-6,21e-6,-22e-6,22e-6,-23e-6,23e-6,-23e-6,24e-6,-24e-6,24e-6,-25e-6,25e-6,-25e-6,26e-6,-26e-6,26e-6,-27e-6,27e-6,-27e-6,28e-6,-28e-6,28e-6,-29e-6,29e-6,-3e-5,3e-5,-3e-5,31e-6,-31e-6,31e-6,-32e-6,32e-6,-33e-6,33e-6,-33e-6,34e-6,-34e-6,35e-6,-35e-6,35e-6,-36e-6,36e-6,-36e-6,4e-5,-41e-6,41e-6,-42e-6,42e-6,-43e-6,43e-6,-44e-6,44e-6,-44e-6,45e-6,-45e-6,46e-6,-46e-6,47e-6,-47e-6,48e-6,-48e-6,49e-6,-49e-6,5e-5,-5e-5,5e-5,-51e-6,51e-6,-52e-6,52e-6,-53e-6,53e-6,-54e-6,54e-6,-55e-6,55e-6,-56e-6,56e-6,-57e-6,57e-6,-58e-6,58e-6,-59e-6,59e-6,-6e-5,6e-5,-61e-6,61e-6,-62e-6,62e-6,-63e-6,63e-6,-64e-6,64e-6,-65e-6,65e-6,-66e-6,66e-6,-67e-6,67e-6,-68e-6,68e-6,-69e-6,69e-6,-7e-5,7e-5,-71e-6,71e-6,-72e-6,72e-6,-73e-6,74e-6,-74e-6,75e-6,-75e-6,76e-6,-76e-6,77e-6,-52e-6,52e-6,-53e-6,55e-6,-55e-6,55e-6,-56e-6,56e-6,-56e-6,57e-6,-57e-6,58e-6,-58e-6,58e-6,-59e-6,59e-6,-63e-6,64e-6,-64e-6,65e-6,-65e-6,65e-6,-66e-6,66e-6,-67e-6,67e-6,-68e-6,68e-6,-68e-6,69e-6,-69e-6,7e-5,-7e-5,7e-5,-71e-6,71e-6,-72e-6,79e-6,-8e-5,8e-5,-81e-6,81e-6,-84e-6,85e-6,-85e-6,86e-6,-86e-6,87e-6,-87e-6,88e-6,-88e-6,89e-6,-89e-6,9e-5,-9e-5,91e-6,-91e-6,92e-6,-92e-6,93e-6,-93e-6,94e-6,-94e-6,95e-6,-95e-6,96e-6,-96e-6,97e-6,-97e-6,98e-6,-98e-6,96e-6,-96e-6,97e-6,-97e-6,98e-6,-98e-6,96e-6,-96e-6,97e-6,-97e-6,98e-6,-98e-6,99e-6,-99e-6,1e-4,-1e-4,101e-6,-101e-6,102e-6,-102e-6,103e-6,-103e-6,104e-6,-104e-6,105e-6,-105e-6,106e-6,-106e-6,107e-6,-107e-6,108e-6,-108e-6,109e-6,-109e-6,11e-5,-11e-5,111e-6,-111e-6,112e-6,-112e-6,113e-6,-113e-6,114e-6,-114e-6,115e-6,-115e-6,116e-6,-116e-6,117e-6,-118e-6,118e-6,-119e-6,119e-6,-12e-5,12e-5,-121e-6,121e-6,-122e-6,122e-6,-123e-6,123e-6,-128e-6,128e-6,-129e-6,129e-6,-13e-5,13e-5,-131e-6,132e-6,-132e-6,133e-6,-133e-6,134e-6,-134e-6,135e-6,-135e-6,136e-6,-137e-6,137e-6,-138e-6,138e-6,-139e-6,139e-6,-14e-5,14e-5,-141e-6,142e-6,-142e-6,143e-6,-143e-6,144e-6,-144e-6,145e-6,-145e-6,146e-6,-147e-6,147e-6,-148e-6,148e-6,-149e-6,149e-6,-15e-5,151e-6,-151e-6,152e-6,-152e-6,153e-6,-153e-6,154e-6,-155e-6,155e-6,-156e-6,156e-6,-157e-6,158e-6,-158e-6,159e-6,-159e-6,16e-5,-16e-5,161e-6,-162e-6,162e-6,-163e-6,163e-6,-164e-6,164e-6,-165e-6,166e-6,-161e-6,162e-6,-162e-6,163e-6,-163e-6,164e-6,-165e-6,165e-6,-166e-6,166e-6,-167e-6,167e-6,-168e-6,169e-6,-169e-6,17e-5,-17e-5,171e-6,-171e-6,172e-6,-173e-6,173e-6,-174e-6,174e-6,-175e-6,176e-6,-176e-6,177e-6,-177e-6,178e-6,-178e-6,179e-6,-18e-5,18e-5,-181e-6,181e-6,-182e-6,182e-6,-183e-6,184e-6,-184e-6,185e-6,-185e-6,186e-6,-187e-6,187e-6,-188e-6,188e-6,-189e-6,19e-5,-19e-5,191e-6,-191e-6,192e-6,-192e-6,193e-6,-194e-6,194e-6,-195e-6,195e-6,-196e-6,197e-6,-197e-6,198e-6,-198e-6,199e-6,-2e-4,2e-4,-201e-6,201e-6,-173e-6,174e-6,-174e-6,175e-6,-175e-6,176e-6,-176e-6,177e-6,-177e-6,178e-6,-178e-6,179e-6,-179e-6,18e-5,-18e-5,181e-6,-181e-6,182e-6,-182e-6,183e-6,-183e-6,184e-6,-184e-6,185e-6,-185e-6,186e-6,-186e-6,187e-6,-187e-6,188e-6,-188e-6,189e-6,-189e-6,19e-5,-191e-6,191e-6,-192e-6,192e-6,-193e-6,193e-6,-194e-6,194e-6,-195e-6,195e-6,-196e-6,196e-6,-197e-6,197e-6,-198e-6,198e-6,-199e-6,199e-6,-2e-4,2e-4,-201e-6,201e-6,-202e-6,202e-6,-203e-6,203e-6,-204e-6,204e-6,-205e-6,205e-6,-206e-6,206e-6,-207e-6,207e-6,-208e-6,208e-6,-209e-6,209e-6,-21e-5,21e-5,-211e-6,212e-6,-212e-6,213e-6,-213e-6,214e-6,-214e-6,215e-6,-215e-6,216e-6,-216e-6,217e-6,-217e-6,218e-6,-218e-6,219e-6,-219e-6,22e-5,-22e-5,221e-6,-221e-6,222e-6,-222e-6,223e-6,-223e-6,224e-6,-224e-6,225e-6,-225e-6,226e-6,-226e-6,227e-6,-227e-6,202e-6,-202e-6,202e-6,-203e-6,203e-6,-204e-6,204e-6,-205e-6,205e-6,-206e-6,206e-6,-206e-6,207e-6,-207e-6,208e-6,-208e-6,209e-6,-209e-6,21e-5,-21e-5,21e-5,-211e-6,211e-6,-212e-6,212e-6,-213e-6,213e-6,-214e-6,214e-6,-214e-6,215e-6,-215e-6,216e-6,-216e-6,217e-6,-217e-6,218e-6,-218e-6,218e-6,-219e-6,219e-6,-22e-5,22e-5,-221e-6,221e-6,-221e-6,222e-6,-222e-6,223e-6,-223e-6,224e-6,-224e-6,224e-6,-225e-6,225e-6,-226e-6,226e-6,-227e-6,227e-6,-227e-6,228e-6,-228e-6,229e-6,-229e-6,23e-5,-23e-5,23e-5,-231e-6,231e-6,-232e-6,232e-6,-233e-6,233e-6,-233e-6,234e-6,-234e-6,235e-6,-235e-6,236e-6,-236e-6,236e-6,-237e-6,237e-6,-238e-6,238e-6,-238e-6,239e-6,-239e-6,24e-5,-24e-5,226e-6,-227e-6,227e-6,-227e-6,228e-6,-228e-6,229e-6,-229e-6,229e-6,-23e-5,23e-5,-23e-5,231e-6,-231e-6,232e-6,-232e-6,232e-6,-233e-6,233e-6,-234e-6,234e-6,-234e-6,235e-6,-235e-6,235e-6,-236e-6,236e-6,-237e-6,237e-6,-237e-6,238e-6,-238e-6,238e-6,-239e-6,239e-6,-239e-6,24e-5,-24e-5,241e-6,-241e-6,241e-6,-242e-6,242e-6,-242e-6,243e-6,-243e-6,243e-6,-244e-6,244e-6,-244e-6,245e-6,-245e-6,246e-6,-246e-6,246e-6,-247e-6,247e-6,-247e-6,248e-6,-248e-6,248e-6,-249e-6,249e-6,-249e-6,25e-5,-25e-5,25e-5,-251e-6,251e-6,-251e-6,252e-6,-252e-6,252e-6,-253e-6,253e-6,-253e-6,254e-6,-254e-6,254e-6,-255e-6,255e-6,-255e-6,256e-6,-256e-6,256e-6,-257e-6,257e-6,-257e-6,258e-6,-258e-6,258e-6,-259e-6,259e-6,-259e-6,26e-5,-26e-5,26e-5,-26e-5,261e-6,-261e-6,231e-6,-231e-6,232e-6,-232e-6,232e-6,-232e-6,233e-6,-233e-6,233e-6,-234e-6,234e-6,-234e-6,234e-6,-235e-6,235e-6,-235e-6,235e-6,-236e-6,236e-6,-236e-6,236e-6,-237e-6,237e-6,-237e-6,237e-6,-238e-6,238e-6,-238e-6,238e-6,-239e-6,239e-6,-239e-6,239e-6,-239e-6,24e-5,-24e-5,24e-5,-24e-5,241e-6,-241e-6,241e-6,-241e-6,242e-6,-242e-6,242e-6,-242e-6,242e-6,-243e-6,243e-6,-243e-6,243e-6,-244e-6,244e-6,-244e-6,244e-6,-244e-6,245e-6,-245e-6,245e-6,-245e-6,245e-6,-246e-6,246e-6,-246e-6,246e-6,-246e-6,247e-6,-247e-6,247e-6,-247e-6,247e-6,-248e-6,248e-6,-248e-6,248e-6,-248e-6,248e-6,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-252e-6,252e-6,-252e-6,252e-6,-252e-6,252e-6,-252e-6,253e-6,-253e-6,253e-6,-253e-6,253e-6,-253e-6,253e-6,-254e-6,254e-6,-254e-6,254e-6,-254e-6,254e-6,-254e-6,254e-6,-255e-6,255e-6,-255e-6,255e-6,-255e-6,255e-6,-255e-6,255e-6,-255e-6,256e-6,-256e-6,256e-6,-256e-6,256e-6,-256e-6,256e-6,-256e-6,256e-6,-256e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-257e-6,257e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,258e-6,-258e-6,259e-6,-259e-6,259e-6,-259e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-251e-6,251e-6,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-25e-5,25e-5,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-249e-6,249e-6,-248e-6,248e-6,-248e-6,248e-6,-248e-6,248e-6,-248e-6,248e-6,-248e-6,247e-6,-247e-6,247e-6,-247e-6,247e-6,-247e-6,247e-6,-247e-6,246e-6,-246e-6,246e-6,-246e-6,246e-6,-246e-6,246e-6,-245e-6,245e-6,-245e-6,245e-6,-245e-6,245e-6,-245e-6,244e-6,-244e-6,244e-6,-244e-6,244e-6,-243e-6,243e-6,-243e-6,243e-6,-243e-6,243e-6,-242e-6,242e-6,-242e-6,242e-6,-242e-6,241e-6,-241e-6,241e-6,-241e-6,241e-6,-24e-5,24e-5,-24e-5,24e-5,-239e-6,239e-6,-239e-6,239e-6,-239e-6,238e-6,-238e-6,238e-6,-238e-6,237e-6,-237e-6,237e-6,-237e-6,236e-6,-236e-6,236e-6,-236e-6,235e-6,-235e-6,235e-6,-235e-6,234e-6,-234e-6,234e-6,-233e-6,233e-6,-233e-6,233e-6,-232e-6,232e-6,-232e-6,231e-6,-231e-6,231e-6,-231e-6,23e-5,-23e-5,23e-5,-229e-6,229e-6,-229e-6,228e-6,-228e-6,228e-6,-227e-6,227e-6,-227e-6,226e-6,-226e-6,226e-6,-225e-6,225e-6,-225e-6,224e-6,-224e-6,224e-6,-223e-6,223e-6,-223e-6,222e-6,-222e-6,222e-6,-221e-6,221e-6,-22e-5,22e-5,-22e-5,219e-6,-219e-6,218e-6,-218e-6,218e-6,-217e-6,217e-6,-217e-6,216e-6,-216e-6,215e-6,-215e-6,214e-6,-214e-6,214e-6,-213e-6,213e-6,-212e-6,212e-6,-212e-6,211e-6,-211e-6,21e-5,-21e-5,209e-6,-209e-6,209e-6,-208e-6,208e-6,-207e-6,207e-6,-206e-6,206e-6,-205e-6,205e-6,-204e-6,204e-6,-203e-6,203e-6,-203e-6,202e-6,-202e-6,201e-6,-201e-6,2e-4,-2e-4,199e-6,-199e-6,198e-6,-198e-6,197e-6,-197e-6,196e-6,-196e-6,195e-6,-195e-6,194e-6,-194e-6,193e-6,-193e-6,192e-6,-191e-6,191e-6,-19e-5,19e-5,-189e-6,189e-6,-188e-6,188e-6,-187e-6,187e-6,-186e-6,185e-6,-185e-6,184e-6,-184e-6,183e-6,-183e-6,182e-6,-182e-6,181e-6,-18e-5,18e-5,-179e-6,179e-6,-178e-6,177e-6,-177e-6,176e-6,-176e-6,175e-6,-175e-6,174e-6,-173e-6,173e-6,-172e-6,172e-6,-171e-6,17e-5,-17e-5,169e-6,-168e-6,168e-6,-167e-6,167e-6,-166e-6,165e-6,-165e-6,164e-6,-163e-6,163e-6,-162e-6,161e-6,-161e-6,16e-5,-16e-5,159e-6,-158e-6,158e-6,-157e-6,156e-6,-156e-6,155e-6,-154e-6,154e-6,-153e-6,152e-6,-152e-6,151e-6,-15e-5,149e-6,-149e-6,148e-6,-147e-6,147e-6,-155e-6,155e-6,-154e-6,153e-6,-152e-6,152e-6,-151e-6,15e-5,-149e-6,149e-6,-148e-6,147e-6,-146e-6,145e-6,-145e-6,144e-6,-143e-6,142e-6,-142e-6,141e-6,-14e-5,139e-6,-139e-6,138e-6,-137e-6,136e-6,-135e-6,135e-6,-134e-6,133e-6,-132e-6,131e-6,-131e-6,13e-5,-129e-6,128e-6,-127e-6,127e-6,-126e-6,125e-6,-124e-6,123e-6,-122e-6,122e-6,-121e-6,12e-5,-119e-6,118e-6,-117e-6,117e-6,-116e-6,115e-6,-114e-6,113e-6,-112e-6,112e-6,-111e-6,11e-5,-109e-6,108e-6,-107e-6,106e-6,-106e-6,105e-6,-104e-6,103e-6,-102e-6,101e-6,-1e-4,1e-4,-99e-6,98e-6,-97e-6,96e-6,-95e-6,94e-6,-93e-6,93e-6,-92e-6,91e-6,-9e-5,89e-6,-88e-6,87e-6,-86e-6,85e-6,-85e-6,84e-6,-83e-6,82e-6,-81e-6,8e-5,-79e-6,78e-6,-77e-6,76e-6,-76e-6,75e-6,-74e-6,73e-6,-72e-6,71e-6,-7e-5,69e-6,-68e-6,67e-6,-66e-6,65e-6,-65e-6,64e-6,-63e-6,62e-6,-61e-6,6e-5,-59e-6,58e-6,-57e-6,56e-6,-55e-6,54e-6,-53e-6,52e-6,-52e-6,51e-6,-5e-5,49e-6,-48e-6,47e-6,-46e-6,45e-6,-44e-6,43e-6,-42e-6,41e-6,-4e-5,39e-6,-38e-6,37e-6,-36e-6,36e-6,-35e-6,34e-6,-33e-6,32e-6,-31e-6,3e-5,-29e-6,28e-6,-27e-6,26e-6,-25e-6,24e-6,-23e-6,22e-6,-21e-6,2e-5,-19e-6,18e-6,-17e-6,16e-6,-15e-6,15e-6,-14e-6,13e-6,-12e-6,11e-6,-1e-5,9e-6,-8e-6,7e-6,-6e-6,5e-6,-4e-6,3e-6,-2e-6,1e-6,0,-1e-6,2e-6,-3e-6,4e-6,-5e-6,6e-6,-7e-6,8e-6,-8e-6,9e-6,-1e-5,11e-6,-12e-6,13e-6,-14e-6,15e-6,-16e-6,17e-6,-18e-6,19e-6,-2e-5,21e-6,-22e-6,23e-6,-24e-6,25e-6,-26e-6,27e-6,-28e-6,29e-6,-3e-5,3e-5,-31e-6,32e-6,-33e-6,34e-6,-35e-6,36e-6,-37e-6,38e-6,-39e-6,4e-5,-41e-6,42e-6,-43e-6,44e-6,-45e-6,46e-6,-47e-6,47e-6,-48e-6,49e-6,-5e-5,51e-6,-52e-6,53e-6,-54e-6,55e-6,-56e-6,57e-6,-58e-6,59e-6,-6e-5,61e-6,-61e-6,62e-6,-63e-6,64e-6,-65e-6,66e-6,-67e-6,68e-6,-69e-6,7e-5,-71e-6,71e-6,-72e-6,73e-6,-74e-6,75e-6,-76e-6,77e-6,-78e-6,79e-6,-8e-5,8e-5,-81e-6,82e-6,-83e-6,84e-6,-85e-6,86e-6,-87e-6,88e-6,-88e-6,89e-6,-9e-5,91e-6,-92e-6,93e-6,-94e-6,94e-6,-95e-6,96e-6,-97e-6,98e-6,-99e-6,1e-4,-1e-4,101e-6,-102e-6,103e-6,-104e-6,105e-6,-105e-6,106e-6,-107e-6,108e-6,-109e-6,11e-5,-11e-5,111e-6,-112e-6,113e-6,-114e-6,115e-6,-115e-6,116e-6,-117e-6,118e-6,-119e-6,119e-6,-12e-5,121e-6,-122e-6,122e-6,-123e-6,124e-6,-125e-6,126e-6,-126e-6,127e-6,-128e-6,129e-6,-129e-6,13e-5,-131e-6,132e-6,-132e-6,133e-6,-134e-6,135e-6,-135e-6,136e-6,-137e-6,138e-6,-138e-6,139e-6,-14e-5,14e-5,-141e-6,142e-6,-142e-6,143e-6,-144e-6,145e-6,-145e-6,146e-6,-147e-6,147e-6,-148e-6,149e-6,-149e-6,15e-5,-151e-6,151e-6,-152e-6,153e-6,-153e-6,154e-6,-155e-6,155e-6,-156e-6,156e-6,-157e-6,158e-6,-158e-6,159e-6,-16e-5,16e-5,-161e-6,161e-6,-162e-6,162e-6,-163e-6,164e-6,-164e-6,165e-6,-165e-6,166e-6,-167e-6,167e-6,-168e-6,168e-6,-169e-6,169e-6,-17e-5,17e-5,-171e-6,171e-6,-172e-6,172e-6,-173e-6,173e-6,-174e-6,174e-6,-175e-6,175e-6,-176e-6,176e-6,-177e-6,177e-6,-178e-6,178e-6,-179e-6,179e-6,-18e-5,18e-5,-181e-6,181e-6,-181e-6,182e-6,-182e-6,183e-6,-183e-6,184e-6,-184e-6,184e-6,-185e-6,185e-6,-186e-6,186e-6,-186e-6,187e-6,-187e-6,187e-6,-188e-6,188e-6,-188e-6,189e-6,-189e-6,19e-5,-19e-5,19e-5,-19e-5,191e-6,-191e-6,191e-6,-192e-6,192e-6,-192e-6,193e-6,-193e-6,193e-6,-193e-6,194e-6,-194e-6,194e-6,-194e-6,195e-6,-195e-6,195e-6,-195e-6,196e-6,-196e-6,196e-6,-196e-6,196e-6,-197e-6,197e-6,-197e-6,197e-6,-197e-6,198e-6,-198e-6,198e-6,-198e-6,198e-6,-198e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,198e-6,-198e-6,198e-6,-198e-6,198e-6,-198e-6,197e-6,-197e-6,197e-6,-197e-6,197e-6,-196e-6,196e-6,-196e-6,196e-6,-196e-6,195e-6,-195e-6,195e-6,-195e-6,194e-6,-194e-6,194e-6,-193e-6,193e-6,-193e-6,193e-6,-192e-6,192e-6,-192e-6,191e-6,-191e-6,191e-6,-19e-5,19e-5,-19e-5,189e-6,-189e-6,189e-6,-188e-6,188e-6,-188e-6,187e-6,-187e-6,186e-6,-186e-6,186e-6,-185e-6,185e-6,-184e-6,184e-6,-183e-6,183e-6,-183e-6,182e-6,-182e-6,181e-6,-181e-6,18e-5,-18e-5,179e-6,-179e-6,178e-6,-178e-6,177e-6,-177e-6,176e-6,-176e-6,175e-6,-175e-6,174e-6,-174e-6,173e-6,-173e-6,172e-6,-171e-6,171e-6,-17e-5,17e-5,-169e-6,168e-6,-168e-6,167e-6,-167e-6,166e-6,-165e-6,165e-6,-164e-6,164e-6,-163e-6,162e-6,-162e-6,161e-6,-16e-5,16e-5,-159e-6,158e-6,-158e-6,157e-6,-156e-6,156e-6,-155e-6,154e-6,-153e-6,153e-6,-152e-6,151e-6,-151e-6,15e-5,-149e-6,148e-6,-148e-6,147e-6,-146e-6,145e-6,-145e-6,144e-6,-143e-6,142e-6,-142e-6,141e-6,-14e-5,139e-6,-138e-6,138e-6,-137e-6,149e-6,-148e-6,147e-6,-146e-6,145e-6,-144e-6,144e-6,-143e-6,142e-6,-141e-6,14e-5,-139e-6,138e-6,-137e-6,136e-6,-135e-6,134e-6,-133e-6,132e-6,-131e-6,13e-5,-129e-6,128e-6,-127e-6,126e-6,-125e-6,124e-6,-123e-6,122e-6,-121e-6,12e-5,-119e-6,118e-6,-117e-6,116e-6,-115e-6,114e-6,-113e-6,112e-6,-111e-6,11e-5,-108e-6,107e-6,-106e-6,105e-6,-104e-6,103e-6,-102e-6,101e-6,-1e-4,99e-6,-98e-6,96e-6,-95e-6,94e-6,-93e-6,92e-6,-91e-6,9e-5,-89e-6,87e-6,-86e-6,85e-6,-84e-6,83e-6,-82e-6,81e-6,-79e-6,78e-6,-77e-6,76e-6,-75e-6,74e-6,-72e-6,71e-6,-7e-5,69e-6,-68e-6,66e-6,-65e-6,64e-6,-63e-6,62e-6,-6e-5,59e-6,-58e-6,57e-6,-56e-6,54e-6,-53e-6,52e-6,-51e-6,5e-5,-48e-6,47e-6,-46e-6,45e-6,-44e-6,42e-6,-41e-6,4e-5,-39e-6,37e-6,-36e-6,35e-6,-34e-6,32e-6,-31e-6,3e-5,-29e-6,27e-6,-26e-6,25e-6,-24e-6,23e-6,-21e-6,2e-5,-19e-6,18e-6,-16e-6,15e-6,-14e-6,13e-6,-11e-6,1e-5,-9e-6,8e-6,-6e-6,5e-6,-4e-6,3e-6,-1e-6]}},{}],23:[function(require,module,exports){module.exports={real:[0,-1e-6,-.249268,.071712,-.042987,.02661,-.0196,.012949,-.005453,.005143,-.00488,.004653,-.004456,.004553,-.004961,.004648,-.004501,.004644,-.004949,.004817,-.004283,.00418,-.003841,.003757,-.003678,.003389,-.003324,.003262,-.003203,.003148,-.003095,.003045,-.002906,.002862,-.00282,.002779,-.002741,.002703,-.002509,.002477,-.002446,.002416,-.002387,.002359,-.002332,.002306,-.002281,.002257,-.002037,.002016,-.001996,.001976,-.001957,.001939,-.001921,.001903,-.001886,.00187,-.001853,.001838,-.001612,.001599,-.001586,.001573,-.001561,.001549,-.001537,.001525,-.001299,.001289,-.00128,.001271,-.001262,.001254,-.001245,.001237,-.001229,.001221,-.001213,.001066,-.001059,.001053,-.001046,.00104,-.001034,.001028,-.001022,.001016,-.00101,.001004,-999e-6,993e-6,-988e-6,983e-6,-977e-6,972e-6,-882e-6,878e-6,-873e-6,869e-6,-864e-6,86e-5,-856e-6,852e-6,-848e-6,844e-6,-84e-5,836e-6,-832e-6,828e-6,-824e-6,821e-6,-817e-6,813e-6,-81e-5,806e-6,-803e-6,799e-6,-796e-6,793e-6,-789e-6,717e-6,-714e-6,711e-6,-708e-6,705e-6,-702e-6,7e-4,-697e-6,694e-6,-692e-6,689e-6,-686e-6,684e-6,-681e-6,679e-6,-676e-6,674e-6,-671e-6,669e-6,-666e-6,664e-6,-662e-6,659e-6,-657e-6,655e-6,-653e-6,65e-5,-648e-6,646e-6,-644e-6,642e-6,-64e-5,637e-6,-635e-6,633e-6,-631e-6,629e-6,-627e-6,625e-6,-623e-6,621e-6,-619e-6,618e-6,-616e-6,614e-6,-612e-6,61e-5,-608e-6,606e-6,-605e-6,603e-6,-601e-6,599e-6,-598e-6,596e-6,-594e-6,593e-6,-591e-6,589e-6,-588e-6,586e-6,-584e-6,583e-6,-581e-6,58e-5,-578e-6,576e-6,-575e-6,573e-6,-572e-6,57e-5,-569e-6,567e-6,-566e-6,564e-6,-563e-6,561e-6,-56e-5,559e-6,-557e-6,556e-6,-554e-6,553e-6,-552e-6,55e-5,-549e-6,548e-6,-546e-6,545e-6,-544e-6,526e-6,-525e-6,523e-6,-522e-6,521e-6,-52e-5,518e-6,-517e-6,516e-6,-515e-6,514e-6,-512e-6,511e-6,-51e-5,509e-6,-508e-6,507e-6,-506e-6,504e-6,-503e-6,502e-6,-501e-6,5e-4,-499e-6,498e-6,-497e-6,496e-6,-495e-6,493e-6,-492e-6,491e-6,-49e-5,489e-6,-488e-6,487e-6,-486e-6,485e-6,-484e-6,483e-6,-482e-6,481e-6,-48e-5,479e-6,-478e-6,477e-6,-476e-6,475e-6,-474e-6,473e-6,-473e-6,472e-6,-471e-6,47e-5,-469e-6,468e-6,-467e-6,466e-6,-465e-6,464e-6,-463e-6,462e-6,-555e-6,554e-6,-553e-6,552e-6,-551e-6,55e-5,-549e-6,548e-6,-547e-6,545e-6,-544e-6,543e-6,-542e-6,541e-6,-508e-6,507e-6,-506e-6,505e-6,-505e-6,504e-6,-503e-6,502e-6,-501e-6,5e-4,-499e-6,498e-6,-497e-6,496e-6,-496e-6,495e-6,-494e-6,478e-6,-477e-6,476e-6,-475e-6,475e-6,-474e-6,473e-6,-472e-6,471e-6,-47e-5,47e-5,-469e-6,468e-6,-467e-6,466e-6,-466e-6,465e-6,-464e-6,463e-6,-462e-6,462e-6,-461e-6,46e-5,-459e-6,418e-6,-418e-6,417e-6,-416e-6,415e-6,-415e-6,414e-6,-413e-6,413e-6,-412e-6,411e-6,-411e-6,41e-5,-409e-6,409e-6,-408e-6,407e-6,-407e-6,406e-6,-405e-6,405e-6,-404e-6,403e-6,-403e-6,402e-6,-401e-6,401e-6,-4e-4,399e-6,-399e-6,398e-6,-374e-6,373e-6,-373e-6,372e-6,-371e-6,371e-6,-37e-5,37e-5,-369e-6,369e-6,-368e-6,367e-6,-367e-6,366e-6,-366e-6,365e-6,-364e-6,364e-6,-363e-6,363e-6,-362e-6,362e-6,-361e-6,361e-6,-36e-5,359e-6,-359e-6,337e-6,-336e-6,336e-6,-335e-6,335e-6,-334e-6,334e-6,-333e-6,333e-6,-332e-6,332e-6,-331e-6,331e-6,-33e-5,33e-5,-329e-6,329e-6,-328e-6,328e-6,-327e-6,327e-6,-326e-6,326e-6,-325e-6,325e-6,-324e-6,314e-6,-313e-6,313e-6,-312e-6,312e-6,-312e-6,311e-6,-311e-6,31e-5,-31e-5,309e-6,-309e-6,308e-6,-308e-6,307e-6,-307e-6,306e-6,-306e-6,305e-6,-305e-6,304e-6,-304e-6,304e-6,-303e-6,303e-6,-302e-6,302e-6,-301e-6,301e-6,-3e-4,3e-4,-299e-6,299e-6,-299e-6,298e-6,-298e-6,297e-6,-297e-6,296e-6,-296e-6,295e-6,-295e-6,294e-6,-294e-6,294e-6,-293e-6,293e-6,-292e-6,292e-6,-291e-6,291e-6,-29e-5,29e-5,-289e-6,289e-6,-289e-6,288e-6,-288e-6,287e-6,-287e-6,286e-6,-286e-6,286e-6,-285e-6,285e-6,-284e-6,284e-6,-283e-6,283e-6,-282e-6,282e-6,-282e-6,281e-6,-281e-6,28e-5,-28e-5,279e-6,-279e-6,278e-6,-278e-6,278e-6,-277e-6,277e-6,-276e-6,276e-6,-275e-6,275e-6,-275e-6,274e-6,-274e-6,273e-6,-273e-6,272e-6,-272e-6,272e-6,-271e-6,271e-6,-27e-5,27e-5,-269e-6,269e-6,-269e-6,268e-6,-268e-6,267e-6,-267e-6,266e-6,-266e-6,265e-6,-265e-6,265e-6,-264e-6,264e-6,-263e-6,263e-6,-262e-6,262e-6,-262e-6,261e-6,-261e-6,26e-5,-26e-5,259e-6,-259e-6,259e-6,-258e-6,258e-6,-257e-6,257e-6,-256e-6,256e-6,-256e-6,255e-6,-255e-6,254e-6,-254e-6,253e-6,-253e-6,253e-6,-252e-6,252e-6,-251e-6,251e-6,-25e-5,25e-5,-25e-5,249e-6,-249e-6,248e-6,-248e-6,247e-6,-247e-6,247e-6,-246e-6,246e-6,-245e-6,245e-6,-244e-6,244e-6,-244e-6,243e-6,-243e-6,242e-6,-242e-6,241e-6,-241e-6,24e-5,-24e-5,24e-5,-239e-6,239e-6,-238e-6,238e-6,-237e-6,237e-6,-237e-6,236e-6,-236e-6,235e-6,-235e-6,234e-6,-234e-6,233e-6,-233e-6,233e-6,-232e-6,232e-6,-231e-6,231e-6,-23e-5,23e-5,-23e-5,229e-6,-229e-6,228e-6,-228e-6,227e-6,-227e-6,226e-6,-226e-6,226e-6,-225e-6,225e-6,-224e-6,224e-6,-223e-6,223e-6,-222e-6,222e-6,-222e-6,221e-6,-221e-6,22e-5,-22e-5,219e-6,-219e-6,218e-6,-218e-6,218e-6,-217e-6,217e-6,-216e-6,216e-6,-215e-6,215e-6,-214e-6,214e-6,-214e-6,213e-6,-213e-6,212e-6,-212e-6,211e-6,-211e-6,21e-5,-21e-5,209e-6,-209e-6,209e-6,-208e-6,208e-6,-207e-6,207e-6,-206e-6,206e-6,-205e-6,205e-6,-204e-6,204e-6,-203e-6,203e-6,-203e-6,202e-6,-202e-6,201e-6,-201e-6,2e-4,-2e-4,199e-6,-199e-6,198e-6,-198e-6,197e-6,-197e-6,197e-6,-196e-6,196e-6,-195e-6,195e-6,-194e-6,194e-6,-193e-6,193e-6,-192e-6,192e-6,-191e-6,191e-6,-19e-5,19e-5,-189e-6,189e-6,-188e-6,188e-6,-188e-6,187e-6,-187e-6,186e-6,-186e-6,185e-6,-185e-6,184e-6,-184e-6,183e-6,-183e-6,182e-6,-182e-6,181e-6,-181e-6,18e-5,-18e-5,179e-6,-179e-6,178e-6,-178e-6,177e-6,-177e-6,176e-6,-176e-6,175e-6,-175e-6,174e-6,-174e-6,173e-6,-173e-6,172e-6,-172e-6,171e-6,-171e-6,17e-5,-17e-5,169e-6,-169e-6,168e-6,-168e-6,167e-6,-167e-6,166e-6,-166e-6,165e-6,-165e-6,164e-6,-164e-6,163e-6,-163e-6,162e-6,-162e-6,157e-6,-156e-6,156e-6,-155e-6,155e-6,-154e-6,154e-6,-153e-6,153e-6,-152e-6,152e-6,-151e-6,151e-6,-15e-5,15e-5,-149e-6,149e-6,-148e-6,148e-6,-147e-6,147e-6,-146e-6,146e-6,-145e-6,145e-6,-144e-6,144e-6,-143e-6,143e-6,-142e-6,142e-6,-141e-6,141e-6,-14e-5,139e-6,-139e-6,138e-6,-138e-6,137e-6,-137e-6,136e-6,-136e-6,135e-6,-135e-6,134e-6,-134e-6,133e-6,-133e-6,132e-6,-132e-6,131e-6,-131e-6,13e-5,-13e-5,129e-6,-129e-6,128e-6,-128e-6,127e-6,-126e-6,126e-6,-125e-6,125e-6,-124e-6,124e-6,-123e-6,123e-6,-122e-6,122e-6,-121e-6,121e-6,-12e-5,12e-5,-119e-6,119e-6,-118e-6,117e-6,-117e-6,116e-6,-116e-6,115e-6,-115e-6,114e-6,-114e-6,113e-6,-113e-6,112e-6,-112e-6,111e-6,-11e-5,11e-5,-109e-6,109e-6,-108e-6,108e-6,-107e-6,107e-6,-106e-6,105e-6,-105e-6,104e-6,-104e-6,103e-6,-103e-6,102e-6,-102e-6,101e-6,-101e-6,1e-4,-99e-6,99e-6,-98e-6,98e-6,-97e-6,97e-6,-96e-6,96e-6,-95e-6,94e-6,-94e-6,93e-6,-93e-6,92e-6,-92e-6,91e-6,-9e-5,9e-5,-89e-6,89e-6,-88e-6,77e-6,-77e-6,76e-6,-76e-6,75e-6,-75e-6,74e-6,-74e-6,73e-6,-73e-6,72e-6,-72e-6,71e-6,-71e-6,7e-5,-7e-5,69e-6,-69e-6,68e-6,-68e-6,67e-6,-67e-6,66e-6,-66e-6,65e-6,-65e-6,64e-6,-64e-6,63e-6,-63e-6,62e-6,-62e-6,61e-6,-61e-6,6e-5,-6e-5,59e-6,-59e-6,58e-6,-58e-6,57e-6,-57e-6,56e-6,-56e-6,55e-6,-54e-6,54e-6,-53e-6,53e-6,-52e-6,52e-6,-51e-6,51e-6,-5e-5,5e-5,-49e-6,49e-6,-48e-6,48e-6,-47e-6,47e-6,-46e-6,46e-6,-45e-6,45e-6,-44e-6,43e-6,-43e-6,42e-6,-42e-6,41e-6,-41e-6,4e-5,-4e-5,39e-6,-39e-6,38e-6,-38e-6,37e-6,-37e-6,36e-6,-36e-6,35e-6,-34e-6,34e-6,-33e-6,33e-6,-32e-6,32e-6,-31e-6,31e-6,-3e-5,3e-5,-29e-6,29e-6,-28e-6,28e-6,-27e-6,26e-6,-26e-6,25e-6,-25e-6,24e-6,-24e-6,23e-6,-23e-6,22e-6,-22e-6,21e-6,-21e-6,2e-5,-19e-6,19e-6,-18e-6,18e-6,-17e-6,17e-6,-16e-6,16e-6,-15e-6,15e-6,-14e-6,14e-6,-13e-6,12e-6,-12e-6,11e-6,-11e-6,1e-5,-1e-5,9e-6,-9e-6,8e-6,-8e-6,7e-6,-6e-6,6e-6,-5e-6,5e-6,-4e-6,4e-6,-3e-6,3e-6,-2e-6,2e-6,-1e-6,1e-6,0,-1e-6,1e-6,-2e-6,2e-6,-3e-6,3e-6,-4e-6,4e-6,-5e-6,5e-6,-6e-6,6e-6,-7e-6,8e-6,-8e-6,9e-6,-9e-6,1e-5,-1e-5,11e-6,-11e-6,12e-6,-12e-6,13e-6,-14e-6,14e-6,-15e-6,15e-6,-16e-6,16e-6,-17e-6,17e-6,-18e-6,18e-6,-19e-6,19e-6,-2e-5,21e-6,-21e-6,22e-6,-22e-6,23e-6,-23e-6,22e-6,-22e-6,23e-6,-23e-6,24e-6,-24e-6,25e-6,-25e-6,26e-6,-26e-6,27e-6,-27e-6,28e-6,-28e-6,28e-6,-29e-6,29e-6,-3e-5,3e-5,-31e-6,31e-6,-32e-6,32e-6,-33e-6,33e-6,-34e-6,34e-6,-35e-6,35e-6,-36e-6,36e-6,-37e-6,37e-6,-38e-6,38e-6,-39e-6,39e-6,-4e-5,4e-5,-41e-6,41e-6,-41e-6,42e-6,-42e-6,43e-6,-43e-6,44e-6,-44e-6,45e-6,-45e-6,46e-6,-46e-6,47e-6,-47e-6,48e-6,-48e-6,49e-6,-49e-6,5e-5,-5e-5,5e-5,-51e-6,51e-6,-52e-6,52e-6,-53e-6,53e-6,-54e-6,54e-6,-55e-6,55e-6,-56e-6,56e-6,-56e-6,57e-6,-57e-6,58e-6,-58e-6,59e-6,-59e-6,6e-5,-6e-5,61e-6,-61e-6,62e-6,-62e-6,62e-6,-63e-6,63e-6,-64e-6,64e-6,-65e-6,65e-6,-66e-6,66e-6,-66e-6,67e-6,-67e-6,68e-6,-68e-6,69e-6,-69e-6,7e-5,-7e-5,7e-5,-71e-6,71e-6,-72e-6,72e-6,-73e-6,73e-6,-73e-6,74e-6,-74e-6,75e-6,-75e-6,76e-6,-76e-6,76e-6,-77e-6,77e-6,-78e-6,78e-6,-79e-6,79e-6,-79e-6,8e-5,-8e-5,81e-6,-81e-6,81e-6,-82e-6,82e-6,-83e-6,83e-6,-84e-6,84e-6,-84e-6,85e-6,-85e-6,86e-6,-86e-6,86e-6,-87e-6,87e-6,-88e-6,88e-6,-88e-6,89e-6,-89e-6,9e-5,-9e-5,9e-5,-85e-6,86e-6,-86e-6,86e-6,-87e-6,87e-6,-87e-6,88e-6,-88e-6,89e-6,-89e-6,89e-6,-9e-5,9e-5,-9e-5,91e-6,-91e-6,91e-6,-92e-6,92e-6,-92e-6,93e-6,-93e-6,93e-6,-94e-6,94e-6,-94e-6,95e-6,-95e-6,95e-6,-96e-6,96e-6,-96e-6,97e-6,-97e-6,97e-6,-98e-6,98e-6,-98e-6,99e-6,-99e-6,99e-6,-1e-4,1e-4,-1e-4,101e-6,-101e-6,101e-6,-101e-6,102e-6,-102e-6,102e-6,-103e-6,103e-6,-103e-6,104e-6,-104e-6,104e-6,-104e-6,105e-6,-105e-6,105e-6,-106e-6,106e-6,-106e-6,106e-6,-107e-6,107e-6,-107e-6,107e-6,-108e-6,108e-6,-108e-6,109e-6,-109e-6,109e-6,-109e-6,11e-5,-11e-5,11e-5,-11e-5,111e-6,-111e-6,111e-6,-111e-6,112e-6,-112e-6,112e-6,-112e-6,113e-6,-113e-6,113e-6,-113e-6,114e-6,-114e-6,114e-6,-114e-6,115e-6,-115e-6,115e-6,-115e-6,115e-6,-116e-6,116e-6,-116e-6,116e-6,-116e-6,117e-6,-117e-6,117e-6,-117e-6,118e-6,-118e-6,118e-6,-118e-6,118e-6,-119e-6,119e-6,-119e-6,119e-6,-119e-6,119e-6,-12e-5,12e-5,-12e-5,12e-5,-12e-5,121e-6,-121e-6,121e-6,-121e-6,121e-6,-121e-6,122e-6,-122e-6,122e-6,-122e-6,122e-6,-122e-6,122e-6,-123e-6,123e-6,-123e-6,123e-6,-123e-6,123e-6,-123e-6,124e-6,-124e-6,124e-6,-124e-6,124e-6,-124e-6,124e-6,-124e-6,125e-6,-125e-6,125e-6,-125e-6,125e-6,-125e-6,125e-6,-125e-6,125e-6,-126e-6,126e-6,-126e-6,126e-6,-126e-6,126e-6,-126e-6,126e-6,-126e-6,126e-6,-126e-6,127e-6,-127e-6,127e-6,-127e-6,127e-6,-127e-6,127e-6,-127e-6,127e-6,-127e-6,127e-6,-127e-6,127e-6,-127e-6,127e-6,-127e-6,127e-6,-127e-6,127e-6,-128e-6,128e-6,-128e-6,128e-6,-128e-6,128e-6,-128e-6,11e-5,-11e-5,11e-5,-11e-5,11e-5,-11e-5,11e-5,-11e-5,11e-5,-11e-5,11e-5,-11e-5,11e-5,-11e-5,11e-5,-11e-5,11e-5,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-108e-6,108e-6,-108e-6,108e-6,-108e-6,108e-6,-108e-6,108e-6,-108e-6,108e-6,-108e-6,108e-6,-107e-6,107e-6,-107e-6,107e-6,-107e-6,107e-6,-107e-6,107e-6,-107e-6,107e-6,-106e-6,106e-6,-106e-6,106e-6,-106e-6,106e-6,-106e-6,106e-6,-105e-6,105e-6,-105e-6,105e-6,-105e-6,105e-6,-105e-6,105e-6,-104e-6,104e-6,-104e-6,104e-6,-104e-6,104e-6,-103e-6,103e-6,-103e-6,103e-6,-103e-6,103e-6,-102e-6,102e-6,-102e-6,102e-6,-102e-6,102e-6,-101e-6,101e-6,-101e-6,101e-6,-101e-6,1e-4,-1e-4,1e-4,-1e-4,1e-4,-99e-6,99e-6,-99e-6,99e-6,-99e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-97e-6,97e-6,-97e-6,97e-6,-96e-6,96e-6,-96e-6,96e-6,-95e-6,95e-6,-95e-6,95e-6,-94e-6,94e-6,-94e-6,94e-6,-93e-6,93e-6,-93e-6,93e-6,-92e-6,92e-6,-92e-6,92e-6,-91e-6,91e-6,-91e-6,91e-6,-9e-5,9e-5,-9e-5,89e-6,-89e-6,89e-6,-89e-6,88e-6,-88e-6,88e-6,-87e-6,87e-6,-87e-6,86e-6,-86e-6,86e-6,-86e-6,85e-6,-85e-6,85e-6,-84e-6,84e-6,-84e-6,83e-6,-83e-6,83e-6,-82e-6,82e-6,-82e-6,81e-6,-81e-6,81e-6,-8e-5,8e-5,-8e-5,79e-6,-79e-6,79e-6,-78e-6,78e-6,-77e-6,77e-6,-77e-6,76e-6,-76e-6,76e-6,-75e-6,75e-6,-75e-6,74e-6,-74e-6,73e-6,-73e-6,73e-6,-72e-6,72e-6,-72e-6,71e-6,-71e-6,7e-5,-7e-5,7e-5,-69e-6,69e-6,-68e-6,68e-6,-68e-6,67e-6,-67e-6,66e-6,-66e-6,66e-6,-65e-6,65e-6,-64e-6,64e-6,-64e-6,63e-6,-63e-6,62e-6,-62e-6,61e-6,-61e-6,61e-6,-6e-5,6e-5,-59e-6,59e-6,-58e-6,58e-6,-58e-6,57e-6,-57e-6,56e-6,-56e-6,55e-6,-55e-6,55e-6,-54e-6,54e-6,-53e-6,53e-6,-52e-6,52e-6,-51e-6,51e-6,-5e-5,5e-5,-5e-5,49e-6,-49e-6,48e-6,-48e-6,47e-6,-47e-6,46e-6,-46e-6,45e-6,-45e-6,44e-6,-44e-6,43e-6,-43e-6,43e-6,-42e-6,42e-6,-41e-6,41e-6,-4e-5,4e-5,-39e-6,39e-6,-38e-6,38e-6,-37e-6,37e-6,-36e-6,36e-6,-35e-6,35e-6,-34e-6,34e-6,-33e-6,33e-6,-32e-6,32e-6,-31e-6,31e-6,-3e-5,3e-5,-29e-6,29e-6,-28e-6,28e-6,-27e-6,27e-6,-26e-6,26e-6,-25e-6,25e-6,-24e-6,24e-6,-23e-6,23e-6,-22e-6,22e-6,-21e-6,21e-6,-2e-5,2e-5,-19e-6,19e-6,-18e-6,18e-6,-17e-6,17e-6,-16e-6,15e-6,-15e-6,14e-6,-14e-6,13e-6,-13e-6,12e-6,-12e-6,11e-6,-11e-6,1e-5,-1e-5,9e-6,-9e-6,8e-6,-8e-6,7e-6,-7e-6,6e-6,-6e-6,5e-6,-5e-6,4e-6,-3e-6,3e-6,-2e-6,2e-6,-1e-6,1e-6,0,0,1e-6,-1e-6,2e-6,-2e-6,3e-6,-3e-6,4e-6,-4e-6,5e-6,-5e-6,6e-6,-6e-6,7e-6,-8e-6,8e-6,-9e-6,9e-6,-1e-5,1e-5,-11e-6,11e-6,-12e-6,12e-6,-13e-6,13e-6,-14e-6,14e-6,-15e-6,15e-6,-16e-6,16e-6,-17e-6,17e-6,-18e-6,18e-6,-19e-6,19e-6,-2e-5,21e-6,-21e-6,22e-6,-22e-6,23e-6,-23e-6,24e-6,-24e-6,25e-6,-25e-6,26e-6,-26e-6,27e-6,-27e-6,28e-6,-28e-6,29e-6,-29e-6,3e-5,-3e-5,31e-6,-31e-6,32e-6,-32e-6,33e-6,-33e-6,34e-6,-34e-6,35e-6,-35e-6,36e-6,-36e-6,37e-6,-37e-6,38e-6,-38e-6,38e-6,-39e-6,39e-6,-4e-5,4e-5,-41e-6,41e-6,-42e-6,42e-6,-43e-6,43e-6,-44e-6,44e-6,-45e-6,45e-6,-46e-6,46e-6,-46e-6,47e-6,-47e-6,48e-6,-48e-6,49e-6,-49e-6,5e-5,-5e-5,51e-6,-51e-6,51e-6,-52e-6,52e-6,-53e-6,53e-6,-54e-6,54e-6,-54e-6,55e-6,-55e-6,56e-6,-56e-6,57e-6,-57e-6,57e-6,-58e-6,58e-6,-59e-6,59e-6,-6e-5,6e-5,-6e-5,61e-6,-61e-6,62e-6,-62e-6,62e-6,-63e-6,63e-6,-64e-6,64e-6,-64e-6,65e-6,-65e-6,65e-6,-66e-6,66e-6,-67e-6,67e-6,-56e-6,56e-6,-57e-6,57e-6,-57e-6,57e-6,-58e-6,58e-6,-58e-6,59e-6,-59e-6,59e-6,-59e-6,6e-5,-6e-5,6e-5,-61e-6,61e-6,-61e-6,61e-6,-62e-6,62e-6,-62e-6,62e-6,-63e-6,63e-6,-63e-6,64e-6,-64e-6,64e-6,-64e-6,65e-6,-65e-6,65e-6,-65e-6,65e-6,-66e-6,66e-6,-66e-6,66e-6,-67e-6,67e-6,-67e-6,67e-6,-67e-6,68e-6,-68e-6,68e-6,-68e-6,69e-6,-69e-6,69e-6,-69e-6,69e-6,-7e-5,7e-5,-7e-5,7e-5,-7e-5,7e-5,-71e-6,71e-6,-71e-6,71e-6,-71e-6,71e-6,-72e-6,72e-6,-72e-6,72e-6,-72e-6,72e-6,-73e-6,73e-6,-73e-6,73e-6,-73e-6,73e-6,-73e-6,73e-6,-74e-6,74e-6,-74e-6,74e-6,-74e-6,74e-6,-74e-6,74e-6,-75e-6,75e-6,-75e-6,75e-6,-75e-6,75e-6,-75e-6,75e-6,-75e-6,75e-6,-75e-6,76e-6,-76e-6,76e-6,-76e-6,76e-6,-76e-6,76e-6,-76e-6,76e-6,-76e-6,76e-6,-76e-6,76e-6,-76e-6,76e-6,-76e-6,76e-6,-76e-6,76e-6,-76e-6,76e-6,-76e-6,76e-6,-76e-6,76e-6,-76e-6,77e-6,-77e-6,76e-6,-76e-6,76e-6,-76e-6,76e-6],
imag:[0,.493552,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,2e-6,-2e-6,2e-6,-2e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,5e-6,-5e-6,5e-6,-5e-6,6e-6,-5e-6,6e-6,-6e-6,6e-6,-6e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,8e-6,-8e-6,8e-6,-8e-6,9e-6,-9e-6,9e-6,-9e-6,1e-5,-9e-6,9e-6,-9e-6,9e-6,-1e-5,1e-5,-1e-5,1e-5,-9e-6,9e-6,-9e-6,1e-5,-1e-5,1e-5,-1e-5,1e-5,-11e-6,11e-6,-11e-6,1e-5,-1e-5,1e-5,-11e-6,11e-6,-11e-6,11e-6,-11e-6,12e-6,-12e-6,12e-6,-12e-6,12e-6,-13e-6,13e-6,-13e-6,13e-6,-12e-6,12e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,16e-6,-16e-6,16e-6,-16e-6,16e-6,-17e-6,17e-6,-17e-6,16e-6,-16e-6,16e-6,-16e-6,17e-6,-17e-6,17e-6,-17e-6,17e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-2e-5,2e-5,-2e-5,2e-5,-2e-5,21e-6,-21e-6,21e-6,-21e-6,21e-6,-22e-6,22e-6,-22e-6,22e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,24e-6,-24e-6,24e-6,-24e-6,25e-6,-25e-6,25e-6,-25e-6,26e-6,-26e-6,26e-6,-26e-6,26e-6,-27e-6,27e-6,-27e-6,27e-6,-28e-6,28e-6,-28e-6,28e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,3e-5,-3e-5,3e-5,-3e-5,31e-6,-31e-6,31e-6,-31e-6,32e-6,-32e-6,32e-6,-32e-6,33e-6,-33e-6,33e-6,-33e-6,34e-6,-34e-6,34e-6,-34e-6,35e-6,-35e-6,35e-6,-35e-6,36e-6,-36e-6,35e-6,-35e-6,36e-6,-36e-6,36e-6,-36e-6,37e-6,-37e-6,37e-6,-37e-6,38e-6,-38e-6,38e-6,-38e-6,39e-6,-39e-6,39e-6,-39e-6,4e-5,-4e-5,4e-5,-4e-5,41e-6,-41e-6,41e-6,-42e-6,42e-6,-42e-6,42e-6,-43e-6,43e-6,-43e-6,43e-6,-44e-6,44e-6,-44e-6,44e-6,-45e-6,45e-6,-45e-6,46e-6,-46e-6,46e-6,-46e-6,47e-6,-47e-6,47e-6,-47e-6,48e-6,-48e-6,48e-6,-49e-6,49e-6,-49e-6,49e-6,-5e-5,5e-5,-5e-5,51e-6,-51e-6,51e-6,-62e-6,62e-6,-62e-6,63e-6,-63e-6,63e-6,-64e-6,64e-6,-64e-6,65e-6,-65e-6,66e-6,-66e-6,66e-6,-63e-6,63e-6,-63e-6,64e-6,-64e-6,64e-6,-65e-6,65e-6,-65e-6,66e-6,-66e-6,66e-6,-67e-6,67e-6,-67e-6,68e-6,-68e-6,66e-6,-66e-6,67e-6,-67e-6,67e-6,-68e-6,68e-6,-68e-6,69e-6,-69e-6,69e-6,-7e-5,7e-5,-7e-5,71e-6,-71e-6,71e-6,-72e-6,72e-6,-72e-6,73e-6,-73e-6,73e-6,-74e-6,68e-6,-68e-6,68e-6,-68e-6,69e-6,-69e-6,69e-6,-7e-5,7e-5,-7e-5,71e-6,-71e-6,71e-6,-72e-6,72e-6,-72e-6,73e-6,-73e-6,73e-6,-73e-6,74e-6,-74e-6,74e-6,-75e-6,75e-6,-75e-6,76e-6,-76e-6,76e-6,-77e-6,77e-6,-73e-6,73e-6,-73e-6,74e-6,-74e-6,74e-6,-74e-6,75e-6,-75e-6,75e-6,-76e-6,76e-6,-76e-6,77e-6,-77e-6,77e-6,-78e-6,78e-6,-78e-6,78e-6,-79e-6,79e-6,-79e-6,8e-5,-8e-5,8e-5,-81e-6,76e-6,-76e-6,77e-6,-77e-6,77e-6,-78e-6,78e-6,-78e-6,78e-6,-79e-6,79e-6,-79e-6,8e-5,-8e-5,8e-5,-8e-5,81e-6,-81e-6,81e-6,-82e-6,82e-6,-82e-6,83e-6,-83e-6,83e-6,-83e-6,81e-6,-81e-6,82e-6,-82e-6,82e-6,-83e-6,83e-6,-83e-6,83e-6,-84e-6,84e-6,-84e-6,85e-6,-85e-6,85e-6,-86e-6,86e-6,-86e-6,86e-6,-87e-6,87e-6,-87e-6,88e-6,-88e-6,88e-6,-88e-6,89e-6,-89e-6,89e-6,-9e-5,9e-5,-9e-5,91e-6,-91e-6,91e-6,-91e-6,92e-6,-92e-6,92e-6,-93e-6,93e-6,-93e-6,93e-6,-94e-6,94e-6,-94e-6,95e-6,-95e-6,95e-6,-96e-6,96e-6,-96e-6,96e-6,-97e-6,97e-6,-97e-6,98e-6,-98e-6,98e-6,-99e-6,99e-6,-99e-6,99e-6,-1e-4,1e-4,-1e-4,101e-6,-101e-6,101e-6,-102e-6,102e-6,-102e-6,102e-6,-103e-6,103e-6,-103e-6,104e-6,-104e-6,104e-6,-105e-6,105e-6,-105e-6,105e-6,-106e-6,106e-6,-106e-6,107e-6,-107e-6,107e-6,-108e-6,108e-6,-108e-6,108e-6,-109e-6,109e-6,-109e-6,11e-5,-11e-5,11e-5,-111e-6,111e-6,-111e-6,112e-6,-112e-6,112e-6,-112e-6,113e-6,-113e-6,113e-6,-114e-6,114e-6,-114e-6,115e-6,-115e-6,115e-6,-115e-6,116e-6,-116e-6,116e-6,-117e-6,117e-6,-117e-6,118e-6,-118e-6,118e-6,-119e-6,119e-6,-119e-6,119e-6,-12e-5,12e-5,-12e-5,121e-6,-121e-6,121e-6,-122e-6,122e-6,-122e-6,122e-6,-123e-6,123e-6,-123e-6,124e-6,-124e-6,124e-6,-125e-6,125e-6,-125e-6,126e-6,-126e-6,126e-6,-126e-6,127e-6,-127e-6,127e-6,-128e-6,128e-6,-128e-6,129e-6,-129e-6,129e-6,-129e-6,13e-5,-13e-5,13e-5,-131e-6,131e-6,-131e-6,132e-6,-132e-6,132e-6,-132e-6,133e-6,-133e-6,133e-6,-134e-6,134e-6,-134e-6,135e-6,-135e-6,135e-6,-136e-6,136e-6,-136e-6,136e-6,-137e-6,137e-6,-137e-6,138e-6,-138e-6,138e-6,-139e-6,139e-6,-139e-6,139e-6,-14e-5,14e-5,-14e-5,141e-6,-141e-6,141e-6,-141e-6,142e-6,-142e-6,142e-6,-143e-6,143e-6,-143e-6,144e-6,-144e-6,144e-6,-144e-6,145e-6,-145e-6,145e-6,-146e-6,146e-6,-146e-6,147e-6,-147e-6,147e-6,-147e-6,148e-6,-148e-6,148e-6,-149e-6,149e-6,-149e-6,149e-6,-15e-5,15e-5,-15e-5,151e-6,-151e-6,151e-6,-151e-6,152e-6,-152e-6,152e-6,-153e-6,153e-6,-153e-6,153e-6,-154e-6,154e-6,-154e-6,155e-6,-155e-6,155e-6,-155e-6,156e-6,-156e-6,156e-6,-157e-6,157e-6,-157e-6,157e-6,-158e-6,158e-6,-158e-6,159e-6,-159e-6,159e-6,-159e-6,16e-5,-16e-5,16e-5,-161e-6,161e-6,-161e-6,161e-6,-162e-6,162e-6,-162e-6,163e-6,-163e-6,163e-6,-163e-6,164e-6,-164e-6,164e-6,-164e-6,165e-6,-165e-6,165e-6,-166e-6,166e-6,-166e-6,166e-6,-167e-6,167e-6,-167e-6,167e-6,-168e-6,168e-6,-168e-6,168e-6,-169e-6,169e-6,-169e-6,17e-5,-17e-5,17e-5,-17e-5,171e-6,-171e-6,171e-6,-171e-6,172e-6,-172e-6,172e-6,-172e-6,173e-6,-173e-6,173e-6,-173e-6,174e-6,-174e-6,174e-6,-174e-6,175e-6,-175e-6,175e-6,-175e-6,176e-6,-176e-6,176e-6,-176e-6,177e-6,-177e-6,177e-6,-177e-6,178e-6,-178e-6,178e-6,-178e-6,173e-6,-173e-6,174e-6,-174e-6,174e-6,-174e-6,175e-6,-175e-6,175e-6,-175e-6,176e-6,-176e-6,176e-6,-176e-6,176e-6,-177e-6,177e-6,-177e-6,177e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,179e-6,-179e-6,179e-6,-179e-6,18e-5,-18e-5,18e-5,-18e-5,18e-5,-181e-6,181e-6,-181e-6,181e-6,-181e-6,182e-6,-182e-6,182e-6,-182e-6,182e-6,-183e-6,183e-6,-183e-6,183e-6,-183e-6,184e-6,-184e-6,184e-6,-184e-6,184e-6,-185e-6,185e-6,-185e-6,185e-6,-185e-6,186e-6,-186e-6,186e-6,-186e-6,186e-6,-187e-6,187e-6,-187e-6,187e-6,-187e-6,188e-6,-188e-6,188e-6,-188e-6,188e-6,-188e-6,189e-6,-189e-6,189e-6,-189e-6,189e-6,-189e-6,19e-5,-19e-5,19e-5,-19e-5,19e-5,-19e-5,191e-6,-191e-6,191e-6,-191e-6,191e-6,-191e-6,192e-6,-192e-6,192e-6,-192e-6,192e-6,-192e-6,193e-6,-193e-6,193e-6,-193e-6,193e-6,-193e-6,193e-6,-194e-6,194e-6,-194e-6,194e-6,-194e-6,194e-6,-194e-6,195e-6,-195e-6,195e-6,-195e-6,195e-6,-195e-6,195e-6,-196e-6,196e-6,-196e-6,196e-6,-196e-6,196e-6,-196e-6,196e-6,-197e-6,197e-6,-197e-6,174e-6,-174e-6,174e-6,-174e-6,175e-6,-175e-6,175e-6,-175e-6,175e-6,-175e-6,175e-6,-175e-6,175e-6,-175e-6,176e-6,-176e-6,176e-6,-176e-6,176e-6,-176e-6,176e-6,-176e-6,176e-6,-176e-6,176e-6,-176e-6,177e-6,-177e-6,177e-6,-177e-6,177e-6,-177e-6,177e-6,-177e-6,177e-6,-177e-6,177e-6,-177e-6,177e-6,-177e-6,177e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,179e-6,-179e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,177e-6,-177e-6,177e-6,-177e-6,177e-6,-177e-6,177e-6,-177e-6,177e-6,-177e-6,177e-6,-177e-6,177e-6,-176e-6,176e-6,-176e-6,176e-6,-176e-6,176e-6,-176e-6,176e-6,-176e-6,176e-6,-176e-6,175e-6,-175e-6,175e-6,-175e-6,175e-6,-175e-6,175e-6,-175e-6,175e-6,-174e-6,174e-6,-174e-6,174e-6,-174e-6,174e-6,-174e-6,174e-6,-173e-6,173e-6,-173e-6,173e-6,-173e-6,173e-6,-173e-6,173e-6,-172e-6,172e-6,-172e-6,172e-6,-172e-6,172e-6,-171e-6,171e-6,-156e-6,156e-6,-156e-6,156e-6,-156e-6,155e-6,-155e-6,155e-6,-155e-6,155e-6,-155e-6,154e-6,-154e-6,154e-6,-154e-6,154e-6,-154e-6,153e-6,-153e-6,153e-6,-153e-6,153e-6,-153e-6,152e-6,-152e-6,152e-6,-152e-6,152e-6,-152e-6,151e-6,-151e-6,151e-6,-151e-6,151e-6,-15e-5,15e-5,-15e-5,15e-5,-15e-5,149e-6,-149e-6,149e-6,-149e-6,149e-6,-148e-6,148e-6,-148e-6,148e-6,-148e-6,147e-6,-147e-6,147e-6,-147e-6,146e-6,-146e-6,146e-6,-146e-6,146e-6,-145e-6,145e-6,-145e-6,145e-6,-144e-6,144e-6,-144e-6,144e-6,-143e-6,143e-6,-143e-6,143e-6,-142e-6,142e-6,-142e-6,142e-6,-141e-6,141e-6,-141e-6,141e-6,-14e-5,14e-5,-14e-5,14e-5,-139e-6,139e-6,-139e-6,138e-6,-138e-6,138e-6,-138e-6,137e-6,-137e-6,137e-6,-137e-6,136e-6,-136e-6,136e-6,-135e-6,135e-6,-135e-6,134e-6,-134e-6,134e-6,-134e-6,133e-6,-133e-6,133e-6,-132e-6,132e-6,-132e-6,131e-6,-131e-6,131e-6,-131e-6,13e-5,-13e-5,13e-5,-129e-6,129e-6,-129e-6,128e-6,-128e-6,128e-6,-127e-6,127e-6,-127e-6,126e-6,-126e-6,126e-6,-125e-6,125e-6,-125e-6,124e-6,-124e-6,124e-6,-123e-6,123e-6,-122e-6,122e-6,-122e-6,121e-6,-121e-6,121e-6,-12e-5,12e-5,-12e-5,119e-6,-119e-6,118e-6,-118e-6,118e-6,-117e-6,117e-6,-117e-6,109e-6,-109e-6,109e-6,-108e-6,108e-6,-108e-6,107e-6,-107e-6,106e-6,-106e-6,106e-6,-105e-6,105e-6,-105e-6,104e-6,-104e-6,103e-6,-103e-6,103e-6,-102e-6,102e-6,-102e-6,101e-6,-101e-6,1e-4,-1e-4,1e-4,-99e-6,99e-6,-98e-6,98e-6,-98e-6,97e-6,-97e-6,96e-6,-96e-6,96e-6,-95e-6,95e-6,-94e-6,94e-6,-94e-6,93e-6,-93e-6,92e-6,-92e-6,91e-6,-91e-6,91e-6,-9e-5,9e-5,-89e-6,89e-6,-89e-6,88e-6,-88e-6,87e-6,-87e-6,86e-6,-86e-6,85e-6,-85e-6,85e-6,-84e-6,84e-6,-83e-6,83e-6,-82e-6,82e-6,-82e-6,81e-6,-81e-6,8e-5,-8e-5,79e-6,-79e-6,78e-6,-78e-6,77e-6,-77e-6,77e-6,-76e-6,76e-6,-75e-6,75e-6,-74e-6,74e-6,-73e-6,73e-6,-72e-6,72e-6,-71e-6,71e-6,-7e-5,7e-5,-69e-6,69e-6,-69e-6,68e-6,-68e-6,67e-6,-67e-6,66e-6,-66e-6,65e-6,-65e-6,64e-6,-64e-6,63e-6,-63e-6,62e-6,-62e-6,61e-6,-61e-6,6e-5,-6e-5,59e-6,-59e-6,58e-6,-58e-6,57e-6,-57e-6,56e-6,-56e-6,55e-6,-55e-6,54e-6,-54e-6,53e-6,-53e-6,52e-6,-52e-6,51e-6,-51e-6,5e-5,-5e-5,49e-6,-49e-6,48e-6,-48e-6,47e-6,-47e-6,46e-6,-46e-6,45e-6,-45e-6,44e-6,-43e-6,43e-6,-42e-6,42e-6,-41e-6,41e-6,-4e-5,4e-5,-39e-6,39e-6,-38e-6,38e-6,-37e-6,37e-6,-36e-6,36e-6,-35e-6,34e-6,-34e-6,33e-6,-33e-6,32e-6,-32e-6,31e-6,-31e-6,3e-5,-3e-5,29e-6,-29e-6,28e-6,-28e-6,27e-6,-26e-6,26e-6,-25e-6,25e-6,-24e-6,24e-6,-23e-6,23e-6,-22e-6,22e-6,-21e-6,2e-5,-2e-5,19e-6,-19e-6,18e-6,-18e-6,17e-6,-17e-6,16e-6,-16e-6,15e-6,-12e-6,12e-6,-11e-6,11e-6,-1e-5,1e-5,-1e-5,9e-6,-9e-6,8e-6,-8e-6,7e-6,-7e-6,6e-6,-6e-6,5e-6,-5e-6,4e-6,-4e-6,3e-6,-3e-6,2e-6,-2e-6,1e-6,-1e-6,1e-6,0,0,1e-6,-1e-6,2e-6,-2e-6,3e-6,-3e-6,4e-6,-4e-6,5e-6,-5e-6,6e-6,-6e-6,7e-6,-7e-6,8e-6,-8e-6,8e-6,-9e-6,9e-6,-1e-5,1e-5,-11e-6,11e-6,-12e-6,12e-6,-13e-6,13e-6,-14e-6,14e-6,-15e-6,15e-6,-16e-6,16e-6,-16e-6,17e-6,-17e-6,18e-6,-18e-6,19e-6,-19e-6,2e-5,-2e-5,21e-6,-21e-6,22e-6,-22e-6,23e-6,-23e-6,23e-6,-24e-6,24e-6,-25e-6,25e-6,-26e-6,26e-6,-27e-6,27e-6,-28e-6,28e-6,-28e-6,29e-6,-29e-6,3e-5,-3e-5,31e-6,-31e-6,32e-6,-32e-6,33e-6,-33e-6,33e-6,-34e-6,34e-6,-35e-6,35e-6,-36e-6,36e-6,-37e-6,37e-6,-38e-6,38e-6,-38e-6,39e-6,-39e-6,4e-5,-4e-5,41e-6,-41e-6,41e-6,-42e-6,42e-6,-43e-6,43e-6,-44e-6,44e-6,-44e-6,45e-6,-45e-6,46e-6,-46e-6,47e-6,-47e-6,47e-6,-48e-6,48e-6,-49e-6,49e-6,-5e-5,5e-5,-5e-5,51e-6,-51e-6,52e-6,-52e-6,52e-6,-53e-6,53e-6,-54e-6,54e-6,-55e-6,55e-6,-55e-6,56e-6,-56e-6,57e-6,-57e-6,57e-6,-58e-6,58e-6,-58e-6,59e-6,-59e-6,6e-5,-6e-5,6e-5,-61e-6,61e-6,-62e-6,62e-6,-62e-6,63e-6,-63e-6,63e-6,-64e-6,64e-6,-65e-6,65e-6,-65e-6,66e-6,-66e-6,66e-6,-67e-6,67e-6,-68e-6,68e-6,-68e-6,69e-6,-69e-6,69e-6,-7e-5,7e-5,-7e-5,71e-6,-71e-6,71e-6,-72e-6,72e-6,-72e-6,73e-6,-73e-6,73e-6,-74e-6,74e-6,-74e-6,75e-6,-75e-6,75e-6,-76e-6,76e-6,-76e-6,77e-6,-77e-6,77e-6,-78e-6,78e-6,-78e-6,78e-6,-79e-6,79e-6,-79e-6,8e-5,-8e-5,8e-5,-8e-5,81e-6,-81e-6,81e-6,-82e-6,82e-6,-82e-6,82e-6,-83e-6,83e-6,-83e-6,84e-6,-84e-6,84e-6,-84e-6,85e-6,-85e-6,85e-6,-85e-6,86e-6,-86e-6,86e-6,-86e-6,87e-6,-87e-6,87e-6,-87e-6,88e-6,-88e-6,88e-6,-88e-6,88e-6,-89e-6,89e-6,-89e-6,89e-6,-9e-5,9e-5,-9e-5,9e-5,-9e-5,91e-6,-91e-6,91e-6,-91e-6,91e-6,-92e-6,92e-6,-92e-6,92e-6,-92e-6,93e-6,-93e-6,93e-6,-93e-6,93e-6,-93e-6,94e-6,-94e-6,94e-6,-94e-6,94e-6,-94e-6,94e-6,-95e-6,95e-6,-95e-6,95e-6,-95e-6,95e-6,-95e-6,96e-6,-96e-6,96e-6,-96e-6,96e-6,-96e-6,96e-6,-96e-6,97e-6,-97e-6,97e-6,-97e-6,97e-6,-97e-6,97e-6,-97e-6,97e-6,-97e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,97e-6,-97e-6,97e-6,-97e-6,97e-6,-97e-6,97e-6,-97e-6,97e-6,-96e-6,96e-6,-96e-6,96e-6,-96e-6,96e-6,-96e-6,96e-6,-95e-6,95e-6,-95e-6,95e-6,-95e-6,95e-6,-95e-6,94e-6,-94e-6,94e-6,-94e-6,94e-6,-94e-6,93e-6,-93e-6,93e-6,-93e-6,93e-6,-93e-6,92e-6,-92e-6,92e-6,-92e-6,92e-6,-91e-6,91e-6,-91e-6,91e-6,-91e-6,9e-5,-9e-5,9e-5,-9e-5,89e-6,-89e-6,89e-6,-89e-6,88e-6,-88e-6,88e-6,-88e-6,88e-6,-87e-6,87e-6,-87e-6,86e-6,-86e-6,86e-6,-86e-6,85e-6,-85e-6,85e-6,-85e-6,84e-6,-84e-6,84e-6,-83e-6,83e-6,-83e-6,83e-6,-82e-6,82e-6,-82e-6,81e-6,-81e-6,81e-6,-8e-5,8e-5,-8e-5,79e-6,-79e-6,79e-6,-78e-6,78e-6,-78e-6,77e-6,-77e-6,77e-6,-76e-6,76e-6,-76e-6,75e-6,-75e-6,75e-6,-74e-6,74e-6,-74e-6,73e-6,-73e-6,73e-6,-72e-6,72e-6,-71e-6,71e-6,-71e-6,7e-5,-7e-5,69e-6,-69e-6,69e-6,-68e-6,68e-6,-67e-6,56e-6,-55e-6,55e-6,-55e-6,54e-6,-54e-6,54e-6,-53e-6,53e-6,-53e-6,52e-6,-52e-6,52e-6,-51e-6,51e-6,-51e-6,5e-5,-5e-5,49e-6,-49e-6,49e-6,-48e-6,48e-6,-48e-6,47e-6,-47e-6,46e-6,-46e-6,46e-6,-45e-6,45e-6,-45e-6,44e-6,-44e-6,43e-6,-43e-6,43e-6,-42e-6,42e-6,-41e-6,41e-6,-41e-6,4e-5,-4e-5,39e-6,-39e-6,39e-6,-38e-6,38e-6,-37e-6,37e-6,-37e-6,36e-6,-36e-6,35e-6,-35e-6,34e-6,-34e-6,34e-6,-33e-6,33e-6,-32e-6,32e-6,-31e-6,31e-6,-31e-6,3e-5,-3e-5,29e-6,-29e-6,28e-6,-28e-6,28e-6,-27e-6,27e-6,-26e-6,26e-6,-25e-6,25e-6,-24e-6,24e-6,-24e-6,23e-6,-23e-6,22e-6,-22e-6,21e-6,-21e-6,2e-5,-2e-5,19e-6,-19e-6,19e-6,-18e-6,18e-6,-17e-6,17e-6,-16e-6,16e-6,-15e-6,15e-6,-14e-6,14e-6,-14e-6,13e-6,-13e-6,12e-6,-12e-6,11e-6,-11e-6,1e-5,-1e-5,9e-6,-9e-6,8e-6,-8e-6,7e-6,-7e-6,7e-6,-6e-6,6e-6,-5e-6,5e-6,-4e-6,4e-6,-3e-6,3e-6,-2e-6,2e-6,-1e-6,1e-6,0]}},{}],24:[function(require,module,exports){module.exports={real:[0,0,-.201064,.149827,-.098477,.080283,-.07026,.050394,-.080673,.008269,-.036969,.004236,-.04326,.003565,-.032427,.005396,-.021767,.020271,-.014946,.011036,-.010757,.008469,-.008275,.007381,-.007226,.007081,-.006944,.006814,-.006901,.006781,-.006668,.006559,-.006658,.006557,-.00646,.006367,-.006474,.006386,-.00691,.007253,-.007616,.007523,-.007903,.015019,-.004959,.015204,-.009771,.011013,-.011777,.009387,-.013783,.005373,-.016199,.002294,-.014408,.004261,-.012516,.006986,-.009093,.00778,-.008031,.008135,-.007589,.007301,-.005843,.005798,-.005754,.005711,-.005669,.005458,-.005255,.00506,-.005025,.004991,-.004807,.004775,-.004744,.004713,-.004683,.004653,-.004624,.004596,-.004567,.00454,-.004513,.004486,-.00446,.004435,-.004409,.004385,-.00436,.003955,-.003933,.003912,-.003891,.003871,-.003851,.003831,-.003811,.003566,-.003548,.003531,-.003514,.003497,-.00348,.003463,-.003447,.003226,-.003211,.003197,-.003182,.003168,-.003154,.00314,-.002851,.002839,-.002826,.002814,-.002802,.00279,-.002779,.002767,-.002756,.002745,-.002734,.002483,-.002473,.002464,-.002454,.002444,-.002435,.002426,-.002417,.002407,-.002398,.00239,-.002239,.002231,-.002223,.002215,-.002207,.002199,-.002191,.002183,-.002176,.002168,-.002161,.002025,-.002018,.002012,-.002005,.001998,-.001992,.001985,-.001979,.001972,-.001966,.00196,-.001953,.001947,-.001941,.001935,-.001929,.001923,-.001917,.001911,-.001906,.0019,-.001894,.001889,-.001883,.001877,-.001872,.001867,-.001861,.001856,-.00185,.001845,-.00184,.001835,-.00183,.001825,-.00182,.001815,-.00181,.001805,-.0018,.001795,-.00179,.001785,-.001781,.001776,-.001771,.001767,-.001657,.001653,-.001648,.001644,-.00164,.001636,-.001632,.001628,-.001624,.001619,-.001615,.001611,-.001607,.001555,-.001551,.001548,-.001544,.00154,-.001536,.001533,-.001529,.001525,-.001522,.001518,-.001515,.001511,-.001508,.001504,-.001501,.001497,-.001494,.001491,-.001487,.001484,-.001481,.001477,-.001474,.001471,-.001467,.001464,-.001253,.00125,-.001248,.001245,-.001242,.00124,-.001237,.001234,-.001232,.001229,-.001227,.001224,-.001221,.001219,-.001216,.001214,-.001211,.001209,-.001206,.001204,-.001201,.001199,-.001196,.001194,-.001192,.001189,-.001187,.001185,-.001182,.00118,-.001178,.001175,-.001173,.001171,-.001168,.001166,-.001164,.001162,-.001159,.001157,-.001155,.001153,-987e-6,985e-6,-983e-6,981e-6,-979e-6,978e-6,-976e-6,974e-6,-972e-6,97e-5,-968e-6,967e-6,-965e-6,963e-6,-961e-6,96e-5,-958e-6,956e-6,-954e-6,953e-6,-951e-6,949e-6,-948e-6,946e-6,-944e-6,942e-6,-941e-6,939e-6,-938e-6,936e-6,-934e-6,933e-6,-931e-6,929e-6,-928e-6,926e-6,-924e-6,923e-6,-921e-6,92e-5,-918e-6,916e-6,-915e-6,913e-6,-912e-6,91e-5,-909e-6,907e-6,-906e-6,904e-6,-903e-6,822e-6,-82e-5,819e-6,-818e-6,816e-6,-815e-6,814e-6,-812e-6,811e-6,-81e-5,808e-6,-807e-6,806e-6,-804e-6,803e-6,-802e-6,8e-4,-799e-6,798e-6,-796e-6,795e-6,-794e-6,793e-6,-791e-6,79e-5,-789e-6,787e-6,-786e-6,785e-6,-784e-6,782e-6,-781e-6,78e-5,-779e-6,777e-6,-776e-6,775e-6,-774e-6,772e-6,-771e-6,77e-5,-769e-6,768e-6,-766e-6,765e-6,-764e-6,763e-6,-762e-6,76e-5,-759e-6,758e-6,-757e-6,756e-6,-754e-6,753e-6,-752e-6,706e-6,-705e-6,704e-6,-703e-6,702e-6,-701e-6,7e-4,-699e-6,697e-6,-696e-6,695e-6,-694e-6,693e-6,-692e-6,691e-6,-69e-5,689e-6,-688e-6,687e-6,-686e-6,685e-6,-684e-6,683e-6,-682e-6,681e-6,-679e-6,678e-6,-677e-6,676e-6,-675e-6,674e-6,-673e-6,672e-6,-671e-6,67e-5,-669e-6,668e-6,-667e-6,666e-6,-665e-6,664e-6,-663e-6,662e-6,-661e-6,66e-5,-659e-6,658e-6,-657e-6,656e-6,-655e-6,654e-6,-653e-6,652e-6,-651e-6,65e-5,-649e-6,648e-6,-647e-6,646e-6,-645e-6,644e-6,-643e-6,642e-6,-641e-6,64e-5,-639e-6,638e-6,-637e-6,636e-6,-635e-6,634e-6,-633e-6,632e-6,-631e-6,63e-5,-629e-6,629e-6,-628e-6,627e-6,-626e-6,625e-6,-624e-6,623e-6,-622e-6,621e-6,-62e-5,619e-6,-618e-6,617e-6,-616e-6,615e-6,-614e-6,613e-6,-612e-6,611e-6,-61e-5,609e-6,-608e-6,607e-6,-607e-6,606e-6,-605e-6,586e-6,-585e-6,584e-6,-583e-6,582e-6,-581e-6,58e-5,-579e-6,578e-6,-577e-6,576e-6,-575e-6,575e-6,-574e-6,573e-6,-572e-6,571e-6,-57e-5,569e-6,-568e-6,567e-6,-566e-6,566e-6,-565e-6,564e-6,-563e-6,562e-6,-561e-6,56e-5,-559e-6,558e-6,-557e-6,556e-6,-556e-6,555e-6,-554e-6,553e-6,-552e-6,551e-6,-55e-5,549e-6,-548e-6,548e-6,-547e-6,546e-6,-545e-6,544e-6,-543e-6,542e-6,-541e-6,54e-5,-539e-6,538e-6,-538e-6,537e-6,-536e-6,535e-6,-534e-6,533e-6,-532e-6,531e-6,-53e-5,529e-6,-529e-6,528e-6,-527e-6,526e-6,-525e-6,524e-6,-523e-6,522e-6,-521e-6,52e-5,-52e-5,519e-6,-518e-6,517e-6,-516e-6,515e-6,-514e-6,513e-6,-512e-6,512e-6,-511e-6,51e-5,-509e-6,508e-6,-507e-6,506e-6,-49e-5,489e-6,-488e-6,487e-6,-486e-6,486e-6,-485e-6,484e-6,-483e-6,482e-6,-481e-6,48e-5,-479e-6,478e-6,-478e-6,477e-6,-476e-6,475e-6,-474e-6,473e-6,-472e-6,471e-6,-47e-5,47e-5,-469e-6,468e-6,-467e-6,466e-6,-465e-6,464e-6,-463e-6,462e-6,-461e-6,461e-6,-46e-5,459e-6,-458e-6,457e-6,-456e-6,455e-6,-454e-6,453e-6,-453e-6,452e-6,-451e-6,45e-5,-449e-6,448e-6,-447e-6,446e-6,-445e-6,445e-6,-444e-6,443e-6,-442e-6,441e-6,-44e-5,439e-6,-438e-6,437e-6,-436e-6,435e-6,-434e-6,433e-6,-433e-6,432e-6,-431e-6,43e-5,-429e-6,428e-6,-427e-6,426e-6,-425e-6,424e-6,-423e-6,422e-6,-422e-6,42e-5,-42e-5,419e-6,-418e-6,417e-6,-416e-6,415e-6,-414e-6,413e-6,-412e-6,411e-6,-41e-5,435e-6,-434e-6,433e-6,-432e-6,431e-6,-43e-5,429e-6,-428e-6,427e-6,-426e-6,425e-6,-424e-6,423e-6,-423e-6,421e-6,-42e-5,419e-6,-418e-6,417e-6,-416e-6,415e-6,-414e-6,413e-6,-412e-6,411e-6,-41e-5,409e-6,-408e-6,407e-6,-406e-6,405e-6,-404e-6,403e-6,-402e-6,401e-6,-4e-4,399e-6,-398e-6,397e-6,-396e-6,395e-6,-393e-6,392e-6,-391e-6,39e-5,-389e-6,388e-6,-387e-6,386e-6,-385e-6,384e-6,-383e-6,382e-6,-381e-6,38e-5,-379e-6,378e-6,-377e-6,376e-6,-375e-6,374e-6,-373e-6,372e-6,-37e-5,369e-6,-368e-6,367e-6,-366e-6,365e-6,-364e-6,363e-6,-362e-6,361e-6,-36e-5,359e-6,-358e-6,356e-6,-355e-6,354e-6,-353e-6,352e-6,-351e-6,35e-5,-349e-6,348e-6,-347e-6,346e-6,-345e-6,344e-6,-342e-6,341e-6,-34e-5,339e-6,-338e-6,337e-6,-336e-6,335e-6,-333e-6,332e-6,-331e-6,33e-5,-329e-6,328e-6,-327e-6,326e-6,-325e-6,323e-6,-322e-6,321e-6,-32e-5,319e-6,-318e-6,317e-6,-315e-6,314e-6,-313e-6,312e-6,-311e-6,31e-5,-309e-6,308e-6,-306e-6,305e-6,-304e-6,303e-6,-302e-6,301e-6,-3e-4,298e-6,-297e-6,296e-6,-295e-6,294e-6,-293e-6,291e-6,-29e-5,289e-6,-288e-6,287e-6,-286e-6,284e-6,-283e-6,282e-6,-281e-6,28e-5,-279e-6,277e-6,-276e-6,275e-6,-274e-6,273e-6,-272e-6,27e-5,-269e-6,268e-6,-267e-6,266e-6,-265e-6,263e-6,-262e-6,261e-6,-26e-5,259e-6,-257e-6,256e-6,-255e-6,254e-6,-252e-6,251e-6,-25e-5,249e-6,-248e-6,246e-6,-245e-6,244e-6,-243e-6,242e-6,-24e-5,239e-6,-238e-6,237e-6,-236e-6,234e-6,-233e-6,232e-6,-23e-5,23e-5,-228e-6,227e-6,-226e-6,224e-6,-223e-6,222e-6,-221e-6,22e-5,-218e-6,217e-6,-216e-6,215e-6,-213e-6,212e-6,-211e-6,21e-5,-209e-6,207e-6,-206e-6,205e-6,-204e-6,202e-6,-201e-6,199e-6,-198e-6,197e-6,-196e-6,194e-6,-193e-6,192e-6,-191e-6,19e-5,-188e-6,187e-6,-186e-6,185e-6,-183e-6,182e-6,-181e-6,18e-5,-178e-6,177e-6,-176e-6,175e-6,-173e-6,172e-6,-17e-5,169e-6,-168e-6,166e-6,-165e-6,164e-6,-163e-6,161e-6,-16e-5,159e-6,-158e-6,156e-6,-155e-6,154e-6,-153e-6,151e-6,-15e-5,149e-6,-147e-6,146e-6,-145e-6,144e-6,-142e-6,141e-6,-139e-6,138e-6,-137e-6,135e-6,-134e-6,133e-6,-132e-6,13e-5,-129e-6,128e-6,-126e-6,125e-6,-124e-6,123e-6,-121e-6,12e-5,-119e-6,117e-6,-116e-6,115e-6,-113e-6,112e-6,-11e-5,109e-6,-108e-6,106e-6,-105e-6,104e-6,-102e-6,101e-6,-1e-4,99e-6,-97e-6,96e-6,-95e-6,93e-6,-92e-6,91e-6,-89e-6,88e-6,-87e-6,85e-6,-84e-6,82e-6,-81e-6,8e-5,-78e-6,77e-6,-76e-6,74e-6,-73e-6,72e-6,-7e-5,69e-6,-68e-6,66e-6,-65e-6,64e-6,-63e-6,61e-6,-6e-5,59e-6,-57e-6,55e-6,-54e-6,53e-6,-51e-6,5e-5,-49e-6,47e-6,-46e-6,45e-6,-43e-6,42e-6,-41e-6,39e-6,-38e-6,37e-6,-35e-6,34e-6,-33e-6,31e-6,-3e-5,29e-6,-27e-6,26e-6,-24e-6,23e-6,-22e-6,2e-5,-19e-6,18e-6,-16e-6,15e-6,-14e-6,12e-6,-11e-6,1e-5,-8e-6,7e-6,-6e-6,4e-6,-3e-6,2e-6,0,-2e-6,3e-6,-4e-6,6e-6,-7e-6,8e-6,-1e-5,11e-6,-12e-6,14e-6,-15e-6,16e-6,-18e-6,19e-6,-2e-5,22e-6,-23e-6,24e-6,-26e-6,27e-6,-29e-6,3e-5,-31e-6,33e-6,-34e-6,35e-6,-37e-6,38e-6,-39e-6,41e-6,-42e-6,43e-6,-45e-6,46e-6,-47e-6,49e-6,-5e-5,51e-6,-53e-6,54e-6,-55e-6,57e-6,-58e-6,6e-5,-61e-6,63e-6,-64e-6,65e-6,-66e-6,68e-6,-69e-6,7e-5,-72e-6,73e-6,-74e-6,76e-6,-77e-6,78e-6,-8e-5,81e-6,-82e-6,84e-6,-85e-6,86e-6,-88e-6,89e-6,-91e-6,92e-6,-93e-6,95e-6,-96e-6,97e-6,-98e-6,1e-4,-101e-6,102e-6,-104e-6,105e-6,-106e-6,108e-6,-109e-6,11e-5,-111e-6,113e-6,-115e-6,116e-6,-117e-6,118e-6,-12e-5,121e-6,-122e-6,124e-6,-125e-6,126e-6,-127e-6,129e-6,-13e-5,131e-6,-132e-6,134e-6,-135e-6,136e-6,-138e-6,139e-6,-141e-6,142e-6,-143e-6,144e-6,-146e-6,147e-6,-148e-6,149e-6,-151e-6,152e-6,-153e-6,154e-6,-156e-6,157e-6,-158e-6,159e-6,-161e-6,162e-6,-163e-6,164e-6,-165e-6,167e-6,-168e-6,169e-6,-171e-6,172e-6,-173e-6,175e-6,-176e-6,177e-6,-178e-6,179e-6,-181e-6,182e-6,-183e-6,184e-6,-185e-6,187e-6,-188e-6,189e-6,-19e-5,191e-6,-193e-6,194e-6,-195e-6,196e-6,-197e-6,199e-6,-2e-4,201e-6,-202e-6,204e-6,-205e-6,206e-6,-207e-6,208e-6,-209e-6,211e-6,-212e-6,213e-6,-214e-6,215e-6,-216e-6,217e-6,-219e-6,22e-5,-221e-6,222e-6,-223e-6,224e-6,-226e-6,227e-6,-228e-6,229e-6,-23e-5,231e-6,-232e-6,234e-6,-235e-6,236e-6,-237e-6,238e-6,-239e-6,24e-5,-241e-6,242e-6,-243e-6,244e-6,-245e-6,246e-6,-248e-6,249e-6,-25e-5,251e-6,-252e-6,253e-6,-254e-6,255e-6,-256e-6,257e-6,-258e-6,259e-6,-26e-5,261e-6,-262e-6,263e-6,-264e-6,266e-6,-267e-6,268e-6,-269e-6,27e-5,-27e-5,271e-6,-272e-6,273e-6,-274e-6,275e-6,-276e-6,277e-6,-279e-6,279e-6,-28e-5,281e-6,-282e-6,283e-6,-284e-6,285e-6,-286e-6,287e-6,-288e-6,289e-6,-29e-5,291e-6,-292e-6,292e-6,-294e-6,294e-6,-295e-6,296e-6,-297e-6,298e-6,-299e-6,3e-4,-301e-6,301e-6,-302e-6,303e-6,-304e-6,305e-6,-306e-6,307e-6,-307e-6,308e-6,-309e-6,31e-5,-311e-6,312e-6,-312e-6,313e-6,-314e-6,315e-6,-316e-6,316e-6,-317e-6,318e-6,-319e-6,32e-5,-32e-5,321e-6,-322e-6,323e-6,-323e-6,324e-6,-325e-6,326e-6,-326e-6,327e-6,-328e-6,328e-6,-329e-6,33e-5,-331e-6,331e-6,-332e-6,333e-6,-333e-6,334e-6,-335e-6,335e-6,-336e-6,337e-6,-337e-6,338e-6,-339e-6,339e-6,-34e-5,341e-6,-341e-6,342e-6,-342e-6,343e-6,-344e-6,344e-6,-345e-6,345e-6,-346e-6,347e-6,-347e-6,348e-6,-348e-6,349e-6,-349e-6,35e-5,-35e-5,351e-6,-352e-6,352e-6,-353e-6,353e-6,-354e-6,354e-6,-354e-6,355e-6,-355e-6,356e-6,-356e-6,357e-6,-357e-6,358e-6,-358e-6,359e-6,-359e-6,36e-5,-36e-5,36e-5,-361e-6,361e-6,-362e-6,362e-6,-362e-6,363e-6,-363e-6,363e-6,-364e-6,364e-6,-365e-6,365e-6,-365e-6,366e-6,-366e-6,366e-6,-366e-6,367e-6,-367e-6,367e-6,-368e-6,368e-6,-368e-6,369e-6,-369e-6,369e-6,-369e-6,37e-5,-37e-5,37e-5,-37e-5,371e-6,-371e-6,371e-6,-371e-6,371e-6,-372e-6,372e-6,-372e-6,372e-6,-372e-6,372e-6,-373e-6,373e-6,-373e-6,373e-6,-373e-6,362e-6,-362e-6,362e-6,-362e-6,362e-6,-362e-6,362e-6,-363e-6,363e-6,-363e-6,363e-6,-363e-6,363e-6,-363e-6,363e-6,-363e-6,363e-6,-363e-6,363e-6,-363e-6,363e-6,-363e-6,363e-6,-363e-6,363e-6,-363e-6,363e-6,-363e-6,362e-6,-362e-6,362e-6,-362e-6,362e-6,-362e-6,362e-6,-362e-6,362e-6,-362e-6,361e-6,-361e-6,361e-6,-361e-6,361e-6,-361e-6,361e-6,-36e-5,36e-5,-36e-5,36e-5,-36e-5,359e-6,-359e-6,359e-6,-359e-6,358e-6,-358e-6,358e-6,-358e-6,357e-6,-357e-6,357e-6,-357e-6,356e-6,-356e-6,356e-6,-355e-6,355e-6,-355e-6,354e-6,-354e-6,354e-6,-353e-6,353e-6,-352e-6,352e-6,-352e-6,351e-6,-351e-6,351e-6,-35e-5,35e-5,-349e-6,349e-6,-348e-6,348e-6,-348e-6,347e-6,-347e-6,346e-6,-346e-6,345e-6,-345e-6,344e-6,-344e-6,343e-6,-343e-6,342e-6,-342e-6,341e-6,-341e-6,34e-5,-339e-6,339e-6,-338e-6,338e-6,-337e-6,336e-6,-336e-6,335e-6,-335e-6,334e-6,-333e-6,333e-6,-332e-6,331e-6,-331e-6,33e-5,-329e-6,329e-6,-328e-6,327e-6,-327e-6,326e-6,-325e-6,325e-6,-324e-6,323e-6,-322e-6,322e-6,-321e-6,32e-5,-319e-6,318e-6,-318e-6,317e-6,-316e-6,315e-6,-314e-6,314e-6,-313e-6,312e-6,-311e-6,31e-5,-31e-5,309e-6,-308e-6,307e-6,-306e-6,305e-6,-304e-6,303e-6,-303e-6,302e-6,-301e-6,3e-4,-299e-6,298e-6,-297e-6,296e-6,-295e-6,294e-6,-293e-6,292e-6,-291e-6,29e-5,-289e-6,288e-6,-287e-6,286e-6,-285e-6,284e-6,-283e-6,282e-6,-281e-6,28e-5,-279e-6,278e-6,-277e-6,276e-6,-275e-6,274e-6,-272e-6,271e-6,-27e-5,269e-6,-268e-6,267e-6,-266e-6,265e-6,-264e-6,262e-6,-261e-6,26e-5,-259e-6,258e-6,-257e-6,256e-6,-254e-6,253e-6,-252e-6,251e-6,-249e-6,248e-6,-247e-6,246e-6,-244e-6,243e-6,-242e-6,241e-6,-239e-6,238e-6,-237e-6,235e-6,-234e-6,226e-6,-225e-6,224e-6,-222e-6,221e-6,-22e-5,219e-6,-217e-6,216e-6,-215e-6,213e-6,-212e-6,211e-6,-209e-6,208e-6,-207e-6,206e-6,-204e-6,203e-6,-201e-6,2e-4,-199e-6,197e-6,-196e-6,195e-6,-194e-6,192e-6,-191e-6,189e-6,-188e-6,186e-6,-185e-6,184e-6,-182e-6,181e-6,-179e-6,178e-6,-176e-6,175e-6,-174e-6,172e-6,-171e-6,169e-6,-168e-6,167e-6,-165e-6,163e-6,-162e-6,161e-6,-159e-6,158e-6,-156e-6,155e-6,-153e-6,152e-6,-15e-5,149e-6,-147e-6,146e-6,-144e-6,142e-6,-141e-6,14e-5,-138e-6,136e-6,-135e-6,134e-6,-132e-6,13e-5,-129e-6,127e-6,-126e-6,124e-6,-123e-6,121e-6,-119e-6,118e-6,-117e-6,115e-6,-113e-6,111e-6,-11e-5,109e-6,-107e-6,105e-6,-103e-6,102e-6,-1e-4,99e-6,-97e-6,96e-6,-94e-6,92e-6,-91e-6,89e-6,-88e-6,86e-6,-84e-6,83e-6,-81e-6,79e-6,-78e-6,76e-6,-74e-6,73e-6,-71e-6,7e-5,-68e-6,66e-6,-65e-6,63e-6,-61e-6,6e-5,-58e-6,56e-6,-55e-6,53e-6,-52e-6,5e-5,-48e-6,46e-6,-45e-6,43e-6,-41e-6,4e-5,-38e-6,36e-6,-35e-6,33e-6,-31e-6,3e-5,-28e-6,26e-6,-25e-6,23e-6,-21e-6,19e-6,-18e-6,16e-6,-14e-6,13e-6,-11e-6,9e-6,-8e-6,6e-6,-5e-6,3e-6,-1e-6,0,2e-6,-4e-6,6e-6,-7e-6,9e-6,-11e-6,13e-6,-14e-6,16e-6,-18e-6,19e-6,-21e-6,23e-6,-24e-6,26e-6,-27e-6,29e-6,-31e-6,32e-6,-34e-6,36e-6,-38e-6,39e-6,-41e-6,43e-6,-44e-6,46e-6,-48e-6,49e-6,-51e-6,52e-6,-54e-6,56e-6,-58e-6,59e-6,-61e-6,63e-6,-64e-6,66e-6,-67e-6,69e-6,-71e-6,72e-6,-74e-6,76e-6,-78e-6,79e-6,-81e-6,82e-6,-84e-6,86e-6,-87e-6,89e-6,-9e-5,92e-6,-93e-6,95e-6,-97e-6,98e-6,-1e-4,102e-6,-103e-6,105e-6,-106e-6,108e-6,-109e-6,111e-6,-113e-6,114e-6,-116e-6,117e-6,-119e-6,12e-5,-122e-6,123e-6,-125e-6,127e-6,-128e-6,13e-5,-131e-6,133e-6,-134e-6,136e-6,-137e-6,139e-6,-14e-5,142e-6,-143e-6,145e-6,-146e-6,148e-6,-149e-6,151e-6,-152e-6,154e-6,-155e-6,157e-6,-158e-6,137e-6,-138e-6,139e-6,-14e-5,142e-6,-143e-6,144e-6,-145e-6,146e-6,-147e-6,149e-6,-15e-5,151e-6,-152e-6,154e-6,-155e-6,156e-6,-157e-6,158e-6,-159e-6,161e-6,-162e-6,163e-6,-164e-6,165e-6,-166e-6,167e-6,-168e-6,17e-5,-171e-6,171e-6,-173e-6,174e-6,-175e-6,176e-6,-177e-6,178e-6,-179e-6,18e-5,-181e-6,182e-6,-183e-6,184e-6,-185e-6,186e-6,-187e-6,188e-6,-189e-6,19e-5,-191e-6,192e-6,-193e-6,194e-6,-195e-6,196e-6,-197e-6,198e-6,-199e-6,2e-4,-201e-6,202e-6,-203e-6,203e-6,-204e-6,205e-6,-206e-6,207e-6,-208e-6,209e-6,-209e-6,21e-5,-211e-6,212e-6,-213e-6,214e-6,-214e-6,215e-6,-216e-6,217e-6,-217e-6,218e-6,-219e-6,22e-5,-22e-5,221e-6,-222e-6,223e-6,-224e-6,224e-6,-225e-6,225e-6,-226e-6,227e-6,-228e-6,228e-6,-229e-6,229e-6,-23e-5,231e-6,-231e-6,232e-6,-233e-6,233e-6,-234e-6,234e-6,-235e-6,236e-6,-236e-6,237e-6,-237e-6,238e-6,-238e-6,239e-6,-239e-6,24e-5,-24e-5,241e-6,-241e-6,242e-6,-242e-6,243e-6,-243e-6,243e-6,-244e-6,244e-6,-245e-6,245e-6,-245e-6,246e-6,-246e-6,246e-6,-247e-6,247e-6,-248e-6,248e-6,-248e-6,248e-6,-249e-6,249e-6,-249e-6,25e-5,-25e-5,25e-5,-25e-5,251e-6,-251e-6,251e-6,-251e-6,251e-6,-252e-6,252e-6,-252e-6,252e-6,-252e-6,252e-6,-252e-6,253e-6,-253e-6,253e-6,-253e-6,253e-6,-253e-6,253e-6,-253e-6,253e-6,-253e-6,253e-6,-253e-6,253e-6,-253e-6,253e-6,-253e-6,253e-6,-253e-6,253e-6],imag:[0,.202613,-1e-6,2e-6,-2e-6,3e-6,-4e-6,4e-6,-8e-6,1e-6,-6e-6,1e-6,-9e-6,1e-6,-1e-5,2e-6,-8e-6,9e-6,-7e-6,6e-6,-6e-6,5e-6,-7e-6,5e-6,-5e-6,9e-6,-8e-6,5e-6,-8e-6,1e-5,-9e-6,11e-6,-1e-5,11e-6,-11e-6,11e-6,-12e-6,13e-6,-15e-6,17e-6,-18e-6,19e-6,-21e-6,42e-6,-14e-6,46e-6,-31e-6,36e-6,-41e-6,34e-6,-52e-6,21e-6,-66e-6,1e-5,-63e-6,19e-6,-59e-6,34e-6,-46e-6,41e-6,-43e-6,45e-6,-44e-6,43e-6,-35e-6,36e-6,-37e-6,38e-6,-39e-6,39e-6,-38e-6,38e-6,-39e-6,4e-5,-4e-5,4e-5,-41e-6,42e-6,-43e-6,43e-6,-44e-6,45e-6,-46e-6,47e-6,-48e-6,49e-6,-49e-6,5e-5,-51e-6,52e-6,-53e-6,49e-6,-5e-5,51e-6,-52e-6,52e-6,-53e-6,54e-6,-55e-6,52e-6,-53e-6,54e-6,-55e-6,55e-6,-57e-6,57e-6,-58e-6,56e-6,-56e-6,57e-6,-57e-6,59e-6,-59e-6,6e-5,-56e-6,56e-6,-57e-6,58e-6,-59e-6,59e-6,-6e-5,61e-6,-61e-6,62e-6,-63e-6,58e-6,-59e-6,59e-6,-61e-6,61e-6,-62e-6,62e-6,-63e-6,64e-6,-65e-6,65e-6,-62e-6,63e-6,-63e-6,64e-6,-65e-6,66e-6,-66e-6,67e-6,-67e-6,68e-6,-69e-6,66e-6,-66e-6,67e-6,-67e-6,68e-6,-69e-6,69e-6,-71e-6,71e-6,-72e-6,72e-6,-73e-6,74e-6,-75e-6,75e-6,-76e-6,76e-6,-77e-6,78e-6,-79e-6,8e-5,-8e-5,81e-6,-81e-6,82e-6,-83e-6,84e-6,-85e-6,85e-6,-86e-6,86e-6,-88e-6,88e-6,-89e-6,9e-5,-9e-5,91e-6,-92e-6,93e-6,-93e-6,94e-6,-95e-6,96e-6,-97e-6,97e-6,-98e-6,98e-6,-94e-6,94e-6,-95e-6,96e-6,-97e-6,97e-6,-98e-6,98e-6,-99e-6,1e-4,-101e-6,101e-6,-102e-6,1e-4,-101e-6,101e-6,-102e-6,103e-6,-104e-6,104e-6,-105e-6,106e-6,-107e-6,107e-6,-108e-6,109e-6,-11e-5,11e-5,-111e-6,112e-6,-113e-6,113e-6,-114e-6,115e-6,-116e-6,116e-6,-117e-6,118e-6,-119e-6,119e-6,-103e-6,104e-6,-104e-6,105e-6,-106e-6,106e-6,-107e-6,108e-6,-108e-6,109e-6,-109e-6,11e-5,-111e-6,111e-6,-112e-6,113e-6,-113e-6,115e-6,-115e-6,116e-6,-117e-6,117e-6,-118e-6,119e-6,-119e-6,12e-5,-121e-6,121e-6,-122e-6,123e-6,-123e-6,124e-6,-125e-6,126e-6,-126e-6,127e-6,-128e-6,128e-6,-129e-6,13e-5,-13e-5,131e-6,-113e-6,114e-6,-114e-6,115e-6,-116e-6,116e-6,-117e-6,117e-6,-118e-6,119e-6,-119e-6,12e-5,-121e-6,121e-6,-122e-6,122e-6,-123e-6,124e-6,-124e-6,125e-6,-126e-6,126e-6,-127e-6,127e-6,-128e-6,129e-6,-129e-6,13e-5,-131e-6,131e-6,-132e-6,133e-6,-133e-6,134e-6,-135e-6,135e-6,-136e-6,136e-6,-137e-6,138e-6,-138e-6,139e-6,-14e-5,14e-5,-141e-6,142e-6,-142e-6,143e-6,-143e-6,144e-6,-145e-6,133e-6,-133e-6,134e-6,-135e-6,135e-6,-136e-6,136e-6,-137e-6,138e-6,-138e-6,139e-6,-139e-6,14e-5,-141e-6,141e-6,-142e-6,143e-6,-143e-6,144e-6,-144e-6,145e-6,-146e-6,146e-6,-147e-6,147e-6,-148e-6,149e-6,-149e-6,15e-5,-151e-6,151e-6,-152e-6,152e-6,-153e-6,154e-6,-154e-6,155e-6,-156e-6,156e-6,-157e-6,158e-6,-158e-6,159e-6,-159e-6,16e-5,-161e-6,161e-6,-162e-6,163e-6,-163e-6,164e-6,-164e-6,165e-6,-166e-6,167e-6,-167e-6,158e-6,-158e-6,159e-6,-16e-5,16e-5,-161e-6,161e-6,-162e-6,163e-6,-163e-6,164e-6,-164e-6,165e-6,-166e-6,166e-6,-167e-6,168e-6,-168e-6,169e-6,-169e-6,17e-5,-171e-6,171e-6,-172e-6,172e-6,-173e-6,174e-6,-174e-6,175e-6,-176e-6,176e-6,-177e-6,177e-6,-178e-6,179e-6,-179e-6,18e-5,-181e-6,181e-6,-182e-6,182e-6,-183e-6,184e-6,-184e-6,185e-6,-185e-6,186e-6,-187e-6,187e-6,-188e-6,189e-6,-189e-6,19e-5,-191e-6,191e-6,-192e-6,192e-6,-193e-6,194e-6,-194e-6,195e-6,-196e-6,196e-6,-197e-6,198e-6,-198e-6,199e-6,-199e-6,2e-4,-201e-6,201e-6,-202e-6,203e-6,-203e-6,204e-6,-205e-6,205e-6,-206e-6,207e-6,-207e-6,208e-6,-208e-6,209e-6,-21e-5,21e-5,-211e-6,212e-6,-212e-6,213e-6,-214e-6,214e-6,-215e-6,216e-6,-216e-6,217e-6,-217e-6,218e-6,-219e-6,22e-5,-22e-5,221e-6,-221e-6,215e-6,-216e-6,216e-6,-217e-6,218e-6,-218e-6,219e-6,-22e-5,22e-5,-221e-6,222e-6,-222e-6,223e-6,-224e-6,224e-6,-225e-6,226e-6,-226e-6,227e-6,-227e-6,228e-6,-229e-6,229e-6,-23e-5,231e-6,-231e-6,232e-6,-232e-6,233e-6,-234e-6,234e-6,-235e-6,235e-6,-236e-6,237e-6,-238e-6,238e-6,-239e-6,239e-6,-24e-5,241e-6,-241e-6,242e-6,-243e-6,243e-6,-244e-6,244e-6,-245e-6,246e-6,-246e-6,247e-6,-248e-6,248e-6,-249e-6,249e-6,-25e-5,251e-6,-252e-6,252e-6,-253e-6,253e-6,-254e-6,255e-6,-255e-6,256e-6,-257e-6,257e-6,-258e-6,258e-6,-259e-6,26e-5,-26e-5,261e-6,-262e-6,262e-6,-263e-6,263e-6,-264e-6,265e-6,-266e-6,266e-6,-267e-6,267e-6,-268e-6,268e-6,-269e-6,27e-5,-27e-5,271e-6,-264e-6,264e-6,-265e-6,265e-6,-266e-6,266e-6,-267e-6,268e-6,-268e-6,269e-6,-27e-5,27e-5,-271e-6,271e-6,-272e-6,273e-6,-273e-6,274e-6,-274e-6,275e-6,-276e-6,276e-6,-277e-6,277e-6,-278e-6,279e-6,-279e-6,28e-5,-281e-6,281e-6,-282e-6,283e-6,-283e-6,284e-6,-284e-6,285e-6,-285e-6,286e-6,-287e-6,287e-6,-288e-6,289e-6,-289e-6,29e-5,-29e-5,291e-6,-292e-6,292e-6,-293e-6,293e-6,-294e-6,294e-6,-295e-6,296e-6,-296e-6,297e-6,-297e-6,298e-6,-298e-6,299e-6,-3e-4,3e-4,-301e-6,302e-6,-302e-6,303e-6,-304e-6,304e-6,-305e-6,305e-6,-306e-6,306e-6,-307e-6,307e-6,-308e-6,309e-6,-309e-6,31e-5,-311e-6,311e-6,-312e-6,312e-6,-313e-6,313e-6,-314e-6,315e-6,-315e-6,316e-6,-316e-6,337e-6,-338e-6,338e-6,-339e-6,339e-6,-34e-5,341e-6,-341e-6,342e-6,-342e-6,343e-6,-343e-6,344e-6,-345e-6,345e-6,-346e-6,346e-6,-347e-6,348e-6,-348e-6,349e-6,-35e-5,35e-5,-351e-6,351e-6,-352e-6,353e-6,-353e-6,354e-6,-354e-6,355e-6,-355e-6,356e-6,-357e-6,357e-6,-358e-6,358e-6,-359e-6,359e-6,-36e-5,361e-6,-361e-6,362e-6,-362e-6,363e-6,-364e-6,364e-6,-365e-6,365e-6,-366e-6,366e-6,-367e-6,367e-6,-368e-6,368e-6,-369e-6,369e-6,-371e-6,371e-6,-372e-6,372e-6,-373e-6,373e-6,-374e-6,374e-6,-375e-6,375e-6,-376e-6,376e-6,-377e-6,378e-6,-378e-6,379e-6,-379e-6,38e-5,-38e-5,381e-6,-381e-6,382e-6,-382e-6,383e-6,-383e-6,384e-6,-384e-6,385e-6,-385e-6,386e-6,-386e-6,387e-6,-387e-6,388e-6,-388e-6,389e-6,-389e-6,39e-5,-39e-5,391e-6,-392e-6,392e-6,-392e-6,393e-6,-394e-6,394e-6,-394e-6,395e-6,-395e-6,396e-6,-397e-6,397e-6,-397e-6,398e-6,-399e-6,399e-6,-399e-6,4e-4,-4e-4,401e-6,-401e-6,402e-6,-402e-6,403e-6,-403e-6,404e-6,-404e-6,405e-6,-405e-6,405e-6,-406e-6,406e-6,-407e-6,407e-6,-408e-6,408e-6,-409e-6,409e-6,-409e-6,41e-5,-41e-5,411e-6,-411e-6,412e-6,-412e-6,412e-6,-413e-6,413e-6,-414e-6,414e-6,-415e-6,415e-6,-415e-6,416e-6,-416e-6,417e-6,-417e-6,417e-6,-418e-6,418e-6,-418e-6,419e-6,-419e-6,42e-5,-42e-5,421e-6,-421e-6,421e-6,-422e-6,422e-6,-422e-6,423e-6,-423e-6,424e-6,-424e-6,424e-6,-425e-6,425e-6,-425e-6,426e-6,-426e-6,426e-6,-427e-6,427e-6,-427e-6,428e-6,-428e-6,428e-6,-429e-6,429e-6,-43e-5,43e-5,-43e-5,431e-6,-431e-6,431e-6,-431e-6,432e-6,-432e-6,432e-6,-433e-6,433e-6,-433e-6,434e-6,-434e-6,434e-6,-434e-6,435e-6,-435e-6,435e-6,-436e-6,436e-6,-436e-6,437e-6,-437e-6,437e-6,-437e-6,438e-6,-438e-6,438e-6,-438e-6,438e-6,-439e-6,439e-6,-439e-6,439e-6,-44e-5,44e-5,-44e-5,44e-5,-441e-6,441e-6,-441e-6,441e-6,-442e-6,442e-6,-442e-6,442e-6,-442e-6,443e-6,-443e-6,443e-6,-443e-6,443e-6,-444e-6,444e-6,-444e-6,444e-6,-444e-6,445e-6,-445e-6,445e-6,-445e-6,445e-6,-445e-6,445e-6,-446e-6,446e-6,-446e-6,446e-6,-446e-6,446e-6,-447e-6,447e-6,-447e-6,447e-6,-447e-6,447e-6,-447e-6,447e-6,-448e-6,448e-6,-448e-6,448e-6,-448e-6,448e-6,-448e-6,448e-6,-448e-6,448e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-45e-5,45e-5,-45e-5,45e-5,-449e-6,45e-5,-45e-5,449e-6,-45e-5,45e-5,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-449e-6,449e-6,-448e-6,448e-6,-448e-6,448e-6,-448e-6,448e-6,-448e-6,448e-6,-448e-6,447e-6,-447e-6,447e-6,-447e-6,447e-6,-447e-6,447e-6,-447e-6,446e-6,-446e-6,446e-6,-446e-6,446e-6,-446e-6,445e-6,-445e-6,445e-6,-445e-6,445e-6,-444e-6,444e-6,-444e-6,444e-6,-444e-6,443e-6,-443e-6,443e-6,-443e-6,443e-6,-442e-6,442e-6,-442e-6,442e-6,-441e-6,441e-6,-441e-6,441e-6,-44e-5,44e-5,-44e-5,44e-5,-439e-6,439e-6,-439e-6,438e-6,-438e-6,438e-6,-438e-6,437e-6,-437e-6,437e-6,-436e-6,436e-6,-436e-6,435e-6,-435e-6,435e-6,-434e-6,434e-6,-434e-6,433e-6,-433e-6,433e-6,-432e-6,432e-6,-431e-6,431e-6,-431e-6,43e-5,-43e-5,43e-5,-429e-6,429e-6,-428e-6,428e-6,-428e-6,427e-6,-427e-6,426e-6,-426e-6,425e-6,-425e-6,424e-6,-424e-6,424e-6,-423e-6,423e-6,-422e-6,422e-6,-421e-6,421e-6,-42e-5,42e-5,-419e-6,419e-6,-418e-6,418e-6,-417e-6,417e-6,-416e-6,416e-6,-415e-6,415e-6,-414e-6,414e-6,-413e-6,413e-6,-412e-6,412e-6,-411e-6,41e-5,-41e-5,409e-6,-409e-6,408e-6,-408e-6,407e-6,-406e-6,406e-6,-405e-6,405e-6,-404e-6,403e-6,-403e-6,402e-6,-401e-6,401e-6,-4e-4,399e-6,-399e-6,398e-6,-398e-6,397e-6,-396e-6,396e-6,-395e-6,394e-6,-394e-6,393e-6,-392e-6,391e-6,-391e-6,39e-5,-389e-6,389e-6,-388e-6,387e-6,-387e-6,386e-6,-385e-6,384e-6,-384e-6,383e-6,-382e-6,381e-6,-381e-6,38e-5,-379e-6,378e-6,-378e-6,377e-6,-376e-6,375e-6,-374e-6,374e-6,-373e-6,372e-6,-371e-6,37e-5,-37e-5,369e-6,-368e-6,367e-6,-366e-6,366e-6,-364e-6,364e-6,-363e-6,362e-6,-361e-6,36e-5,-359e-6,359e-6,-358e-6,357e-6,-356e-6,355e-6,-354e-6,353e-6,-352e-6,351e-6,-351e-6,35e-5,-349e-6,348e-6,-347e-6,346e-6,-345e-6,344e-6,-343e-6,342e-6,-341e-6,34e-5,-339e-6,338e-6,-337e-6,336e-6,-335e-6,334e-6,-333e-6,332e-6,-331e-6,33e-5,-329e-6,328e-6,-327e-6,326e-6,-325e-6,324e-6,-323e-6,322e-6,-321e-6,32e-5,-319e-6,318e-6,-317e-6,316e-6,-315e-6,314e-6,-313e-6,312e-6,-311e-6,31e-5,-309e-6,307e-6,-306e-6,305e-6,-304e-6,303e-6,-302e-6,301e-6,-3e-4,298e-6,-297e-6,296e-6,-295e-6,294e-6,-293e-6,292e-6,-291e-6,289e-6,-288e-6,287e-6,-286e-6,284e-6,-284e-6,282e-6,-281e-6,28e-5,-279e-6,277e-6,-276e-6,275e-6,-274e-6,273e-6,-272e-6,27e-5,-269e-6,268e-6,-267e-6,265e-6,-264e-6,263e-6,-262e-6,26e-5,-259e-6,258e-6,-257e-6,256e-6,-254e-6,253e-6,-252e-6,25e-5,-249e-6,248e-6,-246e-6,245e-6,-244e-6,243e-6,-241e-6,24e-5,-239e-6,237e-6,-236e-6,235e-6,-234e-6,232e-6,-231e-6,23e-5,-228e-6,227e-6,-225e-6,224e-6,-223e-6,221e-6,-22e-5,219e-6,-217e-6,216e-6,-215e-6,213e-6,-212e-6,211e-6,-209e-6,208e-6,-206e-6,205e-6,-204e-6,202e-6,-201e-6,2e-4,-198e-6,196e-6,-195e-6,194e-6,-192e-6,191e-6,-189e-6,188e-6,-187e-6,185e-6,-184e-6,182e-6,-181e-6,18e-5,-178e-6,177e-6,-175e-6,174e-6,-172e-6,171e-6,-169e-6,168e-6,-166e-6,165e-6,-163e-6,162e-6,-16e-5,159e-6,-157e-6,156e-6,-155e-6,153e-6,-152e-6,15e-5,-149e-6,147e-6,-146e-6,144e-6,-142e-6,141e-6,-139e-6,138e-6,-136e-6,135e-6,-133e-6,132e-6,-13e-5,129e-6,-127e-6,126e-6,-124e-6,123e-6,-121e-6,12e-5,-118e-6,117e-6,-115e-6,113e-6,-112e-6,11e-5,-109e-6,107e-6,-106e-6,104e-6,-103e-6,101e-6,-99e-6,98e-6,-96e-6,95e-6,-93e-6,92e-6,-9e-5,89e-6,-87e-6,85e-6,-83e-6,82e-6,-8e-5,79e-6,-77e-6,76e-6,-74e-6,73e-6,-71e-6,69e-6,-68e-6,66e-6,-65e-6,63e-6,-62e-6,6e-5,-57e-6,55e-6,-53e-6,52e-6,-5e-5,49e-6,-47e-6,45e-6,-44e-6,42e-6,-41e-6,39e-6,-38e-6,36e-6,-35e-6,33e-6,-32e-6,3e-5,-29e-6,27e-6,-25e-6,24e-6,-22e-6,21e-6,-19e-6,17e-6,-16e-6,14e-6,-13e-6,11e-6,-1e-5,8e-6,-6e-6,5e-6,-3e-6,2e-6,0,-1e-6,3e-6,-4e-6,6e-6,-7e-6,9e-6,-11e-6,12e-6,-14e-6,15e-6,-17e-6,19e-6,-2e-5,22e-6,-23e-6,25e-6,-27e-6,28e-6,-3e-5,31e-6,-33e-6,34e-6,-36e-6,38e-6,-39e-6,4e-5,-42e-6,43e-6,-45e-6,47e-6,-48e-6,5e-5,-51e-6,53e-6,-54e-6,56e-6,-58e-6,59e-6,-61e-6,62e-6,-64e-6,65e-6,-67e-6,69e-6,-7e-5,72e-6,-73e-6,75e-6,-76e-6,78e-6,-79e-6,8e-5,-82e-6,84e-6,-85e-6,87e-6,-88e-6,9e-5,-91e-6,93e-6,-94e-6,96e-6,-97e-6,99e-6,-1e-4,102e-6,-104e-6,105e-6,-107e-6,108e-6,-11e-5,111e-6,-113e-6,114e-6,-116e-6,117e-6,-118e-6,12e-5,-121e-6,123e-6,-124e-6,126e-6,-127e-6,129e-6,-13e-5,131e-6,-133e-6,134e-6,-136e-6,137e-6,-139e-6,14e-5,-142e-6,143e-6,-145e-6,146e-6,-147e-6,149e-6,-15e-5,152e-6,-153e-6,155e-6,-156e-6,157e-6,-159e-6,16e-5,-161e-6,163e-6,-164e-6,166e-6,-167e-6,168e-6,-17e-5,171e-6,-172e-6,174e-6,-175e-6,177e-6,-178e-6,179e-6,-181e-6,182e-6,-183e-6,185e-6,-186e-6,187e-6,-189e-6,19e-5,-191e-6,192e-6,-194e-6,195e-6,-196e-6,198e-6,-199e-6,2e-4,-202e-6,203e-6,-204e-6,205e-6,-206e-6,208e-6,-209e-6,21e-5,-212e-6,213e-6,-214e-6,215e-6,-216e-6,218e-6,-219e-6,22e-5,-221e-6,223e-6,-223e-6,225e-6,-226e-6,227e-6,-228e-6,229e-6,-231e-6,232e-6,-233e-6,234e-6,-235e-6,236e-6,-237e-6,239e-6,-24e-5,241e-6,-242e-6,243e-6,-244e-6,245e-6,-246e-6,247e-6,-248e-6,242e-6,-243e-6,244e-6,-245e-6,246e-6,-247e-6,248e-6,-249e-6,25e-5,-251e-6,252e-6,-253e-6,254e-6,-255e-6,256e-6,-257e-6,257e-6,-258e-6,259e-6,-26e-5,261e-6,-262e-6,263e-6,-264e-6,265e-6,-266e-6,266e-6,-267e-6,268e-6,-269e-6,27e-5,-271e-6,272e-6,-272e-6,273e-6,-274e-6,275e-6,-276e-6,277e-6,-277e-6,278e-6,-279e-6,28e-5,-28e-5,281e-6,-282e-6,283e-6,-283e-6,284e-6,-285e-6,285e-6,-286e-6,287e-6,-288e-6,288e-6,-289e-6,29e-5,-29e-5,291e-6,-291e-6,292e-6,-293e-6,293e-6,-294e-6,295e-6,-295e-6,296e-6,-297e-6,297e-6,-298e-6,298e-6,-299e-6,299e-6,-3e-4,3e-4,-301e-6,301e-6,-302e-6,302e-6,-303e-6,303e-6,-304e-6,304e-6,-305e-6,305e-6,-306e-6,306e-6,-307e-6,307e-6,-307e-6,308e-6,-308e-6,309e-6,-309e-6,309e-6,-31e-5,31e-5,-31e-5,311e-6,-311e-6,311e-6,-312e-6,312e-6,-312e-6,313e-6,-313e-6,313e-6,-313e-6,314e-6,-314e-6,314e-6,-314e-6,315e-6,-315e-6,315e-6,-315e-6,316e-6,-316e-6,316e-6,-316e-6,316e-6,-316e-6,316e-6,-317e-6,317e-6,-317e-6,317e-6,-317e-6,317e-6,-317e-6,317e-6,-317e-6,317e-6,-317e-6,317e-6,-317e-6,317e-6,-317e-6,317e-6,-317e-6,317e-6,-317e-6,317e-6,-317e-6,317e-6,-317e-6,317e-6,-317e-6,317e-6,-317e-6,317e-6,-317e-6,317e-6,-316e-6,316e-6,-316e-6,316e-6,-316e-6,316e-6,-315e-6,315e-6,-315e-6,315e-6,-315e-6,314e-6,-314e-6,314e-6,-314e-6,313e-6,-313e-6,313e-6,-313e-6,312e-6,-312e-6,312e-6,-311e-6,311e-6,-311e-6,31e-5,-31e-5,309e-6,-309e-6,309e-6,-308e-6,308e-6,-307e-6,307e-6,-307e-6,306e-6,-306e-6,305e-6,-305e-6,304e-6,-304e-6,303e-6,-303e-6,302e-6,-302e-6,301e-6,-301e-6,3e-4,-3e-4,299e-6,-298e-6,298e-6,-297e-6,297e-6,-296e-6,295e-6,-295e-6,294e-6,-293e-6,293e-6,-292e-6,291e-6,-291e-6,29e-5,-289e-6,289e-6,-288e-6,287e-6,-286e-6,286e-6,-285e-6,284e-6,-283e-6,282e-6,-282e-6,281e-6,-28e-5,279e-6,-279e-6,278e-6,-277e-6,276e-6,-275e-6,274e-6,-273e-6,273e-6,-272e-6,271e-6,-27e-5,269e-6,-268e-6,267e-6,-266e-6,265e-6,-227e-6,226e-6,-225e-6,224e-6,-223e-6,222e-6,-222e-6,221e-6,-22e-5,219e-6,-218e-6,217e-6,-216e-6,215e-6,-214e-6,213e-6,-212e-6,211e-6,-21e-5,21e-5,-209e-6,208e-6,-207e-6,206e-6,-205e-6,204e-6,-203e-6,202e-6,-201e-6,2e-4,-199e-6,198e-6,-197e-6,196e-6,-194e-6,193e-6,-192e-6,191e-6,-19e-5,189e-6,-188e-6,187e-6,-186e-6,185e-6,-183e-6,182e-6,-181e-6,18e-5,-179e-6,178e-6,-177e-6,176e-6,-174e-6,173e-6,-172e-6,171e-6,-17e-5,169e-6,-167e-6,166e-6,-165e-6,164e-6,-163e-6,161e-6,-16e-5,159e-6,-158e-6,156e-6,-155e-6,154e-6,-153e-6,151e-6,-15e-5,149e-6,-148e-6,146e-6,-145e-6,144e-6,-142e-6,141e-6,-14e-5,139e-6,-137e-6,136e-6,-134e-6,133e-6,-132e-6,13e-5,-129e-6,128e-6,-127e-6,125e-6,-124e-6,122e-6,-121e-6,119e-6,-118e-6,117e-6,-115e-6,114e-6,-113e-6,111e-6,-11e-5,108e-6,-107e-6,106e-6,-104e-6,103e-6,-101e-6,1e-4,-98e-6,97e-6,-95e-6,94e-6,-93e-6,91e-6,-9e-5,88e-6,-87e-6,85e-6,-84e-6,82e-6,-81e-6,79e-6,-78e-6,76e-6,-75e-6,73e-6,-72e-6,7e-5,-69e-6,67e-6,-66e-6,64e-6,-63e-6,61e-6,-6e-5,58e-6,-57e-6,55e-6,-54e-6,52e-6,-51e-6,49e-6,-48e-6,46e-6,-45e-6,43e-6,-42e-6,4e-5,-39e-6,37e-6,-36e-6,34e-6,-33e-6,31e-6,-3e-5,28e-6,-26e-6,25e-6,-23e-6,22e-6,-2e-5,19e-6,-17e-6,15e-6,-14e-6,12e-6,-11e-6,9e-6,-8e-6,6e-6,-4e-6,3e-6,-1e-6]
}},{}],25:[function(require,module,exports){module.exports={real:[0,0,-.120226,.092153,-.069183,.055389,-.052221,.046895,-.043652,.041914,-.040126,.037627,-.035036,.03235,-.031463,.029372,-.02884,.027149,-.026446,.025058,-.02381,.023031,-.021987,.021034,-.020161,.019357,-.018615,.017928,-.01729,.016696,-.016141,.015622,-.015136,.014678,-.014248,.013842,-.013459,.013097,-.012179,.011868,-.011572,.011291,-.011023,.010768,-.01005,.009827,-.009615,.009411,-.009215,.009028,-.008848,.008543,-.008379,.008222,-.00807,.007924,-.006778,.00666,-.006545,.006435,-.006328,.006225,-.006124,.005413,-.005329,.005247,-.005168,.005091,-.005017,.004722,-.004654,.004589,-.004526,.004464,-.004404,.004345,-.004223,.004168,-.004115,.004063,-.004012,.00367,-.003626,.003582,-.00354,.003498,-.003457,.003117,-.003082,.003047,-.003014,.002981,-.002816,.002785,-.002756,.002685,-.003397,.003362,-.00338,.003346,-.003312,.00328,-.003248,.003216,-.003185,.003155,-.003125,.003096,-.003068,.00304,-.003012,.002985,-.002958,.002932,-.002907,.002971,-.002946,.002921,-.002896,.002872,-.002848,.002824,-.002801,.002778,-.002756,.002734,-.002712,.002691,-.00267,.002649,-.002629,.002609,-.002589,.00257,-.002551,.002532,-.002513,.002495,-.002477,.002459,-.002442,.002424,-.002407,.002581,-.002563,.002546,-.002528,.002511,-.002494,.002477,-.002461,.002445,-.002429,.002413,-.002397,.002382,-.002366,.002351,-.002336,.002322,-.002307,.002293,-.002279,.002265,-.002251,.002237,-.002224,.002211,-.002197,.002184,-.002172,.002159,-.002146,.002134,-.002122,.00211,-.002097,.002086,-.002074,.002062,-.002051,.00204,-.002028,.002017,-.002006,.001995,-.001984,.001974,-.001963,.001953,-.001943,.001933,-.001922,.001912,-.001902,.001893,-.001883,.001873,-.001864,.001855,-.001845,.001836,-.001827,.001818,-.001809,.0018,-.001791,.001782,-.001774,.001765,-.001757,.001749,-.00174,.001732,-.001724,.001716,-.001708,.0017,-.001692,.001684,-.001677,.001669,-.001661,.001654,-.001646,.001639,-.001632,.001625,-.001617,.00161,-.001603,.001596,-.001589,.001582,-.001576,.001569,-.001562,.001556,-.001549,.001542,-.001536,.001529,-.001523,.001517,-.00151,.001504,-.001498,.001492,-.001486,.00148,-.001473,.001467,-.001462,.001456,-.00145,.001444,-.001438,.001433,-.001427,.001421,-.001416,.00141,-.001405,.0014,-.001394,.001389,-.001383,.001378,-.001373,.001368,-.001362,.001357,-.001352,.001347,-.001342,.001337,-.001332,.001307,-.001302,.001297,-.001293,.001288,-.001284,.001279,-.001274,.00127,-.001265,.00126,-.001256,.001251,-.001247,.001243,-.001238,.001234,-.00123,.001225,-.001221,.001217,-.001212,.001208,-.001204,.0012,-.001196,.001192,-.001188,.001184,-.00118,.001176,-.001172,.001168,-.001164,.00116,-.001156,.001152,-.001149,.001145,-.001141,.001137,-.001134,.00113,-.001126,.001122,-.001119,.001115,-.001112,.001108,-.001105,.001101,-.001097,.001094,-.001091,.001087,-.001084,.00108,-.001076,.001074,-.00107,.001067,-.001063,.00106,-.001057,.001054,-.00105,.001047,-.001044,.001041,-.001037,.001034,-.001031,.001028,-.001025,.001022,-.001018,.001015,-.001012,.001009,-.001007,.001003,-.001,997e-6,-995e-6,992e-6,-988e-6,986e-6,-983e-6,98e-5,-977e-6,974e-6,-971e-6,968e-6,-966e-6,962e-6,-96e-5,957e-6,-954e-6,951e-6,-949e-6,946e-6,-943e-6,941e-6,-938e-6,936e-6,-932e-6,93e-5,-927e-6,925e-6,-922e-6,919e-6,-917e-6,914e-6,-912e-6,909e-6,-906e-6,904e-6,-901e-6,899e-6,-896e-6,894e-6,-891e-6,889e-6,-887e-6,884e-6,-881e-6,879e-6,-877e-6,874e-6,-871e-6,869e-6,-867e-6,865e-6,-862e-6,86e-5,-857e-6,855e-6,-853e-6,851e-6,-848e-6,846e-6,-843e-6,841e-6,-838e-6,837e-6,-834e-6,832e-6,-83e-5,828e-6,-826e-6,823e-6,-821e-6,819e-6,-817e-6,814e-6,-812e-6,81e-5,-808e-6,806e-6,-804e-6,802e-6,-799e-6,797e-6,-795e-6,792e-6,-791e-6,789e-6,-787e-6,785e-6,-782e-6,781e-6,-778e-6,8e-4,-798e-6,797e-6,-794e-6,792e-6,-79e-5,788e-6,-786e-6,784e-6,-781e-6,78e-5,-778e-6,776e-6,-774e-6,771e-6,-77e-5,768e-6,-766e-6,764e-6,-762e-6,759e-6,-758e-6,756e-6,-754e-6,752e-6,-749e-6,748e-6,-746e-6,744e-6,-743e-6,74e-5,-738e-6,737e-6,-735e-6,733e-6,-73e-5,729e-6,-727e-6,725e-6,-724e-6,721e-6,-719e-6,717e-6,-716e-6,713e-6,-713e-6,71e-5,-708e-6,706e-6,-705e-6,702e-6,-702e-6,699e-6,-697e-6,696e-6,-694e-6,692e-6,-69e-5,688e-6,-687e-6,685e-6,-684e-6,681e-6,-68e-5,678e-6,-676e-6,675e-6,-672e-6,67e-5,-669e-6,667e-6,-666e-6,665e-6,-662e-6,661e-6,-659e-6,657e-6,-655e-6,654e-6,-652e-6,65e-5,-649e-6,647e-6,-645e-6,643e-6,-642e-6,64e-5,-639e-6,637e-6,-636e-6,634e-6,-632e-6,63e-5,-629e-6,627e-6,-625e-6,625e-6,-622e-6,621e-6,-619e-6,618e-6,-615e-6,614e-6,-613e-6,611e-6,-61e-5,608e-6,-606e-6,604e-6,-603e-6,602e-6,-6e-4,598e-6,-596e-6,595e-6,-594e-6,592e-6,-591e-6,588e-6,-587e-6,586e-6,-584e-6,583e-6,-581e-6,579e-6,-578e-6,577e-6,-575e-6,573e-6,-572e-6,57e-5,-614e-6,612e-6,-611e-6,61e-5,-608e-6,605e-6,-606e-6,603e-6,-601e-6,6e-4,-598e-6,597e-6,-594e-6,593e-6,-591e-6,591e-6,-589e-6,587e-6,-585e-6,583e-6,-582e-6,58e-5,-579e-6,576e-6,-577e-6,574e-6,-573e-6,571e-6,-569e-6,568e-6,-567e-6,564e-6,-563e-6,562e-6,-56e-5,559e-6,-556e-6,555e-6,-553e-6,552e-6,-551e-6,549e-6,-548e-6,545e-6,-545e-6,542e-6,-541e-6,54e-5,-539e-6,537e-6,-535e-6,533e-6,-532e-6,53e-5,-529e-6,527e-6,-526e-6,523e-6,-523e-6,521e-6,-52e-5,518e-6,-518e-6,516e-6,-514e-6,513e-6,-51e-5,509e-6,-508e-6,507e-6,-505e-6,503e-6,-501e-6,501e-6,-499e-6,498e-6,-496e-6,496e-6,-493e-6,492e-6,-49e-5,489e-6,-488e-6,486e-6,-484e-6,482e-6,-481e-6,48e-5,-517e-6,515e-6,-514e-6,512e-6,-509e-6,508e-6,-506e-6,506e-6,-504e-6,501e-6,-501e-6,499e-6,-497e-6,496e-6,-494e-6,493e-6,-491e-6,491e-6,-487e-6,487e-6,-485e-6,484e-6,-482e-6,481e-6,-479e-6,479e-6,-475e-6,473e-6,-473e-6,472e-6,-47e-5,468e-6,-466e-6,464e-6,-463e-6,461e-6,-46e-5,458e-6,-458e-6,456e-6,-452e-6,452e-6,-451e-6,449e-6,-448e-6,446e-6,-444e-6,444e-6,-443e-6,439e-6,-439e-6,437e-6,-435e-6,434e-6,-432e-6,431e-6,-429e-6,429e-6,-426e-6,425e-6,-423e-6,422e-6,-42e-5,42e-5,-418e-6,415e-6,-414e-6,412e-6,-41e-5,409e-6,-409e-6,407e-6,-405e-6,404e-6,-402e-6,4e-4,-398e-6,398e-6,-396e-6,395e-6,-393e-6,391e-6,-391e-6,387e-6,-388e-6,385e-6,-383e-6,382e-6,-382e-6,38e-5,-378e-6,377e-6,-375e-6,373e-6,-374e-6,371e-6,-369e-6,368e-6,-366e-6,364e-6,-364e-6,36e-5,-361e-6,359e-6,-357e-6,355e-6,-355e-6,352e-6,-35e-5,35e-5,-349e-6,347e-6,-345e-6,345e-6,-344e-6,341e-6,-339e-6,338e-6,-336e-6,334e-6,-334e-6,333e-6,-331e-6,329e-6,-328e-6,326e-6,-326e-6,322e-6,-32e-5,32e-5,-318e-6,317e-6,-317e-6,315e-6,-312e-6,312e-6,-31e-5,309e-6,-307e-6,307e-6,-303e-6,304e-6,-301e-6,312e-6,-312e-6,312e-6,-309e-6,307e-6,-307e-6,304e-6,-304e-6,301e-6,-299e-6,299e-6,-298e-6,296e-6,-292e-6,293e-6,-291e-6,289e-6,-287e-6,286e-6,-284e-6,284e-6,-281e-6,279e-6,-278e-6,278e-6,-275e-6,275e-6,-273e-6,27e-5,-27e-5,27e-5,-267e-6,265e-6,-264e-6,262e-6,-262e-6,259e-6,-259e-6,256e-6,-253e-6,253e-6,-25e-5,249e-6,-25e-5,247e-6,-244e-6,244e-6,-241e-6,241e-6,-238e-6,238e-6,-236e-6,235e-6,-233e-6,232e-6,-23e-5,228e-6,-226e-6,226e-6,-223e-6,223e-6,-223e-6,22e-5,-218e-6,216e-6,-215e-6,213e-6,-213e-6,212e-6,-21e-5,208e-6,-205e-6,205e-6,-202e-6,202e-6,-2e-4,2e-4,-197e-6,195e-6,-194e-6,192e-6,-192e-6,189e-6,-189e-6,187e-6,-184e-6,184e-6,-182e-6,181e-6,-179e-6,176e-6,-176e-6,176e-6,-174e-6,171e-6,-171e-6,168e-6,-166e-6,166e-6,-166e-6,163e-6,-161e-6,158e-6,-158e-6,158e-6,-155e-6,155e-6,-153e-6,15e-5,-147e-6,147e-6,-148e-6,145e-6,-143e-6,143e-6,-143e-6,14e-5,-137e-6,135e-6,-135e-6,132e-6,-132e-6,13e-5,-129e-6,127e-6,-124e-6,124e-6,-124e-6,121e-6,-119e-6,119e-6,-119e-6,118e-6,-116e-6,113e-6,-113e-6,113e-6,-11e-5,108e-6,-105e-6,105e-6,-102e-6,102e-6,-1e-4,1e-4,-98e-6,97e-6,-95e-6,92e-6,-92e-6,92e-6,-89e-6,87e-6,-87e-6,87e-6,-84e-6,82e-6,-79e-6,79e-6,-79e-6,76e-6,-74e-6,74e-6,-71e-6,71e-6,-69e-6,68e-6,-66e-6,63e-6,-63e-6,63e-6,-6e-5,58e-6,-58e-6,55e-6,-55e-6,53e-6,-5e-5,5e-5,-5e-5,47e-6,-45e-6,42e-6,-42e-6,42e-6,-39e-6,37e-6,-37e-6,37e-6,-34e-6,32e-6,-32e-6,29e-6,-29e-6,26e-6,-26e-6,24e-6,-21e-6,21e-6,-21e-6,18e-6,-16e-6,16e-6,-16e-6,13e-6,-11e-6,11e-6,-11e-6,8e-6,-5e-6,3e-6,-3e-6,3e-6,0,-3e-6,3e-6,-3e-6,5e-6,-8e-6,11e-6,-1e-5,11e-6,-13e-6,16e-6,-16e-6,16e-6,-18e-6,21e-6,-21e-6,21e-6,-24e-6,26e-6,-26e-6,26e-6,-29e-6,32e-6,-31e-6,32e-6,-34e-6,37e-6,-37e-6,39e-6,-4e-5,42e-6,-45e-6,45e-6,-45e-6,47e-6,-5e-5,5e-5,-5e-5,53e-6,-55e-6,54e-6,-56e-6,59e-6,-59e-6,57e-6,-59e-6,62e-6,-64e-6,62e-6,-64e-6,67e-6,-69e-6,69e-6,-69e-6,72e-6,-72e-6,74e-6,-74e-6,77e-6,-77e-6,79e-6,-79e-6,82e-6,-81e-6,84e-6,-84e-6,86e-6,-86e-6,89e-6,-89e-6,91e-6,-92e-6,94e-6,-94e-6,96e-6,-97e-6,99e-6,-101e-6,102e-6,-102e-6,104e-6,-106e-6,107e-6,-106e-6,109e-6,-111e-6,111e-6,-111e-6,113e-6,-116e-6,116e-6,-116e-6,119e-6,-121e-6,121e-6,-122e-6,124e-6,-126e-6,124e-6,-126e-6,128e-6,-128e-6,131e-6,-131e-6,133e-6,-134e-6,134e-6,-136e-6,136e-6,-139e-6,141e-6,-141e-6,141e-6,-143e-6,144e-6,-146e-6,146e-6,-149e-6,149e-6,-148e-6,151e-6,-153e-6,153e-6,-154e-6,156e-6,-156e-6,159e-6,-158e-6,16e-5,-161e-6,163e-6,-163e-6,164e-6,-166e-6,165e-6,-168e-6,168e-6,-171e-6,171e-6,-171e-6,173e-6,-173e-6,175e-6,-176e-6,178e-6,-178e-6,18e-5,-18e-5,181e-6,-183e-6,183e-6,-184e-6,185e-6,-188e-6,188e-6,-188e-6,191e-6,-191e-6,19e-5,-193e-6,193e-6,-196e-6,196e-6,-195e-6,198e-6,-198e-6,2e-4,-201e-6,2e-4,-203e-6,203e-6,-205e-6,205e-6,-207e-6,208e-6,-208e-6,209e-6,-21e-5,213e-6,-213e-6,213e-6,-215e-6,215e-6,-215e-6,218e-6,-217e-6,22e-5,-22e-5,221e-6,-222e-6,222e-6,-225e-6,223e-6,-225e-6,227e-6,-227e-6,228e-6,-228e-6,23e-5,-23e-5,231e-6,-232e-6,232e-6,-235e-6,236e-6,-235e-6,238e-6,-238e-6,237e-6,-237e-6,24e-5,-235e-6,235e-6,-236e-6,235e-6,-237e-6,238e-6,-237e-6,24e-5,-24e-5,241e-6,-242e-6,243e-6,-242e-6,245e-6,-245e-6,244e-6,-245e-6,246e-6,-247e-6,248e-6,-249e-6,249e-6,-251e-6,251e-6,-252e-6,252e-6,-254e-6,254e-6,-255e-6,255e-6,-257e-6,257e-6,-259e-6,258e-6,-259e-6,259e-6,-26e-5,261e-6,-261e-6,262e-6,-262e-6,264e-6,-263e-6,264e-6,-265e-6,266e-6,-266e-6,267e-6,-268e-6,269e-6,-27e-5,269e-6,-27e-5,271e-6,-272e-6,272e-6,-272e-6,273e-6,-274e-6,274e-6,-275e-6,276e-6,-277e-6,277e-6,-276e-6,278e-6,-279e-6,279e-6,-28e-5,28e-5,-281e-6,281e-6,-282e-6,282e-6,-282e-6,283e-6,-284e-6,283e-6,-285e-6,285e-6,-286e-6,285e-6,-286e-6,287e-6,-287e-6,288e-6,-288e-6,289e-6,-289e-6,29e-5,-29e-5,291e-6,-29e-5,291e-6,-292e-6,292e-6,-292e-6,293e-6,-293e-6,293e-6,-293e-6,294e-6,-295e-6,295e-6,-296e-6,296e-6,-295e-6,296e-6,-297e-6,297e-6,-298e-6,298e-6,-298e-6,299e-6,-299e-6,299e-6,-299e-6,3e-4,-3e-4,3e-4,-3e-4,301e-6,-302e-6,302e-6,-301e-6,302e-6,-303e-6,302e-6,-303e-6,303e-6,-303e-6,303e-6,-304e-6,304e-6,-304e-6,304e-6,-304e-6,305e-6,-305e-6,305e-6,-305e-6,296e-6,-297e-6,297e-6,-297e-6,297e-6,-297e-6,297e-6,-297e-6,297e-6,-298e-6,297e-6,-298e-6,298e-6,-298e-6,298e-6,-298e-6,298e-6,-299e-6,298e-6,-298e-6,299e-6,-298e-6,299e-6,-299e-6,299e-6,-299e-6,299e-6,-299e-6,299e-6,-299e-6,299e-6,-299e-6,299e-6,-299e-6,299e-6,-299e-6,299e-6,-299e-6,299e-6,-299e-6,299e-6,-299e-6,299e-6,-299e-6,299e-6,-299e-6,299e-6,-299e-6,299e-6,-298e-6,298e-6,-298e-6,298e-6,-298e-6,298e-6,-298e-6,298e-6,-297e-6,297e-6,-297e-6,297e-6,-297e-6,297e-6,-297e-6,297e-6,-296e-6,296e-6,-296e-6,296e-6,-296e-6,296e-6,-295e-6,295e-6,-295e-6,295e-6,-295e-6,294e-6,-294e-6,294e-6,-294e-6,293e-6,-293e-6,293e-6,-293e-6,279e-6,-279e-6,279e-6,-278e-6,278e-6,-278e-6,278e-6,-277e-6,277e-6,-277e-6,276e-6,-276e-6,276e-6,-275e-6,275e-6,-275e-6,275e-6,-274e-6,274e-6,-273e-6,273e-6,-273e-6,273e-6,-272e-6,272e-6,-271e-6,271e-6,-271e-6,27e-5,-27e-5,269e-6,-269e-6,268e-6,-264e-6,263e-6,-263e-6,263e-6,-262e-6,262e-6,-262e-6,261e-6,-261e-6,26e-5,-26e-5,259e-6,-259e-6,258e-6,-258e-6,257e-6,-256e-6,256e-6,-255e-6,255e-6,-255e-6,254e-6,-254e-6,253e-6,-253e-6,252e-6,-251e-6,251e-6,-25e-5,25e-5,-249e-6,249e-6,-249e-6,248e-6,-244e-6,243e-6,-242e-6,242e-6,-241e-6,241e-6,-239e-6,239e-6,-239e-6,238e-6,-238e-6,237e-6,-237e-6,235e-6,-235e-6,234e-6,-234e-6,233e-6,-233e-6,232e-6,-231e-6,23e-5,-23e-5,229e-6,-228e-6,228e-6,-227e-6,227e-6,-226e-6,225e-6,-225e-6,224e-6,-223e-6,222e-6,-222e-6,22e-5,-22e-5,22e-5,-218e-6,217e-6,-217e-6,216e-6,-215e-6,215e-6,-214e-6,213e-6,-212e-6,212e-6,-211e-6,21e-5,-21e-5,208e-6,-208e-6,207e-6,-206e-6,206e-6,-204e-6,204e-6,-203e-6,202e-6,-201e-6,2e-4,-2e-4,199e-6,-198e-6,196e-6,-196e-6,196e-6,-194e-6,194e-6,-194e-6,192e-6,-191e-6,189e-6,-189e-6,189e-6,-187e-6,187e-6,-186e-6,185e-6,-184e-6,184e-6,-182e-6,181e-6,-181e-6,179e-6,-179e-6,177e-6,-177e-6,176e-6,-174e-6,174e-6,-173e-6,172e-6,-172e-6,17e-5,-168e-6,168e-6,-168e-6,166e-6,-166e-6,164e-6,-163e-6,162e-6,-162e-6,162e-6,-159e-6,158e-6,-158e-6,157e-6,-155e-6,155e-6,-153e-6,153e-6,-151e-6,151e-6,-149e-6,149e-6,-147e-6,146e-6,-145e-6,145e-6,-143e-6,142e-6,-14e-5,14e-5,-138e-6,138e-6,-136e-6,136e-6,-135e-6,133e-6,-133e-6,132e-6,-131e-6,129e-6,-128e-6,127e-6,-127e-6,125e-6,-125e-6,123e-6,-121e-6,119e-6,-117e-6,117e-6,-115e-6,114e-6,-113e-6,112e-6,-112e-6,111e-6,-111e-6,108e-6,-108e-6,106e-6,-106e-6,104e-6,-102e-6,102e-6,-1e-4,1e-4,-97e-6,97e-6,-95e-6,95e-6,-94e-6,93e-6,-91e-6,89e-6,-89e-6,87e-6,-87e-6,85e-6,-84e-6,83e-6,-82e-6,81e-6,-81e-6,79e-6,-77e-6,77e-6,-74e-6,74e-6,-72e-6,72e-6,-7e-5,7e-5,-68e-6,68e-6,-66e-6,65e-6,-63e-6,63e-6,-61e-6,59e-6,-59e-6,57e-6,-57e-6,55e-6,-55e-6,53e-6,-53e-6,51e-6,-51e-6,49e-6,-49e-6,47e-6,-47e-6,44e-6,-42e-6,42e-6,-4e-5,4e-5,-38e-6,36e-6,-36e-6,34e-6,-34e-6,32e-6,-32e-6,3e-5,-3e-5,28e-6,-28e-6,26e-6,-23e-6,23e-6,-21e-6,21e-6,-19e-6,19e-6,-17e-6,15e-6,-15e-6,13e-6,-13e-6,11e-6,-11e-6,8e-6,-8e-6,6e-6,-6e-6,4e-6,-4e-6,2e-6,-2e-6,0,2e-6,-4e-6,4e-6,-6e-6,6e-6,-9e-6,8e-6,-11e-6,11e-6,-13e-6,13e-6,-15e-6,15e-6,-17e-6,17e-6,-19e-6,19e-6,-21e-6,23e-6,-23e-6,25e-6,-25e-6,28e-6,-28e-6,3e-5,-3e-5,32e-6,-32e-6,34e-6,-34e-6,36e-6,-38e-6,38e-6,-38e-6,4e-5,-4e-5,42e-6,-45e-6,45e-6,-47e-6,49e-6,-49e-6,51e-6,-51e-6,53e-6,-53e-6,55e-6,-55e-6,57e-6,-57e-6,59e-6,-59e-6,61e-6,-62e-6,64e-6,-64e-6,65e-6,-66e-6,68e-6,-68e-6,7e-5,-7e-5,72e-6,-72e-6,74e-6,-74e-6,76e-6,-76e-6,78e-6,-78e-6,81e-6,-81e-6,82e-6,-83e-6,85e-6,-85e-6,85e-6,-87e-6,89e-6,-89e-6,89e-6,-91e-6,91e-6,-93e-6,94e-6,-95e-6,95e-6,-97e-6,98e-6,-99e-6,99e-6,-1e-4,102e-6,-102e-6,104e-6,-106e-6,106e-6,-107e-6,108e-6,-108e-6,11e-5,-11e-5,11e-5,-113e-6,113e-6,-114e-6,115e-6,-116e-6,116e-6,-117e-6,119e-6,-119e-6,121e-6,-121e-6,123e-6,-123e-6,123e-6,-125e-6,125e-6,-127e-6,128e-6,-129e-6,129e-6,-13e-5,131e-6,-132e-6,132e-6,-133e-6,134e-6,-135e-6,136e-6,-136e-6,137e-6,-138e-6,138e-6,-14e-5,14e-5,-142e-6,142e-6,-142e-6,144e-6,-144e-6,145e-6,-146e-6,147e-6,-147e-6,148e-6,-149e-6,149e-6,-151e-6,151e-6,-15e-5,152e-6,-152e-6,153e-6,-154e-6,155e-6,-155e-6,157e-6,-157e-6,158e-6,-158e-6,159e-6,-159e-6,161e-6,-161e-6,161e-6,-162e-6,163e-6,-163e-6,163e-6,-165e-6,165e-6,-166e-6,166e-6,-166e-6,167e-6,-168e-6,168e-6,-169e-6,169e-6,-17e-5,17e-5,-171e-6,171e-6,-172e-6,172e-6,-173e-6,173e-6,-174e-6,174e-6,-175e-6,175e-6,-176e-6,176e-6,-177e-6,177e-6,-178e-6,178e-6,-178e-6,178e-6,-179e-6,18e-5,-18e-5,18e-5,-181e-6,181e-6,-182e-6,182e-6,-182e-6,183e-6,-183e-6,183e-6,-183e-6,184e-6,-184e-6,185e-6,-185e-6,185e-6,-186e-6,186e-6,-186e-6,186e-6,-186e-6,187e-6,-187e-6,187e-6,-187e-6,187e-6,-188e-6,188e-6,-188e-6,188e-6,-189e-6,189e-6,-189e-6,189e-6,-189e-6,19e-5,-189e-6,19e-5,-19e-5,19e-5,-19e-5,19e-5,-191e-6,19e-5,-191e-6,191e-6,-191e-6,191e-6,-191e-6,191e-6,-191e-6,191e-6,-191e-6,191e-6,-191e-6,191e-6,-191e-6,191e-6,-191e-6,191e-6,-191e-6,191e-6,-191e-6,191e-6,-191e-6,191e-6,-191e-6,191e-6,-191e-6,191e-6],imag:[0,.229087,0,0,0,2e-6,-3e-6,3e-6,-6e-6,6e-6,-7e-6,7e-6,-7e-6,11e-6,-11e-6,1e-5,-11e-6,11e-6,-15e-6,14e-6,-18e-6,0,0,0,0,0,0,0,0,0,0,0,0,39e-6,-39e-6,35e-6,-35e-6,21e-6,-2e-5,2e-5,-3e-5,32e-6,-29e-6,29e-6,-27e-6,27e-6,-31e-6,31e-6,-31e-6,31e-6,-34e-6,34e-6,-34e-6,34e-6,-37e-6,37e-6,-32e-6,32e-6,-32e-6,35e-6,-35e-6,35e-6,-35e-6,32e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,33e-6,-33e-6,35e-6,-35e-6,35e-6,-35e-6,38e-6,-37e-6,37e-6,-4e-5,4e-5,-37e-6,34e-6,-37e-6,37e-6,-37e-6,39e-6,-39e-6,36e-6,-37e-6,37e-6,-35e-6,37e-6,-36e-6,36e-6,-38e-6,37e-6,-47e-6,47e-6,-48e-6,48e-6,-5e-5,5e-5,-5e-5,53e-6,-53e-6,53e-6,-53e-6,53e-6,-54e-6,55e-6,-55e-6,55e-6,-55e-6,55e-6,-55e-6,6e-5,-6e-5,6e-5,-6e-5,6e-5,-62e-6,62e-6,-62e-6,62e-6,-62e-6,62e-6,-64e-6,64e-6,-66e-6,66e-6,-66e-6,66e-6,-66e-6,69e-6,-69e-6,69e-6,-69e-6,69e-6,-69e-6,71e-6,-71e-6,71e-6,-74e-6,8e-5,-8e-5,8e-5,-83e-6,83e-6,-8e-5,83e-6,-83e-6,83e-6,-83e-6,85e-6,-85e-6,85e-6,-85e-6,88e-6,-88e-6,88e-6,-88e-6,88e-6,-91e-6,91e-6,-91e-6,91e-6,-91e-6,91e-6,-94e-6,94e-6,-94e-6,94e-6,-96e-6,96e-6,-96e-6,96e-6,-99e-6,96e-6,-99e-6,99e-6,-99e-6,99e-6,-102e-6,102e-6,-102e-6,102e-6,-105e-6,105e-6,-105e-6,105e-6,-105e-6,105e-6,-106e-6,106e-6,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-111e-6,111e-6,-111e-6,111e-6,-114e-6,111e-6,-114e-6,117e-6,-114e-6,116e-6,-117e-6,117e-6,-117e-6,119e-6,-119e-6,119e-6,-122e-6,122e-6,-119e-6,122e-6,-122e-6,122e-6,-124e-6,124e-6,-124e-6,124e-6,-124e-6,124e-6,-127e-6,127e-6,-127e-6,13e-5,-127e-6,129e-6,-13e-5,129e-6,-132e-6,129e-6,-132e-6,132e-6,-132e-6,135e-6,-132e-6,135e-6,-135e-6,137e-6,-137e-6,137e-6,-137e-6,137e-6,-14e-5,14e-5,-14e-5,14e-5,-142e-6,14e-5,-143e-6,142e-6,-142e-6,145e-6,-145e-6,145e-6,-145e-6,145e-6,-145e-6,145e-6,-148e-6,148e-6,-148e-6,15e-5,-15e-5,15e-5,-15e-5,15e-5,-153e-6,153e-6,-153e-6,151e-6,-15e-5,153e-6,-153e-6,153e-6,-153e-6,156e-6,-155e-6,156e-6,-156e-6,158e-6,-156e-6,158e-6,-158e-6,158e-6,-158e-6,161e-6,-161e-6,161e-6,-161e-6,163e-6,-163e-6,163e-6,-163e-6,163e-6,-163e-6,166e-6,-166e-6,166e-6,-166e-6,168e-6,-168e-6,168e-6,-168e-6,171e-6,-171e-6,171e-6,-171e-6,171e-6,-171e-6,173e-6,-174e-6,173e-6,-173e-6,176e-6,-173e-6,176e-6,-176e-6,176e-6,-176e-6,178e-6,-179e-6,179e-6,-178e-6,181e-6,-181e-6,181e-6,-184e-6,181e-6,-184e-6,184e-6,-184e-6,184e-6,-184e-6,184e-6,-187e-6,187e-6,-187e-6,187e-6,-19e-5,189e-6,-189e-6,189e-6,-189e-6,19e-5,-192e-6,192e-6,-192e-6,194e-6,-192e-6,195e-6,-195e-6,195e-6,-195e-6,195e-6,-197e-6,197e-6,-197e-6,197e-6,-2e-4,2e-4,-2e-4,2e-4,-2e-4,202e-6,-202e-6,202e-6,-202e-6,205e-6,-202e-6,205e-6,-205e-6,205e-6,-207e-6,205e-6,-207e-6,208e-6,-208e-6,208e-6,-21e-5,211e-6,-21e-5,21e-5,-21e-5,213e-6,-213e-6,213e-6,-213e-6,213e-6,-215e-6,216e-6,-216e-6,216e-6,-216e-6,218e-6,-218e-6,218e-6,-218e-6,219e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-224e-6,224e-6,-224e-6,224e-6,-224e-6,226e-6,-226e-6,226e-6,-229e-6,226e-6,-229e-6,229e-6,-229e-6,229e-6,-229e-6,231e-6,-232e-6,232e-6,-232e-6,234e-6,-234e-6,234e-6,-234e-6,234e-6,-234e-6,234e-6,-237e-6,237e-6,-237e-6,24e-5,-239e-6,239e-6,-239e-6,24e-5,-242e-6,239e-6,-242e-6,25e-5,-25e-5,249e-6,-252e-6,252e-6,-252e-6,252e-6,-252e-6,252e-6,-255e-6,255e-6,-255e-6,255e-6,-255e-6,258e-6,-257e-6,258e-6,-258e-6,257e-6,-258e-6,26e-5,-261e-6,26e-5,-26e-5,261e-6,-263e-6,263e-6,-263e-6,263e-6,-263e-6,266e-6,-266e-6,265e-6,-266e-6,266e-6,-269e-6,268e-6,-269e-6,269e-6,-268e-6,271e-6,-271e-6,272e-6,-271e-6,274e-6,-271e-6,274e-6,-274e-6,274e-6,-274e-6,277e-6,-274e-6,276e-6,-277e-6,277e-6,-277e-6,279e-6,-279e-6,279e-6,-28e-5,279e-6,-279e-6,282e-6,-282e-6,282e-6,-282e-6,282e-6,-285e-6,285e-6,-284e-6,285e-6,-285e-6,285e-6,-288e-6,287e-6,-287e-6,288e-6,-29e-5,288e-6,-291e-6,29e-5,-29e-5,29e-5,-293e-6,293e-6,-293e-6,293e-6,-293e-6,293e-6,-293e-6,295e-6,-296e-6,296e-6,-296e-6,296e-6,-298e-6,296e-6,-299e-6,298e-6,-299e-6,298e-6,-301e-6,3e-4,-301e-6,301e-6,-301e-6,301e-6,-303e-6,304e-6,-304e-6,304e-6,-304e-6,306e-6,-306e-6,306e-6,-306e-6,307e-6,-306e-6,309e-6,-309e-6,309e-6,-31e-5,309e-6,-31e-5,311e-6,-312e-6,311e-6,-312e-6,313e-6,-312e-6,315e-6,-339e-6,34e-5,-339e-6,34e-5,-339e-6,342e-6,-339e-6,342e-6,-343e-6,342e-6,-343e-6,343e-6,-345e-6,345e-6,-346e-6,345e-6,-346e-6,346e-6,-348e-6,349e-6,-348e-6,349e-6,-348e-6,351e-6,-348e-6,351e-6,-351e-6,351e-6,-352e-6,352e-6,-352e-6,354e-6,-355e-6,354e-6,-355e-6,354e-6,-357e-6,356e-6,-357e-6,357e-6,-357e-6,358e-6,-358e-6,36e-5,-358e-6,361e-6,-36e-5,361e-6,-36e-5,361e-6,-362e-6,363e-6,-363e-6,363e-6,-364e-6,364e-6,-364e-6,366e-6,-366e-6,367e-6,-366e-6,367e-6,-366e-6,367e-6,-368e-6,367e-6,-37e-5,369e-6,-37e-5,369e-6,-37e-5,371e-6,-372e-6,371e-6,-372e-6,372e-6,-372e-6,372e-6,-374e-6,374e-6,-374e-6,374e-6,-375e-6,375e-6,-377e-6,377e-6,-377e-6,378e-6,-407e-6,408e-6,-407e-6,408e-6,-411e-6,41e-5,-411e-6,41e-5,-411e-6,412e-6,-412e-6,413e-6,-414e-6,413e-6,-414e-6,413e-6,-414e-6,413e-6,-416e-6,415e-6,-416e-6,416e-6,-417e-6,416e-6,-417e-6,416e-6,-419e-6,42e-5,-419e-6,418e-6,-419e-6,42e-5,-421e-6,422e-6,-422e-6,422e-6,-422e-6,423e-6,-422e-6,423e-6,-425e-6,425e-6,-424e-6,425e-6,-425e-6,425e-6,-426e-6,426e-6,-425e-6,428e-6,-427e-6,428e-6,-429e-6,428e-6,-429e-6,429e-6,-429e-6,429e-6,-431e-6,43e-5,-431e-6,431e-6,-431e-6,431e-6,-431e-6,434e-6,-433e-6,434e-6,-434e-6,434e-6,-433e-6,434e-6,-435e-6,434e-6,-435e-6,436e-6,-436e-6,436e-6,-437e-6,436e-6,-437e-6,438e-6,-437e-6,439e-6,-437e-6,439e-6,-44e-5,439e-6,-439e-6,44e-5,-44e-5,44e-5,-44e-5,441e-6,-439e-6,441e-6,-442e-6,441e-6,-442e-6,443e-6,-442e-6,444e-6,-442e-6,443e-6,-444e-6,445e-6,-444e-6,445e-6,-445e-6,445e-6,-444e-6,445e-6,-446e-6,445e-6,-445e-6,446e-6,-447e-6,447e-6,-447e-6,448e-6,-447e-6,447e-6,-448e-6,448e-6,-448e-6,449e-6,-448e-6,45e-5,-45e-5,45e-5,-45e-5,45e-5,-449e-6,45e-5,-451e-6,45e-5,-451e-6,45e-5,-451e-6,451e-6,-452e-6,451e-6,-452e-6,474e-6,-474e-6,473e-6,-474e-6,475e-6,-474e-6,475e-6,-474e-6,475e-6,-476e-6,475e-6,-474e-6,475e-6,-477e-6,475e-6,-476e-6,476e-6,-477e-6,476e-6,-477e-6,476e-6,-477e-6,478e-6,-477e-6,476e-6,-477e-6,477e-6,-477e-6,478e-6,-477e-6,477e-6,-477e-6,478e-6,-477e-6,478e-6,-478e-6,478e-6,-478e-6,478e-6,-479e-6,478e-6,-48e-5,479e-6,-478e-6,479e-6,-48e-5,479e-6,-48e-5,479e-6,-48e-5,479e-6,-48e-5,479e-6,-48e-5,479e-6,-48e-5,48e-5,-48e-5,48e-5,-48e-5,48e-5,-479e-6,48e-5,-48e-5,48e-5,-48e-5,48e-5,-48e-5,479e-6,-48e-5,48e-5,-48e-5,48e-5,-48e-5,48e-5,-48e-5,48e-5,-48e-5,48e-5,-48e-5,48e-5,-48e-5,48e-5,-479e-6,48e-5,-48e-5,48e-5,-48e-5,479e-6,-48e-5,48e-5,-479e-6,479e-6,-479e-6,479e-6,-479e-6,479e-6,-48e-5,479e-6,-478e-6,479e-6,-479e-6,479e-6,-479e-6,478e-6,-478e-6,478e-6,-478e-6,478e-6,-479e-6,478e-6,-477e-6,478e-6,-478e-6,477e-6,-477e-6,477e-6,-477e-6,477e-6,-477e-6,477e-6,-476e-6,477e-6,-476e-6,476e-6,-476e-6,476e-6,-475e-6,475e-6,-476e-6,483e-6,-482e-6,482e-6,-482e-6,482e-6,-482e-6,481e-6,-481e-6,481e-6,-481e-6,481e-6,-481e-6,48e-5,-48e-5,48e-5,-48e-5,479e-6,-479e-6,479e-6,-479e-6,478e-6,-478e-6,478e-6,-478e-6,477e-6,-477e-6,477e-6,-477e-6,476e-6,-476e-6,476e-6,-476e-6,475e-6,-475e-6,475e-6,-475e-6,474e-6,-474e-6,474e-6,-473e-6,473e-6,-473e-6,473e-6,-472e-6,472e-6,-471e-6,471e-6,-471e-6,471e-6,-47e-5,47e-5,-47e-5,469e-6,-469e-6,468e-6,-468e-6,468e-6,-468e-6,467e-6,-467e-6,466e-6,-466e-6,466e-6,-465e-6,465e-6,-464e-6,464e-6,-464e-6,463e-6,-463e-6,463e-6,-462e-6,462e-6,-461e-6,461e-6,-461e-6,46e-5,-46e-5,459e-6,-459e-6,458e-6,-458e-6,458e-6,-457e-6,457e-6,-456e-6,456e-6,-455e-6,455e-6,-454e-6,454e-6,-453e-6,453e-6,-452e-6,452e-6,-452e-6,451e-6,-45e-5,45e-5,-45e-5,449e-6,-448e-6,448e-6,-448e-6,447e-6,-446e-6,446e-6,-446e-6,445e-6,-444e-6,444e-6,-443e-6,443e-6,-442e-6,441e-6,-441e-6,441e-6,-44e-5,439e-6,-439e-6,438e-6,-438e-6,437e-6,-437e-6,436e-6,-435e-6,435e-6,-421e-6,421e-6,-42e-5,419e-6,-419e-6,418e-6,-417e-6,417e-6,-416e-6,416e-6,-415e-6,415e-6,-414e-6,413e-6,-413e-6,412e-6,-411e-6,411e-6,-41e-5,41e-5,-409e-6,408e-6,-407e-6,407e-6,-406e-6,406e-6,-405e-6,404e-6,-403e-6,403e-6,-402e-6,402e-6,-401e-6,4e-4,-399e-6,399e-6,-398e-6,397e-6,-396e-6,396e-6,-395e-6,394e-6,-394e-6,393e-6,-392e-6,391e-6,-391e-6,39e-5,-389e-6,388e-6,-388e-6,387e-6,-386e-6,385e-6,-385e-6,384e-6,-383e-6,383e-6,-381e-6,381e-6,-38e-5,379e-6,-379e-6,378e-6,-377e-6,376e-6,-375e-6,374e-6,-374e-6,373e-6,-372e-6,371e-6,-371e-6,369e-6,-369e-6,369e-6,-367e-6,366e-6,-365e-6,365e-6,-364e-6,363e-6,-362e-6,361e-6,-36e-5,359e-6,-358e-6,358e-6,-357e-6,356e-6,-356e-6,354e-6,-354e-6,352e-6,-351e-6,351e-6,-349e-6,349e-6,-348e-6,347e-6,-346e-6,345e-6,-344e-6,343e-6,-343e-6,341e-6,-341e-6,34e-5,-339e-6,337e-6,-337e-6,336e-6,-334e-6,334e-6,-334e-6,332e-6,-331e-6,329e-6,-329e-6,329e-6,-327e-6,327e-6,-325e-6,324e-6,-324e-6,322e-6,-322e-6,32e-5,-319e-6,318e-6,-317e-6,317e-6,-315e-6,314e-6,-312e-6,312e-6,-312e-6,309e-6,-309e-6,309e-6,-307e-6,306e-6,-304e-6,304e-6,-303e-6,301e-6,-301e-6,299e-6,-3e-4,297e-6,-296e-6,296e-6,-295e-6,294e-6,-292e-6,292e-6,-29e-5,289e-6,-289e-6,286e-6,-285e-6,285e-6,-282e-6,282e-6,-282e-6,282e-6,-279e-6,268e-6,-268e-6,267e-6,-267e-6,265e-6,-264e-6,264e-6,-261e-6,261e-6,-26e-5,258e-6,-257e-6,257e-6,-254e-6,254e-6,-254e-6,253e-6,-251e-6,25e-5,-248e-6,247e-6,-247e-6,244e-6,-244e-6,243e-6,-242e-6,24e-5,-24e-5,238e-6,-238e-6,235e-6,-235e-6,232e-6,-232e-6,231e-6,-23e-5,229e-6,-228e-6,227e-6,-226e-6,226e-6,-223e-6,223e-6,-221e-6,22e-5,-218e-6,218e-6,-216e-6,215e-6,-213e-6,212e-6,-212e-6,21e-5,-209e-6,207e-6,-207e-6,206e-6,-204e-6,202e-6,-202e-6,201e-6,-199e-6,197e-6,-196e-6,197e-6,-194e-6,192e-6,-192e-6,189e-6,-189e-6,187e-6,-187e-6,185e-6,-184e-6,184e-6,-182e-6,18e-5,-18e-5,177e-6,-177e-6,175e-6,-175e-6,173e-6,-172e-6,17e-5,-168e-6,168e-6,-166e-6,165e-6,-163e-6,163e-6,-161e-6,161e-6,-159e-6,158e-6,-156e-6,156e-6,-154e-6,154e-6,-152e-6,151e-6,-148e-6,146e-6,-146e-6,144e-6,-144e-6,144e-6,-141e-6,139e-6,-139e-6,137e-6,-135e-6,135e-6,-133e-6,132e-6,-131e-6,129e-6,-127e-6,127e-6,-125e-6,125e-6,-122e-6,12e-5,-12e-5,12e-5,-117e-6,115e-6,-115e-6,113e-6,-113e-6,111e-6,-11e-5,108e-6,-108e-6,105e-6,-105e-6,103e-6,-101e-6,101e-6,-99e-6,98e-6,-93e-6,91e-6,-9e-5,88e-6,-88e-6,88e-6,-86e-6,84e-6,-84e-6,81e-6,-81e-6,79e-6,-77e-6,77e-6,-75e-6,75e-6,-72e-6,7e-5,-7e-5,7e-5,-68e-6,68e-6,-65e-6,63e-6,-63e-6,61e-6,-6e-5,58e-6,-56e-6,56e-6,-53e-6,53e-6,-51e-6,51e-6,-49e-6,46e-6,-46e-6,47e-6,-44e-6,44e-6,-42e-6,4e-5,-4e-5,37e-6,-37e-6,35e-6,-33e-6,33e-6,-3e-5,3e-5,-28e-6,28e-6,-26e-6,23e-6,-23e-6,21e-6,-21e-6,21e-6,-19e-6,16e-6,-16e-6,14e-6,-14e-6,12e-6,-12e-6,9e-6,-7e-6,7e-6,-5e-6,5e-6,-2e-6,2e-6,0,-2e-6,2e-6,-5e-6,5e-6,-7e-6,7e-6,-9e-6,12e-6,-12e-6,12e-6,-14e-6,13e-6,-15e-6,16e-6,-18e-6,2e-5,-2e-5,22e-6,-22e-6,24e-6,-24e-6,27e-6,-27e-6,29e-6,-31e-6,31e-6,-33e-6,33e-6,-36e-6,36e-6,-38e-6,4e-5,-4e-5,4e-5,-42e-6,42e-6,-44e-6,44e-6,-47e-6,49e-6,-49e-6,51e-6,-51e-6,53e-6,-52e-6,55e-6,-55e-6,57e-6,-57e-6,59e-6,-59e-6,61e-6,-61e-6,63e-6,-63e-6,66e-6,-66e-6,68e-6,-68e-6,7e-5,-72e-6,72e-6,-74e-6,74e-6,-74e-6,77e-6,-77e-6,79e-6,-79e-6,81e-6,-83e-6,83e-6,-86e-6,85e-6,-87e-6,87e-6,-87e-6,9e-5,-88e-6,9e-5,-91e-6,93e-6,-93e-6,94e-6,-97e-6,97e-6,-97e-6,99e-6,-99e-6,101e-6,-101e-6,104e-6,-104e-6,105e-6,-105e-6,106e-6,-108e-6,108e-6,-11e-5,112e-6,-112e-6,112e-6,-114e-6,114e-6,-117e-6,117e-6,-118e-6,119e-6,-119e-6,12e-5,-121e-6,123e-6,-123e-6,125e-6,-125e-6,125e-6,-128e-6,129e-6,-129e-6,131e-6,-131e-6,131e-6,-134e-6,134e-6,-135e-6,136e-6,-136e-6,137e-6,-138e-6,14e-5,-141e-6,14e-5,-142e-6,143e-6,-144e-6,144e-6,-145e-6,146e-6,-147e-6,149e-6,-148e-6,149e-6,-151e-6,153e-6,-153e-6,153e-6,-155e-6,155e-6,-155e-6,157e-6,-157e-6,159e-6,-159e-6,159e-6,-161e-6,161e-6,-162e-6,163e-6,-164e-6,164e-6,-165e-6,166e-6,-166e-6,168e-6,-168e-6,17e-5,-17e-5,17e-5,-172e-6,172e-6,-173e-6,174e-6,-174e-6,175e-6,-177e-6,177e-6,-177e-6,179e-6,-178e-6,179e-6,-18e-5,181e-6,-181e-6,181e-6,-183e-6,184e-6,-184e-6,185e-6,-185e-6,185e-6,-187e-6,187e-6,-188e-6,188e-6,-19e-5,19e-5,-19e-5,191e-6,-192e-6,192e-6,-193e-6,194e-6,-194e-6,194e-6,-196e-6,196e-6,-197e-6,197e-6,-197e-6,198e-6,-198e-6,199e-6,-199e-6,2e-4,-201e-6,201e-6,-201e-6,202e-6,-202e-6,203e-6,-2e-4,201e-6,-202e-6,202e-6,-203e-6,203e-6,-204e-6,204e-6,-204e-6,204e-6,-204e-6,205e-6,-205e-6,206e-6,-206e-6,207e-6,-208e-6,208e-6,-208e-6,208e-6,-209e-6,209e-6,-21e-5,21e-5,-21e-5,21e-5,-211e-6,212e-6,-212e-6,213e-6,-212e-6,213e-6,-213e-6,214e-6,-214e-6,214e-6,-214e-6,215e-6,-215e-6,215e-6,-216e-6,216e-6,-216e-6,216e-6,-217e-6,216e-6,-217e-6,217e-6,-217e-6,217e-6,-218e-6,218e-6,-218e-6,219e-6,-218e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-221e-6,221e-6,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-22e-5,22e-5,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,218e-6,-218e-6,218e-6,-218e-6,217e-6,-217e-6,217e-6,-217e-6,217e-6,-216e-6,216e-6,-216e-6,216e-6,-215e-6,215e-6,-215e-6,215e-6,-214e-6,214e-6,-214e-6,214e-6,-213e-6,213e-6,-212e-6,212e-6,-212e-6,212e-6,-211e-6,211e-6,-21e-5,21e-5,-209e-6,209e-6,-209e-6,208e-6,-208e-6,208e-6,-207e-6,207e-6,-206e-6,206e-6,-205e-6,205e-6,-205e-6,204e-6,-204e-6,203e-6,-203e-6,202e-6,-202e-6,202e-6,-201e-6,201e-6,-2e-4,2e-4,-199e-6,199e-6,-198e-6,197e-6,-197e-6,197e-6,-195e-6,195e-6,-194e-6,194e-6,-193e-6,193e-6,-193e-6,192e-6,-191e-6,191e-6,-191e-6,189e-6,-189e-6,188e-6,-188e-6,187e-6,-187e-6,186e-6,-185e-6,184e-6,-184e-6,183e-6,-182e-6,182e-6,-181e-6,18e-5,-18e-5,179e-6,-178e-6,178e-6,-176e-6,176e-6,-176e-6,174e-6,-174e-6,173e-6,-173e-6,171e-6,-171e-6,171e-6,-17e-5,169e-6,-168e-6,168e-6,-166e-6,166e-6,-166e-6,164e-6,-164e-6,162e-6,-162e-6,16e-5,-16e-5,159e-6,-158e-6,157e-6,-157e-6,156e-6,-155e-6,154e-6,-153e-6,153e-6,-152e-6,151e-6,-151e-6,149e-6,-149e-6,146e-6,-146e-6,146e-6,-144e-6,144e-6,-143e-6,142e-6,-141e-6,14e-5,-139e-6,138e-6,-138e-6,136e-6,-136e-6,136e-6,-133e-6,133e-6,-132e-6,131e-6,-13e-5,129e-6,-127e-6,127e-6,-126e-6,125e-6,-123e-6,123e-6,-121e-6,121e-6,-121e-6,119e-6,-117e-6,117e-6,-117e-6,114e-6,-114e-6,113e-6,-113e-6,111e-6,-11e-5,108e-6,-108e-6,106e-6,-106e-6,104e-6,-104e-6,102e-6,-102e-6,1e-4,-1e-4,98e-6,-97e-6,96e-6,-96e-6,94e-6,-93e-6,91e-6,-91e-6,89e-6,-89e-6,87e-6,-87e-6,85e-6,-85e-6,82e-6,-81e-6,81e-6,-8e-5,79e-6,-79e-6,76e-6,-74e-6,74e-6,-72e-6,72e-6,-72e-6,7e-5,-68e-6,68e-6,-66e-6,66e-6,-64e-6,62e-6,-61e-6,59e-6,-59e-6,59e-6,-57e-6,55e-6,-55e-6,53e-6,-53e-6,51e-6,-51e-6,49e-6,-49e-6,47e-6,-45e-6,45e-6,-43e-6,43e-6,-4e-5,4e-5,-38e-6,38e-6,-36e-6,34e-6,-34e-6,32e-6,-32e-6,3e-5,-3e-5,28e-6,-28e-6,25e-6,-23e-6,23e-6,-23e-6,21e-6,-19e-6,19e-6,-17e-6,17e-6,-15e-6,15e-6,-13e-6,13e-6,-11e-6,8e-6,-8e-6,8e-6,-6e-6,4e-6,-4e-6,2e-6,0]}},{}],26:[function(require,module,exports){module.exports={real:[0,.392449,-.25373,-.178801,.034632,-.087838,-.139327,-.043383,-.00755,-.04244,-.037459,.019163,.003833,-103e-6,.002996,.001477,-204e-6,49e-6,-16e-5,-.002359,-.002506,-.001656,.001242,.002462,.001396,.002753,.003166,-.002514,-.001609,.002009,.001463,-981e-6,-7e-5,145e-6,-.001708,-.001271,558e-6,.001514,497e-6,-551e-6,755e-6,-351e-6,-286e-6,-154e-6,-268e-6,-668e-6,-749e-6,391e-6,-45e-6,1e-6,-1e-5,6e-6,69e-6,63e-6,-56e-6,1e-5,123e-6,-144e-6,-132e-6,141e-6,61e-6,-139e-6,-24e-6,197e-6,128e-6,-84e-6,271e-6,-388e-6,82e-6,293e-6,386e-6,-307e-6,-379e-6,835e-6,486e-6,-587e-6,824e-6,-681e-6,224e-6,693e-6,746e-6,-799e-6,71e-5,0,665e-6,-774e-6,62e-5,-602e-6,211e-6,762e-6,0,-731e-6,699e-6,879e-6,-691e-6,236e-6,943e-6,329e-6,-377e-6,595e-6,935e-6,35e-5,664e-6,418e-6,797e-6,414e-6,-253e-6,472e-6,909e-6,9e-5,501e-6,805e-6,785e-6,-782e-6,302e-6,.001063,772e-6,0,0,-.001078,48e-5,0,886e-6,.00106,472e-6,-926e-6,741e-6,0,-147e-6,0,-383e-6,-881e-6,-458e-6,-721e-6,-454e-6,-32e-5,-915e-6,149e-6,915e-6,-994e-6,-429e-6,988e-6,-823e-6,-895e-6,747e-6,-214e-6,-886e-6,-542e-6,632e-6,-238e-6,-494e-6,588e-6,-951e-6,-415e-6,-837e-6,-653e-6,639e-6,-369e-6,-909e-6,-679e-6,305e-6,-437e-6,-849e-6,776e-6,284e-6,18e-5,908e-6,775e-6,642e-6,887e-6,875e-6,861e-6,343e-6,825e-6,92e-5,87e-5,818e-6,894e-6,844e-6,754e-6,639e-6,638e-6,804e-6,634e-6,894e-6,631e-6,889e-6,738e-6,329e-6,8e-4,843e-6,-368e-6,301e-6,758e-6,-849e-6,-444e-6,219e-6,-611e-6,-861e-6,-743e-6,714e-6,475e-6,-854e-6,-217e-6,564e-6,839e-6,-722e-6,-262e-6,328e-6,-786e-6,-772e-6,-188e-6,69e-6,-626e-6,586e-6,824e-6,783e-6,582e-6,705e-6,503e-6,59e-5,406e-6,393e-6,279e-6,144e-6,67e-6,-67e-6,-197e-6,-296e-6,-418e-6,-517e-6,-623e-6,-69e-5,-759e-6,-793e-6,-735e-6,-749e-6,-77e-5,-763e-6,-777e-6,-775e-6,-782e-6,-78e-5,-779e-6,-777e-6,-775e-6,-774e-6,-772e-6,-661e-6,-66e-5,-658e-6,-657e-6,-656e-6,-654e-6,-653e-6,-652e-6,-651e-6,-574e-6,-573e-6,-572e-6,-571e-6,-57e-5,-569e-6,-568e-6,-567e-6,-566e-6,-565e-6,-564e-6,-562e-6,-561e-6,-56e-5,-559e-6,-558e-6,-557e-6,-556e-6,-555e-6,-554e-6,-553e-6,-552e-6,-551e-6,-55e-5,-549e-6,-548e-6,-547e-6,-483e-6,-482e-6,-482e-6,-481e-6,-48e-5,-479e-6,-478e-6,-477e-6,-477e-6,-476e-6,-475e-6,-474e-6,-473e-6,-473e-6,-472e-6,-471e-6,-47e-5,-469e-6,-469e-6,-468e-6,-467e-6,-466e-6,-466e-6,-465e-6,-464e-6,-463e-6,-463e-6,-462e-6,-461e-6,-46e-5,-46e-5,-459e-6,-458e-6,-458e-6,-457e-6,-456e-6,-455e-6,-455e-6,-454e-6,-453e-6,-453e-6,-452e-6,-451e-6,-45e-5,-45e-5,-449e-6,-448e-6,-448e-6,-447e-6,-446e-6,-446e-6,-445e-6,-444e-6,-444e-6,-443e-6,-442e-6,-442e-6,-441e-6,-441e-6,-44e-5,-439e-6,-439e-6,-438e-6,-437e-6,-437e-6,-436e-6,-435e-6,-435e-6,-434e-6,-434e-6,-433e-6,-371e-6,-37e-5,-37e-5,-369e-6,-369e-6,-368e-6,-368e-6,-367e-6,-367e-6,-366e-6,-366e-6,-365e-6,-365e-6,-364e-6,-364e-6,-363e-6,-363e-6,-362e-6,-362e-6,-361e-6,-361e-6,-36e-5,-36e-5,-359e-6,-359e-6,-359e-6,-358e-6,-358e-6,-357e-6,-357e-6,-356e-6,-356e-6,-355e-6,-355e-6,-354e-6,-354e-6,-353e-6,-353e-6,-353e-6,-352e-6,-352e-6,-351e-6,-351e-6,-35e-5,-35e-5,-349e-6,-349e-6,-349e-6,-348e-6,-348e-6,-347e-6,-347e-6,-346e-6,-346e-6,-346e-6,-345e-6,-345e-6,-344e-6,-344e-6,-344e-6,-343e-6,-343e-6,-342e-6,-342e-6,-341e-6,-341e-6,-341e-6,-34e-5,-34e-5,-339e-6,-339e-6,-339e-6,-338e-6,-338e-6,-338e-6,-337e-6,-337e-6,-336e-6,-336e-6,-336e-6,-335e-6,-335e-6,-334e-6,-334e-6,-334e-6,-333e-6,-333e-6,-294e-6,-294e-6,-293e-6,-293e-6,-293e-6,-292e-6,-292e-6,-292e-6,-291e-6,-291e-6,-291e-6,-291e-6,-29e-5,-29e-5,-29e-5,-289e-6,-289e-6,-289e-6,-288e-6,-288e-6,-288e-6,-287e-6,-287e-6,-287e-6,-286e-6,-286e-6,-286e-6,-286e-6,-285e-6,-285e-6,-285e-6,-284e-6,-284e-6,-284e-6,-283e-6,-283e-6,-283e-6,-283e-6,-282e-6,-282e-6,-282e-6,-281e-6,-281e-6,-281e-6,-281e-6,-28e-5,-28e-5,-28e-5,-279e-6,-279e-6,-279e-6,-279e-6,-278e-6,-278e-6,-278e-6,-277e-6,-277e-6,-277e-6,-277e-6,-276e-6,-23e-5,-229e-6,-229e-6,-229e-6,-229e-6,-228e-6,-228e-6,-228e-6,-228e-6,-228e-6,-227e-6,-227e-6,-227e-6,-227e-6,-226e-6,-226e-6,-226e-6,-226e-6,-226e-6,-225e-6,-225e-6,-225e-6,-225e-6,-225e-6,-224e-6,-224e-6,-224e-6,-224e-6,-223e-6,-223e-6,-223e-6,-223e-6,-223e-6,-222e-6,-222e-6,-222e-6,-222e-6,-222e-6,-221e-6,-221e-6,-221e-6,-221e-6,-221e-6,-22e-5,-22e-5,-22e-5,-22e-5,-22e-5,-219e-6,-219e-6,-219e-6,-219e-6,-219e-6,-218e-6,-218e-6,-218e-6,-218e-6,-218e-6,-217e-6,-217e-6,-217e-6,-186e-6,-186e-6,-186e-6,-185e-6,-185e-6,-185e-6,-185e-6,-185e-6,-185e-6,-185e-6,-184e-6,-184e-6,-184e-6,-184e-6,-184e-6,-184e-6,-183e-6,-183e-6,-183e-6,-183e-6,-183e-6,-183e-6,-182e-6,-182e-6,-182e-6,-182e-6,-182e-6,-182e-6,-182e-6,-181e-6,-181e-6,-181e-6,-181e-6,-181e-6,-181e-6,-18e-5,-18e-5,-18e-5,-18e-5,-18e-5,-18e-5,-18e-5,-179e-6,-179e-6,-179e-6,-179e-6,-179e-6,-179e-6,-179e-6,-178e-6,-178e-6,-178e-6,-178e-6,-178e-6,-178e-6,-178e-6,-177e-6,-177e-6,-177e-6,-177e-6,-177e-6,-177e-6,-177e-6,-176e-6,-176e-6,-176e-6,-176e-6,-176e-6,-176e-6,-176e-6,-175e-6,-175e-6,-175e-6,-175e-6,-175e-6,-175e-6,-175e-6,-174e-6,-174e-6,-174e-6,-174e-6,-174e-6,-174e-6,-174e-6,-174e-6,-173e-6,-173e-6,-173e-6,-173e-6,-173e-6,-173e-6,-173e-6,-172e-6,-172e-6,-172e-6,-172e-6,-172e-6,-172e-6,-172e-6,-172e-6,-171e-6,-171e-6,-171e-6,-171e-6,-171e-6,-171e-6,-171e-6,-171e-6,-17e-5,-17e-5,-17e-5,-17e-5,-17e-5,-17e-5,-17e-5,-17e-5,-169e-6,-169e-6,-169e-6,-169e-6,-169e-6,-169e-6,-169e-6,-169e-6,-168e-6,-168e-6,-132e-6,-131e-6,-131e-6,-131e-6,-131e-6,-131e-6,-131e-6,-131e-6,-131e-6,-131e-6,-131e-6,-131e-6,-13e-5,-13e-5,-13e-5,-13e-5,-13e-5,-13e-5,-13e-5,-13e-5,-13e-5,-13e-5,-13e-5,-129e-6,-129e-6,-129e-6,-129e-6,-129e-6,-129e-6,-129e-6,-129e-6,-129e-6,-129e-6,-129e-6,-128e-6,-128e-6,-128e-6,-128e-6,-128e-6,-128e-6,-128e-6,-128e-6,-128e-6,-128e-6,-128e-6,-127e-6,-127e-6,-127e-6,-127e-6,-127e-6,-127e-6,-127e-6,-127e-6,-127e-6,-127e-6,-127e-6,-127e-6,-126e-6,-126e-6,-126e-6,-126e-6,-126e-6,-126e-6,-126e-6,-126e-6,-126e-6,-126e-6,-126e-6,-126e-6,-125e-6,-125e-6,-125e-6,-125e-6,-125e-6,-125e-6,-125e-6,-125e-6,-125e-6,-125e-6,-125e-6,-125e-6,-124e-6,-124e-6,-124e-6,-124e-6,-124e-6,-124e-6,-124e-6,-124e-6,-124e-6,-124e-6,-124e-6,-124e-6,-124e-6,-123e-6,-123e-6,-123e-6,-123e-6,-123e-6,-123e-6,-123e-6,-123e-6,-123e-6,-123e-6,-123e-6,-123e-6,-122e-6,-122e-6,-122e-6,-122e-6,-122e-6,-122e-6,-122e-6,-122e-6,-122e-6,-122e-6,-122e-6,-122e-6,-122e-6,-122e-6,-121e-6,-121e-6,-121e-6,-121e-6,-121e-6,-121e-6,-121e-6,-121e-6,-121e-6,-121e-6,-121e-6,-121e-6,-121e-6,-12e-5,-12e-5,-12e-5,-12e-5,-12e-5,-12e-5,-12e-5,-12e-5,-12e-5,-12e-5,-12e-5,-12e-5,-12e-5,-12e-5,-119e-6,-119e-6,-119e-6,-119e-6,-119e-6,-119e-6,-119e-6,-119e-6,-119e-6,-119e-6,-119e-6,-119e-6,-119e-6,-119e-6,-118e-6,-105e-6,-105e-6,-105e-6,-105e-6,-104e-6,-104e-6,-104e-6,-104e-6,-104e-6,-104e-6,-104e-6,-104e-6,-104e-6,-104e-6,-104e-6,-104e-6,-104e-6,-104e-6,-104e-6,-104e-6,-104e-6,-103e-6,-103e-6,-103e-6,-103e-6,-103e-6,-103e-6,-103e-6,-103e-6,-103e-6,-103e-6,-103e-6,-103e-6,-103e-6,-103e-6,-103e-6,-103e-6,-103e-6,-102e-6,-102e-6,-102e-6,-102e-6,-102e-6,-102e-6,-102e-6,-102e-6,-102e-6,-102e-6,-102e-6,-102e-6,-102e-6,-102e-6,-102e-6,-102e-6,-102e-6,-102e-6,-101e-6,-101e-6,-101e-6,-101e-6,-101e-6,-101e-6,-101e-6,-101e-6,-101e-6,-101e-6,-101e-6,-101e-6,-101e-6,-101e-6,-101e-6,-101e-6,-101e-6,-101e-6,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-1e-4,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-99e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-98e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-97e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-96e-6,-95e-6,-95e-6,-95e-6,-95e-6,-95e-6,-95e-6,-95e-6,-95e-6,-95e-6,-95e-6,-95e-6,-95e-6,-95e-6,-72e-6,-72e-6,-72e-6,-72e-6,-72e-6,-72e-6,-72e-6,-72e-6,-72e-6,-72e-6,-72e-6,-72e-6,-72e-6,-72e-6,-72e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-71e-6,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-7e-5,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-69e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-68e-6,-53e-6,-53e-6,-53e-6,-53e-6,-53e-6,-53e-6,-53e-6,-53e-6,-53e-6,-53e-6,-53e-6,-53e-6,-53e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-52e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-51e-6,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-5e-5,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-49e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-48e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-47e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-25e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-24e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-23e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6,-22e-6],
imag:[0,-.055435,-.188491,-.466937,-.169807,.044309,-.012785,-.033153,.027946,.047576,.015621,.025868,.023068,.001797,-17e-6,.001077,-68e-6,-33e-5,71e-6,.002209,.00566,.00562,.005411,.00484,.00434,.002496,.001805,434e-6,.001921,.001423,-.001109,-.001517,.001777,.001745,-244e-6,-.00113,.001581,666e-6,.001555,.001514,-755e-6,-994e-6,.001002,-.001018,803e-6,371e-6,-94e-6,-508e-6,-633e-6,-4e-6,24e-6,-46e-6,-25e-6,35e-6,45e-6,-71e-6,-82e-6,26e-6,-61e-6,-3e-5,129e-6,97e-6,167e-6,39e-6,41e-5,-418e-6,325e-6,-162e-6,409e-6,-293e-6,14e-5,-269e-6,758e-6,-104e-6,68e-5,587e-6,0,-454e-6,-782e-6,416e-6,-298e-6,0,-355e-6,789e-6,-416e-6,-97e-6,-465e-6,481e-6,-737e-6,0,758e-6,-183e-6,-699e-6,44e-5,691e-6,-943e-6,-218e-6,904e-6,-88e-5,-744e-6,156e-6,876e-6,-664e-6,-835e-6,478e-6,827e-6,885e-6,-786e-6,76e-6,904e-6,-752e-6,-402e-6,785e-6,-782e-6,-.001059,-266e-6,-772e-6,-.001087,-.001082,0,-96e-5,-.001069,59e-5,0,-944e-6,-499e-6,-741e-6,-.001043,-.001029,-.001035,-957e-6,-528e-6,-915e-6,-721e-6,-908e-6,96e-5,-422e-6,-993e-6,407e-6,-85e-6,-896e-6,62e-6,545e-6,-408e-6,-635e-6,953e-6,402e-6,-804e-6,732e-6,934e-6,823e-6,755e-6,-73e-6,855e-6,445e-6,-682e-6,-691e-6,863e-6,223e-6,-64e-5,878e-6,817e-6,364e-6,496e-6,873e-6,898e-6,-96e-6,477e-6,642e-6,-177e-6,219e-6,344e-6,859e-6,412e-6,0,29e-5,409e-6,-179e-6,338e-6,-503e-6,-639e-6,-638e-6,-402e-6,-634e-6,0,-631e-6,0,492e-6,-821e-6,-373e-6,253e-6,-797e-6,-822e-6,-433e-6,-196e-6,-747e-6,-838e-6,611e-6,37e-6,-433e-6,476e-6,-712e-6,0,-823e-6,-635e-6,-116e-6,-44e-5,-802e-6,-775e-6,295e-6,-324e-6,-814e-6,83e-5,547e-6,-586e-6,75e-6,261e-6,-582e-6,-423e-6,-647e-6,-787e-6,-893e-6,-864e-6,-906e-6,-934e-6,-941e-6,-939e-6,-918e-6,-889e-6,-836e-6,-776e-6,-692e-6,-621e-6,-532e-6,-476e-6,-294e-6,-25e-5,-171e-6,-191e-6,-111e-6,-111e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],27:[function(require,module,exports){module.exports={realimag:[0,.31831,0,.106103,0,.063662,0,.045473,0,.035368,0,.028937,0,.024485,0,.021221,0,.018724,0,.016753,0,.015158,0,.01384,0,.012732,0,.011789,0,.010976,0,.010268,0,.009646,0,.009095,0,.008603,0,.008162,0,.007764,0,.007403,0,.007074,0,.006773,0,.006496,0,.006241,0,.006006,0,.005787,0,.005584,0,.005395,0,.005218,0,.005053,0,.004897,0,.004751,0,.004613,0,.004483,0,.00436,0,.004244,0,.004134,0,.004029,0,.00393,0,.003835,0,.003745,0,.003659,0,.003577,0,.003498,0,.003423,0,.003351,0,.003282,0,.003215,0,.003152,0,.00309,0,.003032,0,.002975,0,.00292,0,.002868,0,.002817,0,.002768,0,.002721,0,.002675,0,.002631,0,.002588,0,.002546,0,.002506,0,.002468,0,.00243,0,.002393,0,.002358,0,.002323,0,.00229,0,.002258,0,.002226,0,.002195,0,.002165,0,.002136,0,.002108,0,.00208,0,.002054,0,.002027,0,.002002,0,.001977,0,.001953,0,.001929,0,.001906,0,.001883,0,.001861,0,.00184,0,.001819,0,.001798,0,.001778,0,.001759,0,.001739,0,.001721,0,.001702,0,.001684,0,.001667,0,.001649,0,.001632,0,.001616,0,.0016,0,.001584,0,.001568,0,.001553,0,.001538,0,.001523,0,.001509,0,.001494,0,.001481,0,.001467,0,.001453,0,.00144,0,.001427,0,.001415,0,.001402,0,.00139,0,.001378,0,.001366,0,.001355,0,.001343,0,.001332,0,.001321,0,.00131,0,.001299,0,.001289,0,.001278,0,.001268,0,.001258,0,.001248,0,.001239,0,.001229,0,.00122,0,.00121,0,.001201,0,.001192,0,.001183,0,.001175,0,.001166,0,.001157,0,.001149,0,.001141,0,.001133,0,.001125,0,.001117,0,.001109,0,.001101,0,.001094,0,.001086,0,.001079,0,.001072,0,.001065,0,.001058,0,.001051,0,.001044,0,.001037,0,.00103,0,.001024,0,.001017,0,.001011,0,.001004,0,998e-6,0,992e-6,0,985e-6,0,979e-6,0,973e-6,0,968e-6,0,962e-6,0,956e-6,0,95e-5,0,945e-6,0,939e-6,0,933e-6,0,928e-6,0,923e-6,0,917e-6,0,912e-6,0,907e-6,0,902e-6,0,897e-6,0,892e-6,0,887e-6,0,882e-6,0,877e-6,0,872e-6,0,867e-6,0,863e-6,0,858e-6,0,853e-6,0,849e-6,0,844e-6,0,84e-5,0,835e-6,0,831e-6,0,827e-6,0,823e-6,0,818e-6,0,814e-6,0,81e-5,0,806e-6,0,802e-6,0,798e-6,0,794e-6,0,79e-5,0,786e-6,0,782e-6,0,778e-6,0,774e-6,0,771e-6,0,767e-6,0,763e-6,0,76e-5,0,756e-6,0,753e-6,0,749e-6,0,745e-6,0,742e-6,0,739e-6,0,735e-6,0,732e-6,0,728e-6,0,725e-6,0,722e-6,0,719e-6,0,715e-6,0,712e-6,0,709e-6,0,706e-6,0,703e-6,0,7e-4,0,697e-6,0,693e-6,0,69e-5,0,687e-6,0,685e-6,0,682e-6,0,679e-6,0,676e-6,0,673e-6,0,67e-5,0,667e-6,0,665e-6,0,662e-6,0,659e-6,0,656e-6,0,654e-6,0,651e-6,0,648e-6,0,646e-6,0,643e-6,0,64e-5,0,638e-6,0,635e-6,0,633e-6,0,63e-5,0,628e-6,0,625e-6,0,623e-6,0,62e-5,0,618e-6,0,616e-6,0,613e-6,0,611e-6,0,609e-6,0,606e-6,0,604e-6,0,602e-6,0,599e-6,0,597e-6,0,595e-6,0,593e-6,0,591e-6,0,588e-6,0,586e-6,0,584e-6,0,582e-6,0,58e-5,0,578e-6,0,576e-6,0,574e-6,0,571e-6,0,569e-6,0,567e-6,0,565e-6,0,563e-6,0,561e-6,0,559e-6,0,557e-6,0,556e-6,0,554e-6,0,552e-6,0,55e-5,0,548e-6,0,546e-6,0,544e-6,0,542e-6,0,54e-5,0,539e-6,0,537e-6,0,535e-6,0,533e-6,0,531e-6,0,53e-5,0,528e-6,0,526e-6,0,524e-6,0,523e-6,0,521e-6,0,519e-6,0,518e-6,0,516e-6,0,514e-6,0,513e-6,0,511e-6,0,509e-6,0,508e-6,0,506e-6,0,504e-6,0,503e-6,0,501e-6,0,5e-4,0,498e-6,0,497e-6,0,495e-6,0,494e-6,0,492e-6,0,49e-5,0,489e-6,0,487e-6,0,486e-6,0,484e-6,0,483e-6,0,482e-6,0,48e-5,0,479e-6,0,477e-6,0,476e-6,0,474e-6,0,473e-6,0,472e-6,0,47e-5,0,469e-6,0,467e-6,0,466e-6,0,465e-6,0,463e-6,0,462e-6,0,461e-6,0,459e-6,0,458e-6,0,457e-6,0,455e-6,0,454e-6,0,453e-6,0,452e-6,0,45e-5,0,449e-6,0,448e-6,0,446e-6,0,445e-6,0,444e-6,0,443e-6,0,441e-6,0,44e-5,0,439e-6,0,438e-6,0,437e-6,0,435e-6,0,434e-6,0,433e-6,0,432e-6,0,431e-6,0,43e-5,0,428e-6,0,427e-6,0,426e-6,0,425e-6,0,424e-6,0,423e-6,0,422e-6,0,42e-5,0,419e-6,0,418e-6,0,417e-6,0,416e-6,0,415e-6,0,414e-6,0,413e-6,0,412e-6,0,411e-6,0,41e-5,0,409e-6,0,408e-6,0,407e-6,0,405e-6,0,404e-6,0,403e-6,0,402e-6,0,401e-6,0,4e-4,0,399e-6,0,398e-6,0,397e-6,0,396e-6,0,395e-6,0,394e-6,0,393e-6,0,392e-6,0,392e-6,0,391e-6,0,39e-5,0,389e-6,0,388e-6,0,387e-6,0,386e-6,0,385e-6,0,384e-6,0,383e-6,0,382e-6,0,381e-6,0,38e-5,0,379e-6,0,378e-6,0,378e-6,0,377e-6,0,376e-6,0,375e-6,0,374e-6,0,373e-6,0,372e-6,0,371e-6,0,371e-6,0,37e-5,0,369e-6,0,368e-6,0,367e-6,0,366e-6,0,365e-6,0,365e-6,0,364e-6,0,363e-6,0,362e-6,0,361e-6,0,36e-5,0,36e-5,0,359e-6,0,358e-6,0,357e-6,0,356e-6,0,356e-6,0,355e-6,0,354e-6,0,353e-6,0,353e-6,0,352e-6,0,351e-6,0,35e-5,0,349e-6,0,349e-6,0,348e-6,0,347e-6,0,346e-6,0,346e-6,0,345e-6,0,344e-6,0,343e-6,0,343e-6,0,342e-6,0,341e-6,0,34e-5,0,34e-5,0,339e-6,0,338e-6,0,338e-6,0,337e-6,0,336e-6,0,335e-6,0,335e-6,0,334e-6,0,333e-6,0,333e-6,0,332e-6,0,331e-6,0,331e-6,0,33e-5,0,329e-6,0,328e-6,0,328e-6,0,327e-6,0,326e-6,0,326e-6,0,325e-6,0,324e-6,0,324e-6,0,323e-6,0,323e-6,0,322e-6,0,321e-6,0,321e-6,0,32e-5,0,319e-6,0,319e-6,0,318e-6,0,317e-6,0,317e-6,0,316e-6,0,315e-6,0,315e-6,0,314e-6,0,314e-6,0,313e-6,0,312e-6,0,312e-6,0,311e-6,0,311e-6,0,31e-5,0,309e-6,0,309e-6,0,308e-6,0,308e-6,0,307e-6,0,306e-6,0,306e-6,0,305e-6,0,305e-6,0,304e-6,0,303e-6,0,303e-6,0,302e-6,0,302e-6,0,301e-6,0,301e-6,0,3e-4,0,299e-6,0,299e-6,0,298e-6,0,298e-6,0,297e-6,0,297e-6,0,296e-6,0,296e-6,0,295e-6,0,294e-6,0,294e-6,0,293e-6,0,293e-6,0,292e-6,0,292e-6,0,291e-6,0,291e-6,0,29e-5,0,29e-5,0,289e-6,0,289e-6,0,288e-6,0,288e-6,0,287e-6,0,287e-6,0,286e-6,0,285e-6,0,285e-6,0,284e-6,0,284e-6,0,283e-6,0,283e-6,0,282e-6,0,282e-6,0,281e-6,0,281e-6,0,28e-5,0,28e-5,0,279e-6,0,279e-6,0,278e-6,0,278e-6,0,278e-6,0,277e-6,0,277e-6,0,276e-6,0,276e-6,0,275e-6,0,275e-6,0,274e-6,0,274e-6,0,273e-6,0,273e-6,0,272e-6,0,272e-6,0,271e-6,0,271e-6,0,27e-5,0,27e-5,0,27e-5,0,269e-6,0,269e-6,0,268e-6,0,268e-6,0,267e-6,0,267e-6,0,266e-6,0,266e-6,0,265e-6,0,265e-6,0,265e-6,0,264e-6,0,264e-6,0,263e-6,0,263e-6,0,262e-6,0,262e-6,0,262e-6,0,261e-6,0,261e-6,0,26e-5,0,26e-5,0,259e-6,0,259e-6,0,259e-6,0,258e-6,0,258e-6,0,257e-6,0,257e-6,0,256e-6,0,256e-6,0,256e-6,0,255e-6,0,255e-6,0,254e-6,0,254e-6,0,254e-6,0,253e-6,0,253e-6,0,252e-6,0,252e-6,0,252e-6,0,251e-6,0,251e-6,0,25e-5,0,25e-5,0,25e-5,0,249e-6,0,249e-6,0,248e-6,0,248e-6,0,248e-6,0,247e-6,0,247e-6,0,247e-6,0,246e-6,0,246e-6,0,245e-6,0,245e-6,0,245e-6,0,244e-6,0,244e-6,0,244e-6,0,243e-6,0,243e-6,0,242e-6,0,242e-6,0,242e-6,0,241e-6,0,241e-6,0,241e-6,0,24e-5,0,24e-5,0,24e-5,0,239e-6,0,239e-6,0,238e-6,0,238e-6,0,238e-6,0,237e-6,0,237e-6,0,237e-6,0,236e-6,0,236e-6,0,236e-6,0,235e-6,0,235e-6,0,235e-6,0,234e-6,0,234e-6,0,234e-6,0,233e-6,0,233e-6,0,233e-6,0,232e-6,0,232e-6,0,231e-6,0,231e-6,0,231e-6,0,23e-5,0,23e-5,0,23e-5,0,229e-6,0,229e-6,0,229e-6,0,229e-6,0,228e-6,0,228e-6,0,228e-6,0,227e-6,0,227e-6,0,227e-6,0,226e-6,0,226e-6,0,226e-6,0,225e-6,0,225e-6,0,225e-6,0,224e-6,0,224e-6,0,224e-6,0,223e-6,0,223e-6,0,223e-6,0,222e-6,0,222e-6,0,222e-6,0,222e-6,0,221e-6,0,221e-6,0,221e-6,0,22e-5,0,22e-5,0,22e-5,0,219e-6,0,219e-6,0,219e-6,0,218e-6,0,218e-6,0,218e-6,0,218e-6,0,217e-6,0,217e-6,0,217e-6,0,216e-6,0,216e-6,0,216e-6,0,216e-6,0,215e-6,0,215e-6,0,215e-6,0,214e-6,0,214e-6,0,214e-6,0,213e-6,0,213e-6,0,213e-6,0,213e-6,0,212e-6,0,212e-6,0,212e-6,0,212e-6,0,211e-6,0,211e-6,0,211e-6,0,21e-5,0,21e-5,0,21e-5,0,21e-5,0,209e-6,0,209e-6,0,209e-6,0,208e-6,0,208e-6,0,208e-6,0,208e-6,0,207e-6,0,207e-6,0,207e-6,0,207e-6,0,206e-6,0,206e-6,0,206e-6,0,205e-6,0,205e-6,0,205e-6,0,205e-6,0,204e-6,0,204e-6,0,204e-6,0,204e-6,0,203e-6,0,203e-6,0,203e-6,0,203e-6,0,202e-6,0,202e-6,0,202e-6,0,202e-6,0,201e-6,0,201e-6,0,201e-6,0,201e-6,0,2e-4,0,2e-4,0,2e-4,0,2e-4,0,199e-6,0,199e-6,0,199e-6,0,199e-6,0,198e-6,0,198e-6,0,198e-6,0,198e-6,0,197e-6,0,197e-6,0,197e-6,0,197e-6,0,196e-6,0,196e-6,0,196e-6,0,196e-6,0,195e-6,0,195e-6,0,195e-6,0,195e-6,0,194e-6,0,194e-6,0,194e-6,0,194e-6,0,194e-6,0,193e-6,0,193e-6,0,193e-6,0,193e-6,0,192e-6,0,192e-6,0,192e-6,0,192e-6,0,191e-6,0,191e-6,0,191e-6,0,191e-6,0,19e-5,0,19e-5,0,19e-5,0,19e-5,0,19e-5,0,189e-6,0,189e-6,0,189e-6,0,189e-6,0,188e-6,0,188e-6,0,188e-6,0,188e-6,0,188e-6,0,187e-6,0,187e-6,0,187e-6,0,187e-6,0,186e-6,0,186e-6,0,186e-6,0,186e-6,0,186e-6,0,185e-6,0,185e-6,0,185e-6,0,185e-6,0,185e-6,0,184e-6,0,184e-6,0,184e-6,0,184e-6,0,183e-6,0,183e-6,0,183e-6,0,183e-6,0,183e-6,0,182e-6,0,182e-6,0,182e-6,0,182e-6,0,182e-6,0,181e-6,0,181e-6,0,181e-6,0,181e-6,0,181e-6,0,18e-5,0,18e-5,0,18e-5,0,18e-5,0,18e-5,0,179e-6,0,179e-6,0,179e-6,0,179e-6,0,179e-6,0,178e-6,0,178e-6,0,178e-6,0,178e-6,0,178e-6,0,177e-6,0,177e-6,0,177e-6,0,177e-6,0,177e-6,0,176e-6,0,176e-6,0,176e-6,0,176e-6,0,176e-6,0,175e-6,0,175e-6,0,175e-6,0,175e-6,0,175e-6,0,174e-6,0,174e-6,0,174e-6,0,174e-6,0,174e-6,0,173e-6,0,173e-6,0,173e-6,0,173e-6,0,173e-6,0,173e-6,0,172e-6,0,172e-6,0,172e-6,0,172e-6,0,172e-6,0,171e-6,0,171e-6,0,171e-6,0,171e-6,0,171e-6,0,17e-5,0,17e-5,0,17e-5,0,17e-5,0,17e-5,0,17e-5,0,169e-6,0,169e-6,0,169e-6,0,169e-6,0,169e-6,0,169e-6,0,168e-6,0,168e-6,0,168e-6,0,168e-6,0,168e-6,0,167e-6,0,167e-6,0,167e-6,0,167e-6,0,167e-6,0,167e-6,0,166e-6,0,166e-6,0,166e-6,0,166e-6,0,166e-6,0,166e-6,0,165e-6,0,165e-6,0,165e-6,0,165e-6,0,165e-6,0,165e-6,0,164e-6,0,164e-6,0,164e-6,0,164e-6,0,164e-6,0,163e-6,0,163e-6,0,163e-6,0,163e-6,0,163e-6,0,163e-6,0,162e-6,0,162e-6,0,162e-6,0,162e-6,0,162e-6,0,162e-6,0,161e-6,0,161e-6,0,161e-6,0,161e-6,0,161e-6,0,161e-6,0,161e-6,0,16e-5,0,16e-5,0,16e-5,0,16e-5,0,16e-5,0,16e-5,0,159e-6,0,159e-6,0,159e-6,0,159e-6,0,159e-6,0,159e-6,0,158e-6,0,158e-6,0,158e-6,0,158e-6,0,158e-6,0,158e-6,0,158e-6,0,157e-6,0,157e-6,0,157e-6,0,157e-6,0,157e-6,0,157e-6,0,156e-6,0,156e-6,0,156e-6,0,156e-6,0,156e-6,0,156e-6,0,156e-6]}},{}],28:[function(require,module,exports){module.exports={real:[0,0,-.042008,.010474,-.138038,.002641,-.001673,.001039,-.021054,651e-6,-422e-6,334e-6,-236e-6,191e-6,-161e-6,145e-6,-.018478,71e-6,-66e-6,47e-6,-44e-6,41e-6,-34e-6,31e-6,-3e-5,28e-6,-25e-6,24e-6,-22e-6,2e-5,-15e-6,13e-6,-.01157,4e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,-898e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-245e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-106e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,.196487,0,0,-3e-6,0,0,0,-2e-6,0,0,0,0,0,0,0,-7e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-18e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1e-5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],29:[function(require,module,exports){module.exports={real:[0,0,-.06072,.030357,-.015136,.006684,-.003512,.002544,-.002455,.002315,-.001264,.004643,-89e-6,353e-6,-165e-6,152e-6,-145e-6,184e-6,-123e-6,216e-6,-135e-6,222e-6,-219e-6,66e-6,-701e-6,387e-6,-125e-6,341e-6,-117e-6,.004817,-568e-6,.003995,-35e-6,438e-6,-28e-5,426e-6,-38e-6,78e-6,-108e-6,272e-6,-161e-6,111e-6,-165e-6,191e-6,-156e-6,209e-6,-72e-6,54e-6,-111e-6,.001741,-161e-6,.001192,-127e-6,53e-6,-44e-6,62e-6,-95e-6,2e-5,-102e-6,148e-6,-51e-6,15e-5,-1e-4,96e-6,-95e-6,115e-6,-81e-6,62e-6,-22e-6,134e-6,-8e-5,184e-6,-18e-6,23e-6,-44e-6,49e-6,-57e-6,24e-6,-33e-6,35e-6,-57e-6,31e-6,-44e-6,43e-6,-1e-5,4e-6,-62e-6,16e-6,-5e-5,62e-6,-51e-6,9e-5,-36e-6,29e-6,-5e-5,29e-6,-25e-6,35e-6,-36e-6,31e-6,-28e-6,38e-6,-64e-6,14e-6,-31e-6,25e-6,-42e-6,32e-6,-45e-6,76e-6,-25e-6,21e-6,-29e-6,57e-6,-19e-6,3e-6,-39e-6,62e-6,-35e-6,27e-6,-24e-6,3e-6,-51e-6,41e-6,-47e-6,43e-6,-39e-6,36e-6,-45e-6,25e-6,-67e-6,29e-6,-21e-6,22e-6,-38e-6,47e-6,-29e-6,21e-6,-37e-6,22e-6,-47e-6,17e-6,-51e-6,41e-6,-31e-6,25e-6,-13e-6,18e-6,-41e-6,15e-6,-18e-6,15e-6,-22e-6,3e-5,-3e-5,21e-6,-27e-6,44e-6,-23e-6,19e-6,-24e-6,1e-5,-2e-5,45e-6,-38e-6,14e-6,-17e-6,22e-6,-25e-6,2e-5,-1e-5,25e-6,-4e-6,8e-6,-13e-6,12e-6,-28e-6,23e-6,-22e-6,27e-6,-8e-6,21e-6,-16e-6,7e-6,-22e-6,25e-6,-8e-6,5e-6,-5e-6,24e-6,-25e-6,15e-6,-17e-6,15e-6,-12e-6,27e-6,-23e-6,33e-6,-4e-6,18e-6,-26e-6,13e-6,-12e-6,17e-6,-21e-6,4e-6,-15e-6,13e-6,-2e-6,18e-6,-11e-6,9e-6,-16e-6,7e-6,-9e-6,7e-6,-9e-6,1e-5,-18e-6,27e-6,-11e-6,9e-6,-12e-6,15e-6,-19e-6,6e-6,-8e-6,1e-5,-7e-6,13e-6,-5e-6,8e-6,-18e-6,16e-6,-15e-6,7e-6,-11e-6,18e-6,-12e-6,1e-5,-19e-6,8e-6,-8e-6,5e-6,-1e-6,16e-6,-8e-6,11e-6,-2e-6,8e-6,-13e-6,19e-6,-5e-6,1e-5,-12e-6,15e-6,-16e-6,17e-6,-13e-6,7e-6,-13e-6,22e-6,-12e-6,15e-6,-12e-6,1e-5,-9e-6,16e-6,-12e-6,7e-6,-8e-6,11e-6,-7e-6,15e-6,-5e-6,8e-6,-1e-6,9e-6,-15e-6,1e-6,-12e-6,13e-6,-12e-6,7e-6,-13e-6,11e-6,-13e-6,6e-6,-8e-6,12e-6,-5e-6,4e-6,-5e-6,6e-6,-13e-6,12e-6,-1e-5,6e-6,-7e-6,16e-6,-1e-5,6e-6,-6e-6,7e-6,-7e-6,9e-6,-9e-6,9e-6,-8e-6,9e-6,-8e-6,8e-6,-8e-6,7e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,8e-6,-8e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-7e-6,7e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6],
imag:[0,.168526,0,0,0,0,0,0,0,0,0,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,-1e-6,0,0,0,0,6e-6,-1e-6,6e-6,0,1e-6,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,1e-6,0,0,0,6e-6,-1e-6,5e-6,-1e-6,0,0,0,0,0,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,0,0,1e-6,-1e-6,1e-6,0,0,0,0,0,0,0,0,-1e-6,0,0,0,0,0,-1e-6,0,-1e-6,1e-6,-1e-6,1e-6,0,0,-1e-6,0,0,0,-1e-6,0,0,1e-6,-1e-6,0,-1e-6,0,-1e-6,1e-6,-1e-6,1e-6,0,0,-1e-6,1e-6,0,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-2e-6,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,-1e-6,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,2e-6,-1e-6,1e-6,-1e-6,0,-1e-6,2e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,0,1e-6,0,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,0,-1e-6,1e-6,0,0,0,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,2e-6,-1e-6,2e-6,0,1e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,0,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,-1e-6,0,-1e-6,0,-1e-6,1e-6,-1e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,0,-1e-6,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,2e-6,-1e-6,1e-6,-2e-6,1e-6,-1e-6,0,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,-2e-6,2e-6,-1e-6,1e-6,-1e-6,2e-6,-1e-6,2e-6,-1e-6,1e-6,-1e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,2e-6,-1e-6,1e-6,0,1e-6,-2e-6,0,-1e-6,1e-6,-1e-6,1e-6,-2e-6,1e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,0,-1e-6,1e-6,-2e-6,2e-6,-1e-6,1e-6,-1e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-3e-6,2e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],30:[function(require,module,exports){module.exports={real:[0,.246738,.08389,.095378,.087885,.165621,.287369,-.328845,-.099613,-.198535,.260484,.012771,.013351,.006221,.003106,629e-6,-.003591,-.002876,-.003527,-.002975,-.002648,-.006996,-.004165,-.004266,-731e-6,.003727,.018167,.012018,-.017044,-.004816,-.001255,-.002032,272e-6,-.001849,.004334,773e-6,-69e-5,-207e-6,136e-6,-108e-6,508e-6,-701e-6,-958e-6,-.004677,.002005,-.001925,-.00145,-.002212,-.001163,-227e-6,182e-6,-448e-6,152e-6,-316e-6,-54e-6,-193e-6,-17e-5,-138e-6,-179e-6,59e-6,17e-6,8e-6,252e-6,382e-6,-319e-6,2e-5,-87e-6,2e-5,-24e-6,-2e-6,44e-6,-131e-6,145e-6,-581e-6,-182e-6,-.001087,-746e-6,-.002759,-.001195,-.002868,-729e-6,-.002915,325e-6,-.001489,419e-6,-322e-6,54e-6,-2e-4,32e-6,71e-6,196e-6,-127e-6,355e-6,-328e-6,518e-6,-28e-5,62e-5,-36e-5,553e-6,-153e-6,88e-6,227e-6,454e-6,-71e-6,2e-4,-214e-6,326e-6,-43e-5,123e-6,-226e-6,94e-6,-102e-6,-3e-6,-96e-6,84e-6,37e-6,-107e-6,-201e-6,152e-6,-3e-4,-197e-6,-83e-6,63e-6,-92e-6,9e-6,-76e-6,-57e-6,94e-6,96e-6,-71e-6,-529e-6,-336e-6,-661e-6,-637e-6,-.001247,-167e-6,-.001025,-.001483,107e-6,-321e-6,-251e-6,186e-6,315e-6,-163e-6,-102e-6,-.001242,-.001912,-113e-6,724e-6,79e-5,78e-6,-61e-6,77e-6,-69e-6,5e-5,2e-6,-77e-6,-168e-6,73e-6,44e-6,47e-6,93e-6,-101e-6,-12e-6,-48e-6,-33e-6,34e-6,-304e-6,-188e-6,-116e-6,-167e-6,-96e-6,-298e-6,-44e-6,-107e-6,-36e-6,-12e-6,43e-6,191e-6,-126e-6,-11e-6,1e-4,98e-6,-21e-6,-129e-6,-16e-6,-182e-6,-203e-6,-249e-6,-452e-6,-216e-6,-162e-6,92e-6,246e-6,-28e-6,-214e-6,35e-6,38e-6,-32e-6,-37e-6,-15e-6,-1e-5,-11e-6,-4e-5,-14e-6,-2e-5,-31e-6,-23e-6,-12e-6,0,0,4e-6,8e-6,14e-6,15e-6,16e-6,18e-6,19e-6,19e-6,17e-6,16e-6,15e-6,14e-6,12e-6,11e-6,1e-5,1e-5,9e-6,8e-6,8e-6,8e-6,7e-6,6e-6,7e-6,7e-6,6e-6,5e-6,6e-6,6e-6,5e-6,5e-6,5e-6,5e-6,4e-6,4e-6,4e-6,5e-6,4e-6,4e-6,4e-6,4e-6,4e-6,3e-6,4e-6,4e-6,3e-6,3e-6,3e-6,4e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,2e-6,3e-6,3e-6,3e-6,2e-6,3e-6,3e-6,2e-6,2e-6,2e-6,3e-6,2e-6,2e-6,2e-6,3e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,1e-6,2e-6,2e-6,2e-6,1e-6,2e-6,2e-6,2e-6,1e-6,2e-6,2e-6,2e-6,1e-6,2e-6,2e-6,1e-6,1e-6,1e-6,2e-6,1e-6,1e-6,1e-6,2e-6,1e-6,1e-6,1e-6,2e-6,1e-6,1e-6,1e-6,2e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,0,0,1e-6,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,-.011959,.106385,.027196,.04077,.010807,-.17632,-.376644,.052966,.242678,.322558,-.029071,-.017862,-.018765,-.010794,-.010157,-.004212,-.001923,-.002589,-607e-6,-.001983,-421e-6,-.001835,.003069,.005389,.012023,.003422,-.013914,-.008548,.007815,.002234,.003867,488e-6,824e-6,-.002685,-85e-6,-.002967,-125e-6,-831e-6,-192e-6,-222e-6,-.003892,474e-6,-.002069,.001899,.001648,-49e-5,.001615,-309e-6,-211e-6,-327e-6,-702e-6,325e-6,-152e-6,48e-6,11e-6,152e-6,-106e-6,-3e-6,-63e-6,26e-6,-104e-6,-479e-6,-528e-6,-551e-6,-202e-6,-24e-5,-79e-6,-78e-6,53e-6,-58e-6,163e-6,573e-6,-25e-6,171e-6,-.001189,385e-6,-574e-6,-608e-6,-859e-6,-66e-5,-638e-6,-.002096,-233e-6,-.002119,81e-6,-.001687,-175e-6,-59e-5,237e-6,237e-6,232e-6,473e-6,578e-6,56e-5,534e-6,858e-6,.001336,692e-6,.001099,203e-6,-84e-6,-32e-6,-114e-6,-94e-6,-85e-6,-34e-6,-303e-6,267e-6,139e-6,-143e-6,62e-6,-23e-6,-49e-6,-84e-6,-129e-6,-141e-6,-123e-6,102e-6,171e-6,-7e-6,123e-6,116e-6,12e-5,3e-6,98e-6,55e-6,-44e-6,-258e-6,-552e-6,-945e-6,-28e-5,-222e-6,-38e-6,-132e-6,-249e-6,88e-5,518e-6,.001033,874e-6,496e-6,873e-6,276e-6,-206e-6,-785e-6,-948e-6,-148e-6,.001179,101e-6,-833e-6,-357e-6,-168e-6,-115e-6,-72e-6,-116e-6,-215e-6,-148e-6,-118e-6,104e-6,58e-6,-93e-6,-217e-6,-153e-6,-159e-6,-116e-6,-134e-6,-78e-6,-215e-6,-206e-6,99e-6,-54e-6,-95e-6,29e-6,-54e-6,9e-6,-64e-6,-38e-6,-46e-6,-145e-6,-362e-6,-14e-5,-172e-6,-209e-6,-191e-6,-257e-6,-252e-6,-234e-6,-525e-6,-26e-5,-337e-6,5e-6,83e-6,142e-6,-229e-6,-192e-6,69e-6,69e-6,6e-6,-1e-6,-11e-6,27e-6,8e-6,9e-6,3e-6,4e-6,22e-6,25e-6,4e-5,38e-6,34e-6,36e-6,37e-6,33e-6,28e-6,26e-6,23e-6,2e-5,16e-6,12e-6,9e-6,8e-6,6e-6,5e-6,3e-6,4e-6,3e-6,3e-6,2e-6,3e-6,3e-6,2e-6,2e-6,2e-6,3e-6,2e-6,2e-6,2e-6,2e-6,2e-6,1e-6,2e-6,2e-6,2e-6,1e-6,2e-6,2e-6,1e-6,1e-6,1e-6,2e-6,1e-6,1e-6,1e-6,2e-6,1e-6,1e-6,1e-6,2e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,1e-6,0,1e-6,1e-6,0,0,1e-6,1e-6,0,0,1e-6,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],31:[function(require,module,exports){module.exports={real:[0,.1181,-.122473,.127844,-.073143,.043407,.094315,-.380653,-.07653,.247847,.055678,-.0735,.027287,-.007281,.002293,.002653,-.003439,.003164,-.002488,-529e-6,312e-6,-.004436,.003399,-.002844,-.004209,.008726,-.009305,-.00434,.005352,-.00308,-313e-6,893e-6,-714e-6,653e-6,-.00133,-277e-6,-.001315,-592e-6,.001653,-.001996,73e-5,286e-6,.002766,-.002375,-298e-6,.002836,-.001338,144e-6,-428e-6,332e-6,254e-6,18e-6,424e-6,78e-6,44e-6,-245e-6,4e-6,-172e-6,-193e-6,-37e-5,-259e-6,-744e-6,.00204,-487e-6,788e-6,204e-6,-32e-5,625e-6,203e-6,871e-6,-536e-6,-118e-6,-.001229,178e-6,25e-6,68e-6,.00118,-.001866,.002409,.001452,-102e-6,393e-6,268e-6,-143e-6,-188e-6,-509e-6,254e-6,1e-6,78e-6,259e-6,141e-6,-158e-6,351e-6,264e-6,703e-6,726e-6,-166e-6,226e-6,-128e-6,-.001574,-317e-6,-194e-6,-385e-6,664e-6,-329e-6,386e-6,-636e-6,185e-6,509e-6,183e-6,13e-6,19e-6,-27e-5,4e-6,3e-6,-179e-6,63e-6,-62e-6,-49e-6,-2e-6,-34e-6,-149e-6,3e-6,-106e-6,-8e-6,-125e-6,-44e-6,-51e-6,43e-6,-46e-6,14e-5,-33e-6,256e-6,992e-6,265e-6,-87e-5,-217e-6,-95e-6,243e-6,139e-6,44e-6,-117e-6,17e-6,183e-6,-117e-6,-66e-6,232e-6,-134e-6,-3e-4,13e-5,168e-6,-2e-5,-48e-6,-135e-6,66e-6,-106e-6,-262e-6,236e-6,28e-6,-52e-6,1e-4,-41e-6,13e-6,37e-6,7e-6,89e-6,34e-6,-3e-5,15e-6,3e-6,121e-6,-226e-6,63e-6,56e-6,5e-6,35e-6,-3e-6,-32e-6,-45e-6,-2e-6,-3e-6,7e-6,-33e-6,76e-6,-38e-6,-33e-6,-4e-6,13e-6,9e-6,-54e-6,-16e-6,23e-6,-51e-6,24e-6,-3e-6,29e-6,14e-6,1e-5,12e-6,-4e-6,35e-6,-2e-5,17e-6,-13e-6,-7e-6,-27e-6,9e-6,-11e-6,-17e-6,38e-6,2e-6,-17e-6,15e-6,29e-6,-6e-6,-13e-6,23e-6,-36e-6,6e-6,9e-6,-19e-6,-31e-6,22e-6,25e-6,-2e-5,-5e-6,-3e-5,8e-5,-1e-5,22e-6,-21e-6,23e-6,-16e-6,-26e-6,-12e-6,26e-6,-38e-6,-2e-6,16e-6,4e-5,-17e-6,4e-6,19e-6,-2e-5,8e-6,-9e-6,25e-6,-8e-6,-12e-6,-1e-6,23e-6,-84e-6,-49e-6,3e-6,17e-6,-64e-6,-58e-6,3e-5,-4e-6,-13e-6,19e-6,-37e-6,3e-6,-19e-6,-27e-6,95e-6,-4e-5,-68e-6,87e-6,29e-6,-5e-5,-13e-6,76e-6,-16e-6,-95e-6,-49e-6,92e-6,61e-6,-59e-6,25e-6,6e-6,-47e-6,3e-6,-17e-6,-7e-6,-19e-6,29e-6,-43e-6,28e-6,19e-5,79e-6,14e-6,-15e-6,-8e-6,-23e-6,11e-6,0,-22e-6,42e-6,22e-6,-44e-6,4e-6,7e-6,14e-6,-11e-6,-6e-6,-5e-6,3e-6,-8e-6,9e-6,-3e-5,-9e-6,1e-6,-1e-6,4e-6,2e-6,-4e-6,12e-6,3e-6,4e-6,5e-6,-2e-6,2e-6,-2e-6,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,.01765,-.135608,-.085553,.017943,-.161677,.246113,.324196,-.153988,.01488,.161826,-.015453,-.017178,.001352,-.012638,.003186,-.003899,-.00125,.00204,-.004354,.002918,-.002945,-.001665,.005463,-.007636,.001501,.003049,-.006986,.001681,.004434,-.001035,91e-6,-.001278,-864e-6,-414e-6,-.0037,.003329,.002739,-697e-6,461e-6,.001086,.002305,.002276,-.001753,-27e-5,578e-6,-425e-6,48e-6,163e-6,-624e-6,-44e-6,-119e-6,171e-6,-3e-4,266e-6,-65e-6,92e-6,-14e-6,-22e-6,-158e-6,109e-6,-397e-6,295e-6,-157e-6,-147e-6,-546e-6,-585e-6,-457e-6,-471e-6,244e-6,-13e-6,44e-5,-118e-6,368e-6,637e-6,-241e-6,.001319,.001021,-.002161,-773e-6,-839e-6,-36e-5,-103e-6,128e-6,382e-6,-294e-6,-278e-6,158e-6,6e-6,308e-6,24e-5,276e-6,-38e-5,-187e-6,-448e-6,.001617,-52e-5,-94e-5,173e-6,375e-6,-532e-6,673e-6,-591e-6,949e-6,478e-6,41e-5,754e-6,-214e-6,159e-6,62e-6,-145e-6,5e-6,6e-6,-532e-6,13e-5,-128e-6,175e-6,5e-6,6e-5,-107e-6,-4e-5,-64e-6,-25e-6,-251e-6,62e-6,7e-5,33e-6,-8e-6,152e-6,-7e-5,2e-6,-121e-6,-208e-6,344e-6,.001123,-15e-6,-218e-6,194e-6,-76e-6,-16e-6,-51e-6,-6e-6,-127e-6,24e-6,78e-6,-268e-6,214e-6,457e-6,-124e-6,-198e-6,-88e-6,-98e-6,-76e-6,27e-6,-157e-6,136e-6,-148e-6,-77e-6,306e-6,-37e-6,-45e-6,-13e-6,-127e-6,32e-6,-47e-6,-42e-6,-13e-6,-69e-6,-32e-6,-91e-6,58e-6,54e-6,-164e-6,29e-6,6e-6,-18e-6,-13e-6,41e-6,-15e-6,31e-6,-6e-5,35e-6,-11e-6,-43e-6,42e-6,34e-6,16e-6,-43e-6,28e-6,-7e-6,-3e-6,-18e-6,28e-6,-4e-5,15e-6,-28e-6,91e-6,-23e-6,11e-6,-3e-5,8e-6,33e-6,-14e-6,-3e-6,3e-6,0,-26e-6,17e-6,-17e-6,-7e-6,18e-6,13e-6,-16e-6,-1e-6,39e-6,-11e-6,0,-11e-6,-1e-5,6e-6,-28e-6,13e-6,-3e-5,41e-6,-28e-6,15e-6,0,11e-6,17e-6,-8e-6,16e-6,-29e-6,17e-6,5e-6,-47e-6,16e-6,7e-6,-8e-6,-2e-6,-18e-6,26e-6,-16e-6,6e-6,-14e-6,9e-6,-31e-6,-2e-5,-15e-6,1e-6,1e-6,23e-6,66e-6,-112e-6,-33e-6,37e-6,118e-6,-27e-6,-5e-6,41e-6,-2e-6,25e-6,4e-6,-16e-6,22e-6,-34e-6,9e-6,95e-6,-7e-5,-28e-6,108e-6,13e-6,-107e-6,-36e-6,105e-6,19e-6,-93e-6,-36e-6,69e-6,-16e-6,-41e-6,46e-6,7e-6,-21e-6,21e-6,28e-6,68e-6,32e-6,-8e-5,-208e-6,32e-6,155e-6,69e-6,-5e-6,22e-6,-9e-6,3e-6,-3e-6,4e-6,-2e-5,9e-6,-19e-6,24e-6,-24e-6,-13e-6,-26e-6,22e-6,-13e-6,-12e-6,-1e-6,6e-6,4e-6,-8e-6,1e-6,0,3e-6,11e-6,1e-6,-7e-6,1e-6,-4e-6,5e-6,-2e-6,0,-1e-6,-3e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}},{}],32:[function(require,module,exports){module.exports={real:[0,-.18267,-.381543,.046629,-.280517,-.058269,.014912,.011407,-.00491,-.008831,.007088,.005653,-.007082,-.004146,.007708,.007322,-.007934,-.001923,.012704,-.003957,-.025076,.081539,-.028921,-.009431,.029387,-.030368,-.027489,.078646,-.029917,.032701,.025565,-.01946,.006748,-172e-6,.001069,-.005152,71e-6,-.002174,-.009055,.007263,.006293,-.002175,-.002678,-.00915,-.013944,-.006199,-.002361,379e-6,83e-6,35e-5,-.003055,-.002105,-272e-6,89e-5,309e-6,372e-6,-33e-6,19e-6,394e-6,.002459,636e-6,37e-6,-448e-6,-24e-6,167e-6,11e-5,-273e-6,-.001496,576e-6,-46e-6,392e-6,.001059,-534e-6,-.001739,-852e-6,874e-6,-216e-6,-45e-6,67e-5,-683e-6,-112e-6,774e-6,61e-5,-969e-6,.001546,-.002348,-35e-6,377e-6,47e-6,-193e-6,-5e-6,63e-6,62e-5,.001381,166e-6,-893e-6,-.001365,227e-6,-.001158,-931e-6,769e-6,677e-6,-.001738,-36e-6,.00173,-.001,.00118,523e-6,82e-6,-.001654,389e-6,-19e-6,313e-6,609e-6,98e-6,-23e-6,-75e-6,49e-6,117e-6,12e-5,112e-6,-222e-6,-516e-6,126e-6,504e-6,-1e-5,212e-6,85e-6,-913e-6,-224e-6,658e-6,-36e-6,-46e-6,-9e-6,-536e-6,95e-6,-29e-6,541e-6,.001019,433e-6,.001496,125e-6,.001146,-755e-6,334e-6,348e-6,-312e-6,7e-5,234e-6,-4e-5,-131e-6,76e-6,-156e-6,13e-5,-85e-6,-91e-6,188e-6,-39e-6,24e-6,344e-6,-242e-6,-7e-5,319e-6,-416e-6,25e-6,-11e-5,55e-6,-194e-6,158e-6,58e-6,76e-6,-24e-5,-46e-6,113e-6,-122e-6,69e-6,447e-6,-375e-6,49e-5,-148e-6,-26e-5,153e-6,-188e-6,-29e-6,1e-4,-3e-5,-155e-6,216e-6,72e-6,-3e-5,18e-5,12e-6,5e-5,55e-6,-11e-6,-57e-6,173e-6,43e-6,86e-6,179e-6,49e-6,115e-6,-86e-6,31e-6,13e-6,-48e-6,34e-6,-4e-6,54e-6,46e-6,-26e-6,-3e-6,6e-6,-24e-6,-16e-6,-16e-6,-21e-6,-22e-6,-23e-6,-21e-6,-19e-6,-19e-6,-19e-6,-16e-6,-13e-6,-13e-6,-13e-6,-11e-6,-9e-6,-1e-5,-1e-5,-9e-6,-7e-6,-8e-6,-8e-6,-7e-6,-6e-6,-7e-6,-7e-6,-6e-6,-5e-6,-6e-6,-7e-6,-6e-6,-5e-6,-5e-6,-6e-6,-5e-6,-4e-6,-5e-6,-5e-6,-5e-6,-4e-6,-4e-6,-5e-6,-4e-6,-3e-6,-4e-6,-5e-6,-4e-6,-3e-6,-4e-6,-4e-6,-4e-6,-3e-6,-4e-6,-4e-6,-3e-6,-3e-6,-3e-6,-4e-6,-3e-6,-3e-6,-3e-6,-4e-6,-3e-6,-2e-6,-3e-6,-4e-6,-3e-6,-2e-6,-3e-6,-3e-6,-3e-6,-2e-6,-3e-6,-3e-6,-3e-6,-2e-6,-3e-6,-3e-6,-3e-6,-2e-6,-2e-6,-3e-6,-2e-6,-2e-6,-2e-6,-3e-6,-2e-6,-2e-6,-2e-6,-3e-6,-2e-6,-2e-6,-2e-6,-3e-6,-2e-6,-2e-6,-2e-6,-3e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,-.43237,-.202117,.451975,-.413897,.067733,-.004269,-.003175,-.010887,.002024,.010798,-.007897,-.001622,.006998,402e-6,-.004589,.002325,.012148,-278e-6,-.026627,.030999,779e-6,.003562,.059443,-897e-6,-.060501,.050517,-.071021,-.016851,.033358,-.020689,.017911,.003015,-.001239,-.001775,.002736,.004554,-.00915,-.004987,-.002883,-.00365,.007024,.012555,.004629,.005519,-.00267,-.005895,-.002137,.001283,.004861,.001504,.001201,-659e-6,-842e-6,634e-6,375e-6,1e-4,-789e-6,-378e-6,.001145,364e-6,262e-6,-61e-6,-102e-6,159e-6,251e-6,-692e-6,-857e-6,-218e-6,-893e-6,143e-6,225e-6,-62e-6,-535e-6,-438e-6,-737e-6,-.001102,446e-6,278e-6,-187e-6,46e-6,234e-6,-884e-6,.00202,283e-6,-.001297,.001203,-222e-6,-362e-6,-121e-6,121e-6,-191e-6,.001329,-903e-6,.00118,885e-6,-269e-6,-627e-6,-.001597,511e-6,786e-6,-873e-6,-.00213,.002391,-.00209,-.001152,507e-6,232e-6,-4e-6,-316e-6,-121e-6,-.001509,-535e-6,-56e-6,351e-6,182e-6,-82e-6,-408e-6,97e-6,283e-6,473e-6,-282e-6,-3e-4,261e-6,-32e-5,-398e-6,.001237,-129e-6,208e-6,185e-6,-386e-6,-13e-5,326e-6,293e-6,-305e-6,-676e-6,-229e-6,-485e-6,-.00119,-19e-6,-357e-6,688e-6,34e-5,-466e-6,8e-4,173e-6,18e-6,227e-6,-105e-6,98e-6,167e-6,-184e-6,-29e-6,-12e-6,-9e-5,-32e-6,72e-6,-79e-6,188e-6,-16e-6,-123e-6,382e-6,-205e-6,8e-5,12e-6,-11e-5,33e-6,-315e-6,191e-6,-128e-6,-93e-6,-93e-6,28e-6,-154e-6,-29e-5,2e-4,-182e-6,-142e-6,841e-6,-28e-5,6e-5,-14e-6,-124e-6,64e-6,18e-6,-67e-6,51e-6,1e-6,-68e-6,4e-5,1e-6,26e-6,54e-6,84e-6,-4e-6,-21e-6,-16e-6,-91e-6,9e-5,-108e-6,1e-4,23e-6,91e-6,47e-6,-64e-6,5e-6,-43e-6,-18e-6,-49e-6,-61e-6,-34e-6,-21e-6,-49e-6,-41e-6,-28e-6,-3e-5,-24e-6,-22e-6,-17e-6,-12e-6,-1e-5,-9e-6,-6e-6,-3e-6,-4e-6,-4e-6,-3e-6,-1e-6,-2e-6,-3e-6,-2e-6,-1e-6,-2e-6,-3e-6,-2e-6,-1e-6,-2e-6,-3e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,0,-1e-6,-2e-6,-1e-6,0,-1e-6,-2e-6,-1e-6,0,-1e-6,-2e-6,-1e-6,0,-1e-6,-2e-6,-1e-6,0,-1e-6,-2e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],33:[function(require,module,exports){module.exports={real:[0,-.080209,-.21954,-.060589,.36458,-.411463,.06652,.04133,-.215818,.161503,-.036905,.004351,.007838,-.004814,-.002541,.003939,-28e-6,-.003197,466e-6,.003021,-.001496,-.002209,.002657,.003289,-.004374,.004757,-.002731,-593e-6,.001295,-466e-6,-.001121,.001177,478e-6,-.001435,316e-6,-327e-6,-.001466,.001053,-283e-6,.001089,-74e-6,-122e-6,13e-6,-374e-6,-837e-6,141e-6,-493e-6,-642e-6,-.001114,-958e-6,-58e-6,-414e-6,56e-6,45e-6,-46e-6,-89e-6,-151e-6,-187e-6,-14e-5,-4e-5,312e-6,-84e-6,16e-5,-138e-6,32e-6,22e-6,27e-6,-112e-6,-127e-6,624e-6,-.001153,481e-6,5e-5,97e-6,-188e-6,436e-6,-527e-6,-1e-6,276e-6,-471e-6,-198e-6,.001149,-577e-6,116e-6,152e-6,145e-6,-.001181,436e-6,2e-4,-62e-6,102e-6,-229e-6,-543e-6,.00145,-27e-5,-75e-6,526e-6,-357e-6,-326e-6,283e-6,1e-4,-218e-6,144e-6,-112e-6,-14e-5,-79e-6,-.001462,.001305,-.001426,604e-6,-186e-6,-138e-6,-22e-6,-13e-6,5e-6,29e-6,37e-6,145e-6,-99e-6,24e-6,181e-6,-118e-6,-87e-6,1e-4,-178e-6,362e-6,63e-6,-46e-5,279e-6,121e-6,-427e-6,536e-6,-21e-5,5e-5,-11e-6,49e-6,21e-6,52e-6,36e-6,162e-6,19e-6,752e-6,21e-5,117e-6,12e-6,-43e-6,56e-6,-252e-6,-27e-6,286e-6,-116e-6,-88e-6,154e-6,-185e-6,-264e-6,58e-6,-1e-5,-134e-6,-5e-6,64e-6,-57e-6,-39e-6,38e-6,-1e-6,-72e-6,2e-5,-194e-6,15e-5,5e-5,-33e-6,-98e-6,53e-6,4e-5,136e-6,-1e-5,-89e-6,122e-6,-108e-6,-116e-6,155e-6,-3e-5,-178e-6,164e-6,13e-6,-134e-6,5e-5,16e-6,84e-6,-4e-5,1e-5,-35e-6,36e-6,-67e-6,-54e-6,21e-6,-2e-5,-59e-6,5e-5,-11e-6,-18e-6,-9e-6,9e-6,44e-6,39e-6,22e-6,14e-6,-1e-6,-3e-6,2e-6,8e-6,7e-6,3e-6,-3e-6,-7e-6,-9e-6,-11e-6,-13e-6,-14e-6,-14e-6,-14e-6,-14e-6,-13e-6,-12e-6,-11e-6,-1e-5,-9e-6,-8e-6,-7e-6,-7e-6,-6e-6,-6e-6,-6e-6,-5e-6,-5e-6,-5e-6,-5e-6,-4e-6,-4e-6,-4e-6,-4e-6,-4e-6,-4e-6,-4e-6,-4e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-2e-6,-2e-6,-3e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,0,-1e-6,-1e-6,0,0,-1e-6,0,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,-.243544,-.090743,.179526,-.105756,.284074,.06637,-.095933,.093024,-.056154,-.008391,.016768,-.007261,-.005575,.004419,.003625,-.003227,-503e-6,.002198,-518e-6,-.002207,.00175,.002341,-.005738,.008116,-.001018,-.002846,.002742,-118e-6,-.001497,469e-6,673e-6,-.001315,309e-6,626e-6,-.00147,189e-6,-748e-6,-749e-6,501e-6,-692e-6,135e-6,164e-6,298e-6,.001148,28e-5,511e-6,166e-6,-125e-6,51e-6,-74e-5,-624e-6,-335e-6,-176e-6,79e-6,114e-6,-26e-6,-52e-6,-141e-6,-51e-6,-207e-6,34e-6,-52e-6,-27e-6,94e-6,-106e-6,-5e-6,0,207e-6,21e-5,-251e-6,-29e-6,-213e-6,-149e-6,317e-6,76e-6,-351e-6,65e-5,-549e-6,-254e-6,543e-6,-176e-6,-151e-6,115e-6,23e-5,-411e-6,-152e-6,184e-6,-488e-6,222e-6,37e-6,-522e-6,463e-6,14e-6,-948e-6,955e-6,508e-6,-464e-6,135e-6,194e-6,-173e-6,-112e-6,267e-6,-75e-6,515e-6,16e-5,35e-5,314e-6,-.001627,.001148,-573e-6,-29e-6,5e-5,-71e-6,-4e-5,0,12e-6,11e-6,-91e-6,266e-6,35e-6,-302e-6,14e-5,-29e-5,165e-6,162e-6,-294e-6,-35e-6,632e-6,-584e-6,418e-6,-165e-6,-2e-4,107e-6,-163e-6,-18e-5,-166e-6,-137e-6,-98e-6,-398e-6,-42e-6,-146e-6,69e-6,751e-6,-327e-6,774e-6,-38e-6,-813e-6,464e-6,-171e-6,-85e-6,245e-6,214e-6,-113e-6,71e-6,-8e-5,-148e-6,116e-6,17e-6,-57e-6,68e-6,31e-6,-52e-6,35e-6,4e-5,-123e-6,-63e-6,-29e-6,-57e-6,-24e-6,-156e-6,-7e-5,57e-6,19e-6,-104e-6,77e-6,165e-6,-22e-5,38e-6,66e-6,-204e-6,153e-6,104e-6,-223e-6,89e-6,-8e-5,106e-6,-58e-6,45e-6,13e-6,14e-6,33e-6,-23e-6,32e-6,55e-6,-61e-6,16e-6,16e-6,-6e-6,-9e-6,-19e-6,-46e-6,-9e-6,1e-6,2e-5,26e-6,6e-6,-13e-6,-2e-5,-24e-6,-23e-6,-21e-6,-22e-6,-22e-6,-22e-6,-19e-6,-16e-6,-13e-6,-11e-6,-9e-6,-7e-6,-5e-6,-3e-6,-2e-6,-2e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,0,-1e-6,-1e-6,0,0,-1e-6,0,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],34:[function(require,module,exports){module.exports={real:[0,-.370874,.288281,-.454893,.061559,.049432,-.012918,.129553,-.041687,-.012594,-.006316,.00813,601e-6,-181e-6,-.005799,374e-6,-806e-6,236e-6,-.001341,891e-6,361e-6,822e-6,-374e-6,6e-4,703e-6,-.002483,.002295,-217e-6,45e-5,-19e-5,34e-6,-237e-6,719e-6,-872e-6,771e-6,-461e-6,487e-6,-296e-6,-324e-6,94e-6,-297e-6,801e-6,-836e-6,114e-6,64e-6,199e-6,-33e-6,-51e-6,-107e-6,-221e-6,-52e-6,198e-6,-28e-6,-199e-6,55e-6,-105e-6,-255e-6,-14e-5,114e-6,-41e-6,-117e-6,85e-6,-33e-6,-4e-6,11e-6,-273e-6,-59e-6,-38e-6,-255e-6,55e-6,-13e-6,89e-6,-59e-6,164e-6,91e-6,1e-6,7e-5,-4e-6,151e-6,-148e-6,486e-6,-242e-6,123e-6,-5e-5,-15e-5,53e-6,-109e-6,183e-6,-181e-6,331e-6,-187e-6,227e-6,-157e-6,145e-6,79e-6,-158e-6,-39e-6,-118e-6,27e-6,-315e-6,324e-6,-773e-6,717e-6,-255e-6,-114e-6,-174e-6,-84e-6,-107e-6,3e-5,-92e-6,-38e-6,-1e-5,-173e-6,146e-6,-33e-6,-415e-6,811e-6,-489e-6,142e-6,-9e-5,44e-6,-171e-6,34e-6,-26e-6,-217e-6,-42e-6,-131e-6,229e-6,-262e-6,534e-6,-.001005,352e-6,284e-6,-795e-6,905e-6,-18e-6,-307e-6,268e-6,-369e-6,47e-5,-35e-5,241e-6,-347e-6,472e-6,-438e-6,56e-6,835e-6,-25e-5,228e-6,-23e-6,-927e-6,283e-6,-599e-6,17e-5,-8e-6,22e-5,-72e-6,262e-6,-139e-6,48e-6,-117e-6,16e-5,-168e-6,174e-6,-239e-6,141e-6,-23e-6,-95e-6,147e-6,-17e-6,-49e-6,112e-6,71e-6,-373e-6,62e-6,12e-5,-49e-6,5e-6,-99e-6,1e-5,-4e-6,-51e-6,254e-6,-79e-6,-125e-6,128e-6,-43e-6,-37e-6,-2e-6,15e-6,-69e-6,221e-6,-129e-6,2e-5,37e-6,-71e-6,27e-6,-23e-6,-7e-6,-8e-6,21e-6,-1e-6,6e-6,11e-6,11e-6,1e-6,-5e-6,3e-6,-4e-6,1e-6,1e-6,-7e-6,-6e-6,-7e-6,-7e-6,-7e-6,-7e-6,-7e-6,-7e-6,-6e-6,-5e-6,-5e-6,-5e-6,-4e-6,-3e-6,-4e-6,-4e-6,-3e-6,-3e-6,-3e-6,-3e-6,-3e-6,-2e-6,-3e-6,-3e-6,-2e-6,-2e-6,-2e-6,-3e-6,-2e-6,-2e-6,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-2e-6,-1e-6,-2e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-2e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,-1e-6,0,-1e-6,-1e-6,0,0,-1e-6,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,.046536,.256926,.019372,-.496196,.016047,-.063615,.021345,-.007871,-.020463,.009909,.003165,-942e-6,-.002837,.002435,-.003583,.001061,-.002121,-13e-5,233e-6,-32e-5,87e-6,95e-5,-.001264,.002961,-701e-6,715e-6,451e-6,-291e-6,48e-6,166e-6,-528e-6,677e-6,-218e-6,-3e-6,-28e-5,-135e-6,574e-6,-348e-6,214e-6,-44e-5,625e-6,.001131,-147e-6,135e-6,-206e-6,-13e-6,-18e-6,-61e-6,-43e-6,12e-5,51e-6,-39e-6,39e-6,68e-6,-41e-6,-88e-6,-7e-5,99e-6,-165e-6,194e-6,-161e-6,-109e-6,-13e-6,-71e-6,97e-6,-165e-6,-33e-6,68e-6,3e-6,68e-6,-104e-6,159e-6,-107e-6,65e-6,7e-6,123e-6,-5e-6,-101e-6,-75e-6,24e-6,528e-6,-422e-6,479e-6,-171e-6,-48e-6,-15e-5,35e-5,-185e-6,-23e-6,163e-6,53e-6,-16e-6,18e-6,-264e-6,25e-6,-246e-6,-67e-6,-231e-6,39e-6,-93e-6,95e-6,45e-6,45e-5,-697e-6,17e-5,55e-6,-16e-5,12e-5,118e-6,-7e-5,54e-6,57e-6,-246e-6,253e-6,-389e-6,138e-6,-53e-6,14e-6,-32e-6,-162e-6,48e-6,-89e-6,-145e-6,-163e-6,127e-6,215e-6,-9e-6,-12e-6,117e-6,425e-6,-36e-6,827e-6,-.001058,-607e-6,224e-6,75e-6,-86e-6,-14e-5,358e-6,-212e-6,479e-6,-7e-6,-196e-6,109e-6,138e-6,173e-6,108e-6,-153e-6,167e-6,-805e-6,246e-6,-6e-5,-9e-6,113e-6,-8e-6,42e-6,-97e-6,-3e-5,144e-6,-13e-5,154e-6,24e-6,62e-6,-26e-6,-145e-6,156e-6,-205e-6,47e-6,42e-6,-49e-6,-7e-5,232e-6,-152e-6,-228e-6,21e-5,-25e-6,46e-6,-51e-6,131e-6,-38e-6,-125e-6,53e-6,214e-6,-195e-6,66e-6,45e-6,-26e-6,15e-6,1e-6,-146e-6,59e-6,115e-6,-94e-6,138e-6,0,7e-6,-25e-6,13e-6,11e-6,2e-6,16e-6,-17e-6,-14e-6,-17e-6,-5e-6,-8e-6,-6e-6,-8e-6,-18e-6,-7e-6,-8e-6,-1e-5,-9e-6,-6e-6,-4e-6,-4e-6,-3e-6,-2e-6,-1e-6,-1e-6,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}},{}],35:[function(require,module,exports){module.exports={real:[0,-1e-6,-.093325,.128506,-.104713,.167897,-.08297,.101289,-.057987,.045483,-.035896,.006348,-.00915,.021061,-.014091,.010303,-.024227,.043673,-.054264,.052822,-.029628,.072636,-.060872,.009697,-.02875,.00986,-.022329,.017,-.011004,.032457,-.024208,.012005,-.008463,.007528,-.005477,.010184,-.008946,.022467,-.017814,.021984,-.010825,.01349,-.011792,.015843,-.018504,.009142,-.009706,.023022,-.01859,.014279,-.006695,.016172,-.014479,.006767,-.013334,.01513,-.004185,.012761,-.010826,.010423,-.014896,.010575,-.0076,.004378,-.006711,.012219,-.013347,.018119,-.00813,.005741,-933e-6,.002626,-.004925,.012699,-.007459,983e-6,-.001419,.008352,-746e-6,.009839,-.006377,.017923,-.009224,.017853,-.008435,.006176,-.005453,.002671,-.003368,.007955,-.009822,.003221,-.004982,.00564,-.004075,.004971,-.008221,.003452,-531e-6,.003843,-456e-6,.004368,-.003286,.002301,-.002973,.002599,-.003639,.001813,-.001674,843e-6,-946e-6,.001521,-.002425,.004437,-.001832,.00159,-.001466,.002488,-.001848,.001706,-.001997,.002219,-.002929,.004417,-.002902,.004909,-.002706,.0011,-.002781,.004829,-557e-6,.002344,-.002916,.003858,-.002189,.00124,-.007098,.004765,-.002468,.003838,-.004042,.001585,-.001629,.00187,-.001769,.00103,-.004652,.001353,-786e-6,.001827,-.001967,.002247,-.002464,.0032,-.001606,.003605,-.001669,.002088,-423e-6,.00305,-.002035,.002578,-.001466,878e-6,-.001325,.001945,-893e-6,651e-6,-.00271,904e-6,-.002001,.002026,-.001277,9e-4,-6e-5,41e-5,-.002095,679e-6,-.00168,271e-6,-854e-6,.002059,-.001842,588e-6,-.001423,.001127,-.001012,.001257,-977e-6,.001263,-416e-6,.00169,-.001188,.001002,-.001299,.001426,-.001192,.001813,-.001252,.001087,-.001519,587e-6,-.00152,.001213,-997e-6,.001111,-.001167,.001138,-.001138,.001003,-.001111,96e-5,-.001305,.001013,-.00119,.001317,-.001368,.001121,-.001135,.001312,-.001031,.00124,-.001157,.001102,-984e-6,.001277,-.001333,.001009,-.001334,.001214,-.001263,.001177,-.001139,.001158,-.001218,.001292,-.001112,965e-6,-.001612,.001088,-.00169,.001478,-814e-6,.001036,-.001151,.001088,-.001171,.001168,-884e-6,.00178,-.001096,.001326,-.001159,.001286,-.001219,.00114,-.001417,909e-6,-787e-6,.001617,-.001739,.001072,-.001397,918e-6,-.001582,.001645,-.001874,.001149,-.001032,.001,-.001331,629e-6,-.001643,.001524,-956e-6,.001529,-.001478,933e-6,-942e-6,.001476,-69e-5,.001544,-.00114,.001043,-559e-6,.001881,-.002204,.001086,-932e-6,.001257,-868e-6,.001464,-.001439,577e-6,-.001318,.001379,-.001327,.001645,-.001531,.001271,-.001941,.001349,-.001822,357e-6,-.001563,.001292,-.00111,.001094,-.001208,.00123,-.001118,.001246,-.001104,.00108,-.001027,.001088,-.001036,.001058,-.001027,.001027,-.001012,.001008,-984e-6,981e-6,-971e-6,962e-6,-953e-6,946e-6,-939e-6,932e-6,-926e-6,92e-5,-914e-6,908e-6,-903e-6,897e-6,-892e-6,887e-6,-882e-6,877e-6,-872e-6,867e-6,-863e-6,858e-6,-854e-6,85e-5,-845e-6,841e-6,-837e-6,833e-6,-829e-6,825e-6,-821e-6,818e-6,-814e-6,81e-5,-807e-6,803e-6,-799e-6,796e-6,-793e-6,789e-6,-786e-6,783e-6,-779e-6,776e-6,-773e-6,77e-5,-767e-6,764e-6,-761e-6,758e-6,-755e-6,752e-6,-749e-6,746e-6,-743e-6,74e-5,-737e-6,735e-6,-732e-6,729e-6,-726e-6,724e-6,-721e-6,718e-6,-716e-6,713e-6,-711e-6,708e-6,-706e-6,703e-6,-701e-6,698e-6,-696e-6,693e-6,-691e-6,689e-6,-686e-6,684e-6,-682e-6,679e-6,-677e-6,675e-6,-673e-6,67e-5,-668e-6,666e-6,-664e-6,662e-6,-659e-6,657e-6,-655e-6,653e-6,-651e-6,649e-6,-647e-6,645e-6,-643e-6,641e-6,-639e-6,637e-6,-635e-6,633e-6,-631e-6,629e-6,-627e-6,625e-6,-623e-6,621e-6,-619e-6,617e-6,-615e-6,613e-6,-611e-6,61e-5,-608e-6,606e-6,-604e-6,602e-6,-6e-4,599e-6,-597e-6,595e-6,-593e-6,592e-6,-59e-5,588e-6,-586e-6,585e-6,-583e-6,581e-6,-58e-5,578e-6,-576e-6,575e-6,-573e-6,571e-6,-57e-5,568e-6,-566e-6,565e-6,-563e-6,562e-6,-56e-5,558e-6,-557e-6,555e-6,-554e-6,552e-6,-55e-5,549e-6,-547e-6,546e-6,-544e-6,543e-6,-541e-6,54e-5,-538e-6,537e-6,-535e-6,534e-6,-532e-6,531e-6,-529e-6,528e-6,-526e-6,525e-6,-524e-6,522e-6,-521e-6,519e-6,-518e-6,516e-6,-515e-6,514e-6,-512e-6,511e-6,-509e-6,508e-6,-507e-6,505e-6,-504e-6,502e-6,-501e-6,5e-4,-498e-6,497e-6,-496e-6,494e-6,-493e-6,492e-6,-49e-5,489e-6,-488e-6,486e-6,-485e-6,484e-6,-483e-6,481e-6,-48e-5,479e-6,-477e-6,476e-6,-475e-6,474e-6,-472e-6,471e-6,-47e-5,468e-6,-467e-6,466e-6,-465e-6,463e-6,-462e-6,461e-6,-46e-5,459e-6,-457e-6,456e-6,-455e-6,454e-6,-452e-6,451e-6,-45e-5,449e-6,-448e-6,446e-6,-445e-6,444e-6,-443e-6,442e-6,-441e-6,439e-6,-438e-6,437e-6,-436e-6,435e-6,-434e-6,432e-6,-431e-6,43e-5,-429e-6,428e-6,-427e-6,426e-6,-424e-6,423e-6,-422e-6,421e-6,-42e-5,419e-6,-418e-6,416e-6,-415e-6,414e-6,-413e-6,412e-6,-411e-6,41e-5,-409e-6,408e-6,-406e-6,405e-6,-404e-6,403e-6,-402e-6,401e-6,-4e-4,399e-6,-398e-6,397e-6,-396e-6,395e-6,-393e-6,392e-6,-391e-6,39e-5,-389e-6,388e-6,-387e-6,386e-6,-385e-6,384e-6,-383e-6,382e-6,-381e-6,38e-5,-379e-6,378e-6,-377e-6,376e-6,-374e-6,373e-6,-372e-6,371e-6,-37e-5,369e-6,-368e-6,367e-6,-366e-6,365e-6,-364e-6,363e-6,-362e-6,361e-6,-36e-5,359e-6,-358e-6,357e-6,-356e-6,355e-6,-354e-6,353e-6,-352e-6,351e-6,-35e-5,349e-6,-348e-6,347e-6,-346e-6,345e-6,-344e-6,343e-6,-342e-6,341e-6,-34e-5,339e-6,-338e-6,337e-6,-336e-6,335e-6,-334e-6,333e-6,-332e-6,331e-6,-33e-5,329e-6,-328e-6,327e-6,-326e-6,325e-6,-324e-6,323e-6,-323e-6,322e-6,-321e-6,32e-5,-319e-6,318e-6,-317e-6,316e-6,-315e-6,314e-6,-313e-6,312e-6,-311e-6,31e-5,-309e-6,308e-6,-307e-6,306e-6,-305e-6,304e-6,-303e-6,302e-6,-301e-6,301e-6,-3e-4,299e-6,-298e-6,297e-6,-296e-6,295e-6,-294e-6,293e-6,-292e-6,291e-6,-29e-5,289e-6,-288e-6,287e-6,-286e-6,286e-6,-285e-6,284e-6,-283e-6,282e-6,-281e-6,28e-5,-279e-6,278e-6,-277e-6,276e-6,-275e-6,274e-6,-273e-6,272e-6,-272e-6,271e-6,-27e-5,269e-6,-268e-6,267e-6,-266e-6,265e-6,-264e-6,263e-6,-262e-6,261e-6,-261e-6,26e-5,-259e-6,258e-6,-257e-6,256e-6,-255e-6,254e-6,-253e-6,252e-6,-251e-6,25e-5,-25e-5,249e-6,-248e-6,247e-6,-246e-6,245e-6,-244e-6,243e-6,-242e-6,241e-6,-24e-5,24e-5,-239e-6,238e-6,-237e-6,236e-6,-235e-6,234e-6,-233e-6,232e-6,-231e-6,23e-5,-23e-5,229e-6,-228e-6,227e-6,-226e-6,225e-6,-224e-6,223e-6,-222e-6,221e-6,-221e-6,22e-5,-219e-6,218e-6,-217e-6,216e-6,-215e-6,214e-6,-213e-6,212e-6,-211e-6,211e-6,-21e-5,209e-6,-208e-6,207e-6,-206e-6,205e-6,-204e-6,203e-6,-203e-6,202e-6,-201e-6,2e-4,-199e-6,198e-6,-197e-6,196e-6,-195e-6,194e-6,-194e-6,193e-6,-192e-6,191e-6,-19e-5,189e-6,-188e-6,187e-6,-186e-6,185e-6,-185e-6,184e-6,-183e-6,182e-6,-181e-6,18e-5,-179e-6,178e-6,-177e-6,177e-6,-176e-6,175e-6,-174e-6,173e-6,-172e-6,171e-6,-17e-5,169e-6,-169e-6,168e-6,-167e-6,166e-6,-165e-6,164e-6,-163e-6,162e-6,-161e-6,161e-6,-16e-5,159e-6,-158e-6,157e-6,-156e-6,155e-6,-154e-6,153e-6,-153e-6,152e-6,-151e-6,15e-5,-149e-6,148e-6,-147e-6,146e-6,-145e-6,145e-6,-144e-6,143e-6,-142e-6,141e-6,-14e-5,139e-6,-138e-6,137e-6,-137e-6,136e-6,-135e-6,134e-6,-133e-6,132e-6,-131e-6,13e-5,-129e-6,129e-6,-128e-6,127e-6,-126e-6,125e-6,-124e-6,123e-6,-122e-6,121e-6,-121e-6,12e-5,-119e-6,118e-6,-117e-6,116e-6,-115e-6,114e-6,-113e-6,113e-6,-112e-6,111e-6,-11e-5,109e-6,-108e-6,107e-6,-106e-6,106e-6,-105e-6,104e-6,-103e-6,102e-6,-101e-6,1e-4,-99e-6,98e-6,-98e-6,97e-6,-96e-6,95e-6,-94e-6,93e-6,-92e-6,91e-6,-9e-5,9e-5,-89e-6,88e-6,-87e-6,86e-6,-85e-6,84e-6,-83e-6,83e-6,-82e-6,81e-6,-8e-5,79e-6,-78e-6,77e-6,-76e-6,76e-6,-75e-6,74e-6,-73e-6,72e-6,-71e-6,7e-5,-69e-6,68e-6,-68e-6,67e-6,-66e-6,65e-6,-64e-6,63e-6,-62e-6,61e-6,-61e-6,6e-5,-59e-6,58e-6,-57e-6,56e-6,-55e-6,54e-6,-54e-6,53e-6,-52e-6,51e-6,-5e-5,49e-6,-48e-6,47e-6,-47e-6,46e-6,-45e-6,44e-6,-43e-6,42e-6,-41e-6,41e-6,-4e-5,39e-6,-38e-6,37e-6,-36e-6,35e-6,-34e-6,34e-6,-33e-6,32e-6,-31e-6,3e-5,-29e-6,28e-6,-27e-6,27e-6,-26e-6,25e-6,-24e-6,23e-6,-22e-6,21e-6,-21e-6,2e-5,-19e-6,18e-6,-17e-6,16e-6,-15e-6,15e-6,-14e-6,13e-6,-12e-6,11e-6,-1e-5,9e-6,-9e-6,8e-6,-7e-6,6e-6,-5e-6,4e-6,-3e-6,3e-6,-2e-6,1e-6,0,-1e-6,2e-6,-3e-6,3e-6,-4e-6,5e-6,-6e-6,7e-6,-8e-6,8e-6,-9e-6,1e-5,-11e-6,12e-6,-13e-6,14e-6,-14e-6,15e-6,-16e-6,17e-6,-18e-6,19e-6,-19e-6,2e-5,-21e-6,22e-6,-23e-6,24e-6,-24e-6,25e-6,-26e-6,27e-6,-28e-6,29e-6,-29e-6,3e-5,-31e-6,32e-6,-33e-6,34e-6,-34e-6,35e-6,-36e-6,37e-6,-38e-6,39e-6,-39e-6,4e-5,-41e-6,42e-6,-43e-6,43e-6,-44e-6,45e-6,-46e-6,47e-6,-48e-6,48e-6,-49e-6,5e-5,-51e-6,52e-6,-52e-6,53e-6,-54e-6,55e-6,-56e-6,56e-6,-57e-6,58e-6,-59e-6,6e-5,-6e-5,61e-6,-62e-6,63e-6,-64e-6,64e-6,-65e-6,66e-6,-67e-6,68e-6,-68e-6,69e-6,-7e-5,71e-6,-72e-6,72e-6,-73e-6,74e-6,-75e-6,75e-6,-76e-6,77e-6,-78e-6,79e-6,-79e-6,8e-5,-81e-6,82e-6,-82e-6,83e-6,-84e-6,85e-6,-85e-6,86e-6,-87e-6,88e-6,-89e-6,89e-6,-9e-5,91e-6,-92e-6,92e-6,-93e-6,94e-6,-95e-6,95e-6,-96e-6,97e-6,-98e-6,98e-6,-99e-6,1e-4,-101e-6,101e-6,-102e-6,103e-6,-103e-6,104e-6,-105e-6,106e-6,-106e-6,107e-6,-108e-6,109e-6,-109e-6,11e-5,-111e-6,111e-6,-112e-6,113e-6,-114e-6,114e-6,-115e-6,116e-6,-116e-6,117e-6,-118e-6,119e-6,-119e-6,12e-5,-121e-6,121e-6,-122e-6,123e-6,-123e-6,124e-6,-125e-6,125e-6,-126e-6,127e-6,-127e-6,128e-6,-129e-6,13e-5,-13e-5,131e-6,-132e-6,132e-6,-133e-6,134e-6,-134e-6,135e-6,-136e-6,136e-6,-137e-6,137e-6,-138e-6,139e-6,-139e-6,14e-5,-141e-6,141e-6,-142e-6,143e-6,-143e-6,144e-6,-145e-6,145e-6,-146e-6,146e-6,-147e-6,148e-6,-148e-6,149e-6,-15e-5,15e-5,-151e-6,151e-6,-152e-6,153e-6,-153e-6,154e-6,-154e-6,155e-6,-156e-6,156e-6,-157e-6,157e-6,-158e-6,159e-6,-159e-6,16e-5,-16e-5,161e-6,-161e-6,162e-6,-163e-6,163e-6,-164e-6,164e-6,-165e-6,165e-6,-166e-6,166e-6,-167e-6,168e-6,-168e-6,169e-6,-169e-6,17e-5,-17e-5,171e-6,-171e-6,172e-6,-172e-6,173e-6,-173e-6,174e-6,-174e-6,175e-6,-176e-6,176e-6,-177e-6,177e-6,-178e-6,178e-6,-179e-6,179e-6,-18e-5,18e-5,-18e-5,181e-6,-181e-6,182e-6,-182e-6,183e-6,-183e-6,184e-6,-184e-6,185e-6,-185e-6,186e-6,-186e-6,187e-6,-187e-6,187e-6,-188e-6,188e-6,-189e-6,189e-6,-19e-5,19e-5,-191e-6,191e-6,-191e-6,192e-6,-192e-6,193e-6,-193e-6,193e-6,-194e-6,194e-6,-195e-6,195e-6,-195e-6,196e-6,-196e-6,197e-6,-197e-6,197e-6,-198e-6,198e-6,-198e-6,199e-6,-199e-6,2e-4,-2e-4,2e-4,-201e-6,201e-6,-201e-6,202e-6,-202e-6,202e-6,-203e-6,203e-6,-203e-6,204e-6,-204e-6,204e-6,-205e-6,205e-6,-205e-6,206e-6,-206e-6,206e-6,-206e-6,207e-6,-207e-6,207e-6,-208e-6,208e-6,-208e-6,208e-6,-209e-6,209e-6,-209e-6,209e-6,-21e-5,21e-5,-21e-5,21e-5,-211e-6,211e-6,-211e-6,211e-6,-212e-6,212e-6,-212e-6,212e-6,-213e-6,213e-6,-213e-6,213e-6,-213e-6,214e-6,-214e-6,214e-6,-214e-6,214e-6,-215e-6,215e-6,-215e-6,215e-6,-215e-6,215e-6,-216e-6,216e-6,-216e-6,216e-6,-216e-6,216e-6,-216e-6,217e-6,-217e-6,217e-6,-217e-6,217e-6,-217e-6,217e-6,-217e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,219e-6,-219e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-218e-6,218e-6,-217e-6,217e-6,-217e-6,217e-6,-217e-6,217e-6,-217e-6,217e-6,-216e-6,216e-6,-216e-6,216e-6,-216e-6,216e-6,-216e-6,215e-6,-215e-6,215e-6,-215e-6,215e-6,-214e-6,214e-6,-214e-6,214e-6,-214e-6,213e-6,-213e-6,213e-6,-213e-6,213e-6,-212e-6,212e-6,-212e-6,212e-6,-211e-6,211e-6,-211e-6,211e-6,-21e-5,21e-5,-21e-5,21e-5,-209e-6,209e-6,-209e-6,208e-6,-208e-6,208e-6,-208e-6,207e-6,-207e-6,207e-6,-206e-6,206e-6,-206e-6,205e-6,-205e-6,205e-6,-204e-6,204e-6,-204e-6,203e-6,-203e-6,203e-6,-202e-6,202e-6,-201e-6,201e-6,-201e-6,2e-4,-2e-4,2e-4,-199e-6,199e-6,-198e-6,198e-6,-198e-6,197e-6,-197e-6,196e-6,-196e-6,195e-6,-195e-6,194e-6,-194e-6,194e-6,-193e-6,193e-6,-192e-6,192e-6,-191e-6,191e-6,-19e-5,19e-5,-189e-6,189e-6,-188e-6,188e-6,-187e-6,187e-6,-186e-6,186e-6,-185e-6,185e-6,-184e-6,184e-6,-183e-6,183e-6,-182e-6,182e-6,-181e-6,181e-6,-18e-5,179e-6,-179e-6,178e-6,-178e-6,177e-6,-177e-6,176e-6,-175e-6,175e-6,-174e-6,174e-6,-173e-6,172e-6,-172e-6,171e-6,-171e-6,17e-5,-169e-6,169e-6,-168e-6,167e-6,-167e-6,166e-6,-166e-6,165e-6,-164e-6,164e-6,-163e-6,162e-6,-162e-6,161e-6,-16e-5,16e-5,-159e-6,158e-6,-158e-6,157e-6,-156e-6,155e-6,-155e-6,154e-6,-153e-6,153e-6,-152e-6,151e-6,-15e-5,15e-5,-149e-6,148e-6,-147e-6,147e-6,-146e-6,145e-6,-144e-6,144e-6,-143e-6,142e-6,-141e-6,141e-6,-14e-5,139e-6,-138e-6,138e-6,-137e-6,136e-6,-135e-6,134e-6,-134e-6,133e-6,-132e-6,131e-6,-13e-5,13e-5,-129e-6,128e-6,-127e-6,126e-6,-125e-6,125e-6,-124e-6,123e-6,-122e-6,121e-6,-12e-5,12e-5,-119e-6,118e-6,-117e-6,116e-6,-115e-6,114e-6,-114e-6,113e-6,-112e-6,111e-6,-11e-5,109e-6,-108e-6,107e-6,-107e-6,106e-6,-105e-6,104e-6,-103e-6,102e-6,-101e-6,1e-4,-99e-6,98e-6,-97e-6,97e-6,-96e-6,95e-6,-94e-6,93e-6,-92e-6,91e-6,-9e-5,89e-6,-88e-6,87e-6,-86e-6,85e-6,-84e-6,83e-6,-82e-6,81e-6,-81e-6,8e-5,-79e-6,78e-6,-77e-6,76e-6,-75e-6,74e-6,-73e-6,72e-6,-71e-6,7e-5,-69e-6,68e-6,-67e-6,66e-6,-65e-6,64e-6,-63e-6,62e-6,-61e-6,6e-5,-59e-6,58e-6,-57e-6,56e-6,-55e-6,54e-6,-53e-6,52e-6,-51e-6,5e-5,-49e-6,48e-6,-47e-6,46e-6,-45e-6,44e-6,-43e-6,42e-6,-41e-6,39e-6,-38e-6,37e-6,-36e-6,35e-6,-34e-6,33e-6,-32e-6,31e-6,-3e-5,29e-6,-28e-6,27e-6,-26e-6,25e-6,-24e-6,23e-6,-22e-6,21e-6,-2e-5,19e-6,-18e-6,17e-6,-15e-6,14e-6,-13e-6,12e-6,-11e-6,1e-5,-9e-6,8e-6,-7e-6,6e-6,-5e-6,4e-6,-3e-6,2e-6,-1e-6,0,1e-6,-3e-6,4e-6,-5e-6,6e-6,-7e-6,8e-6,-9e-6,1e-5,-11e-6,12e-6,-13e-6,14e-6,-15e-6,16e-6,-17e-6,18e-6,-2e-5,21e-6,-22e-6,23e-6,-24e-6,25e-6,-26e-6,27e-6,-28e-6,29e-6,-3e-5,31e-6,-32e-6,33e-6,-34e-6,35e-6,-36e-6,37e-6,-39e-6,4e-5,-41e-6,42e-6,-43e-6,44e-6,-45e-6,46e-6,-47e-6,48e-6,-49e-6,5e-5,-51e-6,52e-6,-53e-6,54e-6,-55e-6,56e-6,-57e-6,58e-6,-59e-6,6e-5,-61e-6,62e-6,-63e-6,64e-6,-65e-6,66e-6,-68e-6,69e-6,-7e-5,71e-6,-72e-6,73e-6,-74e-6,75e-6,-76e-6,77e-6,-78e-6,79e-6,-8e-5,81e-6,-82e-6,83e-6,-84e-6,84e-6,-85e-6,86e-6,-87e-6,88e-6,-89e-6,9e-5,-91e-6,92e-6,-93e-6,94e-6,-95e-6,96e-6,-97e-6,98e-6,-99e-6,1e-4,-101e-6,102e-6,-103e-6,104e-6,-105e-6,105e-6,-106e-6,107e-6,-108e-6,109e-6,-11e-5,111e-6,-112e-6,113e-6,-114e-6,115e-6,-115e-6,116e-6,-117e-6,118e-6,-119e-6,12e-5,-121e-6,122e-6,-122e-6,123e-6,-124e-6,125e-6,-126e-6,127e-6,-128e-6,128e-6,-129e-6,13e-5,-131e-6,132e-6,-133e-6,133e-6,-134e-6,135e-6,-136e-6,137e-6,-137e-6,138e-6,-139e-6,14e-5,-141e-6,141e-6,-142e-6,143e-6,-144e-6,144e-6,-145e-6,146e-6,-147e-6,147e-6,-148e-6,149e-6,-15e-5,15e-5,-151e-6,152e-6,-152e-6,153e-6,-154e-6,154e-6,-155e-6,156e-6,-156e-6,157e-6,-158e-6,159e-6,-159e-6,16e-5,-16e-5,161e-6,-162e-6,162e-6,-163e-6,164e-6,-164e-6,165e-6,-165e-6,166e-6,-167e-6,167e-6,-168e-6,168e-6,-169e-6,17e-5,-17e-5,171e-6,-171e-6,172e-6,-172e-6,173e-6,-173e-6,174e-6,-174e-6,175e-6,-175e-6,176e-6,-176e-6,177e-6,-177e-6,178e-6,-178e-6,179e-6,-179e-6,18e-5,-18e-5,181e-6,-181e-6,181e-6,-182e-6,182e-6,-183e-6,183e-6,-183e-6,184e-6,-184e-6,185e-6,-185e-6,185e-6,-186e-6,186e-6,-186e-6,187e-6,-187e-6,187e-6,-188e-6,188e-6,-188e-6,189e-6,-189e-6,189e-6,-19e-5,19e-5,-19e-5,19e-5,-191e-6,191e-6,-191e-6,191e-6,-192e-6,192e-6,-192e-6,192e-6,-192e-6,193e-6,-193e-6,193e-6,-193e-6,193e-6,-193e-6,194e-6,-194e-6,194e-6,-194e-6,194e-6,-194e-6,194e-6,-194e-6,195e-6,-195e-6,195e-6,-195e-6,195e-6,-195e-6,195e-6,-195e-6,195e-6,-195e-6,195e-6,-195e-6,195e-6],imag:[0,.493552,0,2e-6,-2e-6,6e-6,-4e-6,8e-6,-6e-6,6e-6,-5e-6,1e-6,-2e-6,5e-6,-4e-6,3e-6,-9e-6,19e-6,-26e-6,29e-6,-18e-6,48e-6,-44e-6,8e-6,-25e-6,9e-6,-23e-6,19e-6,-13e-6,41e-6,-32e-6,17e-6,-13e-6,12e-6,-9e-6,19e-6,-17e-6,46e-6,-39e-6,5e-5,-26e-6,34e-6,-31e-6,44e-6,-54e-6,28e-6,-31e-6,76e-6,-64e-6,51e-6,-25e-6,63e-6,-59e-6,28e-6,-58e-6,69e-6,-2e-5,62e-6,-55e-6,54e-6,-8e-5,59e-6,-44e-6,26e-6,-41e-6,77e-6,-87e-6,122e-6,-56e-6,41e-6,-7e-6,2e-5,-38e-6,101e-6,-61e-6,8e-6,-12e-6,74e-6,-7e-6,92e-6,-61e-6,176e-6,-93e-6,184e-6,-89e-6,67e-6,-6e-5,3e-5,-39e-6,94e-6,-119e-6,4e-5,-63e-6,73e-6,-54e-6,67e-6,-114e-6,49e-6,-8e-6,56e-6,-7e-6,67e-6,-51e-6,37e-6,-48e-6,43e-6,-61e-6,31e-6,-29e-6,15e-6,-17e-6,28e-6,-46e-6,85e-6,-36e-6,32e-6,-3e-5,51e-6,-39e-6,36e-6,-43e-6,49e-6,-65e-6,1e-4,-67e-6,115e-6,-64e-6,27e-6,-68e-6,12e-5,-14e-6,6e-5,-76e-6,102e-6,-59e-6,34e-6,-197e-6,134e-6,-7e-5,111e-6,-119e-6,47e-6,-49e-6,57e-6,-55e-6,32e-6,-149e-6,44e-6,-26e-6,61e-6,-66e-6,77e-6,-85e-6,112e-6,-57e-6,13e-5,-61e-6,77e-6,-16e-6,116e-6,-78e-6,1e-4,-58e-6,35e-6,-53e-6,79e-6,-37e-6,27e-6,-115e-6,39e-6,-87e-6,89e-6,-57e-6,4e-5,-3e-6,19e-6,-97e-6,32e-6,-8e-5,13e-6,-41e-6,101e-6,-91e-6,3e-5,-72e-6,58e-6,-53e-6,66e-6,-52e-6,68e-6,-23e-6,92e-6,-66e-6,56e-6,-73e-6,81e-6,-69e-6,106e-6,-74e-6,65e-6,-91e-6,36e-6,-93e-6,75e-6,-62e-6,7e-5,-74e-6,73e-6,-74e-6,66e-6,-73e-6,64e-6,-88e-6,69e-6,-82e-6,91e-6,-96e-6,79e-6,-81e-6,94e-6,-75e-6,91e-6,-86e-6,82e-6,-74e-6,97e-6,-102e-6,78e-6,-104e-6,96e-6,-1e-4,94e-6,-92e-6,94e-6,-1e-4,107e-6,-93e-6,81e-6,-137e-6,93e-6,-146e-6,129e-6,-72e-6,92e-6,-103e-6,98e-6,-106e-6,107e-6,-82e-6,166e-6,-103e-6,125e-6,-111e-6,124e-6,-118e-6,111e-6,-14e-5,9e-5,-79e-6,163e-6,-177e-6,11e-5,-144e-6,96e-6,-166e-6,174e-6,-199e-6,123e-6,-111e-6,109e-6,-146e-6,69e-6,-183e-6,171e-6,-108e-6,174e-6,-169e-6,108e-6,-11e-5,173e-6,-81e-6,183e-6,-136e-6,126e-6,-68e-6,23e-5,-271e-6,135e-6,-116e-6,158e-6,-11e-5,187e-6,-185e-6,75e-6,-172e-6,181e-6,-175e-6,219e-6,-205e-6,171e-6,-263e-6,184e-6,-25e-5,49e-6,-218e-6,181e-6,-157e-6,156e-6,-173e-6,177e-6,-162e-6,182e-6,-162e-6,16e-5,-153e-6,163e-6,-156e-6,16e-5,-157e-6,158e-6,-156e-6,157e-6,-154e-6,155e-6,-154e-6,153e-6,-153e-6,153e-6,-153e-6,153e-6,-152e-6,152e-6,-152e-6,152e-6,-152e-6,152e-6,-152e-6,152e-6,-152e-6,152e-6,-153e-6,153e-6,-153e-6,153e-6,-153e-6,153e-6,-153e-6,153e-6,-154e-6,154e-6,-154e-6,154e-6,-154e-6,154e-6,-155e-6,155e-6,-155e-6,155e-6,-155e-6,156e-6,-156e-6,156e-6,-156e-6,157e-6,-157e-6,157e-6,-157e-6,157e-6,-158e-6,158e-6,-158e-6,158e-6,-159e-6,159e-6,-159e-6,159e-6,-16e-5,16e-5,-16e-5,161e-6,-161e-6,161e-6,-161e-6,162e-6,-162e-6,162e-6,-162e-6,163e-6,-163e-6,163e-6,-164e-6,164e-6,-164e-6,165e-6,-165e-6,165e-6,-165e-6,166e-6,-166e-6,166e-6,-167e-6,167e-6,-167e-6,167e-6,-168e-6,168e-6,-168e-6,169e-6,-169e-6,169e-6,-17e-5,17e-5,-17e-5,171e-6,-171e-6,171e-6,-172e-6,172e-6,-172e-6,172e-6,-173e-6,173e-6,-173e-6,174e-6,-174e-6,174e-6,-175e-6,175e-6,-175e-6,176e-6,-176e-6,176e-6,-177e-6,177e-6,-177e-6,178e-6,-178e-6,178e-6,-179e-6,179e-6,-179e-6,18e-5,-18e-5,18e-5,-181e-6,181e-6,-181e-6,181e-6,-182e-6,182e-6,-182e-6,183e-6,-183e-6,183e-6,-184e-6,184e-6,-184e-6,185e-6,-185e-6,185e-6,-186e-6,186e-6,-186e-6,187e-6,-187e-6,187e-6,-188e-6,188e-6,-188e-6,189e-6,-189e-6,189e-6,-19e-5,19e-5,-19e-5,191e-6,-191e-6,191e-6,-192e-6,192e-6,-192e-6,193e-6,-193e-6,193e-6,-194e-6,194e-6,-194e-6,195e-6,-195e-6,195e-6,-196e-6,196e-6,-196e-6,197e-6,-197e-6,197e-6,-198e-6,198e-6,-198e-6,199e-6,-199e-6,199e-6,-2e-4,2e-4,-2e-4,201e-6,-201e-6,201e-6,-202e-6,202e-6,-202e-6,203e-6,-203e-6,203e-6,-204e-6,204e-6,-204e-6,205e-6,-205e-6,205e-6,-206e-6,206e-6,-206e-6,207e-6,-207e-6,207e-6,-208e-6,208e-6,-208e-6,209e-6,-209e-6,209e-6,-21e-5,21e-5,-21e-5,211e-6,-211e-6,211e-6,-212e-6,212e-6,-212e-6,213e-6,-213e-6,213e-6,-214e-6,214e-6,-214e-6,215e-6,-215e-6,215e-6,-216e-6,216e-6,-216e-6,217e-6,-217e-6,217e-6,-218e-6,218e-6,-218e-6,219e-6,-219e-6,219e-6,-22e-5,22e-5,-22e-5,221e-6,-221e-6,221e-6,-222e-6,222e-6,-222e-6,222e-6,-223e-6,223e-6,-223e-6,224e-6,-224e-6,224e-6,-225e-6,225e-6,-225e-6,226e-6,-226e-6,226e-6,-227e-6,227e-6,-227e-6,228e-6,-228e-6,228e-6,-229e-6,229e-6,-229e-6,229e-6,-23e-5,23e-5,-23e-5,231e-6,-231e-6,231e-6,-232e-6,232e-6,-232e-6,233e-6,-233e-6,233e-6,-234e-6,234e-6,-234e-6,234e-6,-235e-6,235e-6,-235e-6,236e-6,-236e-6,236e-6,-237e-6,237e-6,-237e-6,237e-6,-238e-6,238e-6,-238e-6,239e-6,-239e-6,239e-6,-24e-5,24e-5,-24e-5,24e-5,-241e-6,241e-6,-241e-6,242e-6,-242e-6,242e-6,-243e-6,243e-6,-243e-6,243e-6,-244e-6,244e-6,-244e-6,245e-6,-245e-6,245e-6,-245e-6,246e-6,-246e-6,246e-6,-247e-6,247e-6,-247e-6,247e-6,-248e-6,248e-6,-248e-6,249e-6,-249e-6,249e-6,-249e-6,25e-5,-25e-5,25e-5,-251e-6,251e-6,-251e-6,251e-6,-252e-6,252e-6,-252e-6,252e-6,-253e-6,253e-6,-253e-6,254e-6,-254e-6,254e-6,-254e-6,255e-6,-255e-6,255e-6,-255e-6,256e-6,-256e-6,256e-6,-257e-6,257e-6,-257e-6,257e-6,-258e-6,258e-6,-258e-6,258e-6,-259e-6,259e-6,-259e-6,259e-6,-26e-5,26e-5,-26e-5,26e-5,-261e-6,261e-6,-261e-6,261e-6,-262e-6,262e-6,-262e-6,262e-6,-263e-6,263e-6,-263e-6,263e-6,-264e-6,264e-6,-264e-6,264e-6,-265e-6,265e-6,-265e-6,265e-6,-265e-6,266e-6,-266e-6,266e-6,-266e-6,267e-6,-267e-6,267e-6,-267e-6,268e-6,-268e-6,268e-6,-268e-6,268e-6,-269e-6,269e-6,-269e-6,269e-6,-27e-5,27e-5,-27e-5,27e-5,-27e-5,271e-6,-271e-6,271e-6,-271e-6,271e-6,-272e-6,272e-6,-272e-6,272e-6,-273e-6,273e-6,-273e-6,273e-6,-273e-6,274e-6,-274e-6,274e-6,-274e-6,274e-6,-275e-6,275e-6,-275e-6,275e-6,-275e-6,275e-6,-276e-6,276e-6,-276e-6,276e-6,-276e-6,277e-6,-277e-6,277e-6,-277e-6,277e-6,-278e-6,278e-6,-278e-6,278e-6,-278e-6,278e-6,-279e-6,279e-6,-279e-6,279e-6,-279e-6,279e-6,-28e-5,28e-5,-28e-5,28e-5,-28e-5,28e-5,-281e-6,281e-6,-281e-6,281e-6,-281e-6,281e-6,-281e-6,282e-6,-282e-6,282e-6,-282e-6,282e-6,-282e-6,282e-6,-283e-6,283e-6,-283e-6,283e-6,-283e-6,283e-6,-283e-6,284e-6,-284e-6,284e-6,-284e-6,284e-6,-284e-6,284e-6,-284e-6,285e-6,-285e-6,285e-6,-285e-6,285e-6,-285e-6,285e-6,-285e-6,285e-6,-286e-6,286e-6,-286e-6,286e-6,-286e-6,286e-6,-286e-6,286e-6,-286e-6,287e-6,-287e-6,287e-6,-287e-6,287e-6,-287e-6,287e-6,-287e-6,287e-6,-287e-6,287e-6,-288e-6,288e-6,-288e-6,288e-6,-288e-6,288e-6,-288e-6,288e-6,-288e-6,288e-6,-288e-6,288e-6,-288e-6,288e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,29e-5,-29e-5,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,289e-6,-289e-6,288e-6,-288e-6,288e-6,-288e-6,288e-6,-288e-6,288e-6,-288e-6,288e-6,-288e-6,288e-6,-288e-6,288e-6,-287e-6,287e-6,-287e-6,287e-6,-287e-6,287e-6,-287e-6,287e-6,-287e-6,287e-6,-286e-6,286e-6,-286e-6,286e-6,-286e-6,286e-6,-286e-6,286e-6,-286e-6,285e-6,-285e-6,285e-6,-285e-6,285e-6,-285e-6,285e-6,-284e-6,284e-6,-284e-6,284e-6,-284e-6,284e-6,-284e-6,283e-6,-283e-6,283e-6,-283e-6,283e-6,-283e-6,282e-6,-282e-6,282e-6,-282e-6,282e-6,-282e-6,281e-6,-281e-6,281e-6,-281e-6,281e-6,-281e-6,28e-5,-28e-5,28e-5,-28e-5,28e-5,-279e-6,279e-6,-279e-6,279e-6,-279e-6,278e-6,-278e-6,278e-6,-278e-6,277e-6,-277e-6,277e-6,-277e-6,277e-6,-276e-6,276e-6,-276e-6,276e-6,-275e-6,275e-6,-275e-6,275e-6,-274e-6,274e-6,-274e-6,274e-6,-273e-6,273e-6,-273e-6,273e-6,-272e-6,272e-6,-272e-6,272e-6,-271e-6,271e-6,-271e-6,27e-5,-27e-5,27e-5,-27e-5,269e-6,-269e-6,269e-6,-268e-6,268e-6,-268e-6,268e-6,-267e-6,267e-6,-267e-6,266e-6,-266e-6,266e-6,-265e-6,265e-6,-265e-6,264e-6,-264e-6,264e-6,-263e-6,263e-6,-263e-6,262e-6,-262e-6,262e-6,-261e-6,261e-6,-261e-6,26e-5,-26e-5,26e-5,-259e-6,259e-6,-259e-6,258e-6,-258e-6,257e-6,-257e-6,257e-6,-256e-6,256e-6,-256e-6,255e-6,-255e-6,254e-6,-254e-6,254e-6,-253e-6,253e-6,-252e-6,252e-6,-252e-6,251e-6,-251e-6,25e-5,-25e-5,25e-5,-249e-6,249e-6,-248e-6,248e-6,-248e-6,247e-6,-247e-6,246e-6,-246e-6,245e-6,-245e-6,245e-6,-244e-6,244e-6,-243e-6,243e-6,-242e-6,242e-6,-241e-6,241e-6,-24e-5,24e-5,-24e-5,239e-6,-239e-6,238e-6,-238e-6,237e-6,-237e-6,236e-6,-236e-6,235e-6,-235e-6,234e-6,-234e-6,233e-6,-233e-6,232e-6,-232e-6,231e-6,-231e-6,23e-5,-23e-5,229e-6,-229e-6,228e-6,-228e-6,227e-6,-227e-6,226e-6,-226e-6,225e-6,-224e-6,224e-6,-223e-6,223e-6,-222e-6,222e-6,-221e-6,221e-6,-22e-5,22e-5,-219e-6,218e-6,-218e-6,217e-6,-217e-6,216e-6,-216e-6,215e-6,-214e-6,214e-6,-213e-6,213e-6,-212e-6,212e-6,-211e-6,21e-5,-21e-5,209e-6,-209e-6,208e-6,-207e-6,207e-6,-206e-6,206e-6,-205e-6,204e-6,-204e-6,203e-6,-203e-6,202e-6,-201e-6,201e-6,-2e-4,199e-6,-199e-6,198e-6,-197e-6,197e-6,-196e-6,196e-6,-195e-6,194e-6,-194e-6,193e-6,-192e-6,192e-6,-191e-6,19e-5,-19e-5,189e-6,-188e-6,188e-6,-187e-6,186e-6,-186e-6,185e-6,-184e-6,184e-6,-183e-6,182e-6,-182e-6,181e-6,-18e-5,179e-6,-179e-6,178e-6,-177e-6,177e-6,-176e-6,175e-6,-175e-6,174e-6,-173e-6,172e-6,-172e-6,171e-6,-17e-5,17e-5,-169e-6,168e-6,-167e-6,167e-6,-166e-6,165e-6,-164e-6,164e-6,-163e-6,162e-6,-161e-6,161e-6,-16e-5,159e-6,-158e-6,158e-6,-157e-6,156e-6,-155e-6,155e-6,-154e-6,153e-6,-152e-6,152e-6,-151e-6,15e-5,-149e-6,149e-6,-148e-6,147e-6,-146e-6,145e-6,-145e-6,144e-6,-143e-6,142e-6,-141e-6,141e-6,-14e-5,139e-6,-138e-6,137e-6,-137e-6,136e-6,-135e-6,134e-6,-133e-6,133e-6,-132e-6,131e-6,-13e-5,129e-6,-129e-6,128e-6,-127e-6,126e-6,-125e-6,124e-6,-124e-6,123e-6,-122e-6,121e-6,-12e-5,119e-6,-119e-6,118e-6,-117e-6,116e-6,-115e-6,114e-6,-114e-6,113e-6,-112e-6,111e-6,-11e-5,109e-6,-108e-6,108e-6,-107e-6,106e-6,-105e-6,104e-6,-103e-6,102e-6,-101e-6,101e-6,-1e-4,99e-6,-98e-6,97e-6,-96e-6,95e-6,-94e-6,94e-6,-93e-6,92e-6,-91e-6,9e-5,-89e-6,88e-6,-87e-6,87e-6,-86e-6,85e-6,-84e-6,83e-6,-82e-6,81e-6,-8e-5,79e-6,-78e-6,78e-6,-77e-6,76e-6,-75e-6,74e-6,-73e-6,72e-6,-71e-6,7e-5,-69e-6,68e-6,-68e-6,67e-6,-66e-6,65e-6,-64e-6,63e-6,-62e-6,61e-6,-6e-5,59e-6,-58e-6,57e-6,-57e-6,56e-6,-55e-6,54e-6,-53e-6,52e-6,-51e-6,5e-5,-49e-6,48e-6,-47e-6,46e-6,-45e-6,44e-6,-44e-6,43e-6,-42e-6,41e-6,-4e-5,39e-6,-38e-6,37e-6,-36e-6,35e-6,-34e-6,33e-6,-32e-6,31e-6,-3e-5,29e-6,-29e-6,28e-6,-27e-6,26e-6,-25e-6,24e-6,-23e-6,22e-6,-21e-6,2e-5,-19e-6,18e-6,-17e-6,16e-6,-15e-6,14e-6,-13e-6,12e-6,-12e-6,11e-6,-1e-5,9e-6,-8e-6,7e-6,-6e-6,5e-6,-4e-6,3e-6,-2e-6,1e-6,0,-1e-6,2e-6,-3e-6,4e-6,-5e-6,6e-6,-6e-6,7e-6,-8e-6,9e-6,-1e-5,11e-6,-12e-6,13e-6,-14e-6,15e-6,-16e-6,17e-6,-18e-6,19e-6,-2e-5,21e-6,-22e-6,23e-6,-23e-6,24e-6,-25e-6,26e-6,-27e-6,28e-6,-29e-6,3e-5,-31e-6,32e-6,-33e-6,34e-6,-35e-6,36e-6,-37e-6,37e-6,-38e-6,39e-6,-4e-5,41e-6,-42e-6,43e-6,-44e-6,45e-6,-46e-6,47e-6,-48e-6,49e-6,-5e-5,5e-5,-51e-6,52e-6,-53e-6,54e-6,-55e-6,56e-6,-57e-6,58e-6,-59e-6,6e-5,-6e-5,61e-6,-62e-6,63e-6,-64e-6,65e-6,-66e-6,67e-6,-68e-6,69e-6,-69e-6,7e-5,-71e-6,72e-6,-73e-6,74e-6,-75e-6,76e-6,-77e-6,77e-6,-78e-6,79e-6,-8e-5,81e-6,-82e-6,83e-6,-84e-6,84e-6,-85e-6,86e-6,-87e-6,88e-6,-89e-6,9e-5,-9e-5,91e-6,-92e-6,93e-6,-94e-6,95e-6,-96e-6,96e-6,-97e-6,98e-6,-99e-6,1e-4,-101e-6,101e-6,-102e-6,103e-6,-104e-6,105e-6,-105e-6,106e-6,-107e-6,108e-6,-109e-6,11e-5,-11e-5,111e-6,-112e-6,113e-6,-114e-6,114e-6,-115e-6,116e-6,-117e-6,117e-6,-118e-6,119e-6,-12e-5,121e-6,-121e-6,122e-6,-123e-6,124e-6,-124e-6,125e-6,-126e-6,127e-6,-127e-6,128e-6,-129e-6,13e-5,-13e-5,131e-6,-132e-6,133e-6,-133e-6,134e-6,-135e-6,135e-6,-136e-6,137e-6,-138e-6,138e-6,-139e-6,14e-5,-14e-5,141e-6,-142e-6,142e-6,-143e-6,144e-6,-145e-6,145e-6,-146e-6,147e-6,-147e-6,148e-6,-149e-6,149e-6,-15e-5,15e-5,-151e-6,152e-6,-152e-6,153e-6,-154e-6,154e-6,-155e-6,156e-6,-156e-6,157e-6,-157e-6,158e-6,-159e-6,159e-6,-16e-5,16e-5,-161e-6,162e-6,-162e-6,163e-6,-163e-6,164e-6,-164e-6,165e-6,-166e-6,166e-6,-167e-6,167e-6,-168e-6,168e-6,-169e-6,169e-6,-17e-5,17e-5,-171e-6,171e-6,-172e-6,172e-6,-173e-6,173e-6,-174e-6,174e-6,-175e-6,175e-6,-176e-6,176e-6,-177e-6,177e-6,-178e-6,178e-6,-179e-6,179e-6,-179e-6,18e-5,-18e-5,181e-6,-181e-6,182e-6,-182e-6,182e-6,-183e-6,183e-6,-184e-6,184e-6,-184e-6,185e-6,-185e-6,186e-6,-186e-6,186e-6,-187e-6,187e-6,-187e-6,188e-6,-188e-6,188e-6,-189e-6,189e-6,-189e-6,19e-5,-19e-5,19e-5,-191e-6,191e-6,-191e-6,192e-6,-192e-6,192e-6,-192e-6,193e-6,-193e-6,193e-6,-193e-6,194e-6,-194e-6,194e-6,-194e-6,195e-6,-195e-6,195e-6,-195e-6,196e-6,-196e-6,196e-6,-196e-6,196e-6,-197e-6,197e-6,-197e-6,197e-6,-197e-6,197e-6,-198e-6,198e-6,-198e-6,198e-6,-198e-6,198e-6,-198e-6,198e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,2e-4,-2e-4,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-199e-6,199e-6,-198e-6,198e-6,-198e-6,198e-6,-198e-6,198e-6,-198e-6,198e-6,-197e-6,197e-6,-197e-6,197e-6,-197e-6,196e-6,-196e-6,196e-6,-196e-6,196e-6,-195e-6,195e-6,-195e-6,195e-6,-195e-6,194e-6,-194e-6,194e-6,-193e-6,193e-6,-193e-6,193e-6,-192e-6,192e-6,-192e-6,192e-6,-191e-6,191e-6,-191e-6,19e-5,-19e-5,19e-5,-189e-6,189e-6,-189e-6,188e-6,-188e-6,187e-6,-187e-6,187e-6,-186e-6,186e-6,-186e-6,185e-6,-185e-6,184e-6,-184e-6,183e-6,-183e-6,183e-6,-182e-6,182e-6,-181e-6,181e-6,-18e-5,18e-5,-179e-6,179e-6,-178e-6,178e-6,-177e-6,177e-6,-176e-6,176e-6,-175e-6,175e-6,-174e-6,174e-6,-173e-6,173e-6,-172e-6,172e-6,-171e-6,17e-5,-17e-5,169e-6,-169e-6,168e-6,-167e-6,167e-6,-166e-6,166e-6,-165e-6,164e-6,-164e-6,163e-6,-162e-6,162e-6,-161e-6,161e-6,-16e-5,159e-6,-159e-6,158e-6,-157e-6,157e-6,-156e-6,155e-6,-154e-6,154e-6,-153e-6,152e-6,-152e-6,151e-6,-15e-5,149e-6,-149e-6,148e-6,-147e-6,146e-6,-146e-6,145e-6,-144e-6,143e-6,-143e-6,142e-6,-141e-6,14e-5,-139e-6,139e-6,-138e-6,137e-6,-136e-6,135e-6,-134e-6,134e-6,-133e-6,132e-6,-131e-6,13e-5,-129e-6,128e-6,-128e-6,127e-6,-126e-6,125e-6,-124e-6,123e-6,-122e-6,121e-6,-121e-6,12e-5,-119e-6,118e-6,-117e-6,116e-6,-115e-6,114e-6,-113e-6,112e-6,-111e-6,11e-5,-109e-6,108e-6,-107e-6,106e-6,-106e-6,105e-6,-104e-6,103e-6,-102e-6,101e-6,-1e-4,99e-6,-98e-6,97e-6,-96e-6,95e-6,-94e-6,93e-6,-92e-6,91e-6,-89e-6,88e-6,-87e-6,86e-6,-85e-6,84e-6,-83e-6,82e-6,-81e-6,8e-5,-79e-6,78e-6,-77e-6,76e-6,-75e-6,74e-6,-73e-6,72e-6,-7e-5,69e-6,-68e-6,67e-6,-66e-6,65e-6,-64e-6,63e-6,-62e-6,61e-6,-59e-6,58e-6,-57e-6,56e-6,-55e-6,54e-6,-53e-6,52e-6,-5e-5,49e-6,-48e-6,47e-6,-46e-6,45e-6,-44e-6,42e-6,-41e-6,4e-5,-39e-6,38e-6,-37e-6,35e-6,-34e-6,33e-6,-32e-6,31e-6,-3e-5,28e-6,-27e-6,26e-6,-25e-6,24e-6,-23e-6,21e-6,-2e-5,19e-6,-18e-6,17e-6,-16e-6,14e-6,-13e-6,12e-6,-11e-6,1e-5,-8e-6,7e-6,-6e-6,5e-6,-4e-6,2e-6,-1e-6]}},{}],36:[function(require,module,exports){module.exports={real:[0,0,-.203569,.5,-.401676,.137128,-.104117,.115965,-.004413,.067884,-.00888,.0793,-.038756,.011882,-.030883,.027608,-.013429,.00393,-.014029,.00972,-.007653,.007866,-.032029,.046127,-.024155,.023095,-.005522,.004511,-.003593,.011248,-.004919,.008505,-.00292,.00152,-.005641,.002615,-.001866,.001316,-32e-5,8e-4,-957e-6,.001989,-.001172,.001682,-.00262,544e-6,-734e-6,186e-6,-363e-6,243e-6,-142e-6,437e-6,-86e-5,117e-6,-35e-5,11e-5,-253e-6,218e-6,-61e-6,15e-6,-38e-6,17e-6,-25e-6,7e-6,-81e-6,17e-6,-64e-6,166e-6,-9e-6,13e-6,-24e-6,1e-6,-32e-6,13e-6,-18e-6,7e-6,-13e-6,1e-5,-23e-6,8e-6,-25e-6,46e-6,-35e-6,6e-6,-12e-6,12e-6,-24e-6,23e-6,-24e-6,27e-6,-1e-5,22e-6,-11e-6,21e-6,-7e-6,11e-6,-6e-6,21e-6,-14e-6,26e-6,-13e-6,3e-6,-32e-6,33e-6,-36e-6,25e-6,-2e-5,26e-6,-5e-5,28e-6,-13e-6,8e-6,-18e-6,2e-5,-86e-6,12e-5,-5e-6,12e-6,-16e-6,28e-6,-12e-6,6e-6,-15e-6,12e-6,-22e-6,12e-6,-23e-6,24e-6,-11e-6,22e-6,-9e-6,18e-6,-19e-6,13e-6,-42e-6,15e-6,-19e-6,14e-6,-19e-6,7e-6,-8e-6,3e-5,-11e-6,11e-6,-12e-6,22e-6,-7e-6,18e-6,-28e-6,25e-6,-2e-5,8e-6,-32e-6,22e-6,-1e-5,13e-6,-26e-6,13e-6,-24e-6,9e-6,-107e-6,109e-6,-7e-6,14e-6,-15e-6,7e-6,-29e-6,45e-6,-23e-6,39e-6,-1e-5,29e-6,-8e-6,36e-6,-18e-6,7e-6,-7e-6,7e-6,-25e-6,1e-5,-6e-6,22e-6,-21e-6,7e-6,-18e-6,11e-6,-11e-6,1e-5,-15e-6,2e-5,-12e-6,4e-6,-5e-6,7e-6,-7e-6,3e-6,-1e-6,6e-6,-7e-6,18e-6,-2e-6,5e-6,-8e-6,6e-6,-1e-5,16e-6,-1e-5,21e-6,-11e-6,13e-6,-11e-6,5e-6,-6e-6,16e-6,-14e-6,14e-6,-9e-6,9e-6,-4e-6,13e-6,-15e-6,4e-6,-7e-6,7e-6,-4e-6,4e-6,-9e-6,1e-5,-8e-6,13e-6,-12e-6,1e-6,-3e-6,12e-6,-4e-6,4e-6,-7e-6,8e-6,-1e-5,13e-6,-15e-6,13e-6,-1e-5,12e-6,-8e-6,11e-6,-24e-6,8e-6,-13e-6,13e-6,-18e-6,5e-6,-22e-6,37e-6,-19e-6,27e-6,-22e-6,26e-6,-29e-6,29e-6,-29e-6,31e-6,-34e-6,32e-6,-31e-6,37e-6,-33e-6,38e-6,-38e-6,39e-6,-36e-6,35e-6,-38e-6,35e-6,-34e-6,33e-6,-3e-5,29e-6,-28e-6,25e-6,-23e-6,22e-6,-2e-5,18e-6,-17e-6,15e-6,-14e-6,13e-6,-12e-6,11e-6,-11e-6,1e-5,-9e-6,9e-6,-9e-6,8e-6,-8e-6,8e-6,-8e-6,7e-6,-7e-6,7e-6,-7e-6,6e-6,-6e-6,6e-6,-6e-6,6e-6,-5e-6,6e-6,-6e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,5e-6,-5e-6,4e-6,-4e-6,4e-6,-5e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-3e-6,4e-6,-4e-6,3e-6,-3e-6,3e-6,-4e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-2e-6,3e-6,-3e-6,3e-6,-2e-6,3e-6,-3e-6,2e-6,-2e-6,2e-6,-3e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-1e-6,2e-6,-2e-6,2e-6,-1e-6,2e-6,-2e-6,2e-6,-1e-6,2e-6,-2e-6,1e-6,-1e-6,2e-6,-2e-6,1e-6,-1e-6,1e-6,-2e-6,1e-6,-1e-6,1e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,0,0,1e-6,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
imag:[0,.147621,-1e-6,7e-6,-1e-5,5e-6,-6e-6,9e-6,0,8e-6,-1e-6,14e-6,-8e-6,3e-6,-9e-6,9e-6,-5e-6,2e-6,-7e-6,5e-6,-5e-6,5e-6,-23e-6,37e-6,-21e-6,22e-6,-6e-6,5e-6,-4e-6,14e-6,-7e-6,12e-6,-4e-6,2e-6,-1e-5,5e-6,-4e-6,3e-6,-1e-6,2e-6,-2e-6,5e-6,-3e-6,5e-6,-8e-6,2e-6,-2e-6,1e-6,-1e-6,1e-6,-1e-6,2e-6,-3e-6,0,-2e-6,0,-1e-6,1e-6,0,0,0,0,0,0,0,0,0,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1e-6,-1e-6,0,0,0,-1e-6,0,0,0,0,0,-2e-6,2e-6,0,0,0,1e-6,0,0,0,0,0,0,-1e-6,1e-6,0,1e-6,0,0,-1e-6,0,-1e-6,0,-1e-6,0,-1e-6,0,0,1e-6,0,0,0,1e-6,0,1e-6,-1e-6,1e-6,-1e-6,0,-1e-6,1e-6,0,0,-1e-6,0,-1e-6,0,-4e-6,4e-6,0,1e-6,-1e-6,0,-1e-6,2e-6,-1e-6,2e-6,0,1e-6,0,2e-6,-1e-6,0,0,0,-1e-6,0,0,1e-6,-1e-6,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,0,0,0,0,0,0,0,0,1e-6,0,0,0,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,0,0,1e-6,-1e-6,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,0,-1e-6,0,0,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,0,0,1e-6,0,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-2e-6,1e-6,-1e-6,1e-6,-2e-6,0,-2e-6,4e-6,-2e-6,3e-6,-2e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-4e-6,4e-6,-3e-6,3e-6,-3e-6,3e-6,-3e-6,3e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,0,0,1e-6,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],37:[function(require,module,exports){module.exports={realimag}},{}],38:[function(require,module,exports){module.exports={real:[0,.428098,-.197819,.083543,.136902,.009801,.076428,-.079213,.010934,.005406,-.047524,-.014661,-.001684,.018226,.012609,.023833,-.004481,-.021685,-.012259,-.022276,.016146,.007447,-.004498,.014966,-.001971,-.001494,-512e-6,-.004515,.00311,-677e-6,-.014199,.01943,.013732,-.018715,.012072,-.009454,-.014049,.002688,-.011205,.013805,-301e-6,-.014994,.01756,-.004352,-.010002,507e-6,-79e-6,.006813,-.001416,-.006337,.009262,.00262,-.010354,.008768,.001576,-.002303,493e-6,-889e-6,.001483,489e-6,-.012614,.013248,.009723,-.010014,.009159,.001456,-.014882,.006056,-.013964,.014095,.014021,-.013938,309e-6,-336e-6,-78e-5,57e-5,-717e-6,.001105,.002724,.002311,.001344,-.005178,-.005572,.002214,-.00167,-.004326,.004692,-.004538,.004762,-.002855,.00397,.003705,-.005453,.005272,.003436,-.005054,.004868,-.003259,.00506,.004428,-.005418,-92e-6,.0017,-.004129,.002803,.003967,-.004492,.003583,-.005218,-308e-6,.002933,-.004215,.002062,.004937,-.003359,141e-6,.004152,-.005014,38e-6,-.002446,-179e-6,.004303,-.004093,368e-6,.003958,-.00376,.002379,-.003945,-.003264,.004005,-.003602,.001577,.003509,-.003208,-41e-6,.004041,-.003762,.001003,-.001716,-.003141,.003795,-.002734,.00147,.00391,-.003815,-.001715,-697e-6,-.001192,.003528,28e-5,-41e-6,.003907,-998e-6,-987e-6,.00337,-.003674,-.003172,-673e-6,-.002227,.002969,.001573,-.001657,-.00303,-.003444,-.003224,-.003055,-.003312,-.003373,-.003127,-.003032,-.003269,-.003322,-.003084,-.003016,-.003235,-.00328,-.003051,-.00299,-.003199,-.003239,-.003024,-.002969,-.003164,-.003208,-.002969,-.002953,-.003137,-.003167,-.002958,-.002925,-.003114,-.003131,-.002935,-.00287,-.003062,-.003106,-.002884,-.002885,-.00305,-.003083,-.002867,-.002839,-.003033,-.003047,-.002861,-.002843,-.002995,-.003025,-.002849,-.002775,-.003799,-.003833,-.003593,-.003565,-.003757,-.003809,-.003528,-.003519,-.00374,-.003764,-.003577,-.003502,-.003696,-.003744,-.003517,-.003456,-.003685,-.003717,-.003491,-.003414,-.003656,-.00368,-.00345,-.003385,-.003625,-.003655,-.003456,-.00338,-.003597,-.003622,-.003381,-.00335,-.003551,-.003603,-.003394,-.003338,-.003551,-.003575,-.003365,-.003337,-.003495,-.00354,-.003331,-.003261,-.003458,-.003523,-.003322,-.003294,-.003425,-.003482,-.003321,-.003261,-.003445,-.003463,-.003274,-.003212,-.003405,-.003446,-.00327,-.003229,-.003383,-.003414,-.003219,-.003175,-.00336,-.003377,-.003191,-.003123,-.003354,-.00337,-.003225,-.003143,-.003312,-.003349,-.003155,-.003043,-.003304,-.003288,-.003189,-.003141,-.003262,-.003292,-.003065,-.003093,-.003272,-.00328,-.003025,-.003074,-.003244,-.003248,-.003043,-.00303,-.003213,-.003237,-.002984,-.003012,-.00318,-.003213,-.003085,-.003037,-.003139,-.003194,-.003082,-.002933,-.00318,-.003173,-.003037,-.002968,-.003138,-.003155,-.00304,-.003079,-.003124,-.003133,-.003031,-.003016,-.00286,-.003016,-.002989,-.002879,-.002996,-.002871,-.002989,-.00285,-.00224,-.002868,.002865,-.002911,-.00277,.001863,-.002794,-.001963,-.002934,-.002013,-.002801,-.002889,-.002929,-.002883,-.00293,-.002681,-.002147,-.002128,-.002071,-.00211,-.002135,-.0021,-.002065,-.002094,-.002118,-.002111,-.002036,-.00196,-.002062,-.00211,-.002072,-.001959,-.00208,-.002079,-.001999,-.001984,-.001964,-.001964,-.001892,-.001836,-.001934,-.001948,-.001869,-.001867,-.001916,-.001938,-.001829,-.001863,-.001923,-.001912,-.001843,-.0017,-.001925,-.001873,-.001797,-.001832,-.001915,-.001894,-.00189,-.001664,-.001841,-.001846,-.001697,-.001793,-.001821,-.001833,-.001771,-.001781,-.001805,-.001826,-.001759,-.001653,-.001809,-.001816,-.001772,-.001723,-.001807,-.001805,-.001719,-.001718,-.001785,-.001693,-.001644,-.001637,-.001686,-.001682,-.001618,-.001597,-.001679,-.001676,-.001642,-.001589,-.001653,-.001661,-.001638,-.001539,-.001663,-.001661,-.001642,-.001595,-.001633,-.001651,-.001615,-.001537,-.001648,-.001639,-.001627,-.001588,-.00162,-.001598,-.001595,-.001529,-.001616,-.001631,-.001605,-.001549,-.001626,-.001527,-.001449,-.00141,-.001522,-.001521,-.001459,-.001458,-.001507,-.001501,-.001431,-.001452,-.001509,-.001504,-.001477,-.001427,-.001503,-.001501,-.001449,-.001406,-.001457,-.001462,-.001431,-.001442,-.00149,-.001487,-.001487,-.001408,-.001484,-.001476,-.001446,-.001429,-.001476,-.001464,-.001467,-.001382,-.001453,-.001453,-.001427,-.001428,-.001464,-.001464,-.001455,-.001425,-.001441,-.001458,-.001433,-.001375,-.001451,-.001448,-.001397,-.001371,-.001444,-.001442,-.001322,-.001334,-.001439,-.001439,-.001413,-.001413,-.001188,-.001435,-.001427,-.001281,-.001395,-.00143,-.001377,-.001401,-.001418,-.001411,-.001365,-.001299,-.001413,-.001412,-.001409,-.001303,-.001415,-.001405,-.001406,-.001325,-.001389,-.001376,-.001356,-.001182,-.001239,-.001233,-.001234,-.001216,-.00123,-.001236,-.001233,-.001181,-.001226,-.00122,-.001171,-.001222,-.001228,-.001219,-.00118,-.00117,-.001224,-.001223,-.001189,-.001179,-.001209,-.001206,-.001199,-.001177,-.001213,-.001185,-.001169,-.001118,-.001195,-.001208,-.001206,-.001125,-.001193,-.001202,-.001192,-.001162,-.001202,-.001201,-.001196,-.001165,-.001196,-.00118,-.001174,-.001082,-.001184,-.001192,-.001171,-.001108,-.001164,-.001182,-.001188,-.001062,-.001184,-.001164,-.001164,-.001083,-.001182,-.001181,-.001173,-.001145,-.001164,-.001137,-.001132,-.001141,-.001169,-.001173,-.00117,-.001051,-.001154,-.001169,-972e-6,-919e-6,-903e-6,-92e-5,-908e-6,-91e-5,-964e-6,-966e-6,-962e-6,-888e-6,-959e-6,-957e-6,-962e-6,-907e-6,-955e-6,-932e-6,-863e-6,-744e-6,-894e-6,-931e-6,-899e-6,-879e-6,-932e-6,-953e-6,-95e-5,-948e-6,-951e-6,-948e-6,-901e-6,-921e-6,-944e-6,-945e-6,-911e-6,-931e-6,-943e-6,-909e-6,-943e-6,-865e-6,-895e-6,-93e-5,-924e-6,-939e-6,-883e-6,-928e-6,-777e-6,-904e-6,-911e-6,-902e-6,-932e-6,-93e-5,-921e-6,-932e-6,-926e-6,-91e-5,-919e-6,-912e-6,-859e-6,-926e-6,-911e-6,-657e-6,-909e-6,-848e-6,-916e-6,-99e-6,-759e-6,-773e-6,-921e-6,-706e-6,-898e-6,713e-6,-834e-6,-808e-6,611e-6,-712e-6,-755e-6,-85e-5,-109e-6,533e-6,-846e-6,-824e-6,-796e-6,-245e-6,-803e-6,-796e-6,-848e-6,-855e-6,-844e-6,-81e-5,-8e-4,-85e-5,-836e-6,-822e-6,-83e-5,-826e-6,-776e-6,-84e-5,-848e-6,-829e-6,-843e-6,-845e-6,-838e-6,-788e-6,-835e-6,-813e-6,-808e-6,-778e-6,-841e-6,-823e-6,-842e-6,-762e-6,-836e-6,-836e-6,-815e-6,-821e-6,-83e-5,-8e-4,-836e-6,-831e-6,-827e-6,-819e-6,-536e-6,-647e-6,-82e-5,-772e-6,-832e-6,-751e-6,-693e-6,-809e-6,-81e-5,-8e-4,-823e-6,-828e-6,-818e-6,-802e-6,-642e-6,-825e-6,-81e-5,-771e-6,-825e-6,-801e-6,-822e-6,-819e-6,-757e-6,-815e-6,-821e-6,-82e-5,-809e-6,-82e-5,-8e-4,-751e-6,-813e-6,-815e-6,-718e-6,-812e-6,-796e-6,-779e-6,-76e-5,-809e-6,-742e-6,-779e-6,-743e-6,-691e-6,-808e-6,-803e-6,-762e-6,-81e-5,-781e-6,-729e-6,-647e-6,-685e-6,-734e-6,-806e-6,-798e-6,-742e-6,-689e-6,-602e-6,-677e-6,-636e-6,-687e-6,-67e-5,-645e-6,-687e-6,-668e-6,-67e-5,-637e-6,-612e-6,-676e-6,-656e-6,-685e-6,-657e-6,-649e-6,-679e-6,-68e-5,-621e-6,-63e-5,-566e-6,-667e-6,-589e-6,-669e-6,-672e-6,-67e-5,-644e-6,-676e-6,-592e-6,-652e-6,-676e-6,-671e-6,-675e-6,-471e-6,-664e-6,-65e-5,-671e-6,-524e-6,-661e-6,-672e-6,-673e-6,-603e-6,-672e-6,-664e-6,-668e-6,-671e-6,-634e-6,-625e-6,-669e-6,-659e-6,-458e-6,-666e-6,-636e-6,-603e-6,-668e-6,-614e-6,-631e-6,-652e-6,-634e-6,-666e-6,-641e-6,-65e-5,-627e-6,-662e-6,-645e-6,-662e-6,-659e-6,-612e-6,-637e-6,-535e-6,-636e-6,-591e-6,-66e-5,-66e-5,-657e-6,-657e-6,-652e-6,-647e-6,-543e-6,-639e-6,-658e-6,-594e-6,-614e-6,-65e-5,-651e-6,-636e-6,-627e-6,-631e-6,-625e-6,-64e-5,-633e-6,-646e-6,-644e-6,-627e-6,-646e-6,-651e-6,-504e-6,-571e-6,-623e-6,-646e-6,-639e-6,-632e-6,-575e-6,-645e-6,-583e-6,-61e-5,-481e-6,-616e-6,-646e-6,-612e-6,-614e-6,-635e-6,-496e-6,-591e-6,-605e-6,-621e-6,-635e-6,-581e-6,-522e-6,-625e-6,-538e-6,-642e-6,-64e-5,-534e-6,-581e-6,-634e-6,-639e-6,-635e-6,-479e-6,-485e-6,-476e-6,-404e-6,-483e-6,-484e-6,-445e-6,-48e-5,-455e-6,-483e-6,-482e-6,-435e-6,-481e-6,-477e-6,-475e-6,-478e-6,-479e-6,-481e-6,-442e-6,-461e-6,-477e-6,-328e-6,-476e-6,-457e-6,-47e-5,-44e-5,-455e-6,-477e-6,46e-5,-447e-6,-334e-6,336e-6,-466e-6,-291e-6,-413e-6,-407e-6,476e-6,14e-6,-172e-6,192e-6,-245e-6,-388e-6,474e-6,-386e-6,204e-6,-32e-6,-375e-6,372e-6,-181e-6,-414e-6,88e-6,-21e-5,-455e-6,471e-6,-443e-6,-289e-6,-14e-5,-381e-6,155e-6,-269e-6,-451e-6,411e-6,-37e-5,174e-6,-292e-6,-442e-6,345e-6,-358e-6,-329e-6,183e-6,-249e-6,-467e-6,456e-6,-124e-6,-84e-6,-238e-6,-453e-6,21e-5,-206e-6,-464e-6,395e-6,133e-6,-305e-6,-378e-6,-376e-6,35e-6,-19e-5,-457e-6,-28e-5,106e-6,-461e-6,-399e-6,462e-6,-438e-6,-46e-5,-459e-6,-393e-6,-447e-6,-456e-6,-97e-6,-444e-6,4e-5,-46e-5,-452e-6,-1e-6,-329e-6,209e-6,-382e-6,-456e-6,273e-6,-5e-6,-359e-6,-383e-6,-2e-6,-397e-6,-1e-6,0,7e-5,457e-6,-457e-6,321e-6,409e-6,-454e-6,105e-6,-85e-6,-355e-6,22e-6,-451e-6,-118e-6,284e-6,-441e-6,-345e-6,446e-6,-357e-6,-57e-6,-448e-6,-433e-6,396e-6,-372e-6,-19e-5,259e-6,-399e-6,-87e-6,174e-6,-373e-6,-216e-6,-36e-5,-115e-6,257e-6,-381e-6,-231e-6,307e-6,-338e-6,-282e-6,-27e-6,-318e-6,356e-6,72e-6,-198e-6,385e-6,-396e-6,-361e-6,68e-6,-318e-6,145e-6,361e-6,-115e-6,-12e-6,-394e-6,-306e-6,332e-6,-241e-6,-207e-6,236e-6,-123e-6,-18e-6,-389e-6,-275e-6,-392e-6,-292e-6,-261e-6,-39e-5,-338e-6,2e-5,-389e-6,-267e-6,-337e-6,-391e-6,204e-6,-391e-6,-378e-6,384e-6,-306e-6,315e-6,156e-6,-385e-6,-28e-5,-335e-6,-87e-6,388e-6,84e-6,4e-6,202e-6,-307e-6,-315e-6,317e-6,-371e-6,-322e-6,-113e-6,-339e-6,282e-6,-255e-6,-365e-6,51e-6,-18e-6,-366e-6,256e-6,8e-5,-155e-6,-76e-6,-36e-5,37e-5,-221e-6,-358e-6,345e-6,-315e-6,161e-6,-374e-6,-379e-6,332e-6,-22e-5,-287e-6,233e-6,-98e-6,-356e-6,279e-6,-129e-6,-14e-5,95e-6,-361e-6,251e-6,-152e-6,-353e-6,225e-6,-151e-6,-379e-6,-359e-6,309e-6,19e-6,187e-6,-202e-6,-298e-6,129e-6,-378e-6,-198e-6,379e-6,-355e-6,365e-6,-354e-6,-326e-6,-113e-6,-375e-6,-377e-6,-227e-6,-312e-6,-308e-6,-373e-6,-212e-6,-218e-6,-32e-6,-254e-6,-364e-6,-13e-6,42e-6,-28e-5,-359e-6,267e-6,-356e-6,375e-6,-355e-6,-373e-6,207e-6,-332e-6,157e-6,327e-6,-375e-6,31e-6,-148e-6,-359e-6,102e-6,-334e-6,95e-6,325e-6,-374e-6,-128e-6,311e-6,-344e-6,-162e-6,-16e-6,-354e-6,367e-6,-336e-6,-91e-6,239e-6,-336e-6,-12e-5,275e-6,-368e-6,64e-6,-223e-6,-65e-6,343e-6,-367e-6,-57e-6,346e-6,-348e-6,-216e-6,279e-6,-354e-6,362e-6,-168e-6,-93e-6,347e-6,-368e-6,-276e-6,23e-5,-257e-6,338e-6,348e-6,-324e-6,226e-6,-349e-6,-234e-6,311e-6,-29e-5,-321e-6,-307e-6,-24e-5,-311e-6,-31e-5,-318e-6,-331e-6,-181e-6,-334e-6,-182e-6,-261e-6,-305e-6,-298e-6,-265e-6,-254e-6,-331e-6,-331e-6,-328e-6,-229e-6,-331e-6,-254e-6,-313e-6,-294e-6,-323e-6,-292e-6,-263e-6,-312e-6,-229e-6,-303e-6,-319e-6,-274e-6,-331e-6,-306e-6,-329e-6,-326e-6,-329e-6,-3e-4,-33e-5,-33e-5,-276e-6,306e-6,-14e-5,-2e-4,-322e-6,-294e-6,-328e-6,-322e-6,-329e-6,-325e-6,-328e-6,-293e-6,-302e-6,-121e-6,-211e-6,-274e-6,-321e-6,-294e-6,-259e-6,-315e-6,-323e-6,-316e-6,-182e-6,-237e-6,-326e-6,-304e-6,-278e-6,-267e-6,-31e-5,-326e-6,-269e-6,-326e-6,-314e-6,-264e-6,-312e-6,-324e-6,-242e-6,-276e-6,-323e-6,284e-6,-324e-6,-305e-6,-284e-6,-284e-6,-307e-6,-269e-6,-308e-6,-321e-6,-231e-6,-274e-6,-322e-6,-184e-6,-222e-6,-306e-6,-323e-6,24e-6,-23e-5,-321e-6,-149e-6,-81e-6,-306e-6,-32e-5,-297e-6,-319e-6,-207e-6,-321e-6,321e-6,-312e-6,-202e-6,12e-5,-293e-6,297e-6,-161e-6,-27e-5,-318e-6,-319e-6,-317e-6,-283e-6,-299e-6,-265e-6,-77e-6,-307e-6,-192e-6,-293e-6,-253e-6,-299e-6,-305e-6,-287e-6,-268e-6,-316e-6,-257e-6,-319e-6,-284e-6,-318e-6,-182e-6,-308e-6,-312e-6,-3e-4,-267e-6,294e-6,-309e-6,-305e-6,-137e-6,-259e-6,-317e-6,-316e-6,26e-6,-248e-6,-314e-6,-253e-6,-312e-6,-146e-6,-298e-6,-232e-6,-31e-5,301e-6,-267e-6,-16e-5,-246e-6,-315e-6,282e-6,-306e-6,-254e-6,-294e-6,-29e-6,78e-6,-313e-6,-292e-6,-124e-6,98e-6,-261e-6,-66e-6,-313e-6,-313e-6,-312e-6,-269e-6,-279e-6,-299e-6,-4e-5,-309e-6,-312e-6,-306e-6,-243e-6,-271e-6,-303e-6,-212e-6,-309e-6,-302e-6,-295e-6,-311e-6,-238e-6,-31e-5,91e-6,-289e-6,-307e-6,-256e-6,-308e-6,-303e-6,-261e-6,-78e-6,-311e-6,-211e-6,-309e-6,-219e-6,-289e-6,-291e-6,-226e-6,-111e-6,-265e-6,-276e-6,-106e-6,-281e-6,-285e-6,-255e-6,-291e-6,45e-6,-29e-5,-223e-6,-281e-6,-286e-6,-177e-6,-289e-6,-267e-6,-275e-6,-29e-5,-93e-6,-285e-6,-209e-6,-289e-6,-255e-6,-252e-6,27e-6,-288e-6,-27e-5,-199e-6,-211e-6,-289e-6,-287e-6,-269e-6,-277e-6,-283e-6,-276e-6,-288e-6,-276e-6,-284e-6,-276e-6,-263e-6,75e-6,-288e-6,-26e-5,-273e-6,-245e-6,-287e-6,-263e-6,-268e-6,-241e-6,-277e-6,-286e-6,-165e-6,-277e-6,-263e-6,-283e-6,95e-6,-248e-6,-279e-6,-52e-6,-245e-6,-259e-6,-265e-6,-285e-6,-285e-6,-222e-6,-275e-6,-256e-6,-223e-6,-25e-5,-281e-6,-281e-6,-284e-6,-152e-6,-261e-6,-285e-6,-282e-6,-268e-6,-277e-6,-279e-6,-87e-6,-269e-6,223e-6,-284e-6,-281e-6,-28e-5,-274e-6,258e-6,88e-6,-275e-6,242e-6,-133e-6,-201e-6,273e-6,-263e-6,228e-6,-28e-5,-279e-6,-251e-6,-262e-6,-279e-6,-236e-6,-169e-6,-226e-6,-271e-6,-186e-6,-281e-6,-273e-6,-281e-6,-175e-6,-229e-6,-214e-6,-277e-6,-207e-6,-267e-6,-268e-6,-281e-6,-272e-6,-28e-5,5e-6,-272e-6,-279e-6,-263e-6,-251e-6,-275e-6,-269e-6,-164e-6,-213e-6,-239e-6,-251e-6,-218e-6,-141e-6,-203e-6,25e-6,-279e-6,-275e-6,-185e-6,-129e-6,-242e-6,-269e-6,-279e-6,-279e-6,-278e-6,-278e-6,-27e-5,-227e-6,-277e-6,-257e-6,-203e-6,1e-6,-27e-5,-272e-6,62e-6,56e-6,-224e-6,-249e-6,-208e-6,-227e-6,-24e-5,-274e-6,-277e-6,-276e-6,-156e-6,-277e-6,-27e-5,-261e-6,-243e-6,-276e-6,-229e-6,-199e-6,-191e-6,-209e-6,-268e-6,-275e-6,-251e-6,-255e-6,-198e-6,-76e-6,-262e-6,-266e-6,-263e-6,-196e-6,-271e-6,129e-6,-225e-6,-247e-6,-266e-6,-25e-5,-266e-6,-26e-5,-184e-6,-274e-6,-25e-5,-252e-6,-251e-6,-231e-6,-231e-6,-134e-6,-254e-6,-255e-6,-237e-6,-25e-5,-215e-6,-187e-6,-179e-6,-257e-6,-193e-6,-232e-6,-195e-6,-159e-6,-242e-6,-188e-6,-256e-6,-118e-6,-196e-6,-191e-6,-252e-6,-242e-6,-201e-6,-11e-5,-227e-6,-234e-6,-235e-6,-251e-6,-76e-6,-255e-6,-25e-5,-193e-6,-228e-6,-85e-6,-236e-6,-192e-6,-255e-6,15e-6,-244e-6,-228e-6,-253e-6,238e-6,-62e-6,-242e-6,81e-6,-248e-6,9e-5,-227e-6,-158e-6,-148e-6,-241e-6,-194e-6,-252e-6,-103e-6,-245e-6,-253e-6,-253e-6,-162e-6,-253e-6,-136e-6,-218e-6,-249e-6,-243e-6,-188e-6,-229e-6,-236e-6,-231e-6,-178e-6,-217e-6,-229e-6,-23e-5,-249e-6,-88e-6,-102e-6,-202e-6,-236e-6,-247e-6,-251e-6,-25e-5,-127e-6,-237e-6,66e-6,45e-6,-244e-6,-25e-5,-144e-6,-129e-6,-203e-6,-141e-6,4e-6,194e-6,-247e-6,-4e-6,-206e-6,-191e-6,166e-6,-239e-6,-245e-6,-236e-6,-39e-6,-248e-6,-245e-6,-209e-6,-233e-6,-247e-6,-215e-6,-242e-6,-24e-6,-235e-6,-249e-6,-205e-6,-95e-6,-245e-6,-232e-6,-164e-6,-98e-6,-249e-6,187e-6,-175e-6,-241e-6,-238e-6,-66e-6,-184e-6,-24e-5,-247e-6,-139e-6,-146e-6,105e-6,-24e-5,-247e-6,-211e-6,-233e-6,244e-6,-28e-6,-161e-6,119e-6,-21e-5,-215e-6,56e-6,-229e-6,-247e-6,-153e-6,-206e-6,247e-6,-175e-6,-246e-6,-224e-6,21e-6,-148e-6,166e-6,-241e-6,-246e-6,-9e-5,-236e-6,-112e-6,-168e-6,-226e-6,223e-6,-242e-6,-224e-6,-243e-6,-243e-6,196e-6,-184e-6,-214e-6,-199e-6,-94e-6,-229e-6,-161e-6,-16e-6,-7e-5,-42e-6,-24e-5,56e-6,-168e-6,-191e-6,42e-6,-47e-6,-22e-5,154e-6,-237e-6,-128e-6,-206e-6,-147e-6,-181e-6,-25e-6,-244e-6,-194e-6,35e-6,-227e-6,-11e-5,-172e-6,-214e-6,97e-6,-219e-6,-22e-5,-204e-6,106e-6,-227e-6,-222e-6,-227e-6,-117e-6,17e-5,-143e-6,-189e-6,7e-5,1e-5,-145e-6,-214e-6,-87e-6,-227e-6,84e-6,-193e-6,-211e-6,-9e-6,-222e-6,-187e-6,17e-6,-207e-6,-21e-6,16e-6,-225e-6,-181e-6,-226e-6,-163e-6,78e-6,-227e-6,-21e-5,17e-5,-195e-6,-152e-6,227e-6,-222e-6,-21e-6,-212e-6,-109e-6,-207e-6,-213e-6,-55e-6,-94e-6,-217e-6,-193e-6,-19e-5,-17e-6,132e-6,-226e-6,-16e-5,-215e-6,-219e-6,-154e-6,175e-6,-219e-6,44e-6,-207e-6,-112e-6,-177e-6,-225e-6,-222e-6,11e-5,-121e-6,-13e-5,144e-6,-214e-6,-146e-6,-211e-6,-216e-6,181e-6,-113e-6,52e-6,-157e-6,-15e-5,-186e-6,-189e-6,-125e-6,-221e-6,-218e-6,47e-6,-224e-6,-205e-6,-107e-6,-172e-6,-51e-6,-162e-6,-224e-6,-9e-6,-217e-6,-221e-6,142e-6,-193e-6,215e-6,-89e-6,-223e-6,-223e-6,-213e-6,-11e-5,105e-6,105e-6,-44e-6,-2e-6,-223e-6,-208e-6,-212e-6,-181e-6,-184e-6,-143e-6,-222e-6,47e-6,-41e-6,-207e-6,-33e-6,-181e-6,-214e-6,-176e-6,-222e-6,-161e-6,-151e-6,-214e-6,29e-6,-192e-6,-152e-6,158e-6,-19e-5,197e-6,-212e-6,-216e-6,13e-5,-22e-5,-8e-5,-218e-6,-219e-6,-221e-6,219e-6,-127e-6,-221e-6,-219e-6,-15e-5,118e-6,-188e-6,-203e-6,-107e-6,-219e-6,-212e-6,-197e-6,-56e-6,-168e-6,-82e-6,-169e-6,-219e-6,41e-6,-214e-6,-111e-6,-198e-6,-2e-4,22e-5,-219e-6,-75e-6,-205e-6,-194e-6,-191e-6,-153e-6,-203e-6,-218e-6,-216e-6,-218e-6,-17e-5,-127e-6,-108e-6,-81e-6,-203e-6,46e-6,-167e-6,-144e-6,1e-5,-212e-6,-15e-5,-184e-6,-171e-6,-176e-6,15e-5,-11e-6,-39e-6,-8e-6,-124e-6,-172e-6,-132e-6,-174e-6,-132e-6,-187e-6,-76e-6,-7e-5,-186e-6,-84e-6,0,-112e-6,-187e-6,187e-6,-187e-6,-187e-6,-181e-6,186e-6,-123e-6,0,-132e-6,167e-6,0],imag:[0,-.245613,.112023,.102132,-.011492,.036449,-.102787,.01716,-.038001,-.012934,.055055,-.044162,.034814,.035904,-.027612,-.005207,-.028942,-.007422,.016201,.001943,.012628,.018568,-.006616,-.004633,.0017,-.006371,.0014,-.002288,-274e-6,.007637,-.010749,-.008134,.016387,-.009646,-.011585,.0129,.007164,.001205,-.004317,-.011889,.017988,-.009538,-.009262,.019133,-.016621,.001354,-347e-6,-.006696,.009347,-.006884,-119e-6,.011804,-.006016,-.007989,.012015,-.001178,298e-6,274e-6,-.001755,.002019,-.008405,-.007106,.011306,-.010889,-.011469,-.014948,-84e-5,.013006,.002796,.001097,-677e-6,-97e-6,-626e-6,.001057,922e-6,-.001055,952e-6,-425e-6,.005331,.005482,-.005757,-.002775,.001746,.005365,-.005523,.003766,.003241,-.003399,.003017,-.004824,-.003914,.004125,-819e-6,-.001511,.004454,.002402,-.002699,.004477,-.002181,-.003232,633e-6,-.005427,.005126,.003441,-.004556,.00355,-.002809,-.00387,574e-6,-.005216,.004296,.003008,-.004725,.001402,.003851,-.005086,.002902,-546e-6,-.005023,.004362,-.004978,.002468,.002766,-.004336,.001766,.002119,-.003581,.001666,-.002747,.001421,.002224,-.003911,.002309,.002688,-.004169,962e-6,.001726,-.004,.003733,-.002626,.001496,.003009,-.003775,-.001003,.001277,-.003623,.003934,.003799,-.001817,.003945,-.003941,-412e-6,.003787,-.003776,-.001944,.001242,-.001537,.003449,.002704,.001837,.003105,-.003049,-.00167,-19e-5,-.001197,-.001555,-844e-6,-483e-6,-.001329,-.001511,-85e-5,-554e-6,-.001328,-.001454,-824e-6,-57e-5,-.001307,-.001421,-814e-6,-585e-6,-.001278,-.00138,-804e-6,-555e-6,-.001314,-.001329,-769e-6,-586e-6,-.001252,-.001307,-717e-6,-596e-6,-.001221,-.001348,-789e-6,-55e-5,-.001257,-.001236,-703e-6,-494e-6,-.001217,-.001262,-636e-6,-524e-6,-.001151,-.001175,-671e-6,-474e-6,-.001101,-.001259,-82e-5,-58e-5,-.001433,-.001477,-84e-5,-492e-6,-.001496,-.001495,-751e-6,-561e-6,-.001274,-.001445,-795e-6,-455e-6,-.001339,-.001469,-675e-6,-404e-6,-.001313,-.001483,-657e-6,-442e-6,-.001331,-.001469,-649e-6,-379e-6,-.001224,-.0014,-625e-6,-398e-6,-.001337,-.001394,-707e-6,-278e-6,-.001218,-.001344,-536e-6,-265e-6,-.001212,-.001268,-694e-6,-334e-6,-.001224,-.001381,-732e-6,-177e-6,-.001168,-.001224,-757e-6,-36e-5,-.001086,-.001236,-498e-6,-271e-6,-.001142,-.001288,-58e-5,-101e-6,-.001073,-.001173,-562e-6,-24e-5,-.001143,-.001244,-542e-6,-372e-6,-.001148,-.001306,-41e-5,-143e-6,-969e-6,-.001191,-54e-5,39e-6,-.001106,-.001372,-429e-6,-501e-6,-924e-6,-.00106,-553e-6,-267e-6,-.001217,-.001127,-306e-6,-78e-6,-.001256,-.001114,-364e-6,267e-6,-.001151,-.00117,-436e-6,-65e-6,-.001242,-.001158,-514e-6,-15e-5,-892e-6,-.001027,-624e-6,104e-6,-826e-6,-.001242,0,-111e-6,-91e-5,-.0011,-378e-6,-72e-6,-827e-6,-644e-6,-325e-6,124e-6,-183e-6,-309e-6,-991e-6,-196e-6,-416e-6,-89e-5,-271e-6,-883e-6,-259e-6,-921e-6,-.001981,-834e-6,827e-6,-625e-6,.001079,-.002311,-99e-5,-.002215,36e-5,-.002158,-915e-6,-561e-6,-24e-5,-549e-6,-44e-6,-.001173,112e-6,-279e-6,-553e-6,-362e-6,-107e-6,38e-5,-529e-6,-381e-6,-181e-6,223e-6,-589e-6,-799e-6,-464e-6,-6e-5,-386e-6,-771e-6,-306e-6,288e-6,-631e-6,-669e-6,-1e-4,13e-6,-514e-6,-68e-5,-292e-6,-144e-6,-559e-6,-554e-6,-336e-6,14e-5,-646e-6,-532e-6,-218e-6,284e-6,-572e-6,-909e-6,13e-6,432e-6,-676e-6,-567e-6,-4e-6,-266e-6,-279e-6,-809e-6,-161e-6,-17e-6,-719e-6,-42e-5,-254e-6,119e-6,-479e-6,-427e-6,-301e-6,8e-5,-486e-6,-767e-6,-203e-6,-89e-6,-398e-6,-567e-6,-131e-6,131e-6,-559e-6,-554e-6,-254e-6,-48e-6,-398e-6,-418e-6,-76e-6,112e-6,-466e-6,-526e-6,-56e-6,-68e-6,-335e-6,-526e-6,-251e-6,167e-6,-315e-6,-636e-6,56e-6,-68e-6,-243e-6,-454e-6,-279e-6,96e-6,-348e-6,-601e-6,-48e-6,-164e-6,-239e-6,-423e-6,-263e-6,365e-6,-369e-6,-58e-5,-243e-6,58e-6,-287e-6,-502e-6,-21e-6,42e-6,-479e-6,-581e-6,61e-6,13e-6,-424e-6,-421e-6,-17e-5,202e-6,-491e-6,-421e-6,-45e-6,112e-6,-299e-6,-479e-6,42e-6,39e-6,-389e-6,-517e-6,-343e-6,315e-6,-43e-5,-382e-6,-51e-6,67e-6,-3e-6,-476e-6,0,144e-6,-321e-6,-385e-6,-74e-6,196e-6,-151e-6,-511e-6,-238e-6,228e-6,-35e-5,-34e-5,-83e-6,51e-6,-151e-6,-327e-6,-237e-6,35e-6,-264e-6,-479e-6,1e-4,119e-6,-395e-6,-472e-6,112e-6,116e-6,-584e-6,-553e-6,-106e-6,9e-5,-276e-6,-27e-5,-809e-6,-48e-6,-148e-6,-642e-6,-321e-6,-26e-6,-382e-6,-273e-6,-148e-6,199e-6,-405e-6,-579e-6,-151e-6,144e-6,-16e-5,-555e-6,-29e-6,161e-6,-135e-6,-485e-6,-241e-6,301e-6,-376e-6,-386e-6,-91e-6,139e-6,-125e-6,-239e-6,-142e-6,45e-6,-8e-5,-358e-6,-133e-6,17e-5,-381e-6,-136e-6,37e-6,148e-6,-335e-6,-364e-6,6e-6,2e-5,-281e-6,-315e-6,-165e-6,173e-6,-21e-5,-306e-6,-71e-6,267e-6,-324e-6,-468e-6,-199e-6,63e-6,79e-6,-44e-5,-185e-6,94e-6,-176e-6,-313e-6,-2e-5,34e-6,-102e-6,-284e-6,-77e-6,205e-6,-23e-5,-508e-6,-156e-6,62e-6,-225e-6,-437e-6,-25e-5,131e-6,-6e-6,-531e-6,62e-6,224e-6,-219e-6,-477e-6,-23e-6,-17e-6,-133e-6,-281e-6,-179e-6,304e-6,-32e-5,-281e-6,-111e-6,6e-6,-65e-6,-517e-6,193e-6,4e-5,-5e-6,-312e-6,-355e-6,305e-6,-338e-6,-331e-6,78e-6,-28e-6,-85e-6,-376e-6,92e-6,111e-6,-31e-6,-319e-6,106e-6,229e-6,419e-6,-604e-6,-342e-6,22e-5,-326e-6,-373e-6,205e-6,-31e-6,8e-5,-88e-6,35e-6,-78e-6,-3e-4,-229e-6,-97e-6,73e-6,-257e-6,-17e-5,-64e-6,-257e-6,-4e-5,-376e-6,297e-6,151e-6,-18e-5,-52e-6,-321e-6,144e-6,-526e-6,-248e-6,-217e-6,-25e-5,78e-6,-92e-6,154e-6,47e-6,-111e-6,-201e-6,151e-6,184e-6,-356e-6,-76e-6,-179e-6,655e-6,-182e-6,-373e-6,132e-6,-92e-5,-527e-6,506e-6,61e-6,-593e-6,-208e-6,491e-6,-231e-6,308e-6,-611e-6,-488e-6,-417e-6,142e-6,-855e-6,-676e-6,153e-6,246e-6,-322e-6,-823e-6,301e-6,318e-6,12e-5,-46e-6,141e-6,271e-6,-298e-6,-79e-6,-166e-6,-225e-6,-192e-6,205e-6,347e-6,-126e-6,35e-6,-183e-6,-87e-6,-57e-6,12e-5,-309e-6,131e-6,231e-6,-246e-6,-325e-6,-57e-6,179e-6,-4e-6,-356e-6,94e-6,-89e-6,201e-6,-172e-6,-122e-6,249e-6,37e-6,-94e-6,-124e-6,166e-6,64e-5,-527e-6,-15e-5,-314e-6,-2e-5,-359e-6,-46e-5,188e-6,-183e-6,-222e-6,-105e-6,-44e-6,-129e-6,-205e-6,522e-6,46e-6,161e-6,-296e-6,-13e-6,194e-6,5e-5,81e-6,-321e-6,111e-6,-15e-6,44e-6,-138e-6,13e-6,179e-6,-327e-6,89e-6,68e-6,-39e-5,-85e-6,-181e-6,242e-6,-294e-6,-92e-6,334e-6,-233e-6,-331e-6,-427e-6,8e-5,114e-6,277e-6,-9e-6,-214e-6,352e-6,-486e-6,-429e-6,-337e-6,-44e-6,115e-6,-316e-6,-52e-6,339e-6,133e-6,-268e-6,-57e-6,158e-6,-241e-6,-27e-6,-163e-6,152e-6,-257e-6,-311e-6,117e-6,-2e-4,8e-6,-192e-6,217e-6,79e-6,-68e-6,-284e-6,261e-6,38e-5,-141e-6,-343e-6,124e-6,-103e-6,-117e-6,-217e-6,-62e-6,331e-6,-186e-6,41e-6,94e-6,55e-6,-485e-6,-128e-6,-184e-6,76e-6,425e-6,-135e-6,49e-6,-21e-6,-3e-4,-25e-6,-106e-6,75e-6,16e-6,-219e-6,243e-6,-44e-6,-12e-5,-488e-6,63e-6,206e-6,-288e-6,16e-6,-262e-6,217e-6,-138e-6,-206e-6,-2e-6,177e-6,-141e-6,-22e-5,55e-6,158e-6,-44e-6,-76e-6,-255e-6,182e-6,-39e-5,-182e-6,296e-6,24e-6,-11e-6,-59e-6,-57e-6,98e-6,-127e-6,-372e-6,157e-6,5e-6,-282e-6,233e-6,-92e-6,79e-6,162e-6,-192e-6,177e-6,195e-6,-135e-6,-163e-6,-97e-6,111e-6,-182e-6,-94e-6,-41e-6,413e-6,-313e-6,-189e-6,-79e-6,-12e-5,151e-6,-302e-6,-73e-6,285e-6,22e-5,-434e-6,201e-6,-44e-6,-209e-6,-201e-6,-122e-6,414e-6,-26e-5,-223e-6,-174e-6,-111e-6,-277e-6,-377e-6,15e-5,352e-6,-16e-6,52e-6,-356e-6,273e-6,-97e-6,-52e-6,82e-6,-82e-6,-11e-6,-91e-6,268e-6,-41e-6,-26e-6,-19e-5,-56e-6,164e-6,23e-6,-32e-6,-209e-6,41e-6,-67e-6,-78e-6,-59e-6,44e-6,2e-5,-189e-6,135e-6,56e-6,-35e-5,58e-6,-146e-6,91e-6,189e-6,-149e-6,-42e-6,-132e-6,168e-6,-341e-6,-339e-6,102e-6,-378e-6,238e-6,247e-6,0,476e-6,-444e-6,-435e-6,407e-6,-274e-6,19e-6,276e-6,-428e-6,473e-6,-29e-5,-293e-6,437e-6,-23e-5,-465e-6,423e-6,-128e-6,-25e-6,162e-6,-372e-6,45e-5,-277e-6,-445e-6,386e-6,-135e-6,-227e-6,29e-5,-436e-6,368e-6,-157e-6,-317e-6,303e-6,-333e-6,-431e-6,396e-6,18e-6,-105e-6,451e-6,-459e-6,-401e-6,-113e-6,-416e-6,418e-6,36e-6,-246e-6,446e-6,-351e-6,-27e-5,273e-6,-463e-6,423e-6,82e-6,-37e-5,451e-6,-42e-6,-234e-6,-31e-6,-148e-6,-49e-6,-55e-6,-243e-6,115e-6,-69e-6,451e-6,124e-6,-459e-6,-16e-6,85e-6,-46e-5,321e-6,-409e-6,255e-6,53e-6,-369e-6,459e-6,-285e-6,-251e-6,458e-6,-229e-6,458e-6,457e-6,-452e-6,0,1e-6,-324e-6,203e-6,39e-6,-444e-6,448e-6,-286e-6,455e-6,6e-5,-439e-6,355e-6,107e-6,-296e-6,83e-6,279e-6,-45e-5,-65e-6,132e-6,-58e-6,149e-6,-352e-6,304e-6,-15e-6,-39e-5,36e-5,-141e-6,335e-6,171e-6,-382e-6,304e-6,-115e-6,-324e-6,253e-6,21e-5,-28e-5,396e-6,237e-6,-175e-6,39e-5,-343e-6,93e-6,12e-6,-163e-6,39e-5,235e-6,368e-6,-16e-5,-378e-6,-395e-6,23e-6,249e-6,-213e-6,311e-6,-335e-6,-315e-6,374e-6,-393e-6,56e-6,-281e-6,21e-6,263e-6,-293e-6,37e-6,-198e-6,391e-6,-49e-6,-286e-6,-199e-6,5e-6,333e-6,11e-6,-97e-6,72e-6,242e-6,-231e-6,-357e-6,-62e-6,-271e-6,198e-6,379e-6,35e-6,38e-5,-389e-6,-332e-6,238e-6,-227e-6,224e-6,114e-6,216e-6,371e-6,-188e-6,-265e-6,291e-6,-128e-6,-383e-6,386e-6,-125e-6,289e-6,378e-6,-353e-6,378e-6,-138e-6,-106e-6,315e-6,-141e-6,-17e-5,22e-5,-349e-6,-89e-6,-64e-6,-193e-6,314e-6,-254e-6,-305e-6,37e-5,-141e-6,-262e-6,36e-5,-356e-6,37e-5,-126e-6,-288e-6,35e-5,-146e-6,-308e-6,35e-5,-36e-6,-127e-6,223e-6,-38e-5,331e-6,-323e-6,-236e-6,357e-6,34e-6,-324e-6,-19e-6,133e-6,-103e-6,-136e-6,-193e-6,361e-6,52e-6,-36e-6,303e-6,-213e-6,219e-6,-58e-6,-312e-6,308e-6,-376e-6,279e-6,97e-6,-377e-6,374e-6,-252e-6,-114e-6,265e-6,-122e-6,-29e-6,-124e-6,-42e-6,313e-6,174e-6,-341e-6,184e-6,-6e-6,-373e-6,344e-6,-106e-6,36e-5,169e-6,-361e-6,184e-6,-5e-6,-351e-6,206e-6,145e-6,-336e-6,372e-6,116e-6,65e-6,16e-5,-361e-6,285e-6,159e-6,-352e-6,25e-5,-53e-6,366e-6,297e-6,-365e-6,14e-5,5e-5,-366e-6,133e-6,126e-6,-301e-6,242e-6,107e-6,-76e-6,329e-6,-357e-6,127e-6,27e-6,-244e-6,288e-6,265e-6,146e-6,-119e-6,-175e-6,-29e-5,116e-6,-24e-5,-125e-6,169e-6,-96e-6,132e-6,233e-6,-124e-6,125e-6,-104e-6,-48e-6,-281e-6,-3e-6,28e-5,-207e-6,-134e-6,15e-5,202e-6,-215e-6,38e-6,-34e-6,-56e-6,241e-6,-34e-6,214e-6,-111e-6,-154e-6,75e-6,-158e-6,202e-6,113e-6,-239e-6,135e-6,87e-6,185e-6,-2e-6,-125e-6,36e-6,-56e-6,-23e-6,139e-6,1e-6,1e-5,-181e-6,123e-6,298e-6,262e-6,71e-6,-148e-6,-27e-6,65e-6,-2e-6,48e-6,25e-6,148e-6,-128e-6,305e-6,-251e-6,-18e-5,-67e-6,-145e-6,2e-4,88e-6,-54e-6,-84e-6,271e-6,-225e-6,-27e-6,-119e-6,171e-6,-188e-6,-102e-6,-15e-6,185e-6,-12e-6,-88e-6,191e-6,93e-6,-3e-5,-217e-6,172e-6,-37e-6,-157e-6,-21e-6,-111e-6,157e-6,-157e-6,-103e-6,181e-6,-99e-6,42e-6,-227e-6,172e-6,-35e-6,266e-6,-235e-6,104e-6,-6e-6,322e-6,-227e-6,35e-6,286e-6,312e-6,-102e-6,-36e-6,125e-6,44e-6,-247e-6,27e-6,15e-6,77e-6,25e-5,-298e-6,-132e-6,122e-6,-277e-6,-173e-6,44e-6,27e-6,-48e-6,15e-5,-115e-6,-179e-6,31e-5,89e-6,256e-6,-128e-6,195e-6,112e-6,94e-6,-139e-6,-173e-6,-42e-6,188e-6,1e-5,-145e-6,23e-6,261e-6,-78e-6,-61e-6,106e-6,173e-6,122e-6,-74e-6,89e-6,286e-6,-183e-6,-5e-6,23e-6,-316e-6,-198e-6,41e-6,19e-5,51e-6,-281e-6,-107e-6,215e-6,-6e-5,97e-6,-169e-6,272e-6,-198e-6,-15e-6,-142e-6,-75e-6,-186e-6,-113e-6,314e-6,-305e-6,-33e-6,117e-6,-289e-6,299e-6,-174e-6,307e-6,2e-5,-19e-6,-31e-6,-162e-6,-143e-6,93e-6,311e-6,52e-6,-24e-6,-66e-6,198e-6,156e-6,-79e-6,23e-5,-48e-6,81e-6,-102e-6,-23e-6,-201e-6,36e-6,-298e-6,118e-6,-51e-6,-178e-6,47e-6,73e-6,17e-5,-301e-6,-5e-6,228e-6,35e-6,-193e-6,-4e-5,-27e-6,185e-6,-27e-5,-121e-6,-95e-6,271e-6,-77e-6,61e-6,14e-5,1e-6,287e-6,-22e-6,-187e-6,73e-6,49e-6,231e-6,-3e-5,-113e-6,93e-6,-17e-6,-275e-6,-55e-6,-2e-4,15e-6,138e-6,143e-6,288e-6,-32e-6,103e-6,-21e-5,-198e-6,0,33e-6,-104e-6,8e-5,-56e-6,-84e-6,5e-6,83e-6,-5e-5,-83e-6,118e-6,278e-6,-11e-6,-122e-6,-91e-6,151e-6,-8e-6,116e-6,-103e-6,-156e-6,-77e-6,-23e-6,-235e-6,-74e-6,114e-6,44e-6,27e-5,142e-6,62e-6,281e-6,147e-6,-121e-6,-107e-6,-16e-6,-18e-6,179e-6,-76e-6,126e-6,178e-6,136e-6,-49e-6,-46e-6,26e-6,241e-6,-113e-6,0,-37e-6,94e-6,-64e-6,-53e-6,271e-6,9e-5,176e-6,11e-6,-38e-6,46e-6,-74e-6,117e-6,-269e-6,66e-6,146e-6,25e-5,199e-6,76e-6,-105e-6,168e-6,-37e-6,-45e-6,129e-6,105e-6,46e-6,155e-6,226e-6,-168e-6,77e-6,-211e-6,-24e-6,7e-5,21e-6,221e-6,-163e-6,-183e-6,47e-6,-191e-6,-87e-6,86e-6,7e-6,-69e-6,25e-6,281e-6,-7e-5,-28e-6,98e-6,124e-6,-55e-6,78e-6,-227e-6,181e-6,146e-6,-123e-6,-175e-6,-241e-6,192e-6,-278e-6,-5e-6,-5e-5,209e-6,-247e-6,-139e-6,73e-6,1e-6,6e-6,-17e-6,7e-6,-69e-6,16e-5,-24e-6,-106e-6,19e-5,278e-6,-64e-6,54e-6,271e-6,-272e-6,-163e-6,-122e-6,184e-6,16e-5,-138e-6,4e-5,9e-6,23e-6,-228e-6,-11e-6,62e-6,93e-6,-131e-6,2e-6,155e-6,-192e-6,199e-6,-18e-5,65e-6,24e-6,-115e-6,-105e-6,192e-6,265e-6,-85e-6,-7e-5,8e-5,-193e-6,-48e-6,243e-6,158e-6,-121e-6,-68e-6,115e-6,-7e-5,88e-6,-204e-6,-14e-6,62e-6,-56e-6,59e-6,113e-6,115e-6,-22e-5,-45e-6,-32e-6,101e-6,6e-5,-141e-6,-177e-6,185e-6,5e-6,-169e-6,-111e-6,-166e-6,201e-6,-86e-6,-174e-6,-16e-6,228e-6,165e-6,-171e-6,-47e-6,83e-6,-159e-6,-231e-6,119e-6,-103e-6,101e-6,-49e-6,244e-6,12e-6,-5e-5,-167e-6,115e-6,24e-5,96e-6,-168e-6,6e-6,254e-6,-73e-6,-113e-6,31e-6,9e-5,247e-6,78e-6,-241e-6,56e-6,-238e-6,114e-6,-199e-6,206e-6,78e-6,163e-6,25e-6,232e-6,-66e-6,-17e-6,-5e-6,-194e-6,2e-6,-213e-6,128e-6,-43e-6,7e-5,169e-6,-107e-6,91e-6,-102e-6,179e-6,129e-6,106e-6,-103e-6,4e-5,-236e-6,231e-6,-15e-5,88e-6,-5e-5,-22e-6,-3e-5,217e-6,83e-6,243e-6,-247e-6,-59e-6,-26e-6,206e-6,-215e-6,148e-6,208e-6,251e-6,158e-6,-44e-6,251e-6,-143e-6,-163e-6,188e-6,-75e-6,-52e-6,83e-6,-247e-6,36e-6,-49e-6,-138e-6,91e-6,-38e-6,128e-6,-62e-6,249e-6,-85e-6,-19e-6,142e-6,-231e-6,47e-6,92e-6,-187e-6,-229e-6,-13e-6,-165e-6,-177e-6,-61e-6,73e-6,24e-5,-167e-6,66e-6,25e-6,206e-6,-201e-6,-225e-6,62e-6,-18e-6,131e-6,-84e-6,42e-6,246e-6,-189e-6,-217e-6,132e-6,-122e-6,241e-6,93e-6,1e-5,194e-6,-137e-6,-6e-6,174e-6,27e-6,-105e-6,246e-6,-198e-6,-183e-6,-52e-6,22e-6,23e-5,-71e-6,-219e-6,18e-5,-97e-6,-105e-6,46e-6,-102e-6,4e-5,37e-6,-148e-6,163e-6,-12e-5,-144e-6,227e-6,-89e-6,185e-6,245e-6,-235e-6,-242e-6,-51e-6,-239e-6,178e-6,154e-6,-241e-6,24e-5,-107e-6,19e-5,59e-6,-208e-6,132e-6,195e-6,-165e-6,243e-6,1e-6,148e-6,-242e-6,-31e-6,-201e-6,-152e-6,82e-6,208e-6,-67e-6,-65e-6,105e-6,-203e-6,-29e-6,58e-6,-32e-6,197e-6,-153e-6,178e-6,129e-6,-218e-6,228e-6,-176e-6,-8e-5,211e-6,-19e-6,212e-6,-122e-6,-86e-6,228e-6,5e-5,-13e-5,227e-6,95e-6,-227e-6,227e-6,37e-6,138e-6,-28e-6,-158e-6,214e-6,11e-6,-87e-6,151e-6,116e-6,-169e-6,14e-6,-44e-6,-226e-6,81e-6,-199e-6,91e-6,78e-6,-22e-5,206e-6,-63e-6,117e-6,123e-6,-226e-6,183e-6,-11e-6,-16e-5,68e-6,56e-6,-165e-6,-142e-6,-55e-6,-221e-6,89e-6,-196e-6,14e-5,8e-6,36e-6,197e-6,19e-5,184e-6,-173e-6,-7e-5,-172e-6,79e-6,63e-6,-133e-6,194e-6,-219e-6,-161e-6,167e-6,-126e-6,121e-6,-186e-6,38e-6,-51e-6,219e-6,-16e-6,-91e-6,-197e-6,-143e-6,218e-6,-154e-6,-9e-6,224e-6,55e-6,34e-6,173e-6,113e-6,-61e-6,-205e-6,16e-6,3e-6,67e-6,194e-6,197e-6,197e-6,-219e-6,-223e-6,-8e-6,-79e-6,68e-6,129e-6,-126e-6,171e-6,11e-6,-218e-6,219e-6,-82e-6,-22e-5,129e-6,61e-6,-135e-6,3e-6,-153e-6,162e-6,-59e-6,-22e-5,111e-6,-161e-6,155e-6,114e-6,-101e-6,-66e-6,-5e-5,179e-6,-27e-6,-206e-6,-36e-6,34e-6,-12e-6,-29e-6,181e-6,14e-6,-3e-5,162e-6,-187e-6,115e-6,-87e-6,-193e-6,28e-6,-62e-6,-99e-6,213e-6,-142e-6,205e-6,-141e-6,-21e-6,216e-6,51e-6,-19e-5,96e-6,92e-6,0,-19e-6,-207e-6,-79e-6,103e-6,-108e-6,-157e-6,83e-6,25e-6,41e-6,-25e-6,139e-6,-179e-6,191e-6,204e-6,-82e-6,214e-6,-141e-6,165e-6,219e-6,-56e-6,-159e-6,-34e-6,-77e-6,65e-6,-112e-6,-187e-6,183e-6,-187e-6,-14e-5,75e-6,132e-6,-7e-5,132e-6,0,-171e-6,-174e-6,18e-6,-167e-6,187e-6,15e-5,0,0,0,0,-45e-6,0,14e-5,186e-6,-132e-6,-83e-6,186e-6]
}},{}],39:[function(require,module,exports){module.exports={realimag:[0,.159155,-.079577,.053052,-.039789,.031831,-.026526,.022736,-.019894,.017684,-.015915,.014469,-.013263,.012243,-.011368,.01061,-.009947,.009362,-.008842,.008377,-.007958,.007579,-.007234,.00692,-.006631,.006366,-.006121,.005895,-.005684,.005488,-.005305,.005134,-.004974,.004823,-.004681,.004547,-.004421,.004301,-.004188,.004081,-.003979,.003882,-.003789,.003701,-.003617,.003537,-.00346,.003386,-.003316,.003248,-.003183,.003121,-.003061,.003003,-.002947,.002894,-.002842,.002792,-.002744,.002698,-.002653,.002609,-.002567,.002526,-.002487,.002449,-.002411,.002375,-.002341,.002307,-.002274,.002242,-.00221,.00218,-.002151,.002122,-.002094,.002067,-.00204,.002015,-.001989,.001965,-.001941,.001918,-.001895,.001872,-.001851,.001829,-.001809,.001788,-.001768,.001749,-.00173,.001711,-.001693,.001675,-.001658,.001641,-.001624,.001608,-.001592,.001576,-.00156,.001545,-.00153,.001516,-.001501,.001487,-.001474,.00146,-.001447,.001434,-.001421,.001408,-.001396,.001384,-.001372,.00136,-.001349,.001337,-.001326,.001315,-.001305,.001294,-.001284,.001273,-.001263,.001253,-.001243,.001234,-.001224,.001215,-.001206,.001197,-.001188,.001179,-.00117,.001162,-.001153,.001145,-.001137,.001129,-.001121,.001113,-.001105,.001098,-.00109,.001083,-.001075,.001068,-.001061,.001054,-.001047,.00104,-.001033,.001027,-.00102,.001014,-.001007,.001001,-995e-6,989e-6,-982e-6,976e-6,-97e-5,965e-6,-959e-6,953e-6,-947e-6,942e-6,-936e-6,931e-6,-925e-6,92e-5,-915e-6,909e-6,-904e-6,899e-6,-894e-6,889e-6,-884e-6,879e-6,-874e-6,87e-5,-865e-6,86e-5,-856e-6,851e-6,-847e-6,842e-6,-838e-6,833e-6,-829e-6,825e-6,-82e-5,816e-6,-812e-6,808e-6,-804e-6,8e-4,-796e-6,792e-6,-788e-6,784e-6,-78e-5,776e-6,-773e-6,769e-6,-765e-6,762e-6,-758e-6,754e-6,-751e-6,747e-6,-744e-6,74e-5,-737e-6,733e-6,-73e-5,727e-6,-723e-6,72e-5,-717e-6,714e-6,-711e-6,707e-6,-704e-6,701e-6,-698e-6,695e-6,-692e-6,689e-6,-686e-6,683e-6,-68e-5,677e-6,-674e-6,672e-6,-669e-6,666e-6,-663e-6,66e-5,-658e-6,655e-6,-652e-6,65e-5,-647e-6,644e-6,-642e-6,639e-6,-637e-6,634e-6,-632e-6,629e-6,-627e-6,624e-6,-622e-6,619e-6,-617e-6,614e-6,-612e-6,61e-5,-607e-6,605e-6,-603e-6,601e-6,-598e-6,596e-6,-594e-6,592e-6,-589e-6,587e-6,-585e-6,583e-6,-581e-6,579e-6,-577e-6,575e-6,-572e-6,57e-5,-568e-6,566e-6,-564e-6,562e-6,-56e-5,558e-6,-556e-6,555e-6,-553e-6,551e-6,-549e-6,547e-6,-545e-6,543e-6,-541e-6,54e-5,-538e-6,536e-6,-534e-6,532e-6,-531e-6,529e-6,-527e-6,525e-6,-524e-6,522e-6,-52e-5,518e-6,-517e-6,515e-6,-513e-6,512e-6,-51e-5,508e-6,-507e-6,505e-6,-504e-6,502e-6,-5e-4,499e-6,-497e-6,496e-6,-494e-6,493e-6,-491e-6,49e-5,-488e-6,487e-6,-485e-6,484e-6,-482e-6,481e-6,-479e-6,478e-6,-477e-6,475e-6,-474e-6,472e-6,-471e-6,469e-6,-468e-6,467e-6,-465e-6,464e-6,-463e-6,461e-6,-46e-5,459e-6,-457e-6,456e-6,-455e-6,453e-6,-452e-6,451e-6,-45e-5,448e-6,-447e-6,446e-6,-445e-6,443e-6,-442e-6,441e-6,-44e-5,438e-6,-437e-6,436e-6,-435e-6,434e-6,-432e-6,431e-6,-43e-5,429e-6,-428e-6,427e-6,-426e-6,424e-6,-423e-6,422e-6,-421e-6,42e-5,-419e-6,418e-6,-417e-6,416e-6,-414e-6,413e-6,-412e-6,411e-6,-41e-5,409e-6,-408e-6,407e-6,-406e-6,405e-6,-404e-6,403e-6,-402e-6,401e-6,-4e-4,399e-6,-398e-6,397e-6,-396e-6,395e-6,-394e-6,393e-6,-392e-6,391e-6,-39e-5,389e-6,-388e-6,387e-6,-386e-6,385e-6,-384e-6,384e-6,-383e-6,382e-6,-381e-6,38e-5,-379e-6,378e-6,-377e-6,376e-6,-375e-6,374e-6,-374e-6,373e-6,-372e-6,371e-6,-37e-5,369e-6,-368e-6,368e-6,-367e-6,366e-6,-365e-6,364e-6,-363e-6,363e-6,-362e-6,361e-6,-36e-5,359e-6,-358e-6,358e-6,-357e-6,356e-6,-355e-6,354e-6,-354e-6,353e-6,-352e-6,351e-6,-351e-6,35e-5,-349e-6,348e-6,-347e-6,347e-6,-346e-6,345e-6,-344e-6,344e-6,-343e-6,342e-6,-342e-6,341e-6,-34e-5,339e-6,-339e-6,338e-6,-337e-6,336e-6,-336e-6,335e-6,-334e-6,334e-6,-333e-6,332e-6,-332e-6,331e-6,-33e-5,33e-5,-329e-6,328e-6,-327e-6,327e-6,-326e-6,325e-6,-325e-6,324e-6,-323e-6,323e-6,-322e-6,322e-6,-321e-6,32e-5,-32e-5,319e-6,-318e-6,318e-6,-317e-6,316e-6,-316e-6,315e-6,-315e-6,314e-6,-313e-6,313e-6,-312e-6,311e-6,-311e-6,31e-5,-31e-5,309e-6,-308e-6,308e-6,-307e-6,307e-6,-306e-6,305e-6,-305e-6,304e-6,-304e-6,303e-6,-303e-6,302e-6,-301e-6,301e-6,-3e-4,3e-4,-299e-6,299e-6,-298e-6,297e-6,-297e-6,296e-6,-296e-6,295e-6,-295e-6,294e-6,-294e-6,293e-6,-293e-6,292e-6,-291e-6,291e-6,-29e-5,29e-5,-289e-6,289e-6,-288e-6,288e-6,-287e-6,287e-6,-286e-6,286e-6,-285e-6,285e-6,-284e-6,284e-6,-283e-6,283e-6,-282e-6,282e-6,-281e-6,281e-6,-28e-5,28e-5,-279e-6,279e-6,-278e-6,278e-6,-277e-6,277e-6,-276e-6,276e-6,-275e-6,275e-6,-274e-6,274e-6,-273e-6,273e-6,-273e-6,272e-6,-272e-6,271e-6,-271e-6,27e-5,-27e-5,269e-6,-269e-6,268e-6,-268e-6,267e-6,-267e-6,267e-6,-266e-6,266e-6,-265e-6,265e-6,-264e-6,264e-6,-264e-6,263e-6,-263e-6,262e-6,-262e-6,261e-6,-261e-6,26e-5,-26e-5,26e-5,-259e-6,259e-6,-258e-6,258e-6,-258e-6,257e-6,-257e-6,256e-6,-256e-6,255e-6,-255e-6,255e-6,-254e-6,254e-6,-253e-6,253e-6,-253e-6,252e-6,-252e-6,251e-6,-251e-6,251e-6,-25e-5,25e-5,-249e-6,249e-6,-249e-6,248e-6,-248e-6,248e-6,-247e-6,247e-6,-246e-6,246e-6,-246e-6,245e-6,-245e-6,244e-6,-244e-6,244e-6,-243e-6,243e-6,-243e-6,242e-6,-242e-6,242e-6,-241e-6,241e-6,-24e-5,24e-5,-24e-5,239e-6,-239e-6,239e-6,-238e-6,238e-6,-238e-6,237e-6,-237e-6,236e-6,-236e-6,236e-6,-235e-6,235e-6,-235e-6,234e-6,-234e-6,234e-6,-233e-6,233e-6,-233e-6,232e-6,-232e-6,232e-6,-231e-6,231e-6,-231e-6,23e-5,-23e-5,23e-5,-229e-6,229e-6,-229e-6,228e-6,-228e-6,228e-6,-227e-6,227e-6,-227e-6,226e-6,-226e-6,226e-6,-225e-6,225e-6,-225e-6,224e-6,-224e-6,224e-6,-224e-6,223e-6,-223e-6,223e-6,-222e-6,222e-6,-222e-6,221e-6,-221e-6,221e-6,-22e-5,22e-5,-22e-5,22e-5,-219e-6,219e-6,-219e-6,218e-6,-218e-6,218e-6,-217e-6,217e-6,-217e-6,217e-6,-216e-6,216e-6,-216e-6,215e-6,-215e-6,215e-6,-214e-6,214e-6,-214e-6,214e-6,-213e-6,213e-6,-213e-6,212e-6,-212e-6,212e-6,-212e-6,211e-6,-211e-6,211e-6,-211e-6,21e-5,-21e-5,21e-5,-209e-6,209e-6,-209e-6,209e-6,-208e-6,208e-6,-208e-6,208e-6,-207e-6,207e-6,-207e-6,206e-6,-206e-6,206e-6,-206e-6,205e-6,-205e-6,205e-6,-205e-6,204e-6,-204e-6,204e-6,-204e-6,203e-6,-203e-6,203e-6,-202e-6,202e-6,-202e-6,202e-6,-201e-6,201e-6,-201e-6,201e-6,-2e-4,2e-4,-2e-4,2e-4,-199e-6,199e-6,-199e-6,199e-6,-198e-6,198e-6,-198e-6,198e-6,-197e-6,197e-6,-197e-6,197e-6,-196e-6,196e-6,-196e-6,196e-6,-196e-6,195e-6,-195e-6,195e-6,-195e-6,194e-6,-194e-6,194e-6,-194e-6,193e-6,-193e-6,193e-6,-193e-6,192e-6,-192e-6,192e-6,-192e-6,192e-6,-191e-6,191e-6,-191e-6,191e-6,-19e-5,19e-5,-19e-5,19e-5,-189e-6,189e-6,-189e-6,189e-6,-189e-6,188e-6,-188e-6,188e-6,-188e-6,187e-6,-187e-6,187e-6,-187e-6,187e-6,-186e-6,186e-6,-186e-6,186e-6,-185e-6,185e-6,-185e-6,185e-6,-185e-6,184e-6,-184e-6,184e-6,-184e-6,184e-6,-183e-6,183e-6,-183e-6,183e-6,-183e-6,182e-6,-182e-6,182e-6,-182e-6,181e-6,-181e-6,181e-6,-181e-6,181e-6,-18e-5,18e-5,-18e-5,18e-5,-18e-5,179e-6,-179e-6,179e-6,-179e-6,179e-6,-178e-6,178e-6,-178e-6,178e-6,-178e-6,177e-6,-177e-6,177e-6,-177e-6,177e-6,-176e-6,176e-6,-176e-6,176e-6,-176e-6,175e-6,-175e-6,175e-6,-175e-6,175e-6,-175e-6,174e-6,-174e-6,174e-6,-174e-6,174e-6,-173e-6,173e-6,-173e-6,173e-6,-173e-6,172e-6,-172e-6,172e-6,-172e-6,172e-6,-172e-6,171e-6,-171e-6,171e-6,-171e-6,171e-6,-17e-5,17e-5,-17e-5,17e-5,-17e-5,169e-6,-169e-6,169e-6,-169e-6,169e-6,-169e-6,168e-6,-168e-6,168e-6,-168e-6,168e-6,-168e-6,167e-6,-167e-6,167e-6,-167e-6,167e-6,-166e-6,166e-6,-166e-6,166e-6,-166e-6,166e-6,-165e-6,165e-6,-165e-6,165e-6,-165e-6,165e-6,-164e-6,164e-6,-164e-6,164e-6,-164e-6,164e-6,-163e-6,163e-6,-163e-6,163e-6,-163e-6,163e-6,-162e-6,162e-6,-162e-6,162e-6,-162e-6,162e-6,-161e-6,161e-6,-161e-6,161e-6,-161e-6,161e-6,-16e-5,16e-5,-16e-5,16e-5,-16e-5,16e-5,-159e-6,159e-6,-159e-6,159e-6,-159e-6,159e-6,-159e-6,158e-6,-158e-6,158e-6,-158e-6,158e-6,-158e-6,157e-6,-157e-6,157e-6,-157e-6,157e-6,-157e-6,156e-6,-156e-6,156e-6,-156e-6,156e-6,-156e-6,156e-6,-155e-6,155e-6,-155e-6,155e-6,-155e-6,155e-6,-155e-6,154e-6,-154e-6,154e-6,-154e-6,154e-6,-154e-6,153e-6,-153e-6,153e-6,-153e-6,153e-6,-153e-6,153e-6,-152e-6,152e-6,-152e-6,152e-6,-152e-6,152e-6,-152e-6,151e-6,-151e-6,151e-6,-151e-6,151e-6,-151e-6,151e-6,-15e-5,15e-5,-15e-5,15e-5,-15e-5,15e-5,-15e-5,149e-6,-149e-6,149e-6,-149e-6,149e-6,-149e-6,149e-6,-148e-6,148e-6,-148e-6,148e-6,-148e-6,148e-6,-148e-6,148e-6,-147e-6,147e-6,-147e-6,147e-6,-147e-6,147e-6,-147e-6,146e-6,-146e-6,146e-6,-146e-6,146e-6,-146e-6,146e-6,-145e-6,145e-6,-145e-6,145e-6,-145e-6,145e-6,-145e-6,145e-6,-144e-6,144e-6,-144e-6,144e-6,-144e-6,144e-6,-144e-6,144e-6,-143e-6,143e-6,-143e-6,143e-6,-143e-6,143e-6,-143e-6,142e-6,-142e-6,142e-6,-142e-6,142e-6,-142e-6,142e-6,-142e-6,141e-6,-141e-6,141e-6,-141e-6,141e-6,-141e-6,141e-6,-141e-6,14e-5,-14e-5,14e-5,-14e-5,14e-5,-14e-5,14e-5,-14e-5,139e-6,-139e-6,139e-6,-139e-6,139e-6,-139e-6,139e-6,-139e-6,139e-6,-138e-6,138e-6,-138e-6,138e-6,-138e-6,138e-6,-138e-6,138e-6,-137e-6,137e-6,-137e-6,137e-6,-137e-6,137e-6,-137e-6,137e-6,-136e-6,136e-6,-136e-6,136e-6,-136e-6,136e-6,-136e-6,136e-6,-136e-6,135e-6,-135e-6,135e-6,-135e-6,135e-6,-135e-6,135e-6,-135e-6,135e-6,-134e-6,134e-6,-134e-6,134e-6,-134e-6,134e-6,-134e-6,134e-6,-134e-6,133e-6,-133e-6,133e-6,-133e-6,133e-6,-133e-6,133e-6,-133e-6,133e-6,-132e-6,132e-6,-132e-6,132e-6,-132e-6,132e-6,-132e-6,132e-6,-132e-6,131e-6,-131e-6,131e-6,-131e-6,131e-6,-131e-6,131e-6,-131e-6,131e-6,-13e-5,13e-5,-13e-5,13e-5,-13e-5,13e-5,-13e-5,13e-5,-13e-5,129e-6,-129e-6,129e-6,-129e-6,129e-6,-129e-6,129e-6,-129e-6,129e-6,-129e-6,128e-6,-128e-6,128e-6,-128e-6,128e-6,-128e-6,128e-6,-128e-6,128e-6,-128e-6,127e-6,-127e-6,127e-6,-127e-6,127e-6,-127e-6,127e-6,-127e-6,127e-6,-127e-6,126e-6,-126e-6,126e-6,-126e-6,126e-6,-126e-6,126e-6,-126e-6,126e-6,-126e-6,125e-6,-125e-6,125e-6,-125e-6,125e-6,-125e-6,125e-6,-125e-6,125e-6,-125e-6,124e-6,-124e-6,124e-6,-124e-6,124e-6,-124e-6,124e-6,-124e-6,124e-6,-124e-6,123e-6,-123e-6,123e-6,-123e-6,123e-6,-123e-6,123e-6,-123e-6,123e-6,-123e-6,123e-6,-122e-6,122e-6,-122e-6,122e-6,-122e-6,122e-6,-122e-6,122e-6,-122e-6,122e-6,-121e-6,121e-6,-121e-6,121e-6,-121e-6,121e-6,-121e-6,121e-6,-121e-6,121e-6,-121e-6,12e-5,-12e-5,12e-5,-12e-5,12e-5,-12e-5,12e-5,-12e-5,12e-5,-12e-5,12e-5,-119e-6,119e-6,-119e-6,119e-6,-119e-6,119e-6,-119e-6,119e-6,-119e-6,119e-6,-119e-6,119e-6,-118e-6,118e-6,-118e-6,118e-6,-118e-6,118e-6,-118e-6,118e-6,-118e-6,118e-6,-118e-6,117e-6,-117e-6,117e-6,-117e-6,117e-6,-117e-6,117e-6,-117e-6,117e-6,-117e-6,117e-6,-117e-6,116e-6,-116e-6,116e-6,-116e-6,116e-6,-116e-6,116e-6,-116e-6,116e-6,-116e-6,116e-6,-115e-6,115e-6,-115e-6,115e-6,-115e-6,115e-6,-115e-6,115e-6,-115e-6,115e-6,-115e-6,115e-6,-114e-6,114e-6,-114e-6,114e-6,-114e-6,114e-6,-114e-6,114e-6,-114e-6,114e-6,-114e-6,114e-6,-114e-6,113e-6,-113e-6,113e-6,-113e-6,113e-6,-113e-6,113e-6,-113e-6,113e-6,-113e-6,113e-6,-113e-6,112e-6,-112e-6,112e-6,-112e-6,112e-6,-112e-6,112e-6,-112e-6,112e-6,-112e-6,112e-6,-112e-6,112e-6,-111e-6,111e-6,-111e-6,111e-6,-111e-6,111e-6,-111e-6,111e-6,-111e-6,111e-6,-111e-6,111e-6,-111e-6,11e-5,-11e-5,11e-5,-11e-5,11e-5,-11e-5,11e-5,-11e-5,11e-5,-11e-5,11e-5,-11e-5,11e-5,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-109e-6,109e-6,-109e-6,108e-6,-108e-6,108e-6,-108e-6,108e-6,-108e-6,108e-6,-108e-6,108e-6,-108e-6,108e-6,-108e-6,108e-6,-108e-6,107e-6,-107e-6,107e-6,-107e-6,107e-6,-107e-6,107e-6,-107e-6,107e-6,-107e-6,107e-6,-107e-6,107e-6,-107e-6,106e-6,-106e-6,106e-6,-106e-6,106e-6,-106e-6,106e-6,-106e-6,106e-6,-106e-6,106e-6,-106e-6,106e-6,-106e-6,105e-6,-105e-6,105e-6,-105e-6,105e-6,-105e-6,105e-6,-105e-6,105e-6,-105e-6,105e-6,-105e-6,105e-6,-105e-6,105e-6,-104e-6,104e-6,-104e-6,104e-6,-104e-6,104e-6,-104e-6,104e-6,-104e-6,104e-6,-104e-6,104e-6,-104e-6,104e-6,-103e-6,103e-6,-103e-6,103e-6,-103e-6,103e-6,-103e-6,103e-6,-103e-6,103e-6,-103e-6,103e-6,-103e-6,103e-6,-103e-6,102e-6,-102e-6,102e-6,-102e-6,102e-6,-102e-6,102e-6,-102e-6,102e-6,-102e-6,102e-6,-102e-6,102e-6,-102e-6,102e-6,-102e-6,101e-6,-101e-6,101e-6,-101e-6,101e-6,-101e-6,101e-6,-101e-6,101e-6,-101e-6,101e-6,-101e-6,101e-6,-101e-6,101e-6,-1e-4,1e-4,-1e-4,1e-4,-1e-4,1e-4,-1e-4,1e-4,-1e-4,1e-4,-1e-4,1e-4,-1e-4,1e-4,-1e-4,1e-4,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-99e-6,99e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,98e-6,-98e-6,97e-6,-97e-6,97e-6,-97e-6,97e-6,-97e-6,97e-6,-97e-6,97e-6,-97e-6,97e-6,-97e-6,97e-6,-97e-6,97e-6,-97e-6,97e-6,-96e-6,96e-6,-96e-6,96e-6,-96e-6,96e-6,-96e-6,96e-6,-96e-6,96e-6,-96e-6,96e-6,-96e-6,96e-6,-96e-6,96e-6,-96e-6,95e-6,-95e-6,95e-6,-95e-6,95e-6,-95e-6,95e-6,-95e-6,95e-6,-95e-6,95e-6,-95e-6,95e-6,-95e-6,95e-6,-95e-6,95e-6,-95e-6,94e-6,-94e-6,94e-6,-94e-6,94e-6,-94e-6,94e-6,-94e-6,94e-6,-94e-6,94e-6,-94e-6,94e-6,-94e-6,94e-6,-94e-6,94e-6,-94e-6,93e-6,-93e-6,93e-6,-93e-6,93e-6,-93e-6,93e-6,-93e-6,93e-6,-93e-6,93e-6,-93e-6,93e-6,-93e-6,93e-6,-93e-6,93e-6,-93e-6,92e-6,-92e-6,92e-6,-92e-6,92e-6,-92e-6,92e-6,-92e-6,92e-6,-92e-6,92e-6,-92e-6,92e-6,-92e-6,92e-6,-92e-6,92e-6,-92e-6,92e-6,-91e-6,91e-6,-91e-6,91e-6,-91e-6,91e-6,-91e-6,91e-6,-91e-6,91e-6,-91e-6,91e-6,-91e-6,91e-6,-91e-6,91e-6,-91e-6,91e-6,-91e-6,9e-5,-9e-5,9e-5,-9e-5,9e-5,-9e-5,9e-5,-9e-5,9e-5,-9e-5,9e-5,-9e-5,9e-5,-9e-5,9e-5,-9e-5,9e-5,-9e-5,9e-5,-9e-5,89e-6,-89e-6,89e-6,-89e-6,89e-6,-89e-6,89e-6,-89e-6,89e-6,-89e-6,89e-6,-89e-6,89e-6,-89e-6,89e-6,-89e-6,89e-6,-89e-6,89e-6,-89e-6,88e-6,-88e-6,88e-6,-88e-6,88e-6,-88e-6,88e-6,-88e-6,88e-6,-88e-6,88e-6,-88e-6,88e-6,-88e-6,88e-6,-88e-6,88e-6,-88e-6,88e-6,-88e-6,87e-6,-87e-6,87e-6,-87e-6,87e-6,-87e-6,87e-6,-87e-6,87e-6,-87e-6,87e-6,-87e-6,87e-6,-87e-6,87e-6,-87e-6,87e-6,-87e-6,87e-6,-87e-6,87e-6,-86e-6,86e-6,-86e-6,86e-6,-86e-6,86e-6,-86e-6,86e-6,-86e-6,86e-6,-86e-6,86e-6,-86e-6,86e-6,-86e-6,86e-6,-86e-6,86e-6,-86e-6,86e-6,-86e-6,86e-6,-85e-6,85e-6,-85e-6,85e-6,-85e-6,85e-6,-85e-6,85e-6,-85e-6,85e-6,-85e-6,85e-6,-85e-6,85e-6,-85e-6,85e-6,-85e-6,85e-6,-85e-6,85e-6,-85e-6,85e-6,-84e-6,84e-6,-84e-6,84e-6,-84e-6,84e-6,-84e-6,84e-6,-84e-6,84e-6,-84e-6,84e-6,-84e-6,84e-6,-84e-6,84e-6,-84e-6,84e-6,-84e-6,84e-6,-84e-6,84e-6,-84e-6,83e-6,-83e-6,83e-6,-83e-6,83e-6,-83e-6,83e-6,-83e-6,83e-6,-83e-6,83e-6,-83e-6,83e-6,-83e-6,83e-6,-83e-6,83e-6,-83e-6,83e-6,-83e-6,83e-6,-83e-6,83e-6,-82e-6,82e-6,-82e-6,82e-6,-82e-6,82e-6,-82e-6,82e-6,-82e-6,82e-6,-82e-6,82e-6,-82e-6,82e-6,-82e-6,82e-6,-82e-6,82e-6,-82e-6,82e-6,-82e-6,82e-6,-82e-6,81e-6,-81e-6,81e-6,-81e-6,81e-6,-81e-6,81e-6,-81e-6,81e-6,-81e-6,81e-6,-81e-6,81e-6,-81e-6,81e-6,-81e-6,81e-6,-81e-6,81e-6,-81e-6,81e-6,-81e-6,81e-6,-81e-6,81e-6,-8e-5,8e-5,-8e-5,8e-5,-8e-5,8e-5,-8e-5,8e-5,-8e-5,8e-5,-8e-5,8e-5,-8e-5,8e-5,-8e-5,8e-5,-8e-5,8e-5,-8e-5,8e-5,-8e-5,8e-5,-8e-5,8e-5,-79e-6,79e-6,-79e-6,79e-6,-79e-6,79e-6,-79e-6,79e-6,-79e-6,79e-6,-79e-6,79e-6,-79e-6,79e-6,-79e-6,79e-6,-79e-6,79e-6,-79e-6,79e-6,-79e-6,79e-6,-79e-6,79e-6,-79e-6,79e-6,-78e-6,78e-6,-78e-6,78e-6,-78e-6,78e-6,-78e-6,78e-6,-78e-6,78e-6,-78e-6,78e-6,-78e-6,78e-6,-78e-6,78e-6,-78e-6,78e-6,-78e-6,78e-6]}},{}],40:[function(require,module,exports){module.exports={realimag:[0,.31831,0,.106103,0,.063662,0,.045473,0,.035368,0,.028937,0,.024485,0,.021221,0,.018724,0,.016753,0,.015158,0,.01384,0,.012732,0,.011789,0,.010976,0,.010268,0,.009646,0,.009095,0,.008603,0,.008162,0,.007764,0,.007403,0,.007074,0,.006773,0,.006496,0,.006241,0,.006006,0,.005787,0,.005584,0,.005395,0,.005218,0,.005053,0,.004897,0,.004751,0,.004613,0,.004483,0,.00436,0,.004244,0,.004134,0,.004029,0,.00393,0,.003835,0,.003745,0,.003659,0,.003577,0,.003498,0,.003423,0,.003351,0,.003282,0,.003215,0,.003152,0,.00309,0,.003032,0,.002975,0,.00292,0,.002868,0,.002817,0,.002768,0,.002721,0,.002675,0,.002631,0,.002588,0,.002546,0,.002506,0,.002468,0,.00243,0,.002393,0,.002358,0,.002323,0,.00229,0,.002258,0,.002226,0,.002195,0,.002165,0,.002136,0,.002108,0,.00208,0,.002054,0,.002027,0,.002002,0,.001977,0,.001953,0,.001929,0,.001906,0,.001883,0,.001861,0,.00184,0,.001819,0,.001798,0,.001778,0,.001759,0,.001739,0,.001721,0,.001702,0,.001684,0,.001667,0,.001649,0,.001632,0,.001616,0,.0016,0,.001584,0,.001568,0,.001553,0,.001538,0,.001523,0,.001509,0,.001494,0,.001481,0,.001467,0,.001453,0,.00144,0,.001427,0,.001415,0,.001402,0,.00139,0,.001378,0,.001366,0,.001355,0,.001343,0,.001332,0,.001321,0,.00131,0,.001299,0,.001289,0,.001278,0,.001268,0,.001258,0,.001248,0,.001239,0,.001229,0,.00122,0,.00121,0,.001201,0,.001192,0,.001183,0,.001175,0,.001166,0,.001157,0,.001149,0,.001141,0,.001133,0,.001125,0,.001117,0,.001109,0,.001101,0,.001094,0,.001086,0,.001079,0,.001072,0,.001065,0,.001058,0,.001051,0,.001044,0,.001037,0,.00103,0,.001024,0,.001017,0,.001011,0,.001004,0,998e-6,0,992e-6,0,985e-6,0,979e-6,0,973e-6,0,968e-6,0,962e-6,0,956e-6,0,95e-5,0,945e-6,0,939e-6,0,933e-6,0,928e-6,0,923e-6,0,917e-6,0,912e-6,0,907e-6,0,902e-6,0,897e-6,0,892e-6,0,887e-6,0,882e-6,0,877e-6,0,872e-6,0,867e-6,0,863e-6,0,858e-6,0,853e-6,0,849e-6,0,844e-6,0,84e-5,0,835e-6,0,831e-6,0,827e-6,0,823e-6,0,818e-6,0,814e-6,0,81e-5,0,806e-6,0,802e-6,0,798e-6,0,794e-6,0,79e-5,0,786e-6,0,782e-6,0,778e-6,0,774e-6,0,771e-6,0,767e-6,0,763e-6,0,76e-5,0,756e-6,0,753e-6,0,749e-6,0,745e-6,0,742e-6,0,739e-6,0,735e-6,0,732e-6,0,728e-6,0,725e-6,0,722e-6,0,719e-6,0,715e-6,0,712e-6,0,709e-6,0,706e-6,0,703e-6,0,7e-4,0,697e-6,0,693e-6,0,69e-5,0,687e-6,0,685e-6,0,682e-6,0,679e-6,0,676e-6,0,673e-6,0,67e-5,0,667e-6,0,665e-6,0,662e-6,0,659e-6,0,656e-6,0,654e-6,0,651e-6,0,648e-6,0,646e-6,0,643e-6,0,64e-5,0,638e-6,0,635e-6,0,633e-6,0,63e-5,0,628e-6,0,625e-6,0,623e-6,0,62e-5,0,618e-6,0,616e-6,0,613e-6,0,611e-6,0,609e-6,0,606e-6,0,604e-6,0,602e-6,0,599e-6,0,597e-6,0,595e-6,0,593e-6,0,591e-6,0,588e-6,0,586e-6,0,584e-6,0,582e-6,0,58e-5,0,578e-6,0,576e-6,0,574e-6,0,571e-6,0,569e-6,0,567e-6,0,565e-6,0,563e-6,0,561e-6,0,559e-6,0,557e-6,0,556e-6,0,554e-6,0,552e-6,0,55e-5,0,548e-6,0,546e-6,0,544e-6,0,542e-6,0,54e-5,0,539e-6,0,537e-6,0,535e-6,0,533e-6,0,531e-6,0,53e-5,0,528e-6,0,526e-6,0,524e-6,0,523e-6,0,521e-6,0,519e-6,0,518e-6,0,516e-6,0,514e-6,0,513e-6,0,511e-6,0,509e-6,0,508e-6,0,506e-6,0,504e-6,0,503e-6,0,501e-6,0,5e-4,0,498e-6,0,497e-6,0,495e-6,0,494e-6,0,492e-6,0,49e-5,0,489e-6,0,487e-6,0,486e-6,0,484e-6,0,483e-6,0,482e-6,0,48e-5,0,479e-6,0,477e-6,0,476e-6,0,474e-6,0,473e-6,0,472e-6,0,47e-5,0,469e-6,0,467e-6,0,466e-6,0,465e-6,0,463e-6,0,462e-6,0,461e-6,0,459e-6,0,458e-6,0,457e-6,0,455e-6,0,454e-6,0,453e-6,0,452e-6,0,45e-5,0,449e-6,0,448e-6,0,446e-6,0,445e-6,0,444e-6,0,443e-6,0,441e-6,0,44e-5,0,439e-6,0,438e-6,0,437e-6,0,435e-6,0,434e-6,0,433e-6,0,432e-6,0,431e-6,0,43e-5,0,428e-6,0,427e-6,0,426e-6,0,425e-6,0,424e-6,0,423e-6,0,422e-6,0,42e-5,0,419e-6,0,418e-6,0,417e-6,0,416e-6,0,415e-6,0,414e-6,0,413e-6,0,412e-6,0,411e-6,0,41e-5,0,409e-6,0,408e-6,0,407e-6,0,405e-6,0,404e-6,0,403e-6,0,402e-6,0,401e-6,0,4e-4,0,399e-6,0,398e-6,0,397e-6,0,396e-6,0,395e-6,0,394e-6,0,393e-6,0,392e-6,0,392e-6,0,391e-6,0,39e-5,0,389e-6,0,388e-6,0,387e-6,0,386e-6,0,385e-6,0,384e-6,0,383e-6,0,382e-6,0,381e-6,0,38e-5,0,379e-6,0,378e-6,0,378e-6,0,377e-6,0,376e-6,0,375e-6,0,374e-6,0,373e-6,0,372e-6,0,371e-6,0,371e-6,0,37e-5,0,369e-6,0,368e-6,0,367e-6,0,366e-6,0,365e-6,0,365e-6,0,364e-6,0,363e-6,0,362e-6,0,361e-6,0,36e-5,0,36e-5,0,359e-6,0,358e-6,0,357e-6,0,356e-6,0,356e-6,0,355e-6,0,354e-6,0,353e-6,0,353e-6,0,352e-6,0,351e-6,0,35e-5,0,349e-6,0,349e-6,0,348e-6,0,347e-6,0,346e-6,0,346e-6,0,345e-6,0,344e-6,0,343e-6,0,343e-6,0,342e-6,0,341e-6,0,34e-5,0,34e-5,0,339e-6,0,338e-6,0,338e-6,0,337e-6,0,336e-6,0,335e-6,0,335e-6,0,334e-6,0,333e-6,0,333e-6,0,332e-6,0,331e-6,0,331e-6,0,33e-5,0,329e-6,0,328e-6,0,328e-6,0,327e-6,0,326e-6,0,326e-6,0,325e-6,0,324e-6,0,324e-6,0,323e-6,0,323e-6,0,322e-6,0,321e-6,0,321e-6,0,32e-5,0,319e-6,0,319e-6,0,318e-6,0,317e-6,0,317e-6,0,316e-6,0,315e-6,0,315e-6,0,314e-6,0,314e-6,0,313e-6,0,312e-6,0,312e-6,0,311e-6,0,311e-6,0,31e-5,0,309e-6,0,309e-6,0,308e-6,0,308e-6,0,307e-6,0,306e-6,0,306e-6,0,305e-6,0,305e-6,0,304e-6,0,303e-6,0,303e-6,0,302e-6,0,302e-6,0,301e-6,0,301e-6,0,3e-4,0,299e-6,0,299e-6,0,298e-6,0,298e-6,0,297e-6,0,297e-6,0,296e-6,0,296e-6,0,295e-6,0,294e-6,0,294e-6,0,293e-6,0,293e-6,0,292e-6,0,292e-6,0,291e-6,0,291e-6,0,29e-5,0,29e-5,0,289e-6,0,289e-6,0,288e-6,0,288e-6,0,287e-6,0,287e-6,0,286e-6,0,285e-6,0,285e-6,0,284e-6,0,284e-6,0,283e-6,0,283e-6,0,282e-6,0,282e-6,0,281e-6,0,281e-6,0,28e-5,0,28e-5,0,279e-6,0,279e-6,0,278e-6,0,278e-6,0,278e-6,0,277e-6,0,277e-6,0,276e-6,0,276e-6,0,275e-6,0,275e-6,0,274e-6,0,274e-6,0,273e-6,0,273e-6,0,272e-6,0,272e-6,0,271e-6,0,271e-6,0,27e-5,0,27e-5,0,27e-5,0,269e-6,0,269e-6,0,268e-6,0,268e-6,0,267e-6,0,267e-6,0,266e-6,0,266e-6,0,265e-6,0,265e-6,0,265e-6,0,264e-6,0,264e-6,0,263e-6,0,263e-6,0,262e-6,0,262e-6,0,262e-6,0,261e-6,0,261e-6,0,26e-5,0,26e-5,0,259e-6,0,259e-6,0,259e-6,0,258e-6,0,258e-6,0,257e-6,0,257e-6,0,256e-6,0,256e-6,0,256e-6,0,255e-6,0,255e-6,0,254e-6,0,254e-6,0,254e-6,0,253e-6,0,253e-6,0,252e-6,0,252e-6,0,252e-6,0,251e-6,0,251e-6,0,25e-5,0,25e-5,0,25e-5,0,249e-6,0,249e-6,0,248e-6,0,248e-6,0,248e-6,0,247e-6,0,247e-6,0,247e-6,0,246e-6,0,246e-6,0,245e-6,0,245e-6,0,245e-6,0,244e-6,0,244e-6,0,244e-6,0,243e-6,0,243e-6,0,242e-6,0,242e-6,0,242e-6,0,241e-6,0,241e-6,0,241e-6,0,24e-5,0,24e-5,0,24e-5,0,239e-6,0,239e-6,0,238e-6,0,238e-6,0,238e-6,0,237e-6,0,237e-6,0,237e-6,0,236e-6,0,236e-6,0,236e-6,0,235e-6,0,235e-6,0,235e-6,0,234e-6,0,234e-6,0,234e-6,0,233e-6,0,233e-6,0,233e-6,0,232e-6,0,232e-6,0,231e-6,0,231e-6,0,231e-6,0,23e-5,0,23e-5,0,23e-5,0,229e-6,0,229e-6,0,229e-6,0,229e-6,0,228e-6,0,228e-6,0,228e-6,0,227e-6,0,227e-6,0,227e-6,0,226e-6,0,226e-6,0,226e-6,0,225e-6,0,225e-6,0,225e-6,0,224e-6,0,224e-6,0,224e-6,0,223e-6,0,223e-6,0,223e-6,0,222e-6,0,222e-6,0,222e-6,0,222e-6,0,221e-6,0,221e-6,0,221e-6,0,22e-5,0,22e-5,0,22e-5,0,219e-6,0,219e-6,0,219e-6,0,218e-6,0,218e-6,0,218e-6,0,218e-6,0,217e-6,0,217e-6,0,217e-6,0,216e-6,0,216e-6,0,216e-6,0,216e-6,0,215e-6,0,215e-6,0,215e-6,0,214e-6,0,214e-6,0,214e-6,0,213e-6,0,213e-6,0,213e-6,0,213e-6,0,212e-6,0,212e-6,0,212e-6,0,212e-6,0,211e-6,0,211e-6,0,211e-6,0,21e-5,0,21e-5,0,21e-5,0,21e-5,0,209e-6,0,209e-6,0,209e-6,0,208e-6,0,208e-6,0,208e-6,0,208e-6,0,207e-6,0,207e-6,0,207e-6,0,207e-6,0,206e-6,0,206e-6,0,206e-6,0,205e-6,0,205e-6,0,205e-6,0,205e-6,0,204e-6,0,204e-6,0,204e-6,0,204e-6,0,203e-6,0,203e-6,0,203e-6,0,203e-6,0,202e-6,0,202e-6,0,202e-6,0,202e-6,0,201e-6,0,201e-6,0,201e-6,0,201e-6,0,2e-4,0,2e-4,0,2e-4,0,2e-4,0,199e-6,0,199e-6,0,199e-6,0,199e-6,0,198e-6,0,198e-6,0,198e-6,0,198e-6,0,197e-6,0,197e-6,0,197e-6,0,197e-6,0,196e-6,0,196e-6,0,196e-6,0,196e-6,0,195e-6,0,195e-6,0,195e-6,0,195e-6,0,194e-6,0,194e-6,0,194e-6,0,194e-6,0,194e-6,0,193e-6,0,193e-6,0,193e-6,0,193e-6,0,192e-6,0,192e-6,0,192e-6,0,192e-6,0,191e-6,0,191e-6,0,191e-6,0,191e-6,0,19e-5,0,19e-5,0,19e-5,0,19e-5,0,19e-5,0,189e-6,0,189e-6,0,189e-6,0,189e-6,0,188e-6,0,188e-6,0,188e-6,0,188e-6,0,188e-6,0,187e-6,0,187e-6,0,187e-6,0,187e-6,0,186e-6,0,186e-6,0,186e-6,0,186e-6,0,186e-6,0,185e-6,0,185e-6,0,185e-6,0,185e-6,0,185e-6,0,184e-6,0,184e-6,0,184e-6,0,184e-6,0,183e-6,0,183e-6,0,183e-6,0,183e-6,0,183e-6,0,182e-6,0,182e-6,0,182e-6,0,182e-6,0,182e-6,0,181e-6,0,181e-6,0,181e-6,0,181e-6,0,181e-6,0,18e-5,0,18e-5,0,18e-5,0,18e-5,0,18e-5,0,179e-6,0,179e-6,0,179e-6,0,179e-6,0,179e-6,0,178e-6,0,178e-6,0,178e-6,0,178e-6,0,178e-6,0,177e-6,0,177e-6,0,177e-6,0,177e-6,0,177e-6,0,176e-6,0,176e-6,0,176e-6,0,176e-6,0,176e-6,0,175e-6,0,175e-6,0,175e-6,0,175e-6,0,175e-6,0,174e-6,0,174e-6,0,174e-6,0,174e-6,0,174e-6,0,173e-6,0,173e-6,0,173e-6,0,173e-6,0,173e-6,0,173e-6,0,172e-6,0,172e-6,0,172e-6,0,172e-6,0,172e-6,0,171e-6,0,171e-6,0,171e-6,0,171e-6,0,171e-6,0,17e-5,0,17e-5,0,17e-5,0,17e-5,0,17e-5,0,17e-5,0,169e-6,0,169e-6,0,169e-6,0,169e-6,0,169e-6,0,169e-6,0,168e-6,0,168e-6,0,168e-6,0,168e-6,0,168e-6,0,167e-6,0,167e-6,0,167e-6,0,167e-6,0,167e-6,0,167e-6,0,166e-6,0,166e-6,0,166e-6,0,166e-6,0,166e-6,0,166e-6,0,165e-6,0,165e-6,0,165e-6,0,165e-6,0,165e-6,0,165e-6,0,164e-6,0,164e-6,0,164e-6,0,164e-6,0,164e-6,0,163e-6,0,163e-6,0,163e-6,0,163e-6,0,163e-6,0,163e-6,0,162e-6,0,162e-6,0,162e-6,0,162e-6,0,162e-6,0,162e-6,0,161e-6,0,161e-6,0,161e-6,0,161e-6,0,161e-6,0,161e-6,0,161e-6,0,16e-5,0,16e-5,0,16e-5,0,16e-5,0,16e-5,0,16e-5,0,159e-6,0,159e-6,0,159e-6,0,159e-6,0,159e-6,0,159e-6,0,158e-6,0,158e-6,0,158e-6,0,158e-6,0,158e-6,0,158e-6,0,158e-6,0,157e-6,0,157e-6,0,157e-6,0,157e-6,0,157e-6,0,157e-6,0,156e-6,0,156e-6,0,156e-6,0,156e-6,0,156e-6,0,156e-6,0,156e-6]
}},{}],41:[function(require,module,exports){module.exports={realimag:[0,-.46267,0,.514476,0,-.222225,0,.198434,0,-.131464,0,.122448,0,-.093145,0,.088485,0,-.072092,0,.069258,0,-.058792,0,.056891,0,-.049633,0,.048269,0,-.042941,0,.041916,0,-.037839,0,.03704,0,-.03382,0,.03318,0,-.030572,0,.030049,0,-.027894,0,.027457,0,-.025647,0,.025277,0,-.023735,0,.023418,0,-.022088,0,.021813,0,-.020655,0,.020414,0,-.019396,0,.019184,0,-.018282,0,.018094,0,-.01729,0,.017121,0,-.016399,0,.016247,0,-.015595,0,.015458,0,-.014867,0,.014742,0,-.014204,0,.01409,0,-.013597,0,.013492,0,-.01304,0,.012944,0,-.012527,0,.012438,0,-.012053,0,.01197,0,-.011613,0,.011536,0,-.011204,0,.011133,0,-.010823,0,.010757,0,-.010467,0,.010405,0,-.010134,0,.010076,0,-.009821,0,.009767,0,-.009527,0,.009476,0,-.009251,0,.009202,0,-.008989,0,.008943,0,-.008742,0,.008699,0,-.008509,0,.008468,0,-.008287,0,.008248,0,-.008077,0,.00804,0,-.007877,0,.007842,0,-.007687,0,.007653,0,-.007506,0,.007474,0,-.007333,0,.007302,0,-.007168,0,.007138,0,-.00701,0,.006982,0,-.006859,0,.006832,0,-.006714,0,.006688,0,-.006575,0,.006551,0,-.006442,0,.006419,0,-.006314,0,.006292,0,-.006192,0,.00617,0,-.006073,0,.006053,0,-.00596,0,.00594,0,-.00585,0,.005831,0,-.005745,0,.005726,0,-.005643,0,.005625,0,-.005545,0,.005527,0,-.00545,0,.005433,0,-.005358,0,.005342,0,-.005269,0,.005253,0,-.005183,0,.005168,0,-.0051,0,.005086,0,-.00502,0,.005006,0,-.004942,0,.004928,0,-.004866,0,.004853,0,-.004793,0,.00478,0,-.004722,0,.004709,0,-.004653,0,.004641,0,-.004586,0,.004574,0,-.004521,0,.004509,0,-.004458,0,.004446,0,-.004396,0,.004385,0,-.004336,0,.004325,0,-.004278,0,.004267,0,-.004221,0,.004211,0,-.004166,0,.004156,0,-.004112,0,.004102,0,-.00406,0,.00405,0,-.004008,0,.003999,0,-.003959,0,.00395,0,-.00391,0,.003901,0,-.003863,0,.003854,0,-.003816,0,.003808,0,-.003771,0,.003763,0,-.003727,0,.003719,0,-.003684,0,.003676,0,-.003642,0,.003634,0,-.0036,0,.003593,0,-.00356,0,.003553,0,-.003521,0,.003514,0,-.003482,0,.003475,0,-.003445,0,.003438,0,-.003408,0,.003401,0,-.003372,0,.003365,0,-.003336,0,.00333,0,-.003302,0,.003295,0,-.003268,0,.003262,0,-.003235,0,.003229,0,-.003202,0,.003196,0,-.00317,0,.003164,0,-.003139,0,.003133,0,-.003108,0,.003103,0,-.003078,0,.003073,0,-.003049,0,.003043,0,-.00302,0,.003015,0,-.002991,0,.002986,0,-.002964,0,.002959,0,-.002936,0,.002931,0,-.002909,0,.002905,0,-.002883,0,.002878,0,-.002857,0,.002852,0,-.002832,0,.002827,0,-.002807,0,.002802,0,-.002782,0,.002778,0,-.002758,0,.002754,0,-.002734,0,.00273,0,-.002711,0,.002707,0,-.002688,0,.002684,0,-.002666,0,.002662,0,-.002644,0,.00264,0,-.002622,0,.002618,0,-.0026,0,.002597,0,-.002579,0,.002576,0,-.002559,0,.002555,0,-.002538,0,.002534,0,-.002518,0,.002514,0,-.002498,0,.002495,0,-.002479,0,.002475,0,-.00246,0,.002456,0,-.002441,0,.002437,0,-.002422,0,.002419,0,-.002404,0,.002401,0,-.002386,0,.002383,0,-.002368,0,.002365,0,-.002351,0,.002348,0,-.002333,0,.00233,0,-.002317,0,.002313,0,-.0023,0,.002297,0,-.002283,0,.00228,0,-.002267,0,.002264,0,-.002251,0,.002248,0,-.002235,0,.002232,0,-.00222,0,.002217,0,-.002204,0,.002201,0,-.002189,0,.002186,0,-.002174,0,.002171,0,-.002159,0,.002157,0,-.002145,0,.002142,0,-.00213,0,.002128,0,-.002116,0,.002114,0,-.002102,0,.0021,0,-.002089,0,.002086,0,-.002075,0,.002072,0,-.002061,0,.002059,0,-.002048,0,.002046,0,-.002035,0,.002033,0,-.002022,0,.00202,0,-.002009,0,.002007,0,-.001997,0,.001995,0,-.001984,0,.001982,0,-.001972,0,.00197,0,-.00196,0,.001958,0,-.001948,0,.001946,0,-.001936,0,.001934,0,-.001924,0,.001922,0,-.001913,0,.001911,0,-.001901,0,.001899,0,-.00189,0,.001888,0,-.001879,0,.001877,0,-.001868,0,.001866,0,-.001857,0,.001855,0,-.001846,0,.001844,0,-.001836,0,.001834,0,-.001825,0,.001823,0,-.001815,0,.001813,0,-.001804,0,.001803,0,-.001794,0,.001792,0,-.001784,0,.001782,0,-.001774,0,.001772,0,-.001764,0,.001763,0,-.001755,0,.001753,0,-.001745,0,.001743,0,-.001736,0,.001734,0,-.001726,0,.001724,0,-.001717,0,.001715,0,-.001708,0,.001706,0,-.001698,0,.001697,0,-.001689,0,.001688,0,-.001681,0,.001679,0,-.001672,0,.00167,0,-.001663,0,.001661,0,-.001654,0,.001653,0,-.001646,0,.001644,0,-.001637,0,.001636,0,-.001629,0,.001627,0,-.001621,0,.001619,0,-.001612,0,.001611,0,-.001604,0,.001603,0,-.001596,0,.001595,0,-.001588,0,.001587,0,-.00158,0,.001579,0,-.001573,0,.001571,0,-.001565,0,.001563,0,-.001557,0,.001556,0,-.00155,0,.001548,0,-.001542,0,.001541,0,-.001535,0,.001533,0,-.001527,0,.001526,0,-.00152,0,.001519,0,-.001513,0,.001512,0,-.001506,0,.001504,0,-.001499,0,.001497,0,-.001492,0,.00149,0,-.001485,0,.001483,0,-.001478,0,.001476,0,-.001471,0,.00147,0,-.001464,0,.001463,0,-.001457,0,.001456,0,-.001451,0,.00145,0,-.001444,0,.001443,0,-.001438,0,.001436,0,-.001431,0,.00143,0,-.001425,0,.001424,0,-.001418,0,.001417,0,-.001412,0,.001411,0,-.001406,0,.001405,0,-.0014,0,.001399,0,-.001394,0,.001392,0,-.001388,0,.001386,0,-.001381,0,.00138,0,-.001376,0,.001374,0,-.00137,0,.001369,0,-.001364,0,.001363,0,-.001358,0,.001357,0,-.001352,0,.001351,0,-.001346,0,.001345,0,-.001341,0,.00134,0,-.001335,0,.001334,0,-.00133,0,.001329,0,-.001324,0,.001323,0,-.001319,0,.001318,0,-.001313,0,.001312,0,-.001308,0,.001307,0,-.001302,0,.001301,0,-.001297,0,.001296,0,-.001292,0,.001291,0,-.001287,0,.001286,0,-.001281,0,.00128,0,-.001276,0,.001275,0,-.001271,0,.00127,0,-.001266,0,.001265,0,-.001261,0,.00126,0,-.001256,0,.001255,0,-.001251,0,.00125,0,-.001246,0,.001245,0,-.001241,0,.001241,0,-.001237,0,.001236,0,-.001232,0,.001231,0,-.001227,0,.001226,0,-.001222,0,.001221,0,-.001218,0,.001217,0,-.001213,0,.001212,0,-.001208,0,.001208,0,-.001204,0,.001203,0,-.001199,0,.001198,0,-.001195,0,.001194,0,-.00119,0,.00119,0,-.001186,0,.001185,0,-.001182,0,.001181,0,-.001177,0,.001176,0,-.001173,0,.001172,0,-.001168,0,.001168,0,-.001164,0,.001163,0,-.00116,0,.001159,0,-.001156,0,.001155,0,-.001152,0,.001151,0,-.001147,0,.001147,0,-.001143,0,.001143,0,-.001139,0,.001138,0,-.001135,0,.001134,0,-.001131,0,.00113,0,-.001127,0,.001126,0,-.001123,0,.001122,0,-.001119,0,.001118,0,-.001115,0,.001115,0,-.001111,0,.001111,0,-.001108,0,.001107,0,-.001104,0,.001103,0,-.0011,0,.001099,0,-.001096,0,.001095,0,-.001092,0,.001092,0,-.001089,0,.001088,0,-.001085,0,.001084,0,-.001081,0,.001081,0,-.001078,0,.001077,0,-.001074,0,.001073,0,-.00107,0,.00107,0,-.001067,0,.001066,0,-.001063,0,.001062,0,-.00106,0,.001059,0,-.001056,0,.001055,0,-.001053,0,.001052,0,-.001049,0,.001048,0,-.001046,0,.001045,0,-.001042,0,.001042,0,-.001039,0,.001038,0,-.001035,0,.001035,0,-.001032,0,.001031,0,-.001029,0,.001028,0,-.001025,0,.001025,0,-.001022,0,.001022,0,-.001019,0,.001018,0,-.001016,0,.001015,0,-.001012,0,.001012,0,-.001009,0,.001009,0,-.001006,0,.001005,0,-.001003,0,.001002,0,-.001,0,999e-6,0,-997e-6,0,996e-6,0,-993e-6,0,993e-6,0,-99e-5,0,99e-5,0,-987e-6,0,987e-6,0,-984e-6,0,984e-6,0,-981e-6,0,981e-6,0,-978e-6,0,978e-6,0,-975e-6,0,975e-6,0,-972e-6,0,972e-6,0,-969e-6,0,969e-6,0,-966e-6,0,966e-6,0,-963e-6,0,963e-6,0,-96e-5,0,96e-5,0,-958e-6,0,957e-6,0,-955e-6,0,954e-6,0,-952e-6,0,951e-6,0,-949e-6,0,949e-6,0,-946e-6,0,946e-6,0,-943e-6,0,943e-6,0,-941e-6,0,94e-5,0,-938e-6,0,937e-6,0,-935e-6,0,935e-6,0,-932e-6,0,932e-6,0,-93e-5,0,929e-6,0,-927e-6,0,926e-6,0,-924e-6,0,924e-6,0,-922e-6,0,921e-6,0,-919e-6,0,918e-6,0,-916e-6,0,916e-6,0,-914e-6,0,913e-6,0,-911e-6,0,911e-6,0,-908e-6,0,908e-6,0,-906e-6,0,905e-6,0,-903e-6,0,903e-6,0,-901e-6,0,9e-4,0,-898e-6,0,898e-6,0,-896e-6,0,895e-6,0,-893e-6,0,893e-6,0,-891e-6,0,89e-5,0,-888e-6,0,888e-6,0,-886e-6,0,885e-6,0,-883e-6,0,883e-6,0,-881e-6,0,88e-5,0,-878e-6,0,878e-6,0,-876e-6,0,875e-6,0,-873e-6,0,873e-6,0,-871e-6,0,871e-6,0,-869e-6,0,868e-6,0,-866e-6,0,866e-6,0,-864e-6,0,864e-6,0,-862e-6,0,861e-6,0,-859e-6,0,859e-6,0,-857e-6,0,857e-6,0,-855e-6,0,854e-6,0,-852e-6,0,852e-6,0,-85e-5,0,85e-5,0,-848e-6,0,847e-6,0,-846e-6,0,845e-6,0,-843e-6,0,843e-6,0,-841e-6,0,841e-6,0,-839e-6,0,839e-6,0,-837e-6,0,836e-6,0,-835e-6,0,834e-6,0,-832e-6,0,832e-6,0,-83e-5,0,83e-5,0,-828e-6,0,828e-6,0,-826e-6,0,826e-6,0,-824e-6,0,823e-6,0,-822e-6,0,821e-6,0,-82e-5,0,819e-6,0,-817e-6,0,817e-6,0,-815e-6,0,815e-6,0,-813e-6,0,813e-6,0,-811e-6,0,811e-6,0,-809e-6,0,809e-6,0,-807e-6,0,807e-6,0,-805e-6,0,805e-6,0,-803e-6,0,803e-6,0,-801e-6,0,801e-6,0,-799e-6,0,799e-6,0,-797e-6,0,797e-6,0,-795e-6,0,795e-6,0,-793e-6,0,793e-6,0,-791e-6,0,791e-6,0,-789e-6,0,789e-6,0,-787e-6,0,787e-6,0,-785e-6,0,785e-6,0,-783e-6,0,783e-6,0,-781e-6,0,781e-6,0,-779e-6,0,779e-6,0,-777e-6,0,777e-6,0,-776e-6,0,775e-6,0,-774e-6,0,773e-6,0,-772e-6,0,771e-6,0,-77e-5,0,77e-5,0,-768e-6,0,768e-6,0,-766e-6,0,766e-6,0,-764e-6,0,764e-6,0,-763e-6,0,762e-6,0,-761e-6,0,76e-5,0,-759e-6,0,759e-6,0,-757e-6,0,757e-6,0,-755e-6,0,755e-6,0,-754e-6,0,753e-6,0,-752e-6,0,751e-6,0,-75e-5,0,75e-5,0,-748e-6,0,748e-6,0,-746e-6,0,746e-6,0,-745e-6,0,744e-6,0,-743e-6,0,743e-6,0,-741e-6,0,741e-6,0,-74e-5,0,739e-6,0,-738e-6,0,738e-6,0,-736e-6,0,736e-6,0,-734e-6,0,734e-6,0,-733e-6,0,732e-6,0,-731e-6,0,731e-6,0,-729e-6,0,729e-6,0,-728e-6,0,727e-6,0,-726e-6,0,726e-6,0,-724e-6,0,724e-6,0,-723e-6,0,722e-6,0,-721e-6,0,721e-6,0,-719e-6,0,719e-6,0,-718e-6,0,718e-6,0,-716e-6,0,716e-6,0,-715e-6,0,714e-6,0,-713e-6,0,713e-6,0,-711e-6,0,711e-6,0,-71e-5,0,71e-5,0,-708e-6,0,708e-6,0,-707e-6,0,706e-6,0,-705e-6,0,705e-6,0,-704e-6,0,703e-6,0,-702e-6,0,702e-6,0,-7e-4,0,7e-4,0,-699e-6,0,699e-6,0,-697e-6,0,697e-6,0,-696e-6,0,696e-6,0,-694e-6,0,694e-6,0,-693e-6,0,693e-6,0,-691e-6,0,691e-6,0,-69e-5,0,69e-5,0,-688e-6,0,688e-6,0,-687e-6,0,687e-6,0,-685e-6,0,685e-6,0,-684e-6,0,684e-6,0,-682e-6,0,682e-6,0,-681e-6,0,681e-6,0,-68e-5,0,679e-6,0,-678e-6,0,678e-6,0,-677e-6,0,676e-6,0,-675e-6,0,675e-6,0,-674e-6,0,674e-6,0,-672e-6,0,672e-6,0,-671e-6,0,671e-6,0,-67e-5,0,669e-6,0,-668e-6,0,668e-6,0,-667e-6,0,666e-6,0,-665e-6,0,665e-6,0,-664e-6,0,664e-6,0,-663e-6,0,662e-6,0,-661e-6,0,661e-6,0,-66e-5,0,66e-5,0,-658e-6,0,658e-6,0,-657e-6,0,657e-6,0,-656e-6,0,656e-6,0,-654e-6,0,654e-6,0,-653e-6,0,653e-6,0,-652e-6,0,651e-6,0,-65e-5,0,65e-5,0,-649e-6,0,649e-6,0,-648e-6,0,648e-6,0,-646e-6,0,646e-6,0,-645e-6,0,645e-6,0,-644e-6,0,644e-6,0,-643e-6,0,642e-6,0,-641e-6,0,641e-6,0,-64e-5,0,64e-5,0,-639e-6,0,638e-6,0,-637e-6,0,637e-6,0,-636e-6,0,636e-6,0,-635e-6,0,635e-6,0,-634e-6,0,633e-6,0,-632e-6,0,632e-6,0,-631e-6,0,631e-6,0,-63e-5,0,63e-5,0,-629e-6,0,628e-6,0,-627e-6,0,627e-6,0,-626e-6,0,626e-6,0,-625e-6,0,625e-6,0,-624e-6,0,623e-6,0,-622e-6,0,622e-6]}},{}],42:[function(require,module,exports){module.exports={real:[0,0,-.194984,.024486,-.005329,.001841,-.001442,.001335,-.001597,.002315,-.003376,.004513,-.004321,.005474,-.00615,.005942,-.006918,.006712,-.00943,.009179,-.008948,.008733,-.010578,.010347,-.01013,.010554,-.01035,.010157,-.009975,.009802,-.009638,.009481,-.009333,.006557,-.00646,.006367,-.006278,.004556,-.004496,.004438,-.003224,.003184,-.003146,.002667,-.002637,.002607,-.002579,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,0,-1e-6,0,0,0,0,0,0,0,-1e-6,1e-6,-1e-6,1e-6,-2e-6,2e-6,-3e-6,3e-6,-5e-6,5e-6,-5e-6,6e-6,-8e-6,8e-6,-9e-6,1e-5,-1e-5,11e-6,-12e-6,12e-6,-13e-6,14e-6,-14e-6,11e-6,-11e-6,12e-6,-12e-6,9e-6,-1e-5,1e-5,-8e-6,8e-6,-8e-6,7e-6,-8e-6,8e-6,-8e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],43:[function(require,module,exports){module.exports={real:[0,.810569,0,.090063,0,.032423,0,.016542,0,.010007,0,.006699,0,.004796,0,.003603,0,.002805,0,.002245,0,.001838,0,.001532,0,.001297,0,.001112,0,964e-6,0,843e-6,0,744e-6,0,662e-6,0,592e-6,0,533e-6,0,482e-6,0,438e-6,0,4e-4,0,367e-6,0,338e-6,0,312e-6,0,289e-6,0,268e-6,0,249e-6,0,233e-6,0,218e-6,0,204e-6,0,192e-6,0,181e-6,0,17e-5,0,161e-6,0,152e-6,0,144e-6,0,137e-6,0,13e-5,0,124e-6,0,118e-6,0,112e-6,0,107e-6,0,102e-6,0,98e-6,0,94e-6,0,9e-5,0,86e-6,0,83e-6,0,79e-6,0,76e-6,0,74e-6,0,71e-6,0,68e-6,0,66e-6,0,63e-6,0,61e-6,0,59e-6,0,57e-6,0,55e-6,0,54e-6,0,52e-6,0,5e-5,0,49e-6,0,47e-6,0,46e-6,0,44e-6,0,43e-6,0,42e-6,0,41e-6,0,4e-5,0,39e-6,0,38e-6,0,37e-6,0,36e-6,0,35e-6,0,34e-6,0,33e-6,0,32e-6,0,31e-6,0,31e-6,0,3e-5,0,29e-6,0,28e-6,0,28e-6,0,27e-6,0,26e-6,0,26e-6,0,25e-6,0,25e-6,0,24e-6,0,24e-6,0,23e-6,0,23e-6,0,22e-6,0,22e-6,0,21e-6,0,21e-6,0,2e-5,0,2e-5,0,2e-5,0,19e-6,0,19e-6,0,19e-6,0,18e-6,0,18e-6,0,18e-6,0,17e-6,0,17e-6,0,17e-6,0,16e-6,0,16e-6,0,16e-6,0,15e-6,0,15e-6,0,15e-6,0,15e-6,0,14e-6,0,14e-6,0,14e-6,0,14e-6,0,14e-6,0,13e-6,0,13e-6,0,13e-6,0,13e-6,0,12e-6,0,12e-6,0,12e-6,0,12e-6,0,12e-6,0,12e-6,0,11e-6,0,11e-6,0,11e-6,0,11e-6,0,11e-6,0,11e-6,0,1e-5,0,1e-5,0,1e-5,0,1e-5,0,1e-5,0,1e-5,0,1e-5,0,9e-6,0,9e-6,0,9e-6,0,9e-6,0,9e-6,0,9e-6,0,9e-6,0,9e-6,0,8e-6,0,8e-6,0,8e-6,0,8e-6,0,8e-6,0,8e-6,0,8e-6,0,8e-6,0,8e-6,0,8e-6,0,7e-6,0,7e-6,0,7e-6,0,7e-6,0,7e-6,0,7e-6,0,7e-6,0,7e-6,0,7e-6,0,7e-6,0,7e-6,0,7e-6,0,7e-6,0,6e-6,0,6e-6,0,6e-6,0,6e-6,0,6e-6,0,6e-6,0,6e-6,0,6e-6,0,6e-6,0,6e-6,0,6e-6,0,6e-6,0,6e-6,0,6e-6,0,6e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,5e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,4e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,3e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,2e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag
}},{}],44:[function(require,module,exports){module.exports={real:[0,.171738,.131907,-.1948,-.129913,-.081043,.049213,.027828,-.008357,-.005044,.002145,773e-6,-.001392,-916e-6,-12e-6,323e-6,-3e-6,127e-6,-135e-6,-29e-6,-31e-6,87e-6,-91e-6,5e-6,-26e-6,27e-6,-62e-6,-17e-6,-2e-6,2e-6,12e-6,-24e-6,11e-6,-11e-6,-1e-6,0,3e-6,6e-6,-9e-6,-2e-6,1e-6,7e-6,14e-6,-8e-6,-1e-6,-3e-6,-11e-6,-3e-6,4e-6,-2e-6,-4e-6,1e-6,-4e-6,1e-6,3e-6,1e-6,2e-6,3e-6,-1e-6,-5e-6,0,1e-6,-8e-6,1e-6,3e-6,-4e-6,-4e-6,-2e-6,3e-6,0,-2e-6,-9e-6,9e-6,24e-6,11e-6,-17e-6,-24e-6,-2e-6,0,2e-6,15e-6,22e-6,1e-6,-22e-6,-16e-6,1e-6,2e-6,-3e-6,-2e-6,1e-6,-1e-6,5e-6,1e-6,-1e-6,-1e-6,0,-1e-6,-3e-6,-1e-6,-2e-6,1e-6,-3e-6,-2e-6,4e-6,7e-6,-2e-6,-6e-6,-9e-6,-3e-6,-1e-6,1e-6,0,6e-6,0,-9e-6,-11e-6,3e-6,5e-6,-2e-6,-2e-6,-1e-6,1e-6,1e-6,0,-1e-6,-1e-6,1e-6,0,-1e-6,2e-6,1e-6,0,0,0,-1e-6,0,0,-2e-6,-1e-6,0,0,0,1e-6,1e-6,-1e-6,-1e-6,-2e-6,1e-6,2e-6,-1e-6,-4e-6,0,4e-6,5e-6,1e-6,0,-2e-6,0,-4e-6,1e-6,4e-6,7e-6,0,-4e-6,0,2e-6,1e-6,-1e-6,1e-6,0,0,-1e-6,0,-2e-6,1e-6,4e-6,0,-7e-6,2e-6,3e-5,7e-6,-35e-6,7e-6,111e-6,36e-6,-22e-6,-53e-6,0,1e-6,-4e-6,35e-6,82e-6,4e-5,-32e-6,-62e-6,-12e-6,12e-6,-8e-6,-6e-6,4e-6,6e-6,3e-6,1e-6,0,1e-6,0,0,-1e-6,-1e-6,-1e-6,-1e-6,-2e-6,-2e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,-.090905,.482287,.259485,.009402,-.125271,-.046816,.007872,.001762,-.010488,-.002305,.001791,.001101,-303e-6,-64e-6,143e-6,59e-6,116e-6,12e-5,-11e-6,-66e-6,-19e-6,24e-6,14e-6,69e-6,56e-6,5e-6,2e-6,-26e-6,-15e-6,55e-6,12e-6,46e-6,-7e-6,7e-6,-3e-6,-7e-6,2e-6,-3e-6,-1e-5,-11e-6,-4e-6,3e-6,1e-6,5e-6,-1e-6,-4e-6,1e-6,1e-6,1e-6,4e-6,0,-1e-6,1e-6,4e-6,-1e-6,-2e-6,0,-3e-6,-4e-6,3e-6,-7e-6,0,1e-6,3e-6,2e-6,0,-1e-6,0,1e-6,6e-6,-8e-6,-16e-6,13e-6,17e-6,13e-6,1e-6,0,-2e-6,-1e-6,-4e-6,7e-6,16e-6,21e-6,-8e-6,-13e-6,3e-6,6e-6,-1e-6,1e-6,2e-6,0,1e-6,-1e-6,1e-6,0,0,-4e-6,2e-6,0,1e-6,2e-6,-1e-6,-5e-6,4e-6,14e-6,5e-6,-6e-6,-7e-6,-1e-6,-1e-6,0,9e-6,9e-6,1e-6,-6e-6,-8e-6,1e-6,2e-6,-1e-6,-2e-6,0,1e-6,1e-6,0,0,2e-6,-2e-6,0,-1e-6,0,0,-1e-6,-1e-6,0,0,1e-6,0,0,-1e-6,0,0,0,0,1e-6,1e-6,-2e-6,-3e-6,-1e-6,2e-6,-1e-6,-7e-6,-2e-6,2e-6,4e-6,0,1e-6,1e-6,-2e-6,-6e-6,-2e-6,3e-6,6e-6,1e-6,0,0,2e-6,-1e-6,-1e-6,-1e-6,1e-6,0,0,-1e-6,0,3e-6,8e-6,1e-6,-1e-5,-6e-6,15e-6,-26e-6,-75e-6,-1e-5,5e-5,82e-6,23e-6,-4e-6,0,-2e-6,-45e-6,-2e-6,41e-6,93e-6,-9e-6,-34e-6,8e-6,2e-5,-1e-6,-6e-6,-1e-6,0,-2e-6,-4e-6,-3e-6,-3e-6,-2e-6,-3e-6,-2e-6,-2e-6,-2e-6,-1e-6,-1e-6,-1e-6,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],45:[function(require,module,exports){module.exports={real:[0,.316591,.135894,-.036898,-.066656,.004884,.00726,-552e-6,.031941,-24e-6,287e-6,.003007,-25e-6,-21e-6,-178e-6,-83e-6,-.010087,91e-6,-71e-6,-32e-6,-141e-6,136e-6,97e-6,333e-6,-515e-6,347e-6,51e-6,81e-6,36e-6,.006155,197e-6,.004958,.004832,235e-6,122e-6,84e-6,152e-6,201e-6,87e-6,104e-6,47e-6,-3e-5,-28e-6,-111e-6,-4e-5,136e-6,102e-6,-7e-5,-42e-6,.001071,-88e-6,-131e-6,-53e-6,-2e-5,1e-6,8e-6,51e-6,0,44e-6,-59e-6,14e-6,15e-5,-107e-6,15e-6,-.003923,135e-6,65e-6,4e-5,-38e-6,179e-6,-13e-6,95e-6,-32e-6,-24e-6,13e-6,8e-6,-9e-6,14e-6,11e-6,29e-6,61e-6,-44e-6,3e-6,-41e-6,11e-6,-1e-6,7e-6,0,1e-5,-47e-6,13e-6,-58e-6,-37e-6,2e-6,-8e-6,-14e-6,14e-6,14e-6,-19e-6,-9e-6,-24e-6,-1e-5,18e-6,-2e-6,14e-6,-12e-6,1e-5,-9e-6,-9e-6,-66e-6,5e-6,-68e-6,8e-6,7e-6,-6e-6,-33e-6,29e-6,-8e-6,0,1e-5,-17e-6,-1e-6,-13e-6,34e-6,3e-6,-14e-6,37e-6,13e-6,.002084,5e-6,-14e-6,-25e-6,1e-6,-1e-5,-37e-6,-6e-6,-44e-6,4e-6,31e-6,5e-6,7e-6,7e-6,-21e-6,16e-6,6e-6,-37e-6,6e-6,-22e-6,-15e-6,23e-6,-11e-6,23e-6,-7e-6,-14e-6,13e-6,-8e-6,5e-6,4e-6,-4e-6,-24e-6,-9e-6,27e-6,-32e-6,4e-6,12e-6,-12e-6,-17e-6,-9e-6,9e-6,-12e-6,-3e-6,7e-6,-14e-6,-16e-6,-15e-6,9e-6,-12e-6,-23e-6,11e-6,2e-6,1e-6,0,-16e-6,-7e-6,-9e-6,2e-6,-2e-6,1e-6,-18e-6,1e-6,13e-6,-1e-5,-16e-6,-15e-6,2e-6,18e-6,3e-6,-3e-6,-11e-6,6e-6,11e-6,-11e-6,-14e-6,-12e-6,-5e-6,-5e-6,-17e-6,-11e-6,-11e-6,-1e-6,-15e-6,-1e-6,-8e-6,-15e-6,-5e-6,-7e-6,-8e-6,-6e-6,-12e-6,-16e-6,-2e-5,-16e-6,-1e-5,-7e-6,-11e-6,-3e-6,2e-6,0,3e-6,1e-5,8e-6,15e-6,15e-6,14e-6,14e-6,13e-6,13e-6,12e-6,11e-6,1e-5,9e-6,9e-6,8e-6,7e-6,7e-6,6e-6,6e-6,5e-6,5e-6,5e-6,5e-6,5e-6,4e-6,4e-6,4e-6,4e-6,.001585,4e-6,4e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,3e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,2e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,0,1e-6,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,226e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,.220954,.071252,.150027,-.027788,-.023728,.001929,.001514,.032206,-.002946,482e-6,-.006003,-471e-6,85e-6,-392e-6,67e-6,-.014151,193e-6,-226e-6,-34e-6,19e-6,-405e-6,-101e-6,366e-6,-314e-6,-184e-6,-5e-5,272e-6,-225e-6,.003624,-489e-6,.001014,-.009381,-7e-5,352e-6,-335e-6,-312e-6,-211e-6,-102e-6,288e-6,-64e-6,-216e-6,4e-6,-85e-6,-66e-6,-435e-6,23e-6,28e-6,93e-6,-.001842,-18e-5,-.001436,-13e-5,-48e-6,-8e-6,25e-6,-123e-6,-23e-6,-3e-5,-18e-6,-4e-5,5e-6,-43e-6,-15e-5,.004574,3e-6,-99e-6,82e-6,-2e-6,-46e-6,-46e-6,-59e-6,-2e-6,13e-6,-36e-6,2e-6,13e-6,9e-6,-26e-6,31e-6,46e-6,-24e-6,-25e-6,13e-6,-44e-6,1e-6,0,1e-6,-3e-6,6e-5,18e-6,7e-5,24e-6,-11e-6,1e-5,6e-6,25e-6,13e-6,29e-6,12e-6,14e-6,0,12e-6,-28e-6,-1e-6,-19e-6,0,6e-6,21e-6,-39e-6,-2e-6,-47e-6,-15e-6,16e-6,29e-6,-15e-6,7e-6,3e-6,-35e-6,-15e-6,7e-6,-6e-6,-3e-6,14e-6,53e-6,11e-6,-38e-6,29e-6,-819e-6,-21e-6,36e-6,-56e-6,-29e-6,-23e-6,-13e-6,1e-5,-17e-6,0,-8e-6,13e-6,3e-6,5e-6,8e-6,3e-6,-2e-5,3e-6,4e-6,9e-6,-21e-6,11e-6,7e-6,-23e-6,7e-6,-2e-5,13e-6,-1e-6,5e-6,12e-6,-19e-6,2e-6,-39e-6,-2e-6,2e-6,0,-8e-6,16e-6,13e-6,-28e-6,-6e-6,7e-6,2e-6,13e-6,-2e-6,-4e-6,18e-6,-16e-6,15e-6,-4e-6,1e-6,2e-6,13e-6,12e-6,-1e-5,7e-6,6e-6,8e-6,-2e-6,-3e-6,3e-6,-13e-6,14e-6,4e-6,-1e-6,0,-15e-6,-2e-6,-6e-6,5e-6,-1e-6,1e-6,3e-6,-8e-6,9e-6,4e-6,-4e-6,0,8e-6,3e-6,-8e-6,-14e-6,-16e-6,0,6e-6,1e-6,-6e-6,3e-6,-1e-6,2e-5,11e-6,4e-6,16e-6,12e-6,19e-6,15e-6,24e-6,24e-6,23e-6,27e-6,18e-6,2e-5,16e-6,16e-6,13e-6,1e-5,9e-6,8e-6,5e-6,4e-6,3e-6,2e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,397e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,1e-6,0,1e-6,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],46:[function(require,module,exports){module.exports={real:[0,0,-.179748,.252497,-.212162,.069443,-.067304,.006291,-.063344,.007604,-.069661,.004429,-.01903,601e-6,-.001895,841e-6,-.009026,.001311,-.024059,.002217,-.019063,.002118,-.04849,659e-6,-.007014,529e-6,-.003632,157e-6,-265e-6,46e-6,-325e-6,503e-6,-.002858,919e-6,-522e-6,382e-6,-.001499,666e-6,-.001448,54e-5,-721e-6,863e-6,-699e-6,183e-6,-186e-6,576e-6,-87e-6,79e-6,-397e-6,466e-6,-188e-6,93e-6,-214e-6,78e-6,-182e-6,103e-6,-197e-6,124e-6,-35e-6,173e-6,-53e-6,14e-5,-139e-6,21e-6,-67e-6,136e-6,-84e-6,78e-6,-33e-6,22e-6,-65e-6,57e-6,-119e-6,23e-6,-61e-6,69e-6,-83e-6,104e-6,-55e-6,109e-6,-191e-6,26e-6,-81e-6,38e-6,-88e-6,21e-6,-5e-5,43e-6,-12e-5,21e-6,-58e-6,78e-6,-26e-6,33e-6,-3e-5,57e-6,-35e-6,33e-6,-42e-6,27e-6,-59e-6,8e-6,-49e-6,45e-6,-2e-5,2e-5,-28e-6,37e-6,-93e-6,29e-6,-42e-6,31e-6,-22e-6,2e-5,-47e-6,35e-6,-44e-6,27e-6,-3e-5,7e-6,-15e-6,19e-6,-3e-5,8e-6,-15e-6,25e-6,-11e-6,6e-6,-3e-6,19e-6,-13e-6,19e-6,-36e-6,26e-6,-22e-6,18e-6,-25e-6,13e-6,-14e-6,13e-6,-39e-6,39e-6,-99e-6,79e-6,-69e-6,2e-5,-51e-6,17e-6,-14e-6,12e-6,-2e-5,11e-6,-2e-5,41e-6,-28e-6,33e-6,-17e-6,22e-6,-18e-6,7e-6,-27e-6,18e-6,-19e-6,15e-6,-9e-6,19e-6,-18e-6,26e-6,-36e-6,15e-6,-7e-6,4e-6,-36e-6,3e-6,-38e-6,2e-5,-13e-6,14e-6,-16e-6,4e-6,-11e-6,16e-6,-3e-5,34e-6,-24e-6,59e-6,-115e-6,69e-6,-16e-6,29e-6,-7e-6,6e-6,-1e-5,14e-6,-5e-6,14e-6,-12e-6,46e-6,-1e-5,6e-6,-12e-6,9e-6,-6e-6,24e-6,-6e-6,5e-6,-8e-6,1e-5,-7e-6,5e-6,-3e-6,7e-6,-7e-6,12e-6,-5e-6,5e-6,-4e-6,6e-6,-1e-5,7e-6,-3e-6,3e-6,-9e-6,7e-6,-6e-6,7e-6,-3e-6,5e-6,-8e-6,1e-5,-6e-6,7e-6,-7e-6,6e-6,-6e-6,6e-6,-5e-6,4e-6,-4e-6,4e-6,-3e-6,3e-6,-3e-6,3e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-2e-6,2e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],imag:[0,.20893,-1e-6,4e-6,-5e-6,3e-6,-4e-6,0,-6e-6,1e-6,-1e-5,1e-6,-4e-6,0,-1e-6,0,-3e-6,1e-6,-12e-6,1e-6,-11e-6,1e-6,-35e-6,1e-6,-6e-6,0,-4e-6,0,0,0,0,1e-6,-4e-6,1e-6,-1e-6,1e-6,-3e-6,1e-6,-3e-6,1e-6,-2e-6,2e-6,-2e-6,1e-6,-1e-6,2e-6,0,0,-1e-6,2e-6,-1e-6,0,-1e-6,0,-1e-6,0,-1e-6,1e-6,0,1e-6,0,1e-6,-1e-6,0,0,1e-6,-1e-6,1e-6,0,0,0,0,-1e-6,0,-1e-6,1e-6,-1e-6,1e-6,0,1e-6,-2e-6,0,-1e-6,0,-1e-6,0,-1e-6,0,-1e-6,0,-1e-6,1e-6,0,0,0,1e-6,0,0,-1e-6,0,-1e-6,0,-1e-6,1e-6,0,0,0,1e-6,-2e-6,1e-6,-1e-6,1e-6,0,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,0,0,0,-1e-6,0,0,1e-6,0,0,0,0,0,1e-6,-1e-6,1e-6,-1e-6,0,-1e-6,0,0,0,-1e-6,1e-6,-3e-6,2e-6,-2e-6,1e-6,-2e-6,1e-6,0,0,-1e-6,0,-1e-6,1e-6,-1e-6,1e-6,-1e-6,1e-6,-1e-6,0,-1e-6,1e-6,-1e-6,1e-6,0,1e-6,-1e-6,1e-6,-2e-6,1e-6,0,0,-2e-6,0,-2e-6,1e-6,-1e-6,1e-6,-1e-6,0,-1e-6,1e-6,-1e-6,2e-6,-1e-6,3e-6,-6e-6,4e-6,-1e-6,2e-6,0,0,-1e-6,1e-6,0,1e-6,-1e-6,3e-6,-1e-6,0,-1e-6,1e-6,0,1e-6,0,0,-1e-6,1e-6,0,0,0,0,0,1e-6,0,0,0,0,-1e-6,0,0,0,-1e-6,1e-6,0,1e-6,0,0,-1e-6,1e-6,0,1e-6,-1e-6,0,-1e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],47:[function(require,module,exports){module.exports={real:[0,0,-.282095,0,-.199471,0,-.162868,0,-.141047,0,-.126157,0,-.115165,0,-.106622,0,-.099736,0,-.094032,0,-.089206,0,-.085055,0,-.081434,0,-.078239,0,-.075393,0,-.072837,0,-.070524,0,-.068418,0,-.06649,0,-.064717,0,-.063078,0,-.061558,0,-.060143,0,-.058821,0,-.057582,0,-.056419,0,-.055323,0,-.054289,0,-.053311,0,-.052384,0,-.051503,0,-.050666,0,-.049868,0,-.049106,0,-.048379,0,-.047683,0,-.047016,0,-.046376,0,-.045762,0,-.045171,0,-.044603,0,-.044056,0,-.043528,0,-.043019,0,-.042527,0,-.042052,0,-.041593,0,-.041148,0,-.040717,0,-.040299,0,-.039894,0,-.039501,0,-.03912,0,-.038749,0,-.038388,0,-.038038,0,-.037697,0,-.037364,0,-.037041,0,-.036726,0,-.036418,0,-.036119,0,-.035826,0,-.035541,0,-.035262,0,-.03499,0,-.034723,0,-.034463,0,-.034209,0,-.03396,0,-.033717,0,-.033478,0,-.033245,0,-.033017,0,-.032793,0,-.032574,0,-.032358,0,-.032148,0,-.031941,0,-.031738,0,-.031539,0,-.031344,0,-.031152,0,-.030964,0,-.030779,0,-.030597,0,-.030419,0,-.030244,0,-.030071,0,-.029902,0,-.029735,0,-.029572,0,-.02941,0,-.029252,0,-.029096,0,-.028942,0,-.028791,0,-.028642,0,-.028496,0,-.028352,0,-.028209,0,-.028069,0,-.027932,0,-.027796,0,-.027662,0,-.02753,0,-.027399,0,-.027271,0,-.027145,0,-.02702,0,-.026897,0,-.026775,0,-.026655,0,-.026537,0,-.026421,0,-.026305,0,-.026192,0,-.02608,0,-.025969,0,-.02586,0,-.025752,0,-.025645,0,-.02554,0,-.025436,0,-.025333,0,-.025231,0,-.025131,0,-.025032,0,-.024934,0,-.024837,0,-.024741,0,-.024647,0,-.024553,0,-.024461,0,-.024369,0,-.024279,0,-.024189,0,-.024101,0,-.024014,0,-.023927,0,-.023841,0,-.023757,0,-.023673,0,-.02359,0,-.023508,0,-.023427,0,-.023346,0,-.023267,0,-.023188,0,-.02311,0,-.023033,0,-.022957,0,-.022881,0,-.022806,0,-.022732,0,-.022658,0,-.022586,0,-.022514,0,-.022442,0,-.022372,0,-.022302,0,-.022232,0,-.022163,0,-.022095,0,-.022028,0,-.021961,0,-.021895,0,-.021829,0,-.021764,0,-.0217,0,-.021636,0,-.021572,0,-.02151,0,-.021447,0,-.021386,0,-.021324,0,-.021264,0,-.021204,0,-.021144,0,-.021085,0,-.021026,0,-.020968,0,-.02091,0,-.020853,0,-.020796,0,-.02074,0,-.020684,0,-.020629,0,-.020574,0,-.020519,0,-.020465,0,-.020412,0,-.020358,0,-.020306,0,-.020253,0,-.020201,0,-.02015,0,-.020098,0,-.020048,0,-.019997,0,-.019947,0,-.019897,0,-.019848,0,-.019799,0,-.019751,0,-.019702,0,-.019654,0,-.019607,0,-.01956,0,-.019513,0,-.019466,0,-.01942,0,-.019374,0,-.019329,0,-.019284,0,-.019239,0,-.019194,0,-.01915,0,-.019106,0,-.019062,0,-.019019,0,-.018976,0,-.018933,0,-.01889,0,-.018848,0,-.018806,0,-.018765,0,-.018723,0,-.018682,0,-.018641,0,-.018601,0,-.01856,0,-.01852,0,-.018481,0,-.018441,0,-.018402,0,-.018363,0,-.018324,0,-.018285,0,-.018247,0,-.018209,0,-.018171,0,-.018134,0,-.018096,0,-.018059,0,-.018022,0,-.017986,0,-.017949,0,-.017913,0,-.017877,0,-.017841,0,-.017806,0,-.01777,0,-.017735,0,-.0177,0,-.017665,0,-.017631,0,-.017597,0,-.017562,0,-.017529,0,-.017495,0,-.017461,0,-.017428,0,-.017395,0,-.017362,0,-.017329,0,-.017296,0,-.017264,0,-.017232,0,-.0172,0,-.017168,0,-.017136,0,-.017105,0,-.017073,0,-.017042,0,-.017011,0,-.01698,0,-.016949,0,-.016919,0,-.016889,0,-.016858,0,-.016828,0,-.016798,0,-.016769,0,-.016739,0,-.01671,0,-.016681,0,-.016652,0,-.016623,0,-.016594,0,-.016565,0,-.016537,0,-.016508,0,-.01648,0,-.016452,0,-.016424,0,-.016396,0,-.016369,0,-.016341,0,-.016314,0,-.016287,0,-.01626,0,-.016233,0,-.016206,0,-.016179,0,-.016153,0,-.016126,0,-.0161,0,-.016074,0,-.016048,0,-.016022,0,-.015996,0,-.01597,0,-.015945,0,-.01592,0,-.015894,0,-.015869,0,-.015844,0,-.015819,0,-.015794,0,-.01577,0,-.015745,0,-.015721,0,-.015696,0,-.015672,0,-.015648,0,-.015624,0,-.0156,0,-.015576,0,-.015552,0,-.015529,0,-.015505,0,-.015482,0,-.015459,0,-.015436,0,-.015412,0,-.01539,0,-.015367,0,-.015344,0,-.015321,0,-.015299,0,-.015276,0,-.015254,0,-.015232,0,-.01521,0,-.015187,0,-.015166,0,-.015144,0,-.015122,0,-.0151,0,-.015079,0,-.015057,0,-.015036,0,-.015014,0,-.014993,0,-.014972,0,-.014951,0,-.01493,0,-.014909,0,-.014888,0,-.014868,0,-.014847,0,-.014827,0,-.014806,0,-.014786,0,-.014766,0,-.014745,0,-.014725,0,-.014705,0,-.014685,0,-.014665,0,-.014646,0,-.014626,0,-.014606,0,-.014587,0,-.014567,0,-.014548,0,-.014529,0,-.014509,0,-.01449,0,-.014471,0,-.014452,0,-.014433,0,-.014414,0,-.014396,0,-.014377,0,-.014358,0,-.01434,0,-.014321,0,-.014303,0,-.014284,0,-.014266,0,-.014248,0,-.01423,0,-.014212,0,-.014194,0,-.014176,0,-.014158,0,-.01414,0,-.014122,0,-.014105,0,-.014087,0,-.01407,0,-.014052,0,-.014035,0,-.014017,0,-.014,0,-.013983,0,-.013966,0,-.013949,0,-.013932,0,-.013915,0,-.013898,0,-.013881,0,-.013864,0,-.013847,0,-.013831,0,-.013814,0,-.013798,0,-.013781,0,-.013765,0,-.013748,0,-.013732,0,-.013716,0,-.0137,0,-.013684,0,-.013668,0,-.013652,0,-.013636,0,-.01362,0,-.013604,0,-.013588,0,-.013572,0,-.013557,0,-.013541,0,-.013525,0,-.01351,0,-.013494,0,-.013479,0,-.013464,0,-.013448,0,-.013433,0,-.013418,0,-.013403,0,-.013388,0,-.013373,0,-.013358,0,-.013343,0,-.013328,0,-.013313,0,-.013298,0,-.013283,0,-.013269,0,-.013254,0,-.013239,0,-.013225,0,-.01321,0,-.013196,0,-.013181,0,-.013167,0,-.013153,0,-.013138,0,-.013124,0,-.01311,0,-.013096,0,-.013082,0,-.013068,0,-.013054,0,-.01304,0,-.013026,0,-.013012,0,-.012998,0,-.012984,0,-.012971,0,-.012957,0,-.012943,0,-.01293,0,-.012916,0,-.012903,0,-.012889,0,-.012876,0,-.012862,0,-.012849,0,-.012836,0,-.012822,0,-.012809,0,-.012796,0,-.012783,0,-.01277,0,-.012757,0,-.012744,0,-.012731,0,-.012718,0,-.012705,0,-.012692,0,-.012679,0,-.012666,0,-.012654,0,-.012641,0,-.012628,0,-.012616,0,-.012603,0,-.012591,0,-.012578,0,-.012566,0,-.012553,0,-.012541,0,-.012528,0,-.012516,0,-.012504,0,-.012491,0,-.012479,0,-.012467,0,-.012455,0,-.012443,0,-.012431,0,-.012419,0,-.012407,0,-.012395,0,-.012383,0,-.012371,0,-.012359,0,-.012347,0,-.012335,0,-.012323,0,-.012312,0,-.0123,0,-.012288,0,-.012277,0,-.012265,0,-.012253,0,-.012242,0,-.01223,0,-.012219,0,-.012207,0,-.012196,0,-.012185,0,-.012173,0,-.012162,0,-.012151,0,-.012139,0,-.012128,0,-.012117,0,-.012106,0,-.012095,0,-.012084,0,-.012073,0,-.012062,0,-.01205,0,-.01204,0,-.012029,0,-.012018,0,-.012007,0,-.011996,0,-.011985,0,-.011974,0,-.011963,0,-.011953,0,-.011942,0,-.011931,0,-.011921,0,-.01191,0,-.011899,0,-.011889,0,-.011878,0,-.011868,0,-.011857,0,-.011847,0,-.011836,0,-.011826,0,-.011816,0,-.011805,0,-.011795,0,-.011785,0,-.011774,0,-.011764,0,-.011754,0,-.011744,0,-.011734,0,-.011723,0,-.011713,0,-.011703,0,-.011693,0,-.011683,0,-.011673,0,-.011663,0,-.011653,0,-.011643,0,-.011633,0,-.011624,0,-.011614,0,-.011604,0,-.011594,0,-.011584,0,-.011574,0,-.011565,0,-.011555,0,-.011545,0,-.011536,0,-.011526,0,-.011516,0,-.011507,0,-.011497,0,-.011488,0,-.011478,0,-.011469,0,-.011459,0,-.01145,0,-.01144,0,-.011431,0,-.011422,0,-.011412,0,-.011403,0,-.011394,0,-.011384,0,-.011375,0,-.011366,0,-.011357,0,-.011348,0,-.011338,0,-.011329,0,-.01132,0,-.011311,0,-.011302,0,-.011293,0,-.011284,0,-.011275,0,-.011266,0,-.011257,0,-.011248,0,-.011239,0,-.01123,0,-.011221,0,-.011212,0,-.011203,0,-.011195,0,-.011186,0,-.011177,0,-.011168,0,-.011159,0,-.011151,0,-.011142,0,-.011133,0,-.011125,0,-.011116,0,-.011107,0,-.011099,0,-.01109,0,-.011082,0,-.011073,0,-.011065,0,-.011056,0,-.011048,0,-.011039,0,-.011031,0,-.011022,0,-.011014,0,-.011006,0,-.010997,0,-.010989,0,-.010981,0,-.010972,0,-.010964,0,-.010956,0,-.010947,0,-.010939,0,-.010931,0,-.010923,0,-.010915,0,-.010906,0,-.010898,0,-.01089,0,-.010882,0,-.010874,0,-.010866,0,-.010858,0,-.01085,0,-.010842,0,-.010834,0,-.010826,0,-.010818,0,-.01081,0,-.010802,0,-.010794,0,-.010786,0,-.010778,0,-.01077,0,-.010763,0,-.010755,0,-.010747,0,-.010739,0,-.010731,0,-.010724,0,-.010716,0,-.010708,0,-.0107,0,-.010693,0,-.010685,0,-.010677,0,-.01067,0,-.010662,0,-.010655,0,-.010647,0,-.010639,0,-.010632,0,-.010624,0,-.010617,0,-.010609,0,-.010602,0,-.010594,0,-.010587,0,-.010579,0,-.010572,0,-.010565,0,-.010557,0,-.01055,0,-.010542,0,-.010535,0,-.010528,0,-.01052,0,-.010513,0,-.010506,0,-.010498,0,-.010491,0,-.010484,0,-.010477,0,-.01047,0,-.010462,0,-.010455,0,-.010448,0,-.010441,0,-.010434,0,-.010427,0,-.010419,0,-.010412,0,-.010405,0,-.010398,0,-.010391,0,-.010384,0,-.010377,0,-.01037,0,-.010363,0,-.010356,0,-.010349,0,-.010342,0,-.010335,0,-.010328,0,-.010321,0,-.010314,0,-.010308,0,-.010301,0,-.010294,0,-.010287,0,-.01028,0,-.010273,0,-.010266,0,-.01026,0,-.010253,0,-.010246,0,-.010239,0,-.010233,0,-.010226,0,-.010219,0,-.010213,0,-.010206,0,-.010199,0,-.010192,0,-.010186,0,-.010179,0,-.010173,0,-.010166,0,-.010159,0,-.010153,0,-.010146,0,-.01014,0,-.010133,0,-.010127,0,-.01012,0,-.010114,0,-.010107,0,-.010101,0,-.010094,0,-.010088,0,-.010081,0,-.010075,0,-.010068,0,-.010062,0,-.010056,0,-.010049,0,-.010043,0,-.010036,0,-.01003,0,-.010024,0,-.010017,0,-.010011,0,-.010005,0,-.009999,0,-.009992,0,-.009986,0,-.00998,0,-.009974,0,-.009967,0,-.009961,0,-.009955,0,-.009949,0,-.009943,0,-.009936,0,-.00993,0,-.009924,0,-.009918,0,-.009912,0,-.009906,0,-.0099,0,-.009893,0,-.009887,0,-.009881,0,-.009875,0,-.009869,0,-.009863,0,-.009857,0,-.009851,0,-.009845,0,-.009839,0,-.009833,0,-.009827,0,-.009821,0,-.009815,0,-.009809,0,-.009803,0,-.009798,0,-.009792,0,-.009786,0,-.00978,0,-.009774,0,-.009768,0,-.009762,0,-.009756,0,-.009751,0,-.009745,0,-.009739,0,-.009733,0,-.009727,0,-.009722,0,-.009716,0,-.00971,0,-.009704,0,-.009699,0,-.009693,0,-.009687,0,-.009681,0,-.009676,0,-.00967,0,-.009664,0,-.009659,0,-.009653,0,-.009647,0,-.009642,0,-.009636,0,-.009631,0,-.009625,0,-.009619,0,-.009614,0,-.009608,0,-.009603,0,-.009597,0,-.009592,0,-.009586,0,-.00958,0,-.009575,0,-.009569,0,-.009564,0,-.009558,0,-.009553,0,-.009547,0,-.009542,0,-.009537,0,-.009531,0,-.009526,0,-.00952,0,-.009515,0,-.009509,0,-.009504,0,-.009499,0,-.009493,0,-.009488,0,-.009483,0,-.009477,0,-.009472,0,-.009466,0,-.009461,0,-.009456,0,-.009451,0,-.009445,0,-.00944,0,-.009435,0,-.009429,0,-.009424,0,-.009419,0,-.009414,0,-.009408,0,-.009403,0,-.009398,0,-.009393,0,-.009388,0,-.009382,0,-.009377,0,-.009372,0,-.009367,0,-.009362,0,-.009356,0,-.009351,0,-.009346,0,-.009341,0,-.009336,0,-.009331,0,-.009326,0,-.009321,0,-.009316,0,-.009311,0,-.009305,0,-.0093,0,-.009295,0,-.00929,0,-.009285,0,-.00928,0,-.009275,0,-.00927,0,-.009265,0,-.00926,0,-.009255,0,-.00925,0,-.009245,0,-.00924,0,-.009235,0,-.00923,0,-.009225,0,-.009221,0,-.009216,0,-.009211,0,-.009206,0,-.009201,0,-.009196,0,-.009191,0,-.009186,0,-.009181,0,-.009177,0,-.009172,0,-.009167,0,-.009162,0,-.009157,0,-.009152,0,-.009148,0,-.009143,0,-.009138,0,-.009133,0,-.009128,0,-.009124,0,-.009119,0,-.009114,0,-.009109,0,-.009105,0,-.0091,0,-.009095,0,-.00909,0,-.009086,0,-.009081,0,-.009076,0,-.009072,0,-.009067,0,-.009062,0,-.009058,0,-.009053,0,-.009048,0,-.009044,0,-.009039,0,-.009034,0,-.00903,0,-.009025,0,-.00902,0,-.009016,0,-.009011,0,-.009007,0,-.009002,0,-.008997,0,-.008993,0,-.008988,0,-.008984,0,-.008979,0,-.008975,0,-.00897,0,-.008966,0,-.008961,0,-.008957,0,-.008952,0,-.008948,0,-.008943,0,-.008939,0,-.008934,0,-.00893,0,-.008925,0,-.008921,0,-.008916,0,-.008912,0,-.008907,0,-.008903,0,-.008898,0,-.008894,0,-.00889,0,-.008885,0,-.008881,0,-.008876,0,-.008872,0,-.008868,0,-.008863,0,-.008859,0,-.008854,0,-.00885,0,-.008846,0,-.008841,0,-.008837,0,-.008833,0,-.008828,0,-.008824,0,-.00882,0],
imag:[0,.398942,0,.230329,0,.178412,0,.150786,0,.132981,0,.120286,0,.110647,0,.103006,0,.096758,0,.091524,0,.087056,0,.083185,0,.079788,0,.076776,0,.074082,0,.071652,0,.069447,0,.067434,0,.065586,0,.063882,0,.062304,0,.060838,0,.059471,0,.058192,0,.056992,0,.055863,0,.054799,0,.053793,0,.052841,0,.051938,0,.051079,0,.050262,0,.049483,0,.048739,0,.048027,0,.047346,0,.046693,0,.046066,0,.045464,0,.044885,0,.044327,0,.04379,0,.043271,0,.042771,0,.042288,0,.041821,0,.041368,0,.040931,0,.040506,0,.040095,0,.039696,0,.039309,0,.038933,0,.038567,0,.038212,0,.037866,0,.037529,0,.037202,0,.036882,0,.036571,0,.036267,0,.035971,0,.035682,0,.0354,0,.035125,0,.034856,0,.034593,0,.034335,0,.034084,0,.033838,0,.033597,0,.033361,0,.03313,0,.032904,0,.032683,0,.032465,0,.032253,0,.032044,0,.031839,0,.031638,0,.031441,0,.031248,0,.031058,0,.030871,0,.030688,0,.030508,0,.030331,0,.030157,0,.029986,0,.029818,0,.029653,0,.029491,0,.029331,0,.029174,0,.029019,0,.028866,0,.028716,0,.028569,0,.028423,0,.02828,0,.028139,0,.028,0,.027863,0,.027728,0,.027595,0,.027464,0,.027335,0,.027208,0,.027082,0,.026958,0,.026836,0,.026715,0,.026596,0,.026479,0,.026363,0,.026248,0,.026136,0,.026024,0,.025914,0,.025805,0,.025698,0,.025592,0,.025487,0,.025384,0,.025282,0,.025181,0,.025081,0,.024983,0,.024885,0,.024789,0,.024694,0,.0246,0,.024507,0,.024415,0,.024324,0,.024234,0,.024145,0,.024057,0,.02397,0,.023884,0,.023799,0,.023715,0,.023631,0,.023549,0,.023467,0,.023386,0,.023306,0,.023227,0,.023149,0,.023071,0,.022995,0,.022919,0,.022843,0,.022769,0,.022695,0,.022622,0,.02255,0,.022478,0,.022407,0,.022336,0,.022267,0,.022198,0,.022129,0,.022062,0,.021994,0,.021928,0,.021862,0,.021797,0,.021732,0,.021668,0,.021604,0,.021541,0,.021478,0,.021416,0,.021355,0,.021294,0,.021234,0,.021174,0,.021114,0,.021055,0,.020997,0,.020939,0,.020882,0,.020825,0,.020768,0,.020712,0,.020656,0,.020601,0,.020547,0,.020492,0,.020438,0,.020385,0,.020332,0,.020279,0,.020227,0,.020175,0,.020124,0,.020073,0,.020022,0,.019972,0,.019922,0,.019873,0,.019824,0,.019775,0,.019726,0,.019678,0,.019631,0,.019583,0,.019536,0,.01949,0,.019443,0,.019397,0,.019352,0,.019306,0,.019261,0,.019216,0,.019172,0,.019128,0,.019084,0,.01904,0,.018997,0,.018954,0,.018912,0,.018869,0,.018827,0,.018785,0,.018744,0,.018703,0,.018662,0,.018621,0,.018581,0,.01854,0,.018501,0,.018461,0,.018421,0,.018382,0,.018343,0,.018305,0,.018266,0,.018228,0,.01819,0,.018153,0,.018115,0,.018078,0,.018041,0,.018004,0,.017967,0,.017931,0,.017895,0,.017859,0,.017823,0,.017788,0,.017753,0,.017718,0,.017683,0,.017648,0,.017614,0,.017579,0,.017545,0,.017512,0,.017478,0,.017445,0,.017411,0,.017378,0,.017345,0,.017313,0,.01728,0,.017248,0,.017216,0,.017184,0,.017152,0,.01712,0,.017089,0,.017058,0,.017026,0,.016996,0,.016965,0,.016934,0,.016904,0,.016873,0,.016843,0,.016813,0,.016784,0,.016754,0,.016725,0,.016695,0,.016666,0,.016637,0,.016608,0,.016579,0,.016551,0,.016523,0,.016494,0,.016466,0,.016438,0,.01641,0,.016383,0,.016355,0,.016328,0,.0163,0,.016273,0,.016246,0,.016219,0,.016193,0,.016166,0,.016139,0,.016113,0,.016087,0,.016061,0,.016035,0,.016009,0,.015983,0,.015958,0,.015932,0,.015907,0,.015882,0,.015857,0,.015832,0,.015807,0,.015782,0,.015757,0,.015733,0,.015708,0,.015684,0,.01566,0,.015636,0,.015612,0,.015588,0,.015564,0,.015541,0,.015517,0,.015494,0,.01547,0,.015447,0,.015424,0,.015401,0,.015378,0,.015355,0,.015333,0,.01531,0,.015288,0,.015265,0,.015243,0,.015221,0,.015198,0,.015176,0,.015155,0,.015133,0,.015111,0,.015089,0,.015068,0,.015046,0,.015025,0,.015004,0,.014983,0,.014962,0,.014941,0,.01492,0,.014899,0,.014878,0,.014857,0,.014837,0,.014816,0,.014796,0,.014776,0,.014755,0,.014735,0,.014715,0,.014695,0,.014675,0,.014656,0,.014636,0,.014616,0,.014597,0,.014577,0,.014558,0,.014538,0,.014519,0,.0145,0,.014481,0,.014462,0,.014443,0,.014424,0,.014405,0,.014386,0,.014368,0,.014349,0,.01433,0,.014312,0,.014294,0,.014275,0,.014257,0,.014239,0,.014221,0,.014203,0,.014185,0,.014167,0,.014149,0,.014131,0,.014114,0,.014096,0,.014078,0,.014061,0,.014043,0,.014026,0,.014009,0,.013992,0,.013974,0,.013957,0,.01394,0,.013923,0,.013906,0,.013889,0,.013873,0,.013856,0,.013839,0,.013823,0,.013806,0,.013789,0,.013773,0,.013757,0,.01374,0,.013724,0,.013708,0,.013692,0,.013676,0,.01366,0,.013644,0,.013628,0,.013612,0,.013596,0,.01358,0,.013564,0,.013549,0,.013533,0,.013518,0,.013502,0,.013487,0,.013471,0,.013456,0,.013441,0,.013425,0,.01341,0,.013395,0,.01338,0,.013365,0,.01335,0,.013335,0,.01332,0,.013305,0,.013291,0,.013276,0,.013261,0,.013247,0,.013232,0,.013218,0,.013203,0,.013189,0,.013174,0,.01316,0,.013146,0,.013131,0,.013117,0,.013103,0,.013089,0,.013075,0,.013061,0,.013047,0,.013033,0,.013019,0,.013005,0,.012991,0,.012978,0,.012964,0,.01295,0,.012937,0,.012923,0,.012909,0,.012896,0,.012883,0,.012869,0,.012856,0,.012842,0,.012829,0,.012816,0,.012803,0,.01279,0,.012776,0,.012763,0,.01275,0,.012737,0,.012724,0,.012711,0,.012698,0,.012686,0,.012673,0,.01266,0,.012647,0,.012635,0,.012622,0,.012609,0,.012597,0,.012584,0,.012572,0,.012559,0,.012547,0,.012534,0,.012522,0,.01251,0,.012497,0,.012485,0,.012473,0,.012461,0,.012449,0,.012437,0,.012425,0,.012413,0,.012401,0,.012389,0,.012377,0,.012365,0,.012353,0,.012341,0,.012329,0,.012317,0,.012306,0,.012294,0,.012282,0,.012271,0,.012259,0,.012248,0,.012236,0,.012225,0,.012213,0,.012202,0,.01219,0,.012179,0,.012168,0,.012156,0,.012145,0,.012134,0,.012123,0,.012111,0,.0121,0,.012089,0,.012078,0,.012067,0,.012056,0,.012045,0,.012034,0,.012023,0,.012012,0,.012001,0,.01199,0,.01198,0,.011969,0,.011958,0,.011947,0,.011937,0,.011926,0,.011915,0,.011905,0,.011894,0,.011884,0,.011873,0,.011863,0,.011852,0,.011842,0,.011831,0,.011821,0,.01181,0,.0118,0,.01179,0,.01178,0,.011769,0,.011759,0,.011749,0,.011739,0,.011729,0,.011718,0,.011708,0,.011698,0,.011688,0,.011678,0,.011668,0,.011658,0,.011648,0,.011638,0,.011628,0,.011619,0,.011609,0,.011599,0,.011589,0,.011579,0,.01157,0,.01156,0,.01155,0,.011541,0,.011531,0,.011521,0,.011512,0,.011502,0,.011493,0,.011483,0,.011474,0,.011464,0,.011455,0,.011445,0,.011436,0,.011426,0,.011417,0,.011408,0,.011398,0,.011389,0,.01138,0,.011371,0,.011361,0,.011352,0,.011343,0,.011334,0,.011325,0,.011316,0,.011306,0,.011297,0,.011288,0,.011279,0,.01127,0,.011261,0,.011252,0,.011243,0,.011234,0,.011226,0,.011217,0,.011208,0,.011199,0,.01119,0,.011181,0,.011173,0,.011164,0,.011155,0,.011146,0,.011138,0,.011129,0,.01112,0,.011112,0,.011103,0,.011095,0,.011086,0,.011077,0,.011069,0,.01106,0,.011052,0,.011043,0,.011035,0,.011027,0,.011018,0,.01101,0,.011001,0,.010993,0,.010985,0,.010976,0,.010968,0,.01096,0,.010952,0,.010943,0,.010935,0,.010927,0,.010919,0,.01091,0,.010902,0,.010894,0,.010886,0,.010878,0,.01087,0,.010862,0,.010854,0,.010846,0,.010838,0,.01083,0,.010822,0,.010814,0,.010806,0,.010798,0,.01079,0,.010782,0,.010774,0,.010767,0,.010759,0,.010751,0,.010743,0,.010735,0,.010728,0,.01072,0,.010712,0,.010704,0,.010697,0,.010689,0,.010681,0,.010674,0,.010666,0,.010658,0,.010651,0,.010643,0,.010636,0,.010628,0,.010621,0,.010613,0,.010606,0,.010598,0,.010591,0,.010583,0,.010576,0,.010568,0,.010561,0,.010553,0,.010546,0,.010539,0,.010531,0,.010524,0,.010517,0,.010509,0,.010502,0,.010495,0,.010488,0,.01048,0,.010473,0,.010466,0,.010459,0,.010452,0,.010444,0,.010437,0,.01043,0,.010423,0,.010416,0,.010409,0,.010402,0,.010395,0,.010388,0,.010381,0,.010374,0,.010367,0,.01036,0,.010353,0,.010346,0,.010339,0,.010332,0,.010325,0,.010318,0,.010311,0,.010304,0,.010297,0,.01029,0,.010284,0,.010277,0,.01027,0,.010263,0,.010256,0,.01025,0,.010243,0,.010236,0,.010229,0,.010223,0,.010216,0,.010209,0,.010202,0,.010196,0,.010189,0,.010183,0,.010176,0,.010169,0,.010163,0,.010156,0,.01015,0,.010143,0,.010136,0,.01013,0,.010123,0,.010117,0,.01011,0,.010104,0,.010097,0,.010091,0,.010084,0,.010078,0,.010072,0,.010065,0,.010059,0,.010052,0,.010046,0,.01004,0,.010033,0,.010027,0,.010021,0,.010014,0,.010008,0,.010002,0,.009995,0,.009989,0,.009983,0,.009977,0,.00997,0,.009964,0,.009958,0,.009952,0,.009946,0,.009939,0,.009933,0,.009927,0,.009921,0,.009915,0,.009909,0,.009903,0,.009897,0,.00989,0,.009884,0,.009878,0,.009872,0,.009866,0,.00986,0,.009854,0,.009848,0,.009842,0,.009836,0,.00983,0,.009824,0,.009818,0,.009812,0,.009806,0,.009801,0,.009795,0,.009789,0,.009783,0,.009777,0,.009771,0,.009765,0,.009759,0,.009754,0,.009748,0,.009742,0,.009736,0,.00973,0,.009725,0,.009719,0,.009713,0,.009707,0,.009701,0,.009696,0,.00969,0,.009684,0,.009679,0,.009673,0,.009667,0,.009662,0,.009656,0,.00965,0,.009645,0,.009639,0,.009633,0,.009628,0,.009622,0,.009617,0,.009611,0,.009605,0,.0096,0,.009594,0,.009589,0,.009583,0,.009578,0,.009572,0,.009567,0,.009561,0,.009556,0,.00955,0,.009545,0,.009539,0,.009534,0,.009528,0,.009523,0,.009518,0,.009512,0,.009507,0,.009501,0,.009496,0,.009491,0,.009485,0,.00948,0,.009474,0,.009469,0,.009464,0,.009458,0,.009453,0,.009448,0,.009443,0,.009437,0,.009432,0,.009427,0,.009421,0,.009416,0,.009411,0,.009406,0,.009401,0,.009395,0,.00939,0,.009385,0,.00938,0,.009375,0,.009369,0,.009364,0,.009359,0,.009354,0,.009349,0,.009344,0,.009339,0,.009333,0,.009328,0,.009323,0,.009318,0,.009313,0,.009308,0,.009303,0,.009298,0,.009293,0,.009288,0,.009283,0,.009278,0,.009273,0,.009268,0,.009263,0,.009258,0,.009253,0,.009248,0,.009243,0,.009238,0,.009233,0,.009228,0,.009223,0,.009218,0,.009213,0,.009208,0,.009203,0,.009198,0,.009194,0,.009189,0,.009184,0,.009179,0,.009174,0,.009169,0,.009164,0,.00916,0,.009155,0,.00915,0,.009145,0,.00914,0,.009136,0,.009131,0,.009126,0,.009121,0,.009116,0,.009112,0,.009107,0,.009102,0,.009097,0,.009093,0,.009088,0,.009083,0,.009079,0,.009074,0,.009069,0,.009065,0,.00906,0,.009055,0,.009051,0,.009046,0,.009041,0,.009037,0,.009032,0,.009027,0,.009023,0,.009018,0,.009013,0,.009009,0,.009004,0,.009,0,.008995,0,.008991,0,.008986,0,.008981,0,.008977,0,.008972,0,.008968,0,.008963,0,.008959,0,.008954,0,.00895,0,.008945,0,.008941,0,.008936,0,.008932,0,.008927,0,.008923,0,.008918,0,.008914,0,.008909,0,.008905,0,.008901,0,.008896,0,.008892,0,.008887,0,.008883,0,.008879,0,.008874,0,.00887,0,.008865,0,.008861,0,.008857,0,.008852,0,.008848,0,.008844,0,.008839,0,.008835,0,.008831,0,.008826,0,.008822,0,.008818]}},{}],48:[function(require,module,exports){module.exports={realimag:[0,.797885,0,.460659,0,.356825,0,.301572,0,.265962,0,.240571,0,.221293,0,.206013,0,.193515,0,.183047,0,.174113,0,.16637,0,.159577,0,.153553,0,.148163,0,.143304,0,.138894,0,.134867,0,.131171,0,.127764,0,.124609,0,.121676,0,.118942,0,.116383,0,.113984,0,.111726,0,.109598,0,.107587,0,.105682,0,.103876,0,.102159,0,.100524,0,.098965,0,.097477,0,.096054,0,.094691,0,.093385,0,.092132,0,.090927,0,.089769,0,.088654,0,.087579,0,.086543,0,.085542,0,.084576,0,.083641,0,.082737,0,.081861,0,.081013,0,.08019,0,.079392,0,.078618,0,.077866,0,.077134,0,.076423,0,.075732,0,.075059,0,.074403,0,.073764,0,.073142,0,.072535,0,.071943,0,.071365,0,.070801,0,.07025,0,.069711,0,.069185,0,.068671,0,.068168,0,.067676,0,.067194,0,.066722,0,.066261,0,.065808,0,.065365,0,.064931,0,.064505,0,.064088,0,.063678,0,.063276,0,.062882,0,.062495,0,.062115,0,.061742,0,.061376,0,.061016,0,.060662,0,.060314,0,.059973,0,.059637,0,.059306,0,.058981,0,.058662,0,.058347,0,.058038,0,.057733,0,.057433,0,.057138,0,.056847,0,.056561,0,.056278,0,.056001,0,.055727,0,.055457,0,.055191,0,.054929,0,.05467,0,.054415,0,.054164,0,.053916,0,.053672,0,.05343,0,.053192,0,.052957,0,.052726,0,.052497,0,.052271,0,.052048,0,.051828,0,.051611,0,.051396,0,.051184,0,.050975,0,.050768,0,.050564,0,.050362,0,.050163,0,.049965,0,.049771,0,.049578,0,.049388,0,.0492,0,.049014,0,.04883,0,.048648,0,.048468,0,.04829,0,.048114,0,.04794,0,.047768,0,.047598,0,.047429,0,.047263,0,.047098,0,.046934,0,.046773,0,.046613,0,.046455,0,.046298,0,.046143,0,.045989,0,.045837,0,.045687,0,.045538,0,.04539,0,.045244,0,.045099,0,.044956,0,.044814,0,.044673,0,.044534,0,.044395,0,.044259,0,.044123,0,.043989,0,.043856,0,.043724,0,.043593,0,.043464,0,.043335,0,.043208,0,.043082,0,.042957,0,.042833,0,.04271,0,.042588,0,.042467,0,.042347,0,.042229,0,.042111,0,.041994,0,.041878,0,.041763,0,.041649,0,.041536,0,.041424,0,.041313,0,.041203,0,.041093,0,.040985,0,.040877,0,.04077,0,.040664,0,.040559,0,.040454,0,.040351,0,.040248,0,.040146,0,.040045,0,.039944,0,.039844,0,.039745,0,.039647,0,.03955,0,.039453,0,.039357,0,.039261,0,.039167,0,.039073,0,.038979,0,.038887,0,.038794,0,.038703,0,.038612,0,.038522,0,.038433,0,.038344,0,.038256,0,.038168,0,.038081,0,.037995,0,.037909,0,.037823,0,.037739,0,.037655,0,.037571,0,.037488,0,.037405,0,.037323,0,.037242,0,.037161,0,.037081,0,.037001,0,.036922,0,.036843,0,.036765,0,.036687,0,.036609,0,.036533,0,.036456,0,.03638,0,.036305,0,.03623,0,.036156,0,.036082,0,.036008,0,.035935,0,.035862,0,.03579,0,.035718,0,.035647,0,.035576,0,.035505,0,.035435,0,.035366,0,.035296,0,.035227,0,.035159,0,.035091,0,.035023,0,.034956,0,.034889,0,.034823,0,.034756,0,.034691,0,.034625,0,.03456,0,.034496,0,.034431,0,.034367,0,.034304,0,.034241,0,.034178,0,.034115,0,.034053,0,.033991,0,.03393,0,.033868,0,.033807,0,.033747,0,.033687,0,.033627,0,.033567,0,.033508,0,.033449,0,.03339,0,.033332,0,.033274,0,.033216,0,.033159,0,.033102,0,.033045,0,.032988,0,.032932,0,.032876,0,.032821,0,.032765,0,.03271,0,.032655,0,.032601,0,.032546,0,.032492,0,.032439,0,.032385,0,.032332,0,.032279,0,.032226,0,.032174,0,.032122,0,.03207,0,.032018,0,.031967,0,.031915,0,.031864,0,.031814,0,.031763,0,.031713,0,.031663,0,.031613,0,.031564,0,.031515,0,.031465,0,.031417,0,.031368,0,.03132,0,.031272,0,.031224,0,.031176,0,.031128,0,.031081,0,.031034,0,.030987,0,.030941,0,.030894,0,.030848,0,.030802,0,.030756,0,.030711,0,.030665,0,.03062,0,.030575,0,.03053,0,.030486,0,.030441,0,.030397,0,.030353,0,.030309,0,.030265,0,.030222,0,.030179,0,.030136,0,.030093,0,.03005,0,.030008,0,.029965,0,.029923,0,.029881,0,.029839,0,.029798,0,.029756,0,.029715,0,.029674,0,.029633,0,.029592,0,.029551,0,.029511,0,.029471,0,.02943,0,.02939,0,.029351,0,.029311,0,.029272,0,.029232,0,.029193,0,.029154,0,.029115,0,.029077,0,.029038,0,.029,0,.028961,0,.028923,0,.028885,0,.028848,0,.02881,0,.028772,0,.028735,0,.028698,0,.028661,0,.028624,0,.028587,0,.028551,0,.028514,0,.028478,0,.028442,0,.028405,0,.02837,0,.028334,0,.028298,0,.028263,0,.028227,0,.028192,0,.028157,0,.028122,0,.028087,0,.028052,0,.028018,0,.027983,0,.027949,0,.027914,0,.02788,0,.027846,0,.027813,0,.027779,0,.027745,0,.027712,0,.027678,0,.027645,0,.027612,0,.027579,0,.027546,0,.027513,0,.027481,0,.027448,0,.027416,0,.027383,0,.027351,0,.027319,0,.027287,0,.027255,0,.027223,0,.027192,0,.02716,0,.027129,0,.027098,0,.027066,0,.027035,0,.027004,0,.026973,0,.026943,0,.026912,0,.026881,0,.026851,0,.026821,0,.02679,0,.02676,0,.02673,0,.0267,0,.02667,0,.026641,0,.026611,0,.026581,0,.026552,0,.026523,0,.026493,0,.026464,0,.026435,0,.026406,0,.026377,0,.026348,0,.02632,0,.026291,0,.026263,0,.026234,0,.026206,0,.026178,0,.02615,0,.026122,0,.026094,0,.026066,0,.026038,0,.02601,0,.025983,0,.025955,0,.025928,0,.0259,0,.025873,0,.025846,0,.025819,0,.025792,0,.025765,0,.025738,0,.025711,0,.025685,0,.025658,0,.025632,0,.025605,0,.025579,0,.025553,0,.025527,0,.025501,0,.025474,0,.025449,0,.025423,0,.025397,0,.025371,0,.025346,0,.02532,0,.025295,0,.025269,0,.025244,0,.025219,0,.025194,0,.025168,0,.025143,0,.025119,0,.025094,0,.025069,0,.025044,0,.02502,0,.024995,0,.02497,0,.024946,0,.024922,0,.024897,0,.024873,0,.024849,0,.024825,0,.024801,0,.024777,0,.024753,0,.024729,0,.024706,0,.024682,0,.024659,0,.024635,0,.024612,0,.024588,0,.024565,0,.024542,0,.024518,0,.024495,0,.024472,0,.024449,0,.024426,0,.024403,0,.024381,0,.024358,0,.024335,0,.024313,0,.02429,0,.024268,0,.024245,0,.024223,0,.024201,0,.024178,0,.024156,0,.024134,0,.024112,0,.02409,0,.024068,0,.024046,0,.024024,0,.024003,0,.023981,0,.023959,0,.023938,0,.023916,0,.023895,0,.023873,0,.023852,0,.023831,0,.023809,0,.023788,0,.023767,0,.023746,0,.023725,0,.023704,0,.023683,0,.023662,0,.023642,0,.023621,0,.0236,0,.02358,0,.023559,0,.023539,0,.023518,0,.023498,0,.023477,0,.023457,0,.023437,0,.023417,0,.023396,0,.023376,0,.023356,0,.023336,0,.023316,0,.023297,0,.023277,0,.023257,0,.023237,0,.023217,0,.023198,0,.023178,0,.023159,0,.023139,0,.02312,0,.0231,0,.023081,0,.023062,0,.023043,0,.023023,0,.023004,0,.022985,0,.022966,0,.022947,0,.022928,0,.022909,0,.02289,0,.022872,0,.022853,0,.022834,0,.022815,0,.022797,0,.022778,0,.02276,0,.022741,0,.022723,0,.022704,0,.022686,0,.022668,0,.022649,0,.022631,0,.022613,0,.022595,0,.022577,0,.022559,0,.022541,0,.022523,0,.022505,0,.022487,0,.022469,0,.022451,0,.022433,0,.022416,0,.022398,0,.02238,0,.022363,0,.022345,0,.022328,0,.02231,0,.022293,0,.022275,0,.022258,0,.022241,0,.022224,0,.022206,0,.022189,0,.022172,0,.022155,0,.022138,0,.022121,0,.022104,0,.022087,0,.02207,0,.022053,0,.022036,0,.02202,0,.022003,0,.021986,0,.021969,0,.021953,0,.021936,0,.02192,0,.021903,0,.021887,0,.02187,0,.021854,0,.021837,0,.021821,0,.021805,0,.021788,0,.021772,0,.021756,0,.02174,0,.021724,0,.021708,0,.021692,0,.021676,0,.02166,0,.021644,0,.021628,0,.021612,0,.021596,0,.02158,0,.021564,0,.021549,0,.021533,0,.021517,0,.021502,0,.021486,0,.021471,0,.021455,0,.02144,0,.021424,0,.021409,0,.021393,0,.021378,0,.021363,0,.021347,0,.021332,0,.021317,0,.021302,0,.021286,0,.021271,0,.021256,0,.021241,0,.021226,0,.021211,0,.021196,0,.021181,0,.021166,0,.021151,0,.021136,0,.021122,0,.021107,0,.021092,0,.021077,0,.021063,0,.021048,0,.021033,0,.021019,0,.021004,0,.02099,0,.020975,0,.020961,0,.020946,0,.020932,0,.020917,0,.020903,0,.020889,0,.020874,0,.02086,0,.020846,0,.020832,0,.020818,0,.020803,0,.020789,0,.020775,0,.020761,0,.020747,0,.020733,0,.020719,0,.020705,0,.020691,0,.020677,0,.020663,0,.02065,0,.020636,0,.020622,0,.020608,0,.020594,0,.020581,0,.020567,0,.020553,0,.02054,0,.020526,0,.020513,0,.020499,0,.020486,0,.020472,0,.020459,0,.020445,0,.020432,0,.020418,0,.020405,0,.020392,0,.020378,0,.020365,0,.020352,0,.020339,0,.020325,0,.020312,0,.020299,0,.020286,0,.020273,0,.02026,0,.020247,0,.020234,0,.020221,0,.020208,0,.020195,0,.020182,0,.020169,0,.020156,0,.020143,0,.02013,0,.020118,0,.020105,0,.020092,0,.020079,0,.020067,0,.020054,0,.020041,0,.020029,0,.020016,0,.020003,0,.019991,0,.019978,0,.019966,0,.019953,0,.019941,0,.019928,0,.019916,0,.019904,0,.019891,0,.019879,0,.019867,0,.019854,0,.019842,0,.01983,0,.019817,0,.019805,0,.019793,0,.019781,0,.019769,0,.019757,0,.019745,0,.019732,0,.01972,0,.019708,0,.019696,0,.019684,0,.019672,0,.01966,0,.019649,0,.019637,0,.019625,0,.019613,0,.019601,0,.019589,0,.019577,0,.019566,0,.019554,0,.019542,0,.01953,0,.019519,0,.019507,0,.019495,0,.019484,0,.019472,0,.019461,0,.019449,0,.019437,0,.019426,0,.019414,0,.019403,0,.019392,0,.01938,0,.019369,0,.019357,0,.019346,0,.019334,0,.019323,0,.019312,0,.019301,0,.019289,0,.019278,0,.019267,0,.019256,0,.019244,0,.019233,0,.019222,0,.019211,0,.0192,0,.019189,0,.019177,0,.019166,0,.019155,0,.019144,0,.019133,0,.019122,0,.019111,0,.0191,0,.019089,0,.019079,0,.019068,0,.019057,0,.019046,0,.019035,0,.019024,0,.019013,0,.019003,0,.018992,0,.018981,0,.01897,0,.01896,0,.018949,0,.018938,0,.018928,0,.018917,0,.018906,0,.018896,0,.018885,0,.018875,0,.018864,0,.018854,0,.018843,0,.018832,0,.018822,0,.018812,0,.018801,0,.018791,0,.01878,0,.01877,0,.018759,0,.018749,0,.018739,0,.018728,0,.018718,0,.018708,0,.018698,0,.018687,0,.018677,0,.018667,0,.018657,0,.018646,0,.018636,0,.018626,0,.018616,0,.018606,0,.018596,0,.018586,0,.018576,0,.018565,0,.018555,0,.018545,0,.018535,0,.018525,0,.018515,0,.018505,0,.018496,0,.018486,0,.018476,0,.018466,0,.018456,0,.018446,0,.018436,0,.018426,0,.018417,0,.018407,0,.018397,0,.018387,0,.018377,0,.018368,0,.018358,0,.018348,0,.018339,0,.018329,0,.018319,0,.01831,0,.0183,0,.01829,0,.018281,0,.018271,0,.018262,0,.018252,0,.018242,0,.018233,0,.018223,0,.018214,0,.018204,0,.018195,0,.018185,0,.018176,0,.018167,0,.018157,0,.018148,0,.018138,0,.018129,0,.01812,0,.01811,0,.018101,0,.018092,0,.018082,0,.018073,0,.018064,0,.018055,0,.018045,0,.018036,0,.018027,0,.018018,0,.018009,0,.017999,0,.01799,0,.017981,0,.017972,0,.017963,0,.017954,0,.017945,0,.017936,0,.017927,0,.017918,0,.017909,0,.0179,0,.017891,0,.017882,0,.017873,0,.017864,0,.017855,0,.017846,0,.017837,0,.017828,0,.017819,0,.01781,0,.017801,0,.017792,0,.017784,0,.017775,0,.017766,0,.017757,0,.017748,0,.01774,0,.017731,0,.017722,0,.017713,0,.017705,0,.017696,0,.017687,0,.017678,0,.01767,0,.017661,0,.017652,0,.017644,0,.017635]}},{}],49:[function(require,module,exports){module.exports={real:[0,.63662,0,.212207,0,.127324,0,.090946,0,.070736,0,.057875,0,.048971,0,.042441,0,.037448,0,.033506,0,.030315,0,.027679,0,.025465,0,.023579,0,.021952,0,.020536,0,.019292,0,.018189,0,.017206,0,.016324,0,.015527,0,.014805,0,.014147,0,.013545,0,.012992,0,.012483,0,.012012,0,.011575,0,.011169,0,.01079,0,.010436,0,.010105,0,.009794,0,.009502,0,.009226,0,.008966,0,.008721,0,.008488,0,.008268,0,.008058,0,.00786,0,.00767,0,.00749,0,.007317,0,.007153,0,.006996,0,.006845,0,.006701,0,.006563,0,.006431,0,.006303,0,.006181,0,.006063,0,.00595,0,.005841,0,.005735,0,.005634,0,.005536,0,.005441,0,.00535,0,.005261,0,.005176,0,.005093,0,.005013,0,.004935,0,.00486,0,.004787,0,.004716,0,.004647,0,.00458,0,.004515,0,.004452,0,.00439,0,.004331,0,.004273,0,.004216,0,.004161,0,.004107,0,.004055,0,.004004,0,.003954,0,.003906,0,.003858,0,.003812,0,.003767,0,.003723,0,.00368,0,.003638,0,.003597,0,.003557,0,.003517,0,.003479,0,.003441,0,.003404,0,.003368,0,.003333,0,.003299,0,.003265,0,.003232,0,.003199,0,.003167,0,.003136,0,.003105,0,.003075,0,.003046,0,.003017,0,.002989,0,.002961,0,.002934,0,.002907,0,.002881,0,.002855,0,.002829,0,.002804,0,.00278,0,.002756,0,.002732,0,.002709,0,.002686,0,.002664,0,.002642,0,.00262,0,.002598,0,.002577,0,.002557,0,.002536,0,.002516,0,.002497,0,.002477,0,.002458,0,.002439,0,.002421,0,.002402,0,.002384,0,.002367,0,.002349,0,.002332,0,.002315,0,.002298,0,.002282,0,.002266,0,.00225,0,.002234,0,.002218,0,.002203,0,.002188,0,.002173,0,.002158,0,.002144,0,.002129,0,.002115,0,.002101,0,.002087,0,.002074,0,.00206,0,.002047,0,.002034,0,.002021,0,.002008,0,.001996,0,.001983,0,.001971,0,.001959,0,.001947,0,.001935,0,.001923,0,.001912,0,.0019,0,.001889,0,.001878,0,.001867,0,.001856,0,.001845,0,.001835,0,.001824,0,.001814,0,.001803,0,.001793,0,.001783,0,.001773,0,.001763,0,.001754,0,.001744,0,.001735,0,.001725,0,.001716,0,.001707,0,.001698,0,.001689,0,.00168,0,.001671,0,.001662,0,.001654,0,.001645,0,.001637,0,.001628,0,.00162,0,.001612,0,.001604,0,.001596,0,.001588,0,.00158,0,.001572,0,.001564,0,.001557,0,.001549,0,.001541,0,.001534,0,.001527,0,.001519,0,.001512,0,.001505,0,.001498,0,.001491,0,.001484,0,.001477,0,.00147,0,.001463,0,.001457,0,.00145,0,.001444,0,.001437,0,.001431,0,.001424,0,.001418,0,.001412,0,.001405,0,.001399,0,.001393,0,.001387,0,.001381,0,.001375,0,.001369,0,.001363,0,.001357,0,.001352,0,.001346,0,.00134,0,.001335,0,.001329,0,.001324,0,.001318,0,.001313,0,.001307,0,.001302,0,.001297,0,.001291,0,.001286,0,.001281,0,.001276,0,.001271,0,.001266,0,.001261,0,.001256,0,.001251,0,.001246,0,.001241,0,.001236,0,.001231,0,.001227,0,.001222,0,.001217,0,.001213,0,.001208,0,.001203,0,.001199,0,.001194,0,.00119,0,.001186,0,.001181,0,.001177,0,.001172,0,.001168,0,.001164,0,.00116,0,.001155,0,.001151,0,.001147,0,.001143,0,.001139,0,.001135,0,.001131,0,.001127,0,.001123,0,.001119,0,.001115,0,.001111,0,.001107,0,.001103,0,.0011,0,.001096,0,.001092,0,.001088,0,.001085,0,.001081,0,.001077,0,.001074,0,.00107,0,.001066,0,.001063,0,.001059,0,.001056,0,.001052,0,.001049,0,.001045,0,.001042,0,.001039,0,.001035,0,.001032,0,.001028,0,.001025,0,.001022,0,.001019,0,.001015,0,.001012,0,.001009,0,.001006,0,.001003,0,999e-6,0,996e-6,0,993e-6,0,99e-5,0,987e-6,0,984e-6,0,981e-6,0,978e-6,0,975e-6,0,972e-6,0,969e-6,0,966e-6,0,963e-6,0,96e-5,0,957e-6,0,954e-6,0,952e-6,0,949e-6,0,946e-6,0,943e-6,0,94e-5,0,938e-6,0,935e-6,0,932e-6,0,929e-6,0,927e-6,0,924e-6,0,921e-6,0,919e-6,0,916e-6,0,913e-6,0,911e-6,0,908e-6,0,906e-6,0,903e-6,0,9e-4,0,898e-6,0,895e-6,0,893e-6,0,89e-5,0,888e-6,0,885e-6,0,883e-6,0,881e-6,0,878e-6,0,876e-6,0,873e-6,0,871e-6,0,869e-6,0,866e-6,0,864e-6,0,861e-6,0,859e-6,0,857e-6,0,855e-6,0,852e-6,0,85e-5,0,848e-6,0,845e-6,0,843e-6,0,841e-6,0,839e-6,0,837e-6,0,834e-6,0,832e-6,0,83e-5,0,828e-6,0,826e-6,0,824e-6,0,821e-6,0,819e-6,0,817e-6,0,815e-6,0,813e-6,0,811e-6,0,809e-6,0,807e-6,0,805e-6,0,803e-6,0,801e-6,0,799e-6,0,797e-6,0,795e-6,0,793e-6,0,791e-6,0,789e-6,0,787e-6,0,785e-6,0,783e-6,0,781e-6,0,779e-6,0,777e-6,0,775e-6,0,774e-6,0,772e-6,0,77e-5,0,768e-6,0,766e-6,0,764e-6,0,762e-6,0,761e-6,0,759e-6,0,757e-6,0,755e-6,0,753e-6,0,752e-6,0,75e-5,0,748e-6,0,746e-6,0,745e-6,0,743e-6,0,741e-6,0,739e-6,0,738e-6,0,736e-6,0,734e-6,0,733e-6,0,731e-6,0,729e-6,0,728e-6,0,726e-6,0,724e-6,0,723e-6,0,721e-6,0,719e-6,0,718e-6,0,716e-6,0,715e-6,0,713e-6,0,711e-6,0,71e-5,0,708e-6,0,707e-6,0,705e-6,0,703e-6,0,702e-6,0,7e-4,0,699e-6,0,697e-6,0,696e-6,0,694e-6,0,693e-6,0,691e-6,0,69e-5,0,688e-6,0,687e-6,0,685e-6,0,684e-6,0,682e-6,0,681e-6,0,679e-6,0,678e-6,0,677e-6,0,675e-6,0,674e-6,0,672e-6,0,671e-6,0,669e-6,0,668e-6,0,667e-6,0,665e-6,0,664e-6,0,662e-6,0,661e-6,0,66e-5,0,658e-6,0,657e-6,0,656e-6,0,654e-6,0,653e-6,0,652e-6,0,65e-5,0,649e-6,0,648e-6,0,646e-6,0,645e-6,0,644e-6,0,642e-6,0,641e-6,0,64e-5,0,639e-6,0,637e-6,0,636e-6,0,635e-6,0,633e-6,0,632e-6,0,631e-6,0,63e-5,0,628e-6,0,627e-6,0,626e-6,0,625e-6,0,624e-6,0,622e-6,0,621e-6,0,62e-5,0,619e-6,0,617e-6,0,616e-6,0,615e-6,0,614e-6,0,613e-6,0,612e-6,0,61e-5,0,609e-6,0,608e-6,0,607e-6,0,606e-6,0,605e-6,0,603e-6,0,602e-6,0,601e-6,0,6e-4,0,599e-6,0,598e-6,0,597e-6,0,596e-6,0,594e-6,0,593e-6,0,592e-6,0,591e-6,0,59e-5,0,589e-6,0,588e-6,0,587e-6,0,586e-6,0,585e-6,0,584e-6,0,582e-6,0,581e-6,0,58e-5,0,579e-6,0,578e-6,0,577e-6,0,576e-6,0,575e-6,0,574e-6,0,573e-6,0,572e-6,0,571e-6,0,57e-5,0,569e-6,0,568e-6,0,567e-6,0,566e-6,0,565e-6,0,564e-6,0,563e-6,0,562e-6,0,561e-6,0,56e-5,0,559e-6,0,558e-6,0,557e-6,0,556e-6,0,555e-6,0,554e-6,0,553e-6,0,552e-6,0,551e-6,0,55e-5,0,549e-6,0,548e-6,0,547e-6,0,546e-6,0,546e-6,0,545e-6,0,544e-6,0,543e-6,0,542e-6,0,541e-6,0,54e-5,0,539e-6,0,538e-6,0,537e-6,0,536e-6,0,535e-6,0,535e-6,0,534e-6,0,533e-6,0,532e-6,0,531e-6,0,53e-5,0,529e-6,0,528e-6,0,527e-6,0,527e-6,0,526e-6,0,525e-6,0,524e-6,0,523e-6,0,522e-6,0,521e-6,0,521e-6,0,52e-5,0,519e-6,0,518e-6,0,517e-6,0,516e-6,0,515e-6,0,515e-6,0,514e-6,0,513e-6,0,512e-6,0,511e-6,0,511e-6,0,51e-5,0,509e-6,0,508e-6,0,507e-6,0,506e-6,0,506e-6,0,505e-6,0,504e-6,0,503e-6,0,502e-6,0,502e-6,0,501e-6,0,5e-4,0,499e-6,0,499e-6,0,498e-6,0,497e-6,0,496e-6,0,495e-6,0,495e-6,0,494e-6,0,493e-6,0,492e-6,0,492e-6,0,491e-6,0,49e-5,0,489e-6,0,489e-6,0,488e-6,0,487e-6,0,486e-6,0,486e-6,0,485e-6,0,484e-6,0,483e-6,0,483e-6,0,482e-6,0,481e-6,0,48e-5,0,48e-5,0,479e-6,0,478e-6,0,478e-6,0,477e-6,0,476e-6,0,475e-6,0,475e-6,0,474e-6,0,473e-6,0,473e-6,0,472e-6,0,471e-6,0,471e-6,0,47e-5,0,469e-6,0,468e-6,0,468e-6,0,467e-6,0,466e-6,0,466e-6,0,465e-6,0,464e-6,0,464e-6,0,463e-6,0,462e-6,0,462e-6,0,461e-6,0,46e-5,0,46e-5,0,459e-6,0,458e-6,0,458e-6,0,457e-6,0,456e-6,0,456e-6,0,455e-6,0,454e-6,0,454e-6,0,453e-6,0,452e-6,0,452e-6,0,451e-6,0,451e-6,0,45e-5,0,449e-6,0,449e-6,0,448e-6,0,447e-6,0,447e-6,0,446e-6,0,446e-6,0,445e-6,0,444e-6,0,444e-6,0,443e-6,0,442e-6,0,442e-6,0,441e-6,0,441e-6,0,44e-5,0,439e-6,0,439e-6,0,438e-6,0,438e-6,0,437e-6,0,436e-6,0,436e-6,0,435e-6,0,435e-6,0,434e-6,0,433e-6,0,433e-6,0,432e-6,0,432e-6,0,431e-6,0,43e-5,0,43e-5,0,429e-6,0,429e-6,0,428e-6,0,428e-6,0,427e-6,0,426e-6,0,426e-6,0,425e-6,0,425e-6,0,424e-6,0,424e-6,0,423e-6,0,422e-6,0,422e-6,0,421e-6,0,421e-6,0,42e-5,0,42e-5,0,419e-6,0,419e-6,0,418e-6,0,417e-6,0,417e-6,0,416e-6,0,416e-6,0,415e-6,0,415e-6,0,414e-6,0,414e-6,0,413e-6,0,413e-6,0,412e-6,0,412e-6,0,411e-6,0,41e-5,0,41e-5,0,409e-6,0,409e-6,0,408e-6,0,408e-6,0,407e-6,0,407e-6,0,406e-6,0,406e-6,0,405e-6,0,405e-6,0,404e-6,0,404e-6,0,403e-6,0,403e-6,0,402e-6,0,402e-6,0,401e-6,0,401e-6,0,4e-4,0,4e-4,0,399e-6,0,399e-6,0,398e-6,0,398e-6,0,397e-6,0,397e-6,0,396e-6,0,396e-6,0,395e-6,0,395e-6,0,394e-6,0,394e-6,0,393e-6,0,393e-6,0,392e-6,0,392e-6,0,391e-6,0,391e-6,0,39e-5,0,39e-5,0,389e-6,0,389e-6,0,388e-6,0,388e-6,0,387e-6,0,387e-6,0,387e-6,0,386e-6,0,386e-6,0,385e-6,0,385e-6,0,384e-6,0,384e-6,0,383e-6,0,383e-6,0,382e-6,0,382e-6,0,381e-6,0,381e-6,0,381e-6,0,38e-5,0,38e-5,0,379e-6,0,379e-6,0,378e-6,0,378e-6,0,377e-6,0,377e-6,0,376e-6,0,376e-6,0,376e-6,0,375e-6,0,375e-6,0,374e-6,0,374e-6,0,373e-6,0,373e-6,0,373e-6,0,372e-6,0,372e-6,0,371e-6,0,371e-6,0,37e-5,0,37e-5,0,369e-6,0,369e-6,0,369e-6,0,368e-6,0,368e-6,0,367e-6,0,367e-6,0,367e-6,0,366e-6,0,366e-6,0,365e-6,0,365e-6,0,364e-6,0,364e-6,0,364e-6,0,363e-6,0,363e-6,0,362e-6,0,362e-6,0,362e-6,0,361e-6,0,361e-6,0,36e-5,0,36e-5,0,359e-6,0,359e-6,0,359e-6,0,358e-6,0,358e-6,0,357e-6,0,357e-6,0,357e-6,0,356e-6,0,356e-6,0,355e-6,0,355e-6,0,355e-6,0,354e-6,0,354e-6,0,353e-6,0,353e-6,0,353e-6,0,352e-6,0,352e-6,0,352e-6,0,351e-6,0,351e-6,0,35e-5,0,35e-5,0,35e-5,0,349e-6,0,349e-6,0,348e-6,0,348e-6,0,348e-6,0,347e-6,0,347e-6,0,347e-6,0,346e-6,0,346e-6,0,345e-6,0,345e-6,0,345e-6,0,344e-6,0,344e-6,0,344e-6,0,343e-6,0,343e-6,0,342e-6,0,342e-6,0,342e-6,0,341e-6,0,341e-6,0,341e-6,0,34e-5,0,34e-5,0,34e-5,0,339e-6,0,339e-6,0,338e-6,0,338e-6,0,338e-6,0,337e-6,0,337e-6,0,337e-6,0,336e-6,0,336e-6,0,336e-6,0,335e-6,0,335e-6,0,335e-6,0,334e-6,0,334e-6,0,333e-6,0,333e-6,0,333e-6,0,332e-6,0,332e-6,0,332e-6,0,331e-6,0,331e-6,0,331e-6,0,33e-5,0,33e-5,0,33e-5,0,329e-6,0,329e-6,0,329e-6,0,328e-6,0,328e-6,0,328e-6,0,327e-6,0,327e-6,0,327e-6,0,326e-6,0,326e-6,0,326e-6,0,325e-6,0,325e-6,0,325e-6,0,324e-6,0,324e-6,0,324e-6,0,323e-6,0,323e-6,0,323e-6,0,322e-6,0,322e-6,0,322e-6,0,321e-6,0,321e-6,0,321e-6,0,32e-5,0,32e-5,0,32e-5,0,319e-6,0,319e-6,0,319e-6,0,318e-6,0,318e-6,0,318e-6,0,318e-6,0,317e-6,0,317e-6,0,317e-6,0,316e-6,0,316e-6,0,316e-6,0,315e-6,0,315e-6,0,315e-6,0,314e-6,0,314e-6,0,314e-6,0,313e-6,0,313e-6,0,313e-6,0,313e-6,0,312e-6,0,312e-6,0,312e-6,0,311e-6,0,311e-6],
imag:[0,-.63662,0,-.212207,0,-.127324,0,-.090946,0,-.070736,0,-.057875,0,-.048971,0,-.042441,0,-.037448,0,-.033506,0,-.030315,0,-.027679,0,-.025465,0,-.023579,0,-.021952,0,-.020536,0,-.019292,0,-.018189,0,-.017206,0,-.016324,0,-.015527,0,-.014805,0,-.014147,0,-.013545,0,-.012992,0,-.012483,0,-.012012,0,-.011575,0,-.011169,0,-.01079,0,-.010436,0,-.010105,0,-.009794,0,-.009502,0,-.009226,0,-.008966,0,-.008721,0,-.008488,0,-.008268,0,-.008058,0,-.00786,0,-.00767,0,-.00749,0,-.007317,0,-.007153,0,-.006996,0,-.006845,0,-.006701,0,-.006563,0,-.006431,0,-.006303,0,-.006181,0,-.006063,0,-.00595,0,-.005841,0,-.005735,0,-.005634,0,-.005536,0,-.005441,0,-.00535,0,-.005261,0,-.005176,0,-.005093,0,-.005013,0,-.004935,0,-.00486,0,-.004787,0,-.004716,0,-.004647,0,-.00458,0,-.004515,0,-.004452,0,-.00439,0,-.004331,0,-.004273,0,-.004216,0,-.004161,0,-.004107,0,-.004055,0,-.004004,0,-.003954,0,-.003906,0,-.003858,0,-.003812,0,-.003767,0,-.003723,0,-.00368,0,-.003638,0,-.003597,0,-.003557,0,-.003517,0,-.003479,0,-.003441,0,-.003404,0,-.003368,0,-.003333,0,-.003299,0,-.003265,0,-.003232,0,-.003199,0,-.003167,0,-.003136,0,-.003105,0,-.003075,0,-.003046,0,-.003017,0,-.002989,0,-.002961,0,-.002934,0,-.002907,0,-.002881,0,-.002855,0,-.002829,0,-.002804,0,-.00278,0,-.002756,0,-.002732,0,-.002709,0,-.002686,0,-.002664,0,-.002642,0,-.00262,0,-.002598,0,-.002577,0,-.002557,0,-.002536,0,-.002516,0,-.002497,0,-.002477,0,-.002458,0,-.002439,0,-.002421,0,-.002402,0,-.002384,0,-.002367,0,-.002349,0,-.002332,0,-.002315,0,-.002298,0,-.002282,0,-.002266,0,-.00225,0,-.002234,0,-.002218,0,-.002203,0,-.002188,0,-.002173,0,-.002158,0,-.002144,0,-.002129,0,-.002115,0,-.002101,0,-.002087,0,-.002074,0,-.00206,0,-.002047,0,-.002034,0,-.002021,0,-.002008,0,-.001996,0,-.001983,0,-.001971,0,-.001959,0,-.001947,0,-.001935,0,-.001923,0,-.001912,0,-.0019,0,-.001889,0,-.001878,0,-.001867,0,-.001856,0,-.001845,0,-.001835,0,-.001824,0,-.001814,0,-.001803,0,-.001793,0,-.001783,0,-.001773,0,-.001763,0,-.001754,0,-.001744,0,-.001735,0,-.001725,0,-.001716,0,-.001707,0,-.001698,0,-.001689,0,-.00168,0,-.001671,0,-.001662,0,-.001654,0,-.001645,0,-.001637,0,-.001628,0,-.00162,0,-.001612,0,-.001604,0,-.001596,0,-.001588,0,-.00158,0,-.001572,0,-.001564,0,-.001557,0,-.001549,0,-.001541,0,-.001534,0,-.001527,0,-.001519,0,-.001512,0,-.001505,0,-.001498,0,-.001491,0,-.001484,0,-.001477,0,-.00147,0,-.001463,0,-.001457,0,-.00145,0,-.001444,0,-.001437,0,-.001431,0,-.001424,0,-.001418,0,-.001412,0,-.001405,0,-.001399,0,-.001393,0,-.001387,0,-.001381,0,-.001375,0,-.001369,0,-.001363,0,-.001357,0,-.001352,0,-.001346,0,-.00134,0,-.001335,0,-.001329,0,-.001324,0,-.001318,0,-.001313,0,-.001307,0,-.001302,0,-.001297,0,-.001291,0,-.001286,0,-.001281,0,-.001276,0,-.001271,0,-.001266,0,-.001261,0,-.001256,0,-.001251,0,-.001246,0,-.001241,0,-.001236,0,-.001231,0,-.001227,0,-.001222,0,-.001217,0,-.001213,0,-.001208,0,-.001203,0,-.001199,0,-.001194,0,-.00119,0,-.001186,0,-.001181,0,-.001177,0,-.001172,0,-.001168,0,-.001164,0,-.00116,0,-.001155,0,-.001151,0,-.001147,0,-.001143,0,-.001139,0,-.001135,0,-.001131,0,-.001127,0,-.001123,0,-.001119,0,-.001115,0,-.001111,0,-.001107,0,-.001103,0,-.0011,0,-.001096,0,-.001092,0,-.001088,0,-.001085,0,-.001081,0,-.001077,0,-.001074,0,-.00107,0,-.001066,0,-.001063,0,-.001059,0,-.001056,0,-.001052,0,-.001049,0,-.001045,0,-.001042,0,-.001039,0,-.001035,0,-.001032,0,-.001028,0,-.001025,0,-.001022,0,-.001019,0,-.001015,0,-.001012,0,-.001009,0,-.001006,0,-.001003,0,-999e-6,0,-996e-6,0,-993e-6,0,-99e-5,0,-987e-6,0,-984e-6,0,-981e-6,0,-978e-6,0,-975e-6,0,-972e-6,0,-969e-6,0,-966e-6,0,-963e-6,0,-96e-5,0,-957e-6,0,-954e-6,0,-952e-6,0,-949e-6,0,-946e-6,0,-943e-6,0,-94e-5,0,-938e-6,0,-935e-6,0,-932e-6,0,-929e-6,0,-927e-6,0,-924e-6,0,-921e-6,0,-919e-6,0,-916e-6,0,-913e-6,0,-911e-6,0,-908e-6,0,-906e-6,0,-903e-6,0,-9e-4,0,-898e-6,0,-895e-6,0,-893e-6,0,-89e-5,0,-888e-6,0,-885e-6,0,-883e-6,0,-881e-6,0,-878e-6,0,-876e-6,0,-873e-6,0,-871e-6,0,-869e-6,0,-866e-6,0,-864e-6,0,-861e-6,0,-859e-6,0,-857e-6,0,-855e-6,0,-852e-6,0,-85e-5,0,-848e-6,0,-845e-6,0,-843e-6,0,-841e-6,0,-839e-6,0,-837e-6,0,-834e-6,0,-832e-6,0,-83e-5,0,-828e-6,0,-826e-6,0,-824e-6,0,-821e-6,0,-819e-6,0,-817e-6,0,-815e-6,0,-813e-6,0,-811e-6,0,-809e-6,0,-807e-6,0,-805e-6,0,-803e-6,0,-801e-6,0,-799e-6,0,-797e-6,0,-795e-6,0,-793e-6,0,-791e-6,0,-789e-6,0,-787e-6,0,-785e-6,0,-783e-6,0,-781e-6,0,-779e-6,0,-777e-6,0,-775e-6,0,-774e-6,0,-772e-6,0,-77e-5,0,-768e-6,0,-766e-6,0,-764e-6,0,-762e-6,0,-761e-6,0,-759e-6,0,-757e-6,0,-755e-6,0,-753e-6,0,-752e-6,0,-75e-5,0,-748e-6,0,-746e-6,0,-745e-6,0,-743e-6,0,-741e-6,0,-739e-6,0,-738e-6,0,-736e-6,0,-734e-6,0,-733e-6,0,-731e-6,0,-729e-6,0,-728e-6,0,-726e-6,0,-724e-6,0,-723e-6,0,-721e-6,0,-719e-6,0,-718e-6,0,-716e-6,0,-715e-6,0,-713e-6,0,-711e-6,0,-71e-5,0,-708e-6,0,-707e-6,0,-705e-6,0,-703e-6,0,-702e-6,0,-7e-4,0,-699e-6,0,-697e-6,0,-696e-6,0,-694e-6,0,-693e-6,0,-691e-6,0,-69e-5,0,-688e-6,0,-687e-6,0,-685e-6,0,-684e-6,0,-682e-6,0,-681e-6,0,-679e-6,0,-678e-6,0,-677e-6,0,-675e-6,0,-674e-6,0,-672e-6,0,-671e-6,0,-669e-6,0,-668e-6,0,-667e-6,0,-665e-6,0,-664e-6,0,-662e-6,0,-661e-6,0,-66e-5,0,-658e-6,0,-657e-6,0,-656e-6,0,-654e-6,0,-653e-6,0,-652e-6,0,-65e-5,0,-649e-6,0,-648e-6,0,-646e-6,0,-645e-6,0,-644e-6,0,-642e-6,0,-641e-6,0,-64e-5,0,-639e-6,0,-637e-6,0,-636e-6,0,-635e-6,0,-633e-6,0,-632e-6,0,-631e-6,0,-63e-5,0,-628e-6,0,-627e-6,0,-626e-6,0,-625e-6,0,-624e-6,0,-622e-6,0,-621e-6,0,-62e-5,0,-619e-6,0,-617e-6,0,-616e-6,0,-615e-6,0,-614e-6,0,-613e-6,0,-612e-6,0,-61e-5,0,-609e-6,0,-608e-6,0,-607e-6,0,-606e-6,0,-605e-6,0,-603e-6,0,-602e-6,0,-601e-6,0,-6e-4,0,-599e-6,0,-598e-6,0,-597e-6,0,-596e-6,0,-594e-6,0,-593e-6,0,-592e-6,0,-591e-6,0,-59e-5,0,-589e-6,0,-588e-6,0,-587e-6,0,-586e-6,0,-585e-6,0,-584e-6,0,-582e-6,0,-581e-6,0,-58e-5,0,-579e-6,0,-578e-6,0,-577e-6,0,-576e-6,0,-575e-6,0,-574e-6,0,-573e-6,0,-572e-6,0,-571e-6,0,-57e-5,0,-569e-6,0,-568e-6,0,-567e-6,0,-566e-6,0,-565e-6,0,-564e-6,0,-563e-6,0,-562e-6,0,-561e-6,0,-56e-5,0,-559e-6,0,-558e-6,0,-557e-6,0,-556e-6,0,-555e-6,0,-554e-6,0,-553e-6,0,-552e-6,0,-551e-6,0,-55e-5,0,-549e-6,0,-548e-6,0,-547e-6,0,-546e-6,0,-546e-6,0,-545e-6,0,-544e-6,0,-543e-6,0,-542e-6,0,-541e-6,0,-54e-5,0,-539e-6,0,-538e-6,0,-537e-6,0,-536e-6,0,-535e-6,0,-535e-6,0,-534e-6,0,-533e-6,0,-532e-6,0,-531e-6,0,-53e-5,0,-529e-6,0,-528e-6,0,-527e-6,0,-527e-6,0,-526e-6,0,-525e-6,0,-524e-6,0,-523e-6,0,-522e-6,0,-521e-6,0,-521e-6,0,-52e-5,0,-519e-6,0,-518e-6,0,-517e-6,0,-516e-6,0,-515e-6,0,-515e-6,0,-514e-6,0,-513e-6,0,-512e-6,0,-511e-6,0,-511e-6,0,-51e-5,0,-509e-6,0,-508e-6,0,-507e-6,0,-506e-6,0,-506e-6,0,-505e-6,0,-504e-6,0,-503e-6,0,-502e-6,0,-502e-6,0,-501e-6,0,-5e-4,0,-499e-6,0,-499e-6,0,-498e-6,0,-497e-6,0,-496e-6,0,-495e-6,0,-495e-6,0,-494e-6,0,-493e-6,0,-492e-6,0,-492e-6,0,-491e-6,0,-49e-5,0,-489e-6,0,-489e-6,0,-488e-6,0,-487e-6,0,-486e-6,0,-486e-6,0,-485e-6,0,-484e-6,0,-483e-6,0,-483e-6,0,-482e-6,0,-481e-6,0,-48e-5,0,-48e-5,0,-479e-6,0,-478e-6,0,-478e-6,0,-477e-6,0,-476e-6,0,-475e-6,0,-475e-6,0,-474e-6,0,-473e-6,0,-473e-6,0,-472e-6,0,-471e-6,0,-471e-6,0,-47e-5,0,-469e-6,0,-468e-6,0,-468e-6,0,-467e-6,0,-466e-6,0,-466e-6,0,-465e-6,0,-464e-6,0,-464e-6,0,-463e-6,0,-462e-6,0,-462e-6,0,-461e-6,0,-46e-5,0,-46e-5,0,-459e-6,0,-458e-6,0,-458e-6,0,-457e-6,0,-456e-6,0,-456e-6,0,-455e-6,0,-454e-6,0,-454e-6,0,-453e-6,0,-452e-6,0,-452e-6,0,-451e-6,0,-451e-6,0,-45e-5,0,-449e-6,0,-449e-6,0,-448e-6,0,-447e-6,0,-447e-6,0,-446e-6,0,-446e-6,0,-445e-6,0,-444e-6,0,-444e-6,0,-443e-6,0,-442e-6,0,-442e-6,0,-441e-6,0,-441e-6,0,-44e-5,0,-439e-6,0,-439e-6,0,-438e-6,0,-438e-6,0,-437e-6,0,-436e-6,0,-436e-6,0,-435e-6,0,-435e-6,0,-434e-6,0,-433e-6,0,-433e-6,0,-432e-6,0,-432e-6,0,-431e-6,0,-43e-5,0,-43e-5,0,-429e-6,0,-429e-6,0,-428e-6,0,-428e-6,0,-427e-6,0,-426e-6,0,-426e-6,0,-425e-6,0,-425e-6,0,-424e-6,0,-424e-6,0,-423e-6,0,-422e-6,0,-422e-6,0,-421e-6,0,-421e-6,0,-42e-5,0,-42e-5,0,-419e-6,0,-419e-6,0,-418e-6,0,-417e-6,0,-417e-6,0,-416e-6,0,-416e-6,0,-415e-6,0,-415e-6,0,-414e-6,0,-414e-6,0,-413e-6,0,-413e-6,0,-412e-6,0,-412e-6,0,-411e-6,0,-41e-5,0,-41e-5,0,-409e-6,0,-409e-6,0,-408e-6,0,-408e-6,0,-407e-6,0,-407e-6,0,-406e-6,0,-406e-6,0,-405e-6,0,-405e-6,0,-404e-6,0,-404e-6,0,-403e-6,0,-403e-6,0,-402e-6,0,-402e-6,0,-401e-6,0,-401e-6,0,-4e-4,0,-4e-4,0,-399e-6,0,-399e-6,0,-398e-6,0,-398e-6,0,-397e-6,0,-397e-6,0,-396e-6,0,-396e-6,0,-395e-6,0,-395e-6,0,-394e-6,0,-394e-6,0,-393e-6,0,-393e-6,0,-392e-6,0,-392e-6,0,-391e-6,0,-391e-6,0,-39e-5,0,-39e-5,0,-389e-6,0,-389e-6,0,-388e-6,0,-388e-6,0,-387e-6,0,-387e-6,0,-387e-6,0,-386e-6,0,-386e-6,0,-385e-6,0,-385e-6,0,-384e-6,0,-384e-6,0,-383e-6,0,-383e-6,0,-382e-6,0,-382e-6,0,-381e-6,0,-381e-6,0,-381e-6,0,-38e-5,0,-38e-5,0,-379e-6,0,-379e-6,0,-378e-6,0,-378e-6,0,-377e-6,0,-377e-6,0,-376e-6,0,-376e-6,0,-376e-6,0,-375e-6,0,-375e-6,0,-374e-6,0,-374e-6,0,-373e-6,0,-373e-6,0,-373e-6,0,-372e-6,0,-372e-6,0,-371e-6,0,-371e-6,0,-37e-5,0,-37e-5,0,-369e-6,0,-369e-6,0,-369e-6,0,-368e-6,0,-368e-6,0,-367e-6,0,-367e-6,0,-367e-6,0,-366e-6,0,-366e-6,0,-365e-6,0,-365e-6,0,-364e-6,0,-364e-6,0,-364e-6,0,-363e-6,0,-363e-6,0,-362e-6,0,-362e-6,0,-362e-6,0,-361e-6,0,-361e-6,0,-36e-5,0,-36e-5,0,-359e-6,0,-359e-6,0,-359e-6,0,-358e-6,0,-358e-6,0,-357e-6,0,-357e-6,0,-357e-6,0,-356e-6,0,-356e-6,0,-355e-6,0,-355e-6,0,-355e-6,0,-354e-6,0,-354e-6,0,-353e-6,0,-353e-6,0,-353e-6,0,-352e-6,0,-352e-6,0,-352e-6,0,-351e-6,0,-351e-6,0,-35e-5,0,-35e-5,0,-35e-5,0,-349e-6,0,-349e-6,0,-348e-6,0,-348e-6,0,-348e-6,0,-347e-6,0,-347e-6,0,-347e-6,0,-346e-6,0,-346e-6,0,-345e-6,0,-345e-6,0,-345e-6,0,-344e-6,0,-344e-6,0,-344e-6,0,-343e-6,0,-343e-6,0,-342e-6,0,-342e-6,0,-342e-6,0,-341e-6,0,-341e-6,0,-341e-6,0,-34e-5,0,-34e-5,0,-34e-5,0,-339e-6,0,-339e-6,0,-338e-6,0,-338e-6,0,-338e-6,0,-337e-6,0,-337e-6,0,-337e-6,0,-336e-6,0,-336e-6,0,-336e-6,0,-335e-6,0,-335e-6,0,-335e-6,0,-334e-6,0,-334e-6,0,-333e-6,0,-333e-6,0,-333e-6,0,-332e-6,0,-332e-6,0,-332e-6,0,-331e-6,0,-331e-6,0,-331e-6,0,-33e-5,0,-33e-5,0,-33e-5,0,-329e-6,0,-329e-6,0,-329e-6,0,-328e-6,0,-328e-6,0,-328e-6,0,-327e-6,0,-327e-6,0,-327e-6,0,-326e-6,0,-326e-6,0,-326e-6,0,-325e-6,0,-325e-6,0,-325e-6,0,-324e-6,0,-324e-6,0,-324e-6,0,-323e-6,0,-323e-6,0,-323e-6,0,-322e-6,0,-322e-6,0,-322e-6,0,-321e-6,0,-321e-6,0,-321e-6,0,-32e-5,0,-32e-5,0,-32e-5,0,-319e-6,0,-319e-6,0,-319e-6,0,-318e-6,0,-318e-6,0,-318e-6,0,-318e-6,0,-317e-6,0,-317e-6,0,-317e-6,0,-316e-6,0,-316e-6,0,-316e-6,0,-315e-6,0,-315e-6,0,-315e-6,0,-314e-6,0,-314e-6,0,-314e-6,0,-313e-6,0,-313e-6,0,-313e-6,0,-313e-6,0,-312e-6,0,-312e-6,0,-312e-6,0,-311e-6,0,-311e-6]}},{}],50:[function(require,module,exports){module.exports={real:[0,0,-.382713,.5,-.114418,.453856,-.121481,.273632,-.190467,.116104,-.171632,.02464,-.13362,.028582,-.103649,.085895,-.075858,.088487,-.028478,.065485,-.007914,.040534,-.035028,.023703,-.021164,.018341,-.013231,.010474,-.008555,.005816,-.005546,.005456,-.00537,.005624,-.00554,.005136,-.003398,.002319,-.002288,.00206,-.002034,.002272,-.002245,.003016,-.002981,.002948,-.002916,.002975,-.002944,.002914,-.002885,.002856,-.002829,.002403,-.002381,.002359,-.001618,.001603,-.00159,.001576,-.001563,.001176,-.001166,.001157,-.001148,.001139,-.001131,.001122,-.001114,.001106,-.001098,.00109,-.001083,.001043,-.001036,.001029,-.001022,.001015,-.001009,834e-6,-829e-6,824e-6,-819e-6,814e-6,-809e-6,804e-6,-799e-6,795e-6,-79e-5,786e-6,-781e-6,777e-6,-773e-6,817e-6,-813e-6,809e-6,-805e-6,8e-4,-796e-6,817e-6,-813e-6,809e-6,-781e-6,777e-6,-586e-6,584e-6,-581e-6,578e-6,-525e-6,523e-6,-52e-5,518e-6,-516e-6,513e-6,-511e-6,509e-6,-507e-6,504e-6,-502e-6,47e-5,-468e-6,466e-6,-465e-6,463e-6,-461e-6,459e-6,-457e-6,455e-6,-454e-6,452e-6,-45e-5,448e-6,-447e-6,445e-6,-443e-6,442e-6,-44e-5,438e-6,-437e-6,435e-6,-434e-6,432e-6,-431e-6,429e-6,-428e-6,426e-6,-425e-6,423e-6,-422e-6,421e-6,-419e-6,418e-6,-416e-6,415e-6,-414e-6,354e-6,-353e-6,351e-6,-35e-5,349e-6,-348e-6,347e-6,-346e-6,345e-6,-344e-6,343e-6,-342e-6,341e-6,-34e-5,339e-6,-338e-6,337e-6,-336e-6,335e-6,-334e-6,333e-6,-332e-6,331e-6,-329e-6,328e-6,-328e-6,326e-6,-326e-6,326e-6,-325e-6,324e-6,-322e-6,285e-6,-283e-6,283e-6,-282e-6,282e-6,-281e-6,28e-5,-28e-5,279e-6,-278e-6,278e-6,-277e-6,276e-6,-275e-6,273e-6,-272e-6,272e-6,-271e-6,271e-6,-271e-6,269e-6,-27e-5,27e-5,-268e-6,268e-6,-267e-6,267e-6,-265e-6,266e-6,-262e-6,265e-6,-264e-6,263e-6,-263e-6,262e-6,-262e-6,261e-6,-26e-5,26e-5,-259e-6,259e-6,-255e-6,228e-6,-227e-6,227e-6,-226e-6,226e-6,-225e-6,223e-6,-224e-6,222e-6,-223e-6,22e-5,-222e-6,222e-6,-222e-6,221e-6,-218e-6,22e-5,-218e-6,219e-6,-219e-6,218e-6,-218e-6,218e-6,-217e-6,217e-6,-216e-6,216e-6,-215e-6,215e-6,-215e-6,214e-6,-195e-6,195e-6,-194e-6,194e-6,-193e-6,193e-6,-193e-6,189e-6,-192e-6,188e-6,-191e-6,187e-6,-191e-6,19e-5,-19e-5,19e-5,-186e-6,183e-6,-183e-6,188e-6,-188e-6,188e-6,-187e-6,187e-6,-17e-5,17e-5,-17e-5,169e-6,-169e-6,164e-6,-168e-6,165e-6,-168e-6,164e-6,-167e-6,162e-6,-167e-6,166e-6,-166e-6,166e-6,-161e-6,16e-5,-16e-5,165e-6,-164e-6,164e-6,-164e-6,164e-6,-163e-6,163e-6,-163e-6,163e-6,-162e-6,162e-6,-162e-6,162e-6,-161e-6,161e-6,-161e-6,161e-6,-152e-6,13e-5,-13e-5,13e-5,-13e-5,129e-6,-129e-6,129e-6,-129e-6,129e-6,-128e-6,128e-6,-128e-6,128e-6,-128e-6,128e-6,-127e-6,127e-6,-127e-6,127e-6,-127e-6,126e-6,-126e-6,126e-6,-126e-6,126e-6,-125e-6,125e-6,-125e-6,125e-6,-125e-6,125e-6,-124e-6,124e-6,-124e-6,124e-6,-124e-6,124e-6,-123e-6,123e-6,-123e-6,123e-6,-123e-6,123e-6,-122e-6,122e-6,-122e-6,122e-6,-122e-6,122e-6,-107e-6,107e-6,-107e-6,107e-6,-107e-6,107e-6,-106e-6,106e-6,-106e-6,106e-6,-106e-6,106e-6,-106e-6,106e-6,-105e-6,105e-6,-105e-6,105e-6,-105e-6,105e-6,-105e-6,104e-6,-104e-6,104e-6,-104e-6,104e-6,-104e-6,104e-6,-104e-6,103e-6,-103e-6,103e-6,-103e-6,103e-6,-103e-6,103e-6,-102e-6,102e-6,-96e-6,96e-6,-96e-6,96e-6,-96e-6,96e-6,-96e-6,96e-6,-95e-6,95e-6,-95e-6,95e-6,-95e-6,95e-6,-95e-6,95e-6,-95e-6,94e-6,-94e-6,94e-6,-94e-6,94e-6,-94e-6,94e-6,-73e-6,73e-6,-73e-6,73e-6,-73e-6,73e-6,-73e-6,73e-6,-73e-6,73e-6,-72e-6,72e-6,-72e-6,72e-6,-72e-6,72e-6,-72e-6,72e-6,-72e-6,72e-6,-72e-6,72e-6,-71e-6,71e-6,-71e-6,71e-6,-71e-6,71e-6,-71e-6,71e-6,-71e-6,71e-6,-71e-6,71e-6,-71e-6,7e-5,-7e-5,7e-5,-7e-5,7e-5,-7e-5,7e-5,-7e-5,7e-5,-7e-5,7e-5,-7e-5,7e-5,-7e-5,69e-6,-69e-6,69e-6,-69e-6,69e-6,-69e-6,69e-6,-69e-6,69e-6,-69e-6,69e-6,-69e-6,69e-6,-69e-6,68e-6,-68e-6,68e-6,-68e-6,68e-6,-68e-6,68e-6,-68e-6,68e-6,-68e-6,68e-6,-68e-6,68e-6,-68e-6,64e-6,-63e-6,63e-6,-63e-6,63e-6,-63e-6,63e-6,-63e-6,63e-6,-63e-6,63e-6,-63e-6,63e-6,-63e-6,63e-6,-63e-6,63e-6,-62e-6,62e-6,-62e-6,62e-6,-62e-6,62e-6,-62e-6,62e-6,-62e-6,62e-6,-62e-6,62e-6,-62e-6,62e-6,-62e-6,62e-6,-62e-6,61e-6,-61e-6,61e-6,-61e-6,61e-6,-61e-6,61e-6,-61e-6,61e-6,-61e-6,61e-6,-61e-6,61e-6,-61e-6,61e-6,-61e-6,61e-6,-61e-6,61e-6,-6e-5,6e-5,-6e-5,6e-5,-6e-5,6e-5,-6e-5,6e-5,-6e-5,6e-5,-6e-5,6e-5,-6e-5,6e-5,-6e-5,6e-5,-6e-5,6e-5,-6e-5,59e-6,-59e-6,59e-6,-59e-6,59e-6,-59e-6,59e-6,-59e-6,59e-6,-59e-6,55e-6,-55e-6,55e-6,-55e-6,55e-6,-55e-6,55e-6,-55e-6,55e-6,-55e-6,55e-6,-55e-6,55e-6,-55e-6,55e-6,-55e-6,55e-6,-55e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-38e-6,38e-6,-38e-6,38e-6,-38e-6,38e-6,-38e-6,38e-6,-38e-6,38e-6,-38e-6,38e-6,-38e-6,38e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-35e-6,35e-6,-35e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,29e-6,-29e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,23e-6,-23e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6,-18e-6,18e-6],imag:[0,.321119,-2e-6,7e-6,-3e-6,17e-6,-7e-6,2e-5,-18e-6,14e-6,-26e-6,4e-6,-29e-6,7e-6,-31e-6,29e-6,-28e-6,38e-6,-13e-6,36e-6,-5e-6,26e-6,-24e-6,19e-6,-19e-6,18e-6,-13e-6,12e-6,-11e-6,7e-6,-8e-6,7e-6,-9e-6,1e-5,-18e-6,9e-6,-7e-6,4e-6,-5e-6,4e-6,-5e-6,6e-6,-6e-6,11e-6,-9e-6,9e-6,-1e-5,1e-5,-1e-5,11e-6,-15e-6,12e-6,-13e-6,9e-6,-14e-6,11e-6,-9e-6,7e-6,-7e-6,11e-6,-13e-6,11e-6,0,7e-6,-12e-6,7e-6,-12e-6,8e-6,-9e-6,13e-6,-7e-6,0,-7e-6,0,-9e-6,0,-1e-5,0,0,0,0,0,0,12e-6,0,17e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3e-5,25e-6,0,3e-5,0,0,0,0,-27e-6,0,-19e-6,0,-23e-6,0,0,0,0,0,0,0,0,0,0,3e-5,-3e-5,23e-6,-34e-6,23e-6,0,34e-6,0,0,-27e-6,0,-19e-6,0,-22e-6,0,-37e-6,0,0,0,0,0,0,0,0,0,0,0,-36e-6,0,0,0,0,0,0,28e-6,0,28e-6,0,37e-6,0,0,0,0,-36e-6,0,-31e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38e-6,0,38e-6,0,37e-6,0,0,0,0,-37e-6,46e-6,-46e-6,0,0,0,0,0,0,0,0,0,0,41e-6,0,33e-6,0,33e-6,0,4e-5,0,0,0,0,-4e-5,4e-5,-4e-5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-51e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-41e-6,41e-6,-41e-6,41e-6,-41e-6,41e-6,-41e-6,41e-6,-41e-6,41e-6,-41e-6,41e-6,-41e-6,41e-6,-41e-6,41e-6,-41e-6,41e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-48e-6,48e-6,-48e-6,48e-6,-48e-6,48e-6,-48e-6,48e-6,-48e-6,48e-6,-48e-6,48e-6,-48e-6,47e-6,-47e-6,47e-6,-47e-6,47e-6,-47e-6,47e-6,-47e-6,47e-6,-47e-6,47e-6,-37e-6,37e-6,-37e-6,37e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,3e-5,-3e-5,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,28e-6,-28e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,27e-6,-27e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-42e-6,42e-6,-38e-6,38e-6,-38e-6,38e-6,-38e-6,38e-6,-38e-6,38e-6,-38e-6,38e-6,-38e-6,38e-6,-38e-6,38e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-35e-6,35e-6,-35e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,44e-6,-43e-6,43e-6,-43e-6,43e-6,-43e-6,43e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-37e-6,37e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,36e-6,-36e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,35e-6,-35e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-34e-6,34e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,33e-6,-33e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-32e-6,32e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,31e-6,-31e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,22e-6,-22e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,15e-6,-15e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-21e-6,21e-6,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-2e-5,2e-5,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-19e-6,19e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-14e-6,14e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,-13e-6,13e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
}},{}],51:[function(require,module,exports){module.exports={real:[0,.256157,.287502,-.33916,-.04524,.276038,-.076183,-.156578,.08866,.052823,-.043895,-.008253,.007385,-169e-6,.006791,-.00193,-.004648,.001325,-465e-6,.001447,.00149,-.002043,-279e-6,-533e-6,236e-6,.002956,-.001489,-.003211,.001774,.002716,-.001572,-.001386,224e-6,647e-6,789e-6,-461e-6,-.001531,-.001118,.00133,.001274,-936e-6,-203e-6,985e-6,-564e-6,788e-6,.001126,-.001179,-.001221,.00111,.001014,-723e-6,-493e-6,83e-6,492e-6,849e-6,-563e-6,-956e-6,291e-6,357e-6,-922e-6,-476e-6,-995e-6,-511e-6,-877e-6,0,-845e-6,-818e-6,-578e-6,-712e-6,-626e-6,-806e-6,-853e-6,-723e-6,-469e-6,-713e-6,0,661e-6,-628e-6,549e-6,694e-6,-349e-6,-204e-6,253e-6,-653e-6,-89e-6,-332e-6,-399e-6,-661e-6,365e-6,107e-6,-493e-6,-358e-6,333e-6,4e-4,-497e-6,495e-6,492e-6,-141e-6,345e-6,153e-6,452e-6,359e-6,0,468e-6,-85e-6,114e-6,452e-6,-388e-6,-306e-6,392e-6,-411e-6,-444e-6,0,-99e-6,-274e-6,273e-6,-198e-6,-334e-6,-28e-5,-293e-6,-106e-6,-165e-6,-252e-6,-264e-6,-197e-6,-32e-5,-64e-6,-322e-6,-324e-6,63e-6,-287e-6,-256e-6,-255e-6,-301e-6,-77e-6,-114e-6,-227e-6,-8e-5,178e-6,-79e-6,-112e-6,-249e-6,6e-5,0,246e-6,0,0,172e-6,243e-6,0,0,-17e-5,169e-6,107e-6,-168e-6,237e-6,106e-6,0,-166e-6,-105e-6,-46e-6,-208e-6,-145e-6,-92e-6,-144e-6,-182e-6,-192e-6,-64e-6,-143e-6,-111e-6,-179e-6,-173e-6,141e-6,14e-5,-193e-6,-182e-6,22e-6,-139e-6,-35e-6,-185e-6,-16e-5,0,194e-6,-186e-6,-183e-6,-182e-6,-153e-6,0,-135e-6,65e-6,-17e-5,-179e-6,189e-6,181e-6,-162e-6,-128e-6,68e-6,-45e-6,0,-65e-6,-84e-6,27e-6,-158e-6,-145e-6,-145e-6,-161e-6,142e-6,0,-135e-6,55e-6,37e-6,-6e-5,-19e-6,-94e-6,-141e-6,128e-6,-154e-6,-157e-6,-111e-6,-104e-6,-142e-6,-11e-5,-115e-6,-95e-6,-84e-6,-73e-6,28e-6,-2e-5,-48e-6,27e-6,43e-6,68e-6,82e-6,81e-6,1e-4,119e-6,125e-6,127e-6,134e-6,137e-6,144e-6,141e-6,141e-6,145e-6,145e-6,143e-6,143e-6,143e-6,142e-6,139e-6,13e-5,13e-5,13e-5,13e-5,129e-6,129e-6,129e-6,129e-6,121e-6,121e-6,121e-6,12e-5,12e-5,12e-5,12e-5,12e-5,119e-6,119e-6,119e-6,119e-6,118e-6,118e-6,118e-6,118e-6,118e-6,117e-6,117e-6,117e-6,13e-5,13e-5,13e-5,13e-5,13e-5,129e-6,129e-6,129e-6,129e-6,128e-6,128e-6,128e-6,128e-6,128e-6,127e-6,127e-6,127e-6,127e-6,126e-6,126e-6,126e-6,126e-6,126e-6,125e-6,125e-6,125e-6,125e-6,125e-6,124e-6,124e-6,124e-6,124e-6,124e-6,123e-6,123e-6,123e-6,123e-6,123e-6,122e-6,122e-6,122e-6,122e-6,122e-6,121e-6,121e-6,121e-6,121e-6,121e-6,121e-6,12e-5,12e-5,12e-5,12e-5,12e-5,119e-6,99e-6,99e-6,99e-6,99e-6,99e-6,98e-6,98e-6,98e-6,98e-6,98e-6,98e-6,98e-6,97e-6,97e-6,97e-6,97e-6,97e-6,97e-6,97e-6,96e-6,96e-6,96e-6,96e-6,96e-6,96e-6,96e-6,96e-6,95e-6,95e-6,95e-6,95e-6,95e-6,95e-6,95e-6,94e-6,94e-6,94e-6,94e-6,94e-6,94e-6,94e-6,94e-6,93e-6,93e-6,93e-6,93e-6,93e-6,93e-6,93e-6,93e-6,93e-6,92e-6,92e-6,92e-6,92e-6,92e-6,92e-6,92e-6,92e-6,91e-6,91e-6,91e-6,91e-6,91e-6,91e-6,91e-6,91e-6,91e-6,9e-5,9e-5,9e-5,9e-5,9e-5,9e-5,9e-5,9e-5,9e-5,89e-6,89e-6,89e-6,89e-6,89e-6,89e-6,89e-6,89e-6,89e-6,88e-6,88e-6,88e-6,88e-6,88e-6,88e-6,88e-6,88e-6,88e-6,88e-6,87e-6,87e-6,87e-6,87e-6,87e-6,87e-6,87e-6,87e-6,87e-6,87e-6,86e-6,86e-6,86e-6,86e-6,86e-6,86e-6,86e-6,86e-6,86e-6,86e-6,85e-6,85e-6,85e-6,85e-6,85e-6,85e-6,85e-6,85e-6,85e-6,85e-6,85e-6,84e-6,84e-6,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,7e-5,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,69e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,68e-6,67e-6,67e-6,67e-6,67e-6,67e-6,67e-6,67e-6,67e-6,67e-6,67e-6,67e-6,67e-6,67e-6,67e-6,67e-6,66e-6,66e-6,66e-6,66e-6,66e-6,66e-6,66e-6,66e-6,66e-6,66e-6,66e-6,66e-6,66e-6,66e-6,66e-6,66e-6,65e-6,65e-6,65e-6,65e-6,65e-6,65e-6,65e-6,65e-6,65e-6,65e-6,65e-6,65e-6,65e-6,65e-6,65e-6,65e-6,64e-6,64e-6,64e-6,64e-6,64e-6,64e-6,64e-6,64e-6,64e-6,64e-6,64e-6,64e-6,64e-6,64e-6,64e-6,64e-6,64e-6,64e-6,63e-6,63e-6,63e-6,63e-6,63e-6,63e-6,63e-6,63e-6,63e-6,63e-6,63e-6,63e-6,63e-6,63e-6,63e-6,63e-6,63e-6,63e-6,62e-6,62e-6,62e-6,62e-6,62e-6,62e-6,62e-6,62e-6,62e-6,62e-6,62e-6,62e-6,62e-6,62e-6,62e-6,62e-6,62e-6,62e-6,62e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,61e-6,6e-5,6e-5,6e-5,6e-5,6e-5,6e-5,6e-5,6e-5,6e-5,55e-6,55e-6,55e-6,55e-6,55e-6,55e-6,55e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,54e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,53e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,52e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,51e-6,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,5e-5,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,49e-6,48e-6,48e-6,48e-6,48e-6,48e-6,48e-6,48e-6,47e-6,47e-6,47e-6,47e-6,47e-6,47e-6,47e-6,47e-6,47e-6,47e-6,47e-6,47e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,46e-6,45e-6,45e-6,45e-6,45e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,44e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,42e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,37e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,36e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,33e-6,33e-6,33e-6,33e-6,33e-6,36e-6,36e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,35e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,34e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,33e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,32e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,31e-6,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,3e-5,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,29e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,28e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,27e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,26e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,25e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,22e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6,21e-6],imag:[0,-.110487,-.278876,.367383,.036321,-.170779,.028859,.013815,.01413,.030014,-.041771,-.014977,.036079,57e-5,-.015222,.002152,.002587,-112e-6,35e-6,451e-6,.001269,-.003233,-.001189,.004621,-412e-6,-.002951,369e-6,553e-6,444e-6,.001178,-.001841,-.001937,.00182,.001686,-.001594,-.001692,804e-6,.001288,-273e-6,415e-6,-936e-6,-.001291,835e-6,.001145,-986e-6,-538e-6,365e-6,-42e-6,477e-6,635e-6,-847e-6,-986e-6,.001089,963e-6,-655e-6,901e-6,439e-6,.001002,971e-6,-448e-6,899e-6,166e-6,86e-5,225e-6,-898e-6,282e-6,337e-6,661e-6,-503e-6,-597e-6,297e-6,0,-442e-6,-548e-6,75e-6,712e-6,-252e-6,-314e-6,-431e-6,0,-594e-6,-654e-6,-632e-6,-178e-6,-667e-6,-581e-6,532e-6,0,-547e-6,-645e-6,-123e-6,-358e-6,-377e-6,-3e-4,28e-6,0,0,-469e-6,345e-6,46e-5,-169e-6,319e-6,-478e-6,-85e-6,465e-6,457e-6,-125e-6,259e-6,349e-6,245e-6,206e-6,-111e-6,346e-6,33e-5,-206e-6,205e-6,277e-6,56e-6,187e-6,163e-6,317e-6,289e-6,-216e-6,-198e-6,263e-6,-71e-6,-32e-5,4e-5,0,-316e-6,144e-6,-192e-6,-191e-6,1e-4,-307e-6,-227e-6,-113e-6,-239e-6,-178e-6,-238e-6,-223e-6,0,-24e-5,-247e-6,0,-245e-6,-244e-6,172e-6,0,-242e-6,241e-6,17e-5,-169e-6,214e-6,168e-6,0,212e-6,236e-6,-166e-6,21e-5,229e-6,104e-6,145e-6,183e-6,144e-6,91e-6,64e-6,192e-6,143e-6,-167e-6,9e-5,99e-6,-141e-6,14e-5,-43e-6,-78e-6,196e-6,139e-6,-193e-6,62e-6,112e-6,-194e-6,0,-53e-6,-61e-6,61e-6,-115e-6,191e-6,135e-6,-179e-6,-85e-6,6e-5,0,52e-6,-94e-6,-137e-6,174e-6,181e-6,-164e-6,151e-6,14e-5,-161e-6,39e-6,-73e-6,-72e-6,0,76e-6,161e-6,-86e-6,15e-5,155e-6,-147e-6,-158e-6,127e-6,71e-6,-93e-6,34e-6,7e-6,111e-6,117e-6,65e-6,11e-5,104e-6,122e-6,13e-5,136e-6,151e-6,152e-6,145e-6,15e-5,146e-6,136e-6,128e-6,128e-6,113e-6,93e-6,83e-6,8e-5,67e-6,59e-6,41e-6,47e-6,47e-6,29e-6,29e-6,36e-6,36e-6,36e-6,36e-6,46e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,43e-6,61e-6,6e-5,6e-5,6e-5,6e-5,6e-5,6e-5,6e-5,6e-5,6e-5,59e-6,59e-6,59e-6,59e-6,59e-6,59e-6,59e-6,59e-6,59e-6,58e-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},{}],52:[function(require,module,exports){module.exports={Bass:require("./Bass.json"),BassAmp360:require("./BassAmp360.json"),BassFuzz:require("./BassFuzz.json"),BassFuzz2:require("./BassFuzz2.json"),BassSubDub:require("./BassSubDub.json"),BassSubDub2:require("./BassSubDub2.json"),Brass:require("./Brass.json"),BritBlues:require("./BritBlues.json"),BritBluesDriven:require("./BritBluesDriven.json"),Buzzy1:require("./Buzzy1.json"),Buzzy2:require("./Buzzy2.json"),Celeste:require("./Celeste.json"),ChorusStrings:require("./ChorusStrings.json"),Dissonant1:require("./Dissonant1.json"),Dissonant2:require("./Dissonant2.json"),DissonantPiano:require("./DissonantPiano.json"),DroppedSaw:require("./DroppedSaw.json"),DroppedSquare:require("./DroppedSquare.json"),DynaEPBright:require("./DynaEPBright.json"),DynaEPMed:require("./DynaEPMed.json"),Ethnic33:require("./Ethnic33.json"),Full1:require("./Full1.json"),Full2:require("./Full2.json"),GuitarFuzz:require("./GuitarFuzz.json"),Harsh:require("./Harsh.json"),MklHard:require("./MklHard.json"),Noise:require("./Noise.json"),Organ2:require("./Organ2.json"),Organ3:require("./Organ3.json"),PhonemeAh:require("./PhonemeAh.json"),PhonemeBah:require("./PhonemeBah.json"),PhonemeEe:require("./PhonemeEe.json"),PhonemeO:require("./PhonemeO.json"),PhonemeOoh:require("./PhonemeOoh.json"),PhonemePopAhhhs:require("./PhonemePopAhhhs.json"),Piano:require("./Piano.json"),Pulse:require("./Pulse.json"),PutneyWavering:require("./PutneyWavering.json"),Saw:require("./Saw.json"),Square:require("./Square.json"),TB303Square:require("./TB303Square.json"),Throaty:require("./Throaty.json"),Triangle:require("./Triangle.json"),Trombone:require("./Trombone.json"),TwelveOpTines:require("./TwelveOpTines.json"),TwelveStringGuitar1:require("./TwelveStringGuitar1.json"),WarmSaw:require("./WarmSaw.json"),WarmSquare:require("./WarmSquare.json"),WarmTriangle:require("./WarmTriangle.json"),Wurlitzer:require("./Wurlitzer.json"),Wurlitzer2:require("./Wurlitzer2.json")}},{"./Bass.json":1,"./BassAmp360.json":2,"./BassFuzz.json":3,"./BassFuzz2.json":4,"./BassSubDub.json":5,"./BassSubDub2.json":6,"./Brass.json":7,"./BritBlues.json":8,"./BritBluesDriven.json":9,"./Buzzy1.json":10,"./Buzzy2.json":11,"./Celeste.json":12,"./ChorusStrings.json":13,"./Dissonant1.json":14,"./Dissonant2.json":15,"./DissonantPiano.json":16,"./DroppedSaw.json":17,"./DroppedSquare.json":18,"./DynaEPBright.json":19,"./DynaEPMed.json":20,"./Ethnic33.json":21,"./Full1.json":22,"./Full2.json":23,"./GuitarFuzz.json":24,"./Harsh.json":25,"./MklHard.json":26,"./Noise.json":27,"./Organ2.json":28,"./Organ3.json":29,"./PhonemeAh.json":30,"./PhonemeBah.json":31,"./PhonemeEe.json":32,"./PhonemeO.json":33,"./PhonemeOoh.json":34,"./PhonemePopAhhhs.json":35,"./Piano.json":36,"./Pulse.json":37,"./PutneyWavering.json":38,"./Saw.json":39,"./Square.json":40,"./TB303Square.json":41,"./Throaty.json":42,"./Triangle.json":43,"./Trombone.json":44,"./TwelveOpTines.json":45,"./TwelveStringGuitar1.json":46,"./WarmSaw.json":47,"./WarmSquare.json":48,"./WarmTriangle.json":49,"./Wurlitzer.json":50,"./Wurlitzer2.json":51}],53:[function(require,module,exports){!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n(t.IntervalNotation=t.IntervalNotation||{})}(this,function(t){"use strict";function n(t,n){if("string"!=typeof t)return null;var e=d.exec(t);if(!e)return null;var r={num:+(e[3]||e[8]),q:e[4]||e[6]};r.dir="-"===(e[2]||e[7])?-1:1;var u=(r.num-1)%7;return r.simple=u+1,r.type=p[u],r.alt=f(r.type,r.q),r.oct=Math.floor((r.num-1)/7),r.size=r.dir*(c[u]+r.alt+12*r.oct),!1!==n&&"M"===r.type&&"P"===r.q?null:r}function e(t){return p[(t-1)%7]}function r(t){return-1===t?"-":""}function u(t,n){return t+7*n}function o(t,n,e,o){return a(t,n)+r(o)+u(t,e)}function i(t,n,e,o){return r(o)+u(t,e)+a(t,n)}function f(t,n){var r="number"==typeof t?e(t):t;return"M"===n&&"M"===r?0:"P"===n&&"P"===r?0:"m"===n&&"M"===r?-1:/^A+$/.test(n)?n.length:/^d+$/.test(n)?"P"===r?-n.length:-n.length-1:null}function l(t,n){return Array(Math.abs(n)+1).join(t)}function a(t,n){var r="number"==typeof t?e(Math.abs(t)):t;return 0===n?"M"===r?"M":"P":-1===n&&"M"===r?"m":n>0?l("A",n):0>n?l("d","P"===r?n:n+1):null}var d=new RegExp("^(?:(([-+]?)(\\d+)(d{1,4}|m|M|P|A{1,4}))|((AA|A|P|M|m|d|dd)([-+]?)(\\d+)))$"),c=[0,2,4,5,7,9,11],p="PMMPPMM";t.parse=n,t.type=e,t.shorthand=o,t.build=i,t.qToAlt=f,t.altToQ=a})},{}],54:[function(require,module,exports){!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n(t.NoteParser=t.NoteParser||{})}(this,function(t){"use strict";function n(t,n){return Array(n+1).join(t)}function r(t){return"number"==typeof t}function e(t){return"string"==typeof t}function u(t){return void 0!==t}function c(t,n){return Math.pow(2,(t-69)/12)*(n||440)}function o(){return b}function i(t,n,r){if("string"!=typeof t)return null;var e=b.exec(t);if(!e||!n&&e[4])return null;var u={letter:e[1].toUpperCase(),acc:e[2].replace(/x/g,"##")};u.pc=u.letter+u.acc,u.step=(u.letter.charCodeAt(0)+3)%7,u.alt="b"===u.acc[0]?-u.acc.length:u.acc.length;var o=A[u.step]+u.alt;return u.chroma=0>o?12+o:o%12,e[3]&&(u.oct=+e[3],u.midi=o+12*(u.oct+1),u.freq=c(u.midi,r)),n&&(u.tonicOf=e[4]),u}function f(t){return r(t)?0>t?n("b",-t):n("#",t):""}function a(t){return r(t)?""+t:""}function l(t,n,r){return null===t||void 0===t?null:t.step?l(t.step,t.alt,t.oct):0>t||t>6?null:C.charAt(t)+f(n)+a(r)}function p(t){if((r(t)||e(t))&&t>=0&&128>t)return+t;var n=i(t);return n&&u(n.midi)?n.midi:null}function s(t,n){var r=p(t);return null===r?null:c(r,n)}function d(t){return(i(t)||{}).letter}function m(t){return(i(t)||{}).acc}function h(t){return(i(t)||{}).pc}function v(t){return(i(t)||{}).step}function g(t){return(i(t)||{}).alt}function x(t){return(i(t)||{}).chroma}function y(t){return(i(t)||{}).oct}var b=/^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\d*)\s*(.*)\s*$/,A=[0,2,4,5,7,9,11],C="CDEFGAB";t.regex=o,t.parse=i,t.build=l,t.midi=p,t.freq=s,t.letter=d,t.acc=m,t.pc=h,t.step=v,t.alt=g,t.chroma=x,t.oct=y})},{}],55:[function(require,module,exports){function buildImpulse(length,decay,reverse,cb){lastImpulseId+=1;var target=targets[lastImpulseId]={id:lastImpulseId,cb:cb,length:length,decay:decay,reverse:reverse,impulseL:new Float32Array(length),impulseR:new Float32Array(length)};return queue.push([target.id,0,Math.min(chunkSize,length)]),setTimeout(next,1),lastImpulseId}function next(){var item=queue.shift();if(item){var target=targets[item[0]];if(target){for(var length=target.length,decay=target.decay,reverse=target.reverse,from=item[1],to=item[2],impulseL=target.impulseL,impulseR=target.impulseR,i=from;to>i;i++){var n=reverse?length-i:i;impulseL[i]=(2*Math.random()-1)*Math.pow(1-n/length,decay),impulseR[i]=(2*Math.random()-1)*Math.pow(1-n/length,decay)}to>=length-1?(delete targets[item[0]],target.cb([target.impulseL,target.impulseR])):queue.push([target.id,to,Math.min(to+chunkSize,length)])}}queue.length&&setTimeout(next,5)}module.exports=buildImpulse;var chunkSize=2048,queue=[],targets={},lastImpulseId=0;buildImpulse.cancel=function(id){return targets[id]?(delete targets[id],!0):!1}},{}],56:[function(require,module,exports){function SimpleReverb(context){var node=context.createGain(),dry=node._dry=context.createGain(),wet=node._wet=context.createGain(),output=node.output=context.createGain(),convolver=node._convolver=context.createConvolver(),filter=node._filter=context.createBiquadFilter();return node.connect(dry),node.connect(wet),convolver.connect(filter),dry.connect(output),wet.connect(convolver),filter.connect(output),Object.defineProperties(node,properties),node._time=3,node._decay=2,node._reverse=!1,node.cutoff.value=2e4,node.filterType="lowpass",node._building=!1,node._buildImpulse(),node}var buildImpulse=require("./build-impulse");module.exports=SimpleReverb;var properties={connect:{value:function(){this.output.connect.apply(this.output,arguments)}},disconnect:{value:function(){this.output.disconnect.apply(this.output,arguments)}},wet:{get:function(){return this._wet.gain}},dry:{get:function(){return this._dry.gain}},cutoff:{get:function(){return this._filter.frequency}},filterType:{get:function(){return this._filter.type},set:function(value){this._filter.type=value}},_buildImpulse:{value:function(){var self=this,rate=self.context.sampleRate,length=Math.max(rate*self.time,1);self._building&&buildImpulse.cancel(self._building),self._building=buildImpulse(length,self.decay,self.reverse,function(channels){var impulse=self.context.createBuffer(2,length,rate);impulse.getChannelData(0).set(channels[0]),impulse.getChannelData(1).set(channels[1]),self._convolver.buffer=impulse,self._building=!1})}},time:{enumerable:!0,get:function(){return this._time},set:function(value){this._time=value,this._buildImpulse()}},decay:{enumerable:!0,get:function(){return this._decay},set:function(value){this._decay=value,this._buildImpulse()}},reverse:{enumerable:!0,get:function(){return this._reverse},set:function(value){this._reverse=value,this._buildImpulse()}}}},{"./build-impulse":55}],57:[function(require,module,exports){module.exports=function(renderer,camera,dimension){dimension=dimension||function(){return{width:window.innerWidth,height:window.innerHeight}};var callback=function(){var rendererSize=dimension();renderer.setSize(rendererSize.width,rendererSize.height),camera.aspect=rendererSize.width/rendererSize.height,camera.updateProjectionMatrix()};return window.addEventListener("resize",callback,!1),{trigger:function(){callback()},destroy:function(){window.removeEventListener("resize",callback)}}}},{}],58:[function(require,module,exports){!function(global,factory){"object"==typeof exports&&"undefined"!=typeof module?factory(exports):"function"==typeof define&&define.amd?define(["exports"],factory):factory(global.THREE=global.THREE||{})}(this,function(exports){"use strict";function EventDispatcher(){}function Vector2(x,y){this.x=x||0,this.y=y||0}function Texture(image,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding){Object.defineProperty(this,"id",{value:textureId++}),this.uuid=_Math.generateUUID(),this.name="",this.image=void 0!==image?image:Texture.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==mapping?mapping:Texture.DEFAULT_MAPPING,this.wrapS=void 0!==wrapS?wrapS:ClampToEdgeWrapping,this.wrapT=void 0!==wrapT?wrapT:ClampToEdgeWrapping,this.magFilter=void 0!==magFilter?magFilter:LinearFilter,this.minFilter=void 0!==minFilter?minFilter:LinearMipMapLinearFilter,this.anisotropy=void 0!==anisotropy?anisotropy:1,this.format=void 0!==format?format:RGBAFormat,this.type=void 0!==type?type:UnsignedByteType,this.offset=new Vector2(0,0),this.repeat=new Vector2(1,1),this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==encoding?encoding:LinearEncoding,this.version=0,this.onUpdate=null}function Vector4(x,y,z,w){this.x=x||0,this.y=y||0,this.z=z||0,this.w=void 0!==w?w:1}function WebGLRenderTarget(width,height,options){this.uuid=_Math.generateUUID(),this.width=width,this.height=height,this.scissor=new Vector4(0,0,width,height),this.scissorTest=!1,this.viewport=new Vector4(0,0,width,height),options=options||{},void 0===options.minFilter&&(options.minFilter=LinearFilter),this.texture=new Texture(void 0,void 0,options.wrapS,options.wrapT,options.magFilter,options.minFilter,options.format,options.type,options.anisotropy,options.encoding),this.depthBuffer=void 0!==options.depthBuffer?options.depthBuffer:!0,this.stencilBuffer=void 0!==options.stencilBuffer?options.stencilBuffer:!0,this.depthTexture=void 0!==options.depthTexture?options.depthTexture:null}function WebGLRenderTargetCube(width,height,options){WebGLRenderTarget.call(this,width,height,options),this.activeCubeFace=0,this.activeMipMapLevel=0}function Quaternion(x,y,z,w){this._x=x||0,this._y=y||0,this._z=z||0,this._w=void 0!==w?w:1}function Vector3(x,y,z){this.x=x||0,this.y=y||0,this.z=z||0}function Matrix4(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}function DataTexture(data,width,height,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,encoding){Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding),this.image={data:data,width:width,height:height},this.magFilter=void 0!==magFilter?magFilter:NearestFilter,this.minFilter=void 0!==minFilter?minFilter:NearestFilter,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}function CubeTexture(images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding){images=void 0!==images?images:[],mapping=void 0!==mapping?mapping:CubeReflectionMapping,Texture.call(this,images,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding),this.flipY=!1}function UniformContainer(){this.seq=[],this.map={}}function flatten(array,nBlocks,blockSize){var firstElem=array[0];if(0>=firstElem||firstElem>0)return array;var n=nBlocks*blockSize,r=arrayCacheF32[n];if(void 0===r&&(r=new Float32Array(n),arrayCacheF32[n]=r),0!==nBlocks){firstElem.toArray(r,0);for(var i=1,offset=0;i!==nBlocks;++i)offset+=blockSize,array[i].toArray(r,offset)}return r}function allocTexUnits(renderer,n){var r=arrayCacheI32[n];void 0===r&&(r=new Int32Array(n),arrayCacheI32[n]=r);for(var i=0;i!==n;++i)r[i]=renderer.allocTextureUnit();return r}function setValue1f(gl,v){gl.uniform1f(this.addr,v)}function setValue1i(gl,v){gl.uniform1i(this.addr,v)}function setValue2fv(gl,v){void 0===v.x?gl.uniform2fv(this.addr,v):gl.uniform2f(this.addr,v.x,v.y)}function setValue3fv(gl,v){void 0!==v.x?gl.uniform3f(this.addr,v.x,v.y,v.z):void 0!==v.r?gl.uniform3f(this.addr,v.r,v.g,v.b):gl.uniform3fv(this.addr,v)}function setValue4fv(gl,v){void 0===v.x?gl.uniform4fv(this.addr,v):gl.uniform4f(this.addr,v.x,v.y,v.z,v.w)}function setValue2fm(gl,v){
gl.uniformMatrix2fv(this.addr,!1,v.elements||v)}function setValue3fm(gl,v){void 0===v.elements?gl.uniformMatrix3fv(this.addr,!1,v):(mat3array.set(v.elements),gl.uniformMatrix3fv(this.addr,!1,mat3array))}function setValue4fm(gl,v){void 0===v.elements?gl.uniformMatrix4fv(this.addr,!1,v):(mat4array.set(v.elements),gl.uniformMatrix4fv(this.addr,!1,mat4array))}function setValueT1(gl,v,renderer){var unit=renderer.allocTextureUnit();gl.uniform1i(this.addr,unit),renderer.setTexture2D(v||emptyTexture,unit)}function setValueT6(gl,v,renderer){var unit=renderer.allocTextureUnit();gl.uniform1i(this.addr,unit),renderer.setTextureCube(v||emptyCubeTexture,unit)}function setValue2iv(gl,v){gl.uniform2iv(this.addr,v)}function setValue3iv(gl,v){gl.uniform3iv(this.addr,v)}function setValue4iv(gl,v){gl.uniform4iv(this.addr,v)}function getSingularSetter(type){switch(type){case 5126:return setValue1f;case 35664:return setValue2fv;case 35665:return setValue3fv;case 35666:return setValue4fv;case 35674:return setValue2fm;case 35675:return setValue3fm;case 35676:return setValue4fm;case 35678:case 36198:return setValueT1;case 35680:return setValueT6;case 5124:case 35670:return setValue1i;case 35667:case 35671:return setValue2iv;case 35668:case 35672:return setValue3iv;case 35669:case 35673:return setValue4iv}}function setValue1fv(gl,v){gl.uniform1fv(this.addr,v)}function setValue1iv(gl,v){gl.uniform1iv(this.addr,v)}function setValueV2a(gl,v){gl.uniform2fv(this.addr,flatten(v,this.size,2))}function setValueV3a(gl,v){gl.uniform3fv(this.addr,flatten(v,this.size,3))}function setValueV4a(gl,v){gl.uniform4fv(this.addr,flatten(v,this.size,4))}function setValueM2a(gl,v){gl.uniformMatrix2fv(this.addr,!1,flatten(v,this.size,4))}function setValueM3a(gl,v){gl.uniformMatrix3fv(this.addr,!1,flatten(v,this.size,9))}function setValueM4a(gl,v){gl.uniformMatrix4fv(this.addr,!1,flatten(v,this.size,16))}function setValueT1a(gl,v,renderer){var n=v.length,units=allocTexUnits(renderer,n);gl.uniform1iv(this.addr,units);for(var i=0;i!==n;++i)renderer.setTexture2D(v[i]||emptyTexture,units[i])}function setValueT6a(gl,v,renderer){var n=v.length,units=allocTexUnits(renderer,n);gl.uniform1iv(this.addr,units);for(var i=0;i!==n;++i)renderer.setTextureCube(v[i]||emptyCubeTexture,units[i])}function getPureArraySetter(type){switch(type){case 5126:return setValue1fv;case 35664:return setValueV2a;case 35665:return setValueV3a;case 35666:return setValueV4a;case 35674:return setValueM2a;case 35675:return setValueM3a;case 35676:return setValueM4a;case 35678:return setValueT1a;case 35680:return setValueT6a;case 5124:case 35670:return setValue1iv;case 35667:case 35671:return setValue2iv;case 35668:case 35672:return setValue3iv;case 35669:case 35673:return setValue4iv}}function SingleUniform(id,activeInfo,addr){this.id=id,this.addr=addr,this.setValue=getSingularSetter(activeInfo.type)}function PureArrayUniform(id,activeInfo,addr){this.id=id,this.addr=addr,this.size=activeInfo.size,this.setValue=getPureArraySetter(activeInfo.type)}function StructuredUniform(id){this.id=id,UniformContainer.call(this)}function addUniform(container,uniformObject){container.seq.push(uniformObject),container.map[uniformObject.id]=uniformObject}function parseUniform(activeInfo,addr,container){var path=activeInfo.name,pathLength=path.length;for(RePathPart.lastIndex=0;;){var match=RePathPart.exec(path),matchEnd=RePathPart.lastIndex,id=match[1],idIsIndex="]"===match[2],subscript=match[3];if(idIsIndex&&(id=0|id),void 0===subscript||"["===subscript&&matchEnd+2===pathLength){addUniform(container,void 0===subscript?new SingleUniform(id,activeInfo,addr):new PureArrayUniform(id,activeInfo,addr));break}var map=container.map,next=map[id];void 0===next&&(next=new StructuredUniform(id),addUniform(container,next)),container=next}}function WebGLUniforms(gl,program,renderer){UniformContainer.call(this),this.renderer=renderer;for(var n=gl.getProgramParameter(program,gl.ACTIVE_UNIFORMS),i=0;n>i;++i){var info=gl.getActiveUniform(program,i),path=info.name,addr=gl.getUniformLocation(program,path);parseUniform(info,addr,this)}}function Color(r,g,b){return void 0===g&&void 0===b?this.set(r):this.setRGB(r,g,b)}function Box2(min,max){this.min=void 0!==min?min:new Vector2(+(1/0),+(1/0)),this.max=void 0!==max?max:new Vector2(-(1/0),-(1/0))}function LensFlarePlugin(renderer,flares){function init(){var vertices=new Float32Array([-1,-1,0,0,1,-1,1,0,1,1,1,1,-1,1,0,1]),faces=new Uint16Array([0,1,2,0,2,3]);vertexBuffer=gl.createBuffer(),elementBuffer=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer),gl.bufferData(gl.ARRAY_BUFFER,vertices,gl.STATIC_DRAW),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,elementBuffer),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,faces,gl.STATIC_DRAW),tempTexture=gl.createTexture(),occlusionTexture=gl.createTexture(),state.bindTexture(gl.TEXTURE_2D,tempTexture),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGB,16,16,0,gl.RGB,gl.UNSIGNED_BYTE,null),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST),state.bindTexture(gl.TEXTURE_2D,occlusionTexture),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,16,16,0,gl.RGBA,gl.UNSIGNED_BYTE,null),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST),shader={vertexShader:["uniform lowp int renderType;","uniform vec3 screenPosition;","uniform vec2 scale;","uniform float rotation;","uniform sampler2D occlusionMap;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","varying float vVisibility;","void main() {","vUV = uv;","vec2 pos = position;","if ( renderType == 2 ) {","vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );","visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );","visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );","visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );","vVisibility =        visibility.r / 9.0;","vVisibility *= 1.0 - visibility.g / 9.0;","vVisibility *=       visibility.b / 9.0;","vVisibility *= 1.0 - visibility.a / 9.0;","pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;","pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;","}","gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );","}"].join("\n"),fragmentShader:["uniform lowp int renderType;","uniform sampler2D map;","uniform float opacity;","uniform vec3 color;","varying vec2 vUV;","varying float vVisibility;","void main() {","if ( renderType == 0 ) {","gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );","} else if ( renderType == 1 ) {","gl_FragColor = texture2D( map, vUV );","} else {","vec4 texture = texture2D( map, vUV );","texture.a *= opacity * vVisibility;","gl_FragColor = texture;","gl_FragColor.rgb *= color;","}","}"].join("\n")},program=createProgram(shader),attributes={vertex:gl.getAttribLocation(program,"position"),uv:gl.getAttribLocation(program,"uv")},uniforms={renderType:gl.getUniformLocation(program,"renderType"),map:gl.getUniformLocation(program,"map"),occlusionMap:gl.getUniformLocation(program,"occlusionMap"),opacity:gl.getUniformLocation(program,"opacity"),color:gl.getUniformLocation(program,"color"),scale:gl.getUniformLocation(program,"scale"),rotation:gl.getUniformLocation(program,"rotation"),screenPosition:gl.getUniformLocation(program,"screenPosition")}}function createProgram(shader){var program=gl.createProgram(),fragmentShader=gl.createShader(gl.FRAGMENT_SHADER),vertexShader=gl.createShader(gl.VERTEX_SHADER),prefix="precision "+renderer.getPrecision()+" float;\n";return gl.shaderSource(fragmentShader,prefix+shader.fragmentShader),gl.shaderSource(vertexShader,prefix+shader.vertexShader),gl.compileShader(fragmentShader),gl.compileShader(vertexShader),gl.attachShader(program,fragmentShader),gl.attachShader(program,vertexShader),gl.linkProgram(program),program}var vertexBuffer,elementBuffer,shader,program,attributes,uniforms,tempTexture,occlusionTexture,gl=renderer.context,state=renderer.state;this.render=function(scene,camera,viewport){if(0!==flares.length){var tempPosition=new Vector3,invAspect=viewport.w/viewport.z,halfViewportWidth=.5*viewport.z,halfViewportHeight=.5*viewport.w,size=16/viewport.w,scale=new Vector2(size*invAspect,size),screenPosition=new Vector3(1,1,0),screenPositionPixels=new Vector2(1,1),validArea=new Box2;validArea.min.set(viewport.x,viewport.y),validArea.max.set(viewport.x+(viewport.z-16),viewport.y+(viewport.w-16)),void 0===program&&init(),gl.useProgram(program),state.initAttributes(),state.enableAttribute(attributes.vertex),state.enableAttribute(attributes.uv),state.disableUnusedAttributes(),gl.uniform1i(uniforms.occlusionMap,0),gl.uniform1i(uniforms.map,1),gl.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer),gl.vertexAttribPointer(attributes.vertex,2,gl.FLOAT,!1,16,0),gl.vertexAttribPointer(attributes.uv,2,gl.FLOAT,!1,16,8),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,elementBuffer),state.disable(gl.CULL_FACE),state.buffers.depth.setMask(!1);for(var i=0,l=flares.length;l>i;i++){size=16/viewport.w,scale.set(size*invAspect,size);var flare=flares[i];if(tempPosition.set(flare.matrixWorld.elements[12],flare.matrixWorld.elements[13],flare.matrixWorld.elements[14]),tempPosition.applyMatrix4(camera.matrixWorldInverse),tempPosition.applyMatrix4(camera.projectionMatrix),screenPosition.copy(tempPosition),screenPositionPixels.x=viewport.x+screenPosition.x*halfViewportWidth+halfViewportWidth-8,screenPositionPixels.y=viewport.y+screenPosition.y*halfViewportHeight+halfViewportHeight-8,validArea.containsPoint(screenPositionPixels)===!0){state.activeTexture(gl.TEXTURE0),state.bindTexture(gl.TEXTURE_2D,null),state.activeTexture(gl.TEXTURE1),state.bindTexture(gl.TEXTURE_2D,tempTexture),gl.copyTexImage2D(gl.TEXTURE_2D,0,gl.RGB,screenPositionPixels.x,screenPositionPixels.y,16,16,0),gl.uniform1i(uniforms.renderType,0),gl.uniform2f(uniforms.scale,scale.x,scale.y),gl.uniform3f(uniforms.screenPosition,screenPosition.x,screenPosition.y,screenPosition.z),state.disable(gl.BLEND),state.enable(gl.DEPTH_TEST),gl.drawElements(gl.TRIANGLES,6,gl.UNSIGNED_SHORT,0),state.activeTexture(gl.TEXTURE0),state.bindTexture(gl.TEXTURE_2D,occlusionTexture),gl.copyTexImage2D(gl.TEXTURE_2D,0,gl.RGBA,screenPositionPixels.x,screenPositionPixels.y,16,16,0),gl.uniform1i(uniforms.renderType,1),state.disable(gl.DEPTH_TEST),state.activeTexture(gl.TEXTURE1),state.bindTexture(gl.TEXTURE_2D,tempTexture),gl.drawElements(gl.TRIANGLES,6,gl.UNSIGNED_SHORT,0),flare.positionScreen.copy(screenPosition),flare.customUpdateCallback?flare.customUpdateCallback(flare):flare.updateLensFlares(),gl.uniform1i(uniforms.renderType,2),state.enable(gl.BLEND);for(var j=0,jl=flare.lensFlares.length;jl>j;j++){var sprite=flare.lensFlares[j];sprite.opacity>.001&&sprite.scale>.001&&(screenPosition.x=sprite.x,screenPosition.y=sprite.y,screenPosition.z=sprite.z,size=sprite.size*sprite.scale/viewport.w,scale.x=size*invAspect,scale.y=size,gl.uniform3f(uniforms.screenPosition,screenPosition.x,screenPosition.y,screenPosition.z),gl.uniform2f(uniforms.scale,scale.x,scale.y),gl.uniform1f(uniforms.rotation,sprite.rotation),gl.uniform1f(uniforms.opacity,sprite.opacity),gl.uniform3f(uniforms.color,sprite.color.r,sprite.color.g,sprite.color.b),state.setBlending(sprite.blending,sprite.blendEquation,sprite.blendSrc,sprite.blendDst),renderer.setTexture2D(sprite.texture,1),gl.drawElements(gl.TRIANGLES,6,gl.UNSIGNED_SHORT,0))}}}state.enable(gl.CULL_FACE),state.enable(gl.DEPTH_TEST),state.buffers.depth.setMask(!0),renderer.resetGLState()}}}function SpritePlugin(renderer,sprites){function init(){var vertices=new Float32Array([-.5,-.5,0,0,.5,-.5,1,0,.5,.5,1,1,-.5,.5,0,1]),faces=new Uint16Array([0,1,2,0,2,3]);vertexBuffer=gl.createBuffer(),elementBuffer=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer),gl.bufferData(gl.ARRAY_BUFFER,vertices,gl.STATIC_DRAW),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,elementBuffer),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,faces,gl.STATIC_DRAW),program=createProgram(),attributes={position:gl.getAttribLocation(program,"position"),uv:gl.getAttribLocation(program,"uv")},uniforms={uvOffset:gl.getUniformLocation(program,"uvOffset"),uvScale:gl.getUniformLocation(program,"uvScale"),rotation:gl.getUniformLocation(program,"rotation"),scale:gl.getUniformLocation(program,"scale"),color:gl.getUniformLocation(program,"color"),map:gl.getUniformLocation(program,"map"),opacity:gl.getUniformLocation(program,"opacity"),modelViewMatrix:gl.getUniformLocation(program,"modelViewMatrix"),projectionMatrix:gl.getUniformLocation(program,"projectionMatrix"),fogType:gl.getUniformLocation(program,"fogType"),fogDensity:gl.getUniformLocation(program,"fogDensity"),fogNear:gl.getUniformLocation(program,"fogNear"),fogFar:gl.getUniformLocation(program,"fogFar"),fogColor:gl.getUniformLocation(program,"fogColor"),alphaTest:gl.getUniformLocation(program,"alphaTest")};var canvas=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");canvas.width=8,canvas.height=8;var context=canvas.getContext("2d");context.fillStyle="white",context.fillRect(0,0,8,8),texture=new Texture(canvas),texture.needsUpdate=!0}function createProgram(){var program=gl.createProgram(),vertexShader=gl.createShader(gl.VERTEX_SHADER),fragmentShader=gl.createShader(gl.FRAGMENT_SHADER);return gl.shaderSource(vertexShader,["precision "+renderer.getPrecision()+" float;","#define SHADER_NAME SpriteMaterial","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform float rotation;","uniform vec2 scale;","uniform vec2 uvOffset;","uniform vec2 uvScale;","attribute vec2 position;","attribute vec2 uv;","varying vec2 vUV;","void main() {","vUV = uvOffset + uv * uvScale;","vec2 alignedPosition = position * scale;","vec2 rotatedPosition;","rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;","rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;","vec4 finalPosition;","finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );","finalPosition.xy += rotatedPosition;","finalPosition = projectionMatrix * finalPosition;","gl_Position = finalPosition;","}"].join("\n")),gl.shaderSource(fragmentShader,["precision "+renderer.getPrecision()+" float;","#define SHADER_NAME SpriteMaterial","uniform vec3 color;","uniform sampler2D map;","uniform float opacity;","uniform int fogType;","uniform vec3 fogColor;","uniform float fogDensity;","uniform float fogNear;","uniform float fogFar;","uniform float alphaTest;","varying vec2 vUV;","void main() {","vec4 texture = texture2D( map, vUV );","if ( texture.a < alphaTest ) discard;","gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );","if ( fogType > 0 ) {","float depth = gl_FragCoord.z / gl_FragCoord.w;","float fogFactor = 0.0;","if ( fogType == 1 ) {","fogFactor = smoothstep( fogNear, fogFar, depth );","} else {","const float LOG2 = 1.442695;","fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );","fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );","}","gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );","}","}"].join("\n")),gl.compileShader(vertexShader),gl.compileShader(fragmentShader),gl.attachShader(program,vertexShader),gl.attachShader(program,fragmentShader),gl.linkProgram(program),program}function painterSortStable(a,b){return a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:b.id-a.id}var vertexBuffer,elementBuffer,program,attributes,uniforms,texture,gl=renderer.context,state=renderer.state,spritePosition=new Vector3,spriteRotation=new Quaternion,spriteScale=new Vector3;this.render=function(scene,camera){if(0!==sprites.length){void 0===program&&init(),gl.useProgram(program),state.initAttributes(),state.enableAttribute(attributes.position),state.enableAttribute(attributes.uv),state.disableUnusedAttributes(),state.disable(gl.CULL_FACE),state.enable(gl.BLEND),gl.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer),gl.vertexAttribPointer(attributes.position,2,gl.FLOAT,!1,16,0),gl.vertexAttribPointer(attributes.uv,2,gl.FLOAT,!1,16,8),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,elementBuffer),gl.uniformMatrix4fv(uniforms.projectionMatrix,!1,camera.projectionMatrix.elements),state.activeTexture(gl.TEXTURE0),gl.uniform1i(uniforms.map,0);var oldFogType=0,sceneFogType=0,fog=scene.fog;fog?(gl.uniform3f(uniforms.fogColor,fog.color.r,fog.color.g,fog.color.b),fog.isFog?(gl.uniform1f(uniforms.fogNear,fog.near),gl.uniform1f(uniforms.fogFar,fog.far),gl.uniform1i(uniforms.fogType,1),oldFogType=1,sceneFogType=1):fog.isFogExp2&&(gl.uniform1f(uniforms.fogDensity,fog.density),gl.uniform1i(uniforms.fogType,2),oldFogType=2,sceneFogType=2)):(gl.uniform1i(uniforms.fogType,0),oldFogType=0,sceneFogType=0);for(var i=0,l=sprites.length;l>i;i++){var sprite=sprites[i];sprite.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse,sprite.matrixWorld),sprite.z=-sprite.modelViewMatrix.elements[14]}sprites.sort(painterSortStable);for(var scale=[],i=0,l=sprites.length;l>i;i++){var sprite=sprites[i],material=sprite.material;if(material.visible!==!1){sprite.onBeforeRender(renderer,scene,camera,void 0,material,void 0),gl.uniform1f(uniforms.alphaTest,material.alphaTest),gl.uniformMatrix4fv(uniforms.modelViewMatrix,!1,sprite.modelViewMatrix.elements),sprite.matrixWorld.decompose(spritePosition,spriteRotation,spriteScale),scale[0]=spriteScale.x,scale[1]=spriteScale.y;var fogType=0;scene.fog&&material.fog&&(fogType=sceneFogType),oldFogType!==fogType&&(gl.uniform1i(uniforms.fogType,fogType),oldFogType=fogType),null!==material.map?(gl.uniform2f(uniforms.uvOffset,material.map.offset.x,material.map.offset.y),gl.uniform2f(uniforms.uvScale,material.map.repeat.x,material.map.repeat.y)):(gl.uniform2f(uniforms.uvOffset,0,0),gl.uniform2f(uniforms.uvScale,1,1)),gl.uniform1f(uniforms.opacity,material.opacity),gl.uniform3f(uniforms.color,material.color.r,material.color.g,material.color.b),gl.uniform1f(uniforms.rotation,material.rotation),gl.uniform2fv(uniforms.scale,scale),state.setBlending(material.blending,material.blendEquation,material.blendSrc,material.blendDst,material.blendEquationAlpha,material.blendSrcAlpha,material.blendDstAlpha,material.premultipliedAlpha),state.buffers.depth.setTest(material.depthTest),state.buffers.depth.setMask(material.depthWrite),material.map?renderer.setTexture2D(material.map,0):renderer.setTexture2D(texture,0),gl.drawElements(gl.TRIANGLES,6,gl.UNSIGNED_SHORT,0),sprite.onAfterRender(renderer,scene,camera,void 0,material,void 0)}}state.enable(gl.CULL_FACE),renderer.resetGLState()}}}function Material(){Object.defineProperty(this,"id",{value:materialId++}),this.uuid=_Math.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.lights=!0,this.blending=NormalBlending,this.side=FrontSide,this.shading=SmoothShading,this.vertexColors=NoColors,this.opacity=1,this.transparent=!1,this.blendSrc=SrcAlphaFactor,this.blendDst=OneMinusSrcAlphaFactor,this.blendEquation=AddEquation,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=LessEqualDepth,this.depthTest=!0,this.depthWrite=!0,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.overdraw=0,this.visible=!0,this.needsUpdate=!0}function ShaderMaterial(parameters){Material.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,void 0!==parameters&&(void 0!==parameters.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(parameters))}function MeshDepthMaterial(parameters){Material.call(this),this.type="MeshDepthMaterial",this.depthPacking=BasicDepthPacking,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.setValues(parameters)}function Box3(min,max){this.min=void 0!==min?min:new Vector3(+(1/0),+(1/0),+(1/0)),this.max=void 0!==max?max:new Vector3(-(1/0),-(1/0),-(1/0))}function Sphere(center,radius){this.center=void 0!==center?center:new Vector3,this.radius=void 0!==radius?radius:0}function Matrix3(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}function Plane(normal,constant){this.normal=void 0!==normal?normal:new Vector3(1,0,0),this.constant=void 0!==constant?constant:0}function Frustum(p0,p1,p2,p3,p4,p5){this.planes=[void 0!==p0?p0:new Plane,void 0!==p1?p1:new Plane,void 0!==p2?p2:new Plane,void 0!==p3?p3:new Plane,void 0!==p4?p4:new Plane,void 0!==p5?p5:new Plane]}function WebGLShadowMap(_renderer,_lights,_objects,capabilities){function getDepthMaterial(object,material,isPointLight,lightPositionWorld){var geometry=object.geometry,result=null,materialVariants=_depthMaterials,customMaterial=object.customDepthMaterial;if(isPointLight&&(materialVariants=_distanceMaterials,customMaterial=object.customDistanceMaterial),customMaterial)result=customMaterial;else{var useMorphing=!1;material.morphTargets&&(geometry&&geometry.isBufferGeometry?useMorphing=geometry.morphAttributes&&geometry.morphAttributes.position&&geometry.morphAttributes.position.length>0:geometry&&geometry.isGeometry&&(useMorphing=geometry.morphTargets&&geometry.morphTargets.length>0)),object.isSkinnedMesh&&material.skinning===!1&&console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",object);var useSkinning=object.isSkinnedMesh&&material.skinning,variantIndex=0;useMorphing&&(variantIndex|=_MorphingFlag),useSkinning&&(variantIndex|=_SkinningFlag),result=materialVariants[variantIndex]}if(_renderer.localClippingEnabled&&material.clipShadows===!0&&0!==material.clippingPlanes.length){var keyA=result.uuid,keyB=material.uuid,materialsForVariant=_materialCache[keyA];void 0===materialsForVariant&&(materialsForVariant={},_materialCache[keyA]=materialsForVariant);var cachedMaterial=materialsForVariant[keyB];void 0===cachedMaterial&&(cachedMaterial=result.clone(),materialsForVariant[keyB]=cachedMaterial),result=cachedMaterial}result.visible=material.visible,result.wireframe=material.wireframe;var side=material.side;return scope.renderSingleSided&&side==DoubleSide&&(side=FrontSide),scope.renderReverseSided&&(side===FrontSide?side=BackSide:side===BackSide&&(side=FrontSide)),result.side=side,result.clipShadows=material.clipShadows,result.clippingPlanes=material.clippingPlanes,result.wireframeLinewidth=material.wireframeLinewidth,result.linewidth=material.linewidth,isPointLight&&void 0!==result.uniforms.lightPos&&result.uniforms.lightPos.value.copy(lightPositionWorld),result}function renderObject(object,camera,shadowCamera,isPointLight){if(object.visible!==!1){var visible=object.layers.test(camera.layers);if(visible&&(object.isMesh||object.isLine||object.isPoints)&&object.castShadow&&(!object.frustumCulled||_frustum.intersectsObject(object))){object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse,object.matrixWorld);var geometry=_objects.update(object),material=object.material;if(Array.isArray(material))for(var groups=geometry.groups,k=0,kl=groups.length;kl>k;k++){var group=groups[k],groupMaterial=material[group.materialIndex];if(groupMaterial&&groupMaterial.visible){var depthMaterial=getDepthMaterial(object,groupMaterial,isPointLight,_lightPositionWorld);_renderer.renderBufferDirect(shadowCamera,null,geometry,depthMaterial,object,group)}}else if(material.visible){var depthMaterial=getDepthMaterial(object,material,isPointLight,_lightPositionWorld);_renderer.renderBufferDirect(shadowCamera,null,geometry,depthMaterial,object,null)}}for(var children=object.children,i=0,l=children.length;l>i;i++)renderObject(children[i],camera,shadowCamera,isPointLight)}}var _gl=_renderer.context,_state=_renderer.state,_frustum=new Frustum,_projScreenMatrix=new Matrix4,_lightShadows=_lights.shadows,_shadowMapSize=new Vector2,_maxShadowMapSize=new Vector2(capabilities.maxTextureSize,capabilities.maxTextureSize),_lookTarget=new Vector3,_lightPositionWorld=new Vector3,_MorphingFlag=1,_SkinningFlag=2,_NumberOfMaterialVariants=(_MorphingFlag|_SkinningFlag)+1,_depthMaterials=new Array(_NumberOfMaterialVariants),_distanceMaterials=new Array(_NumberOfMaterialVariants),_materialCache={},cubeDirections=[new Vector3(1,0,0),new Vector3(-1,0,0),new Vector3(0,0,1),new Vector3(0,0,-1),new Vector3(0,1,0),new Vector3(0,-1,0)],cubeUps=[new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,1,0),new Vector3(0,0,1),new Vector3(0,0,-1)],cube2DViewPorts=[new Vector4,new Vector4,new Vector4,new Vector4,new Vector4,new Vector4],depthMaterialTemplate=new MeshDepthMaterial;depthMaterialTemplate.depthPacking=RGBADepthPacking,depthMaterialTemplate.clipping=!0;for(var distanceShader=ShaderLib.distanceRGBA,distanceUniforms=UniformsUtils.clone(distanceShader.uniforms),i=0;i!==_NumberOfMaterialVariants;++i){var useMorphing=0!==(i&_MorphingFlag),useSkinning=0!==(i&_SkinningFlag),depthMaterial=depthMaterialTemplate.clone();depthMaterial.morphTargets=useMorphing,depthMaterial.skinning=useSkinning,_depthMaterials[i]=depthMaterial;var distanceMaterial=new ShaderMaterial({defines:{USE_SHADOWMAP:""},uniforms:distanceUniforms,vertexShader:distanceShader.vertexShader,fragmentShader:distanceShader.fragmentShader,morphTargets:useMorphing,skinning:useSkinning,clipping:!0});_distanceMaterials[i]=distanceMaterial}var scope=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=PCFShadowMap,this.renderReverseSided=!0,this.renderSingleSided=!0,this.render=function(scene,camera){if(scope.enabled!==!1&&(scope.autoUpdate!==!1||scope.needsUpdate!==!1)&&0!==_lightShadows.length){_state.disable(_gl.BLEND),_state.buffers.color.setClear(1,1,1,1),_state.buffers.depth.setTest(!0),_state.setScissorTest(!1);for(var faceCount,i=0,il=_lightShadows.length;il>i;i++){var light=_lightShadows[i],shadow=light.shadow,isPointLight=light&&light.isPointLight;if(void 0!==shadow){var shadowCamera=shadow.camera;if(_shadowMapSize.copy(shadow.mapSize),_shadowMapSize.min(_maxShadowMapSize),isPointLight){var vpWidth=_shadowMapSize.x,vpHeight=_shadowMapSize.y;cube2DViewPorts[0].set(2*vpWidth,vpHeight,vpWidth,vpHeight),cube2DViewPorts[1].set(0,vpHeight,vpWidth,vpHeight),cube2DViewPorts[2].set(3*vpWidth,vpHeight,vpWidth,vpHeight),cube2DViewPorts[3].set(vpWidth,vpHeight,vpWidth,vpHeight),cube2DViewPorts[4].set(3*vpWidth,0,vpWidth,vpHeight),cube2DViewPorts[5].set(vpWidth,0,vpWidth,vpHeight),_shadowMapSize.x*=4,_shadowMapSize.y*=2}if(null===shadow.map){var pars={minFilter:NearestFilter,magFilter:NearestFilter,format:RGBAFormat};shadow.map=new WebGLRenderTarget(_shadowMapSize.x,_shadowMapSize.y,pars),shadow.map.texture.name=light.name+".shadowMap",shadowCamera.updateProjectionMatrix()}shadow.isSpotLightShadow&&shadow.update(light);var shadowMap=shadow.map,shadowMatrix=shadow.matrix;_lightPositionWorld.setFromMatrixPosition(light.matrixWorld),shadowCamera.position.copy(_lightPositionWorld),isPointLight?(faceCount=6,shadowMatrix.makeTranslation(-_lightPositionWorld.x,-_lightPositionWorld.y,-_lightPositionWorld.z)):(faceCount=1,_lookTarget.setFromMatrixPosition(light.target.matrixWorld),shadowCamera.lookAt(_lookTarget),shadowCamera.updateMatrixWorld(),shadowMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),shadowMatrix.multiply(shadowCamera.projectionMatrix),shadowMatrix.multiply(shadowCamera.matrixWorldInverse)),_renderer.setRenderTarget(shadowMap),_renderer.clear();for(var face=0;faceCount>face;face++){if(isPointLight){_lookTarget.copy(shadowCamera.position),_lookTarget.add(cubeDirections[face]),shadowCamera.up.copy(cubeUps[face]),shadowCamera.lookAt(_lookTarget),shadowCamera.updateMatrixWorld();var vpDimensions=cube2DViewPorts[face];_state.viewport(vpDimensions)}_projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix,shadowCamera.matrixWorldInverse),_frustum.setFromMatrix(_projScreenMatrix),renderObject(scene,camera,shadowCamera,isPointLight)}}else console.warn("THREE.WebGLShadowMap:",light,"has no shadow.")}var clearColor=_renderer.getClearColor(),clearAlpha=_renderer.getClearAlpha();_renderer.setClearColor(clearColor,clearAlpha),scope.needsUpdate=!1}}}function WebGLAttributes(gl){function createBuffer(attribute,bufferType){var array=attribute.array,usage=attribute.dynamic?gl.DYNAMIC_DRAW:gl.STATIC_DRAW,buffer=gl.createBuffer();gl.bindBuffer(bufferType,buffer),gl.bufferData(bufferType,array,usage),attribute.onUploadCallback();var type=gl.FLOAT;return array instanceof Float32Array?type=gl.FLOAT:array instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):array instanceof Uint16Array?type=gl.UNSIGNED_SHORT:array instanceof Int16Array?type=gl.SHORT:array instanceof Uint32Array?type=gl.UNSIGNED_INT:array instanceof Int32Array?type=gl.INT:array instanceof Int8Array?type=gl.BYTE:array instanceof Uint8Array&&(type=gl.UNSIGNED_BYTE),{buffer:buffer,type:type,bytesPerElement:array.BYTES_PER_ELEMENT,version:attribute.version}}function updateBuffer(buffer,attribute,bufferType){var array=attribute.array,updateRange=attribute.updateRange;gl.bindBuffer(bufferType,buffer),attribute.dynamic===!1?gl.bufferData(bufferType,array,gl.STATIC_DRAW):-1===updateRange.count?gl.bufferSubData(bufferType,0,array):0===updateRange.count?console.error("THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually."):(gl.bufferSubData(bufferType,updateRange.offset*array.BYTES_PER_ELEMENT,array.subarray(updateRange.offset,updateRange.offset+updateRange.count)),updateRange.count=-1)}function get(attribute){return attribute.isInterleavedBufferAttribute&&(attribute=attribute.data),buffers[attribute.uuid]}function remove(attribute){attribute.isInterleavedBufferAttribute&&(attribute=attribute.data);var data=buffers[attribute.uuid];data&&(gl.deleteBuffer(data.buffer),delete buffers[attribute.uuid])}function update(attribute,bufferType){attribute.isInterleavedBufferAttribute&&(attribute=attribute.data);var data=buffers[attribute.uuid];void 0===data?buffers[attribute.uuid]=createBuffer(attribute,bufferType):data.version<attribute.version&&(updateBuffer(data.buffer,attribute,bufferType),data.version=attribute.version)}var buffers={};return{get:get,remove:remove,update:update}}function Euler(x,y,z,order){this._x=x||0,this._y=y||0,this._z=z||0,this._order=order||Euler.DefaultOrder}function Layers(){this.mask=1}function Object3D(){function onRotationChange(){quaternion.setFromEuler(rotation,!1)}function onQuaternionChange(){rotation.setFromQuaternion(quaternion,void 0,!1)}Object.defineProperty(this,"id",{
value:object3DId++}),this.uuid=_Math.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Object3D.DefaultUp.clone();var position=new Vector3,rotation=new Euler,quaternion=new Quaternion,scale=new Vector3(1,1,1);rotation.onChange(onRotationChange),quaternion.onChange(onQuaternionChange),Object.defineProperties(this,{position:{enumerable:!0,value:position},rotation:{enumerable:!0,value:rotation},quaternion:{enumerable:!0,value:quaternion},scale:{enumerable:!0,value:scale},modelViewMatrix:{value:new Matrix4},normalMatrix:{value:new Matrix3}}),this.matrix=new Matrix4,this.matrixWorld=new Matrix4,this.matrixAutoUpdate=Object3D.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new Layers,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}function Camera(){Object3D.call(this),this.type="Camera",this.matrixWorldInverse=new Matrix4,this.projectionMatrix=new Matrix4}function OrthographicCamera(left,right,top,bottom,near,far){Camera.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=left,this.right=right,this.top=top,this.bottom=bottom,this.near=void 0!==near?near:.1,this.far=void 0!==far?far:2e3,this.updateProjectionMatrix()}function PerspectiveCamera(fov,aspect,near,far){Camera.call(this),this.type="PerspectiveCamera",this.fov=void 0!==fov?fov:50,this.zoom=1,this.near=void 0!==near?near:.1,this.far=void 0!==far?far:2e3,this.focus=10,this.aspect=void 0!==aspect?aspect:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}function Face3(a,b,c,normal,color,materialIndex){this.a=a,this.b=b,this.c=c,this.normal=normal&&normal.isVector3?normal:new Vector3,this.vertexNormals=Array.isArray(normal)?normal:[],this.color=color&&color.isColor?color:new Color,this.vertexColors=Array.isArray(color)?color:[],this.materialIndex=void 0!==materialIndex?materialIndex:0}function GeometryIdCount(){return count++}function Geometry(){Object.defineProperty(this,"id",{value:GeometryIdCount()}),this.uuid=_Math.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}function BufferAttribute(array,itemSize,normalized){if(Array.isArray(array))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.uuid=_Math.generateUUID(),this.name="",this.array=array,this.itemSize=itemSize,this.count=void 0!==array?array.length/itemSize:0,this.normalized=normalized===!0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.onUploadCallback=function(){},this.version=0}function Int8BufferAttribute(array,itemSize){BufferAttribute.call(this,new Int8Array(array),itemSize)}function Uint8BufferAttribute(array,itemSize){BufferAttribute.call(this,new Uint8Array(array),itemSize)}function Uint8ClampedBufferAttribute(array,itemSize){BufferAttribute.call(this,new Uint8ClampedArray(array),itemSize)}function Int16BufferAttribute(array,itemSize){BufferAttribute.call(this,new Int16Array(array),itemSize)}function Uint16BufferAttribute(array,itemSize){BufferAttribute.call(this,new Uint16Array(array),itemSize)}function Int32BufferAttribute(array,itemSize){BufferAttribute.call(this,new Int32Array(array),itemSize)}function Uint32BufferAttribute(array,itemSize){BufferAttribute.call(this,new Uint32Array(array),itemSize)}function Float32BufferAttribute(array,itemSize){BufferAttribute.call(this,new Float32Array(array),itemSize)}function Float64BufferAttribute(array,itemSize){BufferAttribute.call(this,new Float64Array(array),itemSize)}function DirectGeometry(){this.indices=[],this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function arrayMax(array){if(0===array.length)return-(1/0);for(var max=array[0],i=1,l=array.length;l>i;++i)array[i]>max&&(max=array[i]);return max}function BufferGeometry(){Object.defineProperty(this,"id",{value:GeometryIdCount()}),this.uuid=_Math.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0}}function BoxGeometry(width,height,depth,widthSegments,heightSegments,depthSegments){Geometry.call(this),this.type="BoxGeometry",this.parameters={width:width,height:height,depth:depth,widthSegments:widthSegments,heightSegments:heightSegments,depthSegments:depthSegments},this.fromBufferGeometry(new BoxBufferGeometry(width,height,depth,widthSegments,heightSegments,depthSegments)),this.mergeVertices()}function BoxBufferGeometry(width,height,depth,widthSegments,heightSegments,depthSegments){function buildPlane(u,v,w,udir,vdir,width,height,depth,gridX,gridY,materialIndex){var ix,iy,segmentWidth=width/gridX,segmentHeight=height/gridY,widthHalf=width/2,heightHalf=height/2,depthHalf=depth/2,gridX1=gridX+1,gridY1=gridY+1,vertexCounter=0,groupCount=0,vector=new Vector3;for(iy=0;gridY1>iy;iy++){var y=iy*segmentHeight-heightHalf;for(ix=0;gridX1>ix;ix++){var x=ix*segmentWidth-widthHalf;vector[u]=x*udir,vector[v]=y*vdir,vector[w]=depthHalf,vertices.push(vector.x,vector.y,vector.z),vector[u]=0,vector[v]=0,vector[w]=depth>0?1:-1,normals.push(vector.x,vector.y,vector.z),uvs.push(ix/gridX),uvs.push(1-iy/gridY),vertexCounter+=1}}for(iy=0;gridY>iy;iy++)for(ix=0;gridX>ix;ix++){var a=numberOfVertices+ix+gridX1*iy,b=numberOfVertices+ix+gridX1*(iy+1),c=numberOfVertices+(ix+1)+gridX1*(iy+1),d=numberOfVertices+(ix+1)+gridX1*iy;indices.push(a,b,d),indices.push(b,c,d),groupCount+=6}scope.addGroup(groupStart,groupCount,materialIndex),groupStart+=groupCount,numberOfVertices+=vertexCounter}BufferGeometry.call(this),this.type="BoxBufferGeometry",this.parameters={width:width,height:height,depth:depth,widthSegments:widthSegments,heightSegments:heightSegments,depthSegments:depthSegments};var scope=this;widthSegments=Math.floor(widthSegments)||1,heightSegments=Math.floor(heightSegments)||1,depthSegments=Math.floor(depthSegments)||1;var indices=[],vertices=[],normals=[],uvs=[],numberOfVertices=0,groupStart=0;buildPlane("z","y","x",-1,-1,depth,height,width,depthSegments,heightSegments,0),buildPlane("z","y","x",1,-1,depth,height,-width,depthSegments,heightSegments,1),buildPlane("x","z","y",1,1,width,depth,height,widthSegments,depthSegments,2),buildPlane("x","z","y",1,-1,width,depth,-height,widthSegments,depthSegments,3),buildPlane("x","y","z",1,-1,width,height,depth,widthSegments,heightSegments,4),buildPlane("x","y","z",-1,-1,width,height,-depth,widthSegments,heightSegments,5),this.setIndex(indices),this.addAttribute("position",new Float32BufferAttribute(vertices,3)),this.addAttribute("normal",new Float32BufferAttribute(normals,3)),this.addAttribute("uv",new Float32BufferAttribute(uvs,2))}function PlaneGeometry(width,height,widthSegments,heightSegments){Geometry.call(this),this.type="PlaneGeometry",this.parameters={width:width,height:height,widthSegments:widthSegments,heightSegments:heightSegments},this.fromBufferGeometry(new PlaneBufferGeometry(width,height,widthSegments,heightSegments)),this.mergeVertices()}function PlaneBufferGeometry(width,height,widthSegments,heightSegments){BufferGeometry.call(this),this.type="PlaneBufferGeometry",this.parameters={width:width,height:height,widthSegments:widthSegments,heightSegments:heightSegments};var ix,iy,width_half=width/2,height_half=height/2,gridX=Math.floor(widthSegments)||1,gridY=Math.floor(heightSegments)||1,gridX1=gridX+1,gridY1=gridY+1,segment_width=width/gridX,segment_height=height/gridY,indices=[],vertices=[],normals=[],uvs=[];for(iy=0;gridY1>iy;iy++){var y=iy*segment_height-height_half;for(ix=0;gridX1>ix;ix++){var x=ix*segment_width-width_half;vertices.push(x,-y,0),normals.push(0,0,1),uvs.push(ix/gridX),uvs.push(1-iy/gridY)}}for(iy=0;gridY>iy;iy++)for(ix=0;gridX>ix;ix++){var a=ix+gridX1*iy,b=ix+gridX1*(iy+1),c=ix+1+gridX1*(iy+1),d=ix+1+gridX1*iy;indices.push(a,b,d),indices.push(b,c,d)}this.setIndex(indices),this.addAttribute("position",new Float32BufferAttribute(vertices,3)),this.addAttribute("normal",new Float32BufferAttribute(normals,3)),this.addAttribute("uv",new Float32BufferAttribute(uvs,2))}function MeshBasicMaterial(parameters){Material.call(this),this.type="MeshBasicMaterial",this.color=new Color(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.lights=!1,this.setValues(parameters)}function Ray(origin,direction){this.origin=void 0!==origin?origin:new Vector3,this.direction=void 0!==direction?direction:new Vector3}function Line3(start,end){this.start=void 0!==start?start:new Vector3,this.end=void 0!==end?end:new Vector3}function Triangle(a,b,c){this.a=void 0!==a?a:new Vector3,this.b=void 0!==b?b:new Vector3,this.c=void 0!==c?c:new Vector3}function Mesh(geometry,material){Object3D.call(this),this.type="Mesh",this.geometry=void 0!==geometry?geometry:new BufferGeometry,this.material=void 0!==material?material:new MeshBasicMaterial({color:16777215*Math.random()}),this.drawMode=TrianglesDrawMode,this.updateMorphTargets()}function WebGLBackground(renderer,state,objects,premultipliedAlpha){function render(scene,camera,forceClear){var background=scene.background;null===background?setClear(clearColor,clearAlpha):background&&background.isColor&&(setClear(background,1),forceClear=!0),(renderer.autoClear||forceClear)&&renderer.clear(renderer.autoClearColor,renderer.autoClearDepth,renderer.autoClearStencil),background&&background.isCubeTexture?(void 0===boxCamera&&(boxCamera=new PerspectiveCamera,boxMesh=new Mesh(new BoxBufferGeometry(5,5,5),new ShaderMaterial({uniforms:ShaderLib.cube.uniforms,vertexShader:ShaderLib.cube.vertexShader,fragmentShader:ShaderLib.cube.fragmentShader,side:BackSide,depthTest:!1,depthWrite:!1,fog:!1}))),boxCamera.projectionMatrix.copy(camera.projectionMatrix),boxCamera.matrixWorld.extractRotation(camera.matrixWorld),boxCamera.matrixWorldInverse.getInverse(boxCamera.matrixWorld),boxMesh.material.uniforms.tCube.value=background,boxMesh.modelViewMatrix.multiplyMatrices(boxCamera.matrixWorldInverse,boxMesh.matrixWorld),objects.update(boxMesh),renderer.renderBufferDirect(boxCamera,null,boxMesh.geometry,boxMesh.material,boxMesh,null)):background&&background.isTexture&&(void 0===planeCamera&&(planeCamera=new OrthographicCamera(-1,1,1,-1,0,1),planeMesh=new Mesh(new PlaneBufferGeometry(2,2),new MeshBasicMaterial({depthTest:!1,depthWrite:!1,fog:!1}))),planeMesh.material.map=background,objects.update(planeMesh),renderer.renderBufferDirect(planeCamera,null,planeMesh.geometry,planeMesh.material,planeMesh,null))}function setClear(color,alpha){state.buffers.color.setClear(color.r,color.g,color.b,alpha,premultipliedAlpha)}var planeCamera,planeMesh,boxCamera,boxMesh,clearColor=new Color(0),clearAlpha=0;return{getClearColor:function(){return clearColor},setClearColor:function(color,alpha){clearColor.set(color),clearAlpha=void 0!==alpha?alpha:1,setClear(clearColor,clearAlpha)},getClearAlpha:function(){return clearAlpha},setClearAlpha:function(alpha){clearAlpha=alpha,setClear(clearColor,clearAlpha)},render:render}}function painterSortStable(a,b){return a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.program&&b.program&&a.program!==b.program?a.program.id-b.program.id:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function reversePainterSortStable(a,b){return a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function WebGLRenderList(){function init(){opaqueLastIndex=-1,transparentLastIndex=-1}function push(object,geometry,material,z,group){var array,index;material.transparent?(array=transparent,index=++transparentLastIndex):(array=opaque,index=++opaqueLastIndex);var renderItem=array[index];renderItem?(renderItem.id=object.id,renderItem.object=object,renderItem.geometry=geometry,renderItem.material=material,renderItem.program=material.program,renderItem.renderOrder=object.renderOrder,renderItem.z=z,renderItem.group=group):(renderItem={id:object.id,object:object,geometry:geometry,material:material,program:material.program,renderOrder:object.renderOrder,z:z,group:group},array.push(renderItem))}function finish(){opaque.length=opaqueLastIndex+1,transparent.length=transparentLastIndex+1}function sort(){opaque.sort(painterSortStable),transparent.sort(reversePainterSortStable)}var opaque=[],opaqueLastIndex=-1,transparent=[],transparentLastIndex=-1;return{opaque:opaque,transparent:transparent,init:init,push:push,finish:finish,sort:sort}}function WebGLRenderLists(){function get(scene,camera){var hash=scene.id+","+camera.id,list=lists[hash];return void 0===list&&(list=new WebGLRenderList,lists[hash]=list),list}function dispose(){lists={}}var lists={};return{get:get,dispose:dispose}}function WebGLIndexedBufferRenderer(gl,extensions,infoRender){function setMode(value){mode=value}function setIndex(value){type=value.type,bytesPerElement=value.bytesPerElement}function render(start,count){gl.drawElements(mode,count,type,start*bytesPerElement),infoRender.calls++,infoRender.vertices+=count,mode===gl.TRIANGLES&&(infoRender.faces+=count/3)}function renderInstances(geometry,start,count){var extension=extensions.get("ANGLE_instanced_arrays");return null===extension?void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."):(extension.drawElementsInstancedANGLE(mode,count,type,start*bytesPerElement,geometry.maxInstancedCount),infoRender.calls++,infoRender.vertices+=count*geometry.maxInstancedCount,void(mode===gl.TRIANGLES&&(infoRender.faces+=geometry.maxInstancedCount*count/3)))}var mode,type,bytesPerElement;this.setMode=setMode,this.setIndex=setIndex,this.render=render,this.renderInstances=renderInstances}function WebGLBufferRenderer(gl,extensions,infoRender){function setMode(value){mode=value}function render(start,count){gl.drawArrays(mode,start,count),infoRender.calls++,infoRender.vertices+=count,mode===gl.TRIANGLES&&(infoRender.faces+=count/3)}function renderInstances(geometry,start,count){var extension=extensions.get("ANGLE_instanced_arrays");if(null===extension)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");var position=geometry.attributes.position;position.isInterleavedBufferAttribute?(count=position.data.count,extension.drawArraysInstancedANGLE(mode,0,count,geometry.maxInstancedCount)):extension.drawArraysInstancedANGLE(mode,start,count,geometry.maxInstancedCount),infoRender.calls++,infoRender.vertices+=count*geometry.maxInstancedCount,mode===gl.TRIANGLES&&(infoRender.faces+=geometry.maxInstancedCount*count/3)}var mode;this.setMode=setMode,this.render=render,this.renderInstances=renderInstances}function WebGLGeometries(gl,attributes,infoMemory){function onGeometryDispose(event){var geometry=event.target,buffergeometry=geometries[geometry.id];null!==buffergeometry.index&&attributes.remove(buffergeometry.index);for(var name in buffergeometry.attributes)attributes.remove(buffergeometry.attributes[name]);geometry.removeEventListener("dispose",onGeometryDispose),delete geometries[geometry.id];var attribute=wireframeAttributes[geometry.id];attribute&&(attributes.remove(attribute),delete wireframeAttributes[geometry.id]),attribute=wireframeAttributes[buffergeometry.id],attribute&&(attributes.remove(attribute),delete wireframeAttributes[buffergeometry.id]),infoMemory.geometries--}function get(object,geometry){var buffergeometry=geometries[geometry.id];return buffergeometry?buffergeometry:(geometry.addEventListener("dispose",onGeometryDispose),geometry.isBufferGeometry?buffergeometry=geometry:geometry.isGeometry&&(void 0===geometry._bufferGeometry&&(geometry._bufferGeometry=(new BufferGeometry).setFromObject(object)),buffergeometry=geometry._bufferGeometry),geometries[geometry.id]=buffergeometry,infoMemory.geometries++,buffergeometry)}function update(geometry){var index=geometry.index,geometryAttributes=geometry.attributes;null!==index&&attributes.update(index,gl.ELEMENT_ARRAY_BUFFER);for(var name in geometryAttributes)attributes.update(geometryAttributes[name],gl.ARRAY_BUFFER);var morphAttributes=geometry.morphAttributes;for(var name in morphAttributes)for(var array=morphAttributes[name],i=0,l=array.length;l>i;i++)attributes.update(array[i],gl.ARRAY_BUFFER)}function getWireframeAttribute(geometry){var attribute=wireframeAttributes[geometry.id];if(attribute)return attribute;var indices=[],geometryIndex=geometry.index,geometryAttributes=geometry.attributes;if(null!==geometryIndex)for(var array=geometryIndex.array,i=0,l=array.length;l>i;i+=3){var a=array[i+0],b=array[i+1],c=array[i+2];indices.push(a,b,b,c,c,a)}else for(var array=geometryAttributes.position.array,i=0,l=array.length/3-1;l>i;i+=3){var a=i+0,b=i+1,c=i+2;indices.push(a,b,b,c,c,a)}return attribute=new(arrayMax(indices)>65535?Uint32BufferAttribute:Uint16BufferAttribute)(indices,1),attributes.update(attribute,gl.ELEMENT_ARRAY_BUFFER),wireframeAttributes[geometry.id]=attribute,attribute}var geometries={},wireframeAttributes={};return{get:get,update:update,getWireframeAttribute:getWireframeAttribute}}function WebGLLights(){var lights={};return{get:function(light){if(void 0!==lights[light.id])return lights[light.id];var uniforms;switch(light.type){case"DirectionalLight":uniforms={direction:new Vector3,color:new Color,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"SpotLight":uniforms={position:new Vector3,direction:new Vector3,color:new Color,distance:0,coneCos:0,penumbraCos:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"PointLight":uniforms={position:new Vector3,color:new Color,distance:0,decay:0,shadow:!1,shadowBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"HemisphereLight":uniforms={direction:new Vector3,skyColor:new Color,groundColor:new Color};break;case"RectAreaLight":uniforms={color:new Color,position:new Vector3,halfWidth:new Vector3,halfHeight:new Vector3}}return lights[light.id]=uniforms,uniforms}}}function WebGLObjects(gl,geometries,infoRender){function update(object){var frame=infoRender.frame,geometry=object.geometry,buffergeometry=geometries.get(object,geometry);return updateList[buffergeometry.id]!==frame&&(geometry.isGeometry&&buffergeometry.updateFromObject(object),geometries.update(buffergeometry),updateList[buffergeometry.id]=frame),buffergeometry}function clear(){updateList={}}var updateList={};return{update:update,clear:clear}}function addLineNumbers(string){for(var lines=string.split("\n"),i=0;i<lines.length;i++)lines[i]=i+1+": "+lines[i];return lines.join("\n")}function WebGLShader(gl,type,string){var shader=gl.createShader(type);return gl.shaderSource(shader,string),gl.compileShader(shader),gl.getShaderParameter(shader,gl.COMPILE_STATUS)===!1&&console.error("THREE.WebGLShader: Shader couldn't compile."),""!==gl.getShaderInfoLog(shader)&&console.warn("THREE.WebGLShader: gl.getShaderInfoLog()",type===gl.VERTEX_SHADER?"vertex":"fragment",gl.getShaderInfoLog(shader),addLineNumbers(string)),shader}function getEncodingComponents(encoding){switch(encoding){case LinearEncoding:return["Linear","( value )"];case sRGBEncoding:return["sRGB","( value )"];case RGBEEncoding:return["RGBE","( value )"];case RGBM7Encoding:return["RGBM","( value, 7.0 )"];case RGBM16Encoding:return["RGBM","( value, 16.0 )"];case RGBDEncoding:return["RGBD","( value, 256.0 )"];case GammaEncoding:return["Gamma","( value, float( GAMMA_FACTOR ) )"];default:throw new Error("unsupported encoding: "+encoding)}}function getTexelDecodingFunction(functionName,encoding){var components=getEncodingComponents(encoding);return"vec4 "+functionName+"( vec4 value ) { return "+components[0]+"ToLinear"+components[1]+"; }"}function getTexelEncodingFunction(functionName,encoding){var components=getEncodingComponents(encoding);return"vec4 "+functionName+"( vec4 value ) { return LinearTo"+components[0]+components[1]+"; }"}function getToneMappingFunction(functionName,toneMapping){var toneMappingName;switch(toneMapping){case LinearToneMapping:toneMappingName="Linear";break;case ReinhardToneMapping:toneMappingName="Reinhard";break;case Uncharted2ToneMapping:toneMappingName="Uncharted2";break;case CineonToneMapping:toneMappingName="OptimizedCineon";break;default:throw new Error("unsupported toneMapping: "+toneMapping)}return"vec3 "+functionName+"( vec3 color ) { return "+toneMappingName+"ToneMapping( color ); }"}function generateExtensions(extensions,parameters,rendererExtensions){extensions=extensions||{};var chunks=[extensions.derivatives||parameters.envMapCubeUV||parameters.bumpMap||parameters.normalMap||parameters.flatShading?"#extension GL_OES_standard_derivatives : enable":"",(extensions.fragDepth||parameters.logarithmicDepthBuffer)&&rendererExtensions.get("EXT_frag_depth")?"#extension GL_EXT_frag_depth : enable":"",extensions.drawBuffers&&rendererExtensions.get("WEBGL_draw_buffers")?"#extension GL_EXT_draw_buffers : require":"",(extensions.shaderTextureLOD||parameters.envMap)&&rendererExtensions.get("EXT_shader_texture_lod")?"#extension GL_EXT_shader_texture_lod : enable":""];return chunks.filter(filterEmptyLine).join("\n")}function generateDefines(defines){var chunks=[];for(var name in defines){var value=defines[name];value!==!1&&chunks.push("#define "+name+" "+value)}return chunks.join("\n")}function fetchAttributeLocations(gl,program,identifiers){for(var attributes={},n=gl.getProgramParameter(program,gl.ACTIVE_ATTRIBUTES),i=0;n>i;i++){var info=gl.getActiveAttrib(program,i),name=info.name;attributes[name]=gl.getAttribLocation(program,name)}return attributes}function filterEmptyLine(string){return""!==string}function replaceLightNums(string,parameters){return string.replace(/NUM_DIR_LIGHTS/g,parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g,parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g,parameters.numHemiLights)}function parseIncludes(string){function replace(match,include){var replace=ShaderChunk[include];if(void 0===replace)throw new Error("Can not resolve #include <"+include+">");return parseIncludes(replace)}var pattern=/^[ \t]*#include +<([\w\d.]+)>/gm;return string.replace(pattern,replace)}function unrollLoops(string){function replace(match,start,end,snippet){for(var unroll="",i=parseInt(start);i<parseInt(end);i++)unroll+=snippet.replace(/\[ i \]/g,"[ "+i+" ]");return unroll}var pattern=/for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;return string.replace(pattern,replace)}function WebGLProgram(renderer,code,material,shader,parameters){var gl=renderer.context,extensions=material.extensions,defines=material.defines,vertexShader=shader.vertexShader,fragmentShader=shader.fragmentShader,shadowMapTypeDefine="SHADOWMAP_TYPE_BASIC";parameters.shadowMapType===PCFShadowMap?shadowMapTypeDefine="SHADOWMAP_TYPE_PCF":parameters.shadowMapType===PCFSoftShadowMap&&(shadowMapTypeDefine="SHADOWMAP_TYPE_PCF_SOFT");var envMapTypeDefine="ENVMAP_TYPE_CUBE",envMapModeDefine="ENVMAP_MODE_REFLECTION",envMapBlendingDefine="ENVMAP_BLENDING_MULTIPLY";if(parameters.envMap){switch(material.envMap.mapping){case CubeReflectionMapping:case CubeRefractionMapping:envMapTypeDefine="ENVMAP_TYPE_CUBE";break;case CubeUVReflectionMapping:case CubeUVRefractionMapping:envMapTypeDefine="ENVMAP_TYPE_CUBE_UV";break;case EquirectangularReflectionMapping:case EquirectangularRefractionMapping:envMapTypeDefine="ENVMAP_TYPE_EQUIREC";break;case SphericalReflectionMapping:envMapTypeDefine="ENVMAP_TYPE_SPHERE"}switch(material.envMap.mapping){case CubeRefractionMapping:case EquirectangularRefractionMapping:envMapModeDefine="ENVMAP_MODE_REFRACTION"}switch(material.combine){case MultiplyOperation:envMapBlendingDefine="ENVMAP_BLENDING_MULTIPLY";break;case MixOperation:envMapBlendingDefine="ENVMAP_BLENDING_MIX";break;case AddOperation:envMapBlendingDefine="ENVMAP_BLENDING_ADD"}}var prefixVertex,prefixFragment,gammaFactorDefine=renderer.gammaFactor>0?renderer.gammaFactor:1,customExtensions=generateExtensions(extensions,parameters,renderer.extensions),customDefines=generateDefines(defines),program=gl.createProgram();material.isRawShaderMaterial?(prefixVertex=[customDefines,"\n"].filter(filterEmptyLine).join("\n"),prefixFragment=[customExtensions,customDefines,"\n"].filter(filterEmptyLine).join("\n")):(prefixVertex=["precision "+parameters.precision+" float;","precision "+parameters.precision+" int;","#define SHADER_NAME "+shader.name,customDefines,parameters.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+gammaFactorDefine,"#define MAX_BONES "+parameters.maxBones,parameters.useFog&&parameters.fog?"#define USE_FOG":"",parameters.useFog&&parameters.fogExp?"#define FOG_EXP2":"",parameters.map?"#define USE_MAP":"",parameters.envMap?"#define USE_ENVMAP":"",parameters.envMap?"#define "+envMapModeDefine:"",parameters.lightMap?"#define USE_LIGHTMAP":"",parameters.aoMap?"#define USE_AOMAP":"",parameters.emissiveMap?"#define USE_EMISSIVEMAP":"",parameters.bumpMap?"#define USE_BUMPMAP":"",parameters.normalMap?"#define USE_NORMALMAP":"",parameters.displacementMap&&parameters.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",parameters.specularMap?"#define USE_SPECULARMAP":"",parameters.roughnessMap?"#define USE_ROUGHNESSMAP":"",parameters.metalnessMap?"#define USE_METALNESSMAP":"",parameters.alphaMap?"#define USE_ALPHAMAP":"",parameters.vertexColors?"#define USE_COLOR":"",parameters.flatShading?"#define FLAT_SHADED":"",parameters.skinning?"#define USE_SKINNING":"",parameters.useVertexTexture?"#define BONE_TEXTURE":"",parameters.morphTargets?"#define USE_MORPHTARGETS":"",parameters.morphNormals&&parameters.flatShading===!1?"#define USE_MORPHNORMALS":"",parameters.doubleSided?"#define DOUBLE_SIDED":"",parameters.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+parameters.numClippingPlanes,parameters.shadowMapEnabled?"#define USE_SHADOWMAP":"",parameters.shadowMapEnabled?"#define "+shadowMapTypeDefine:"",parameters.sizeAttenuation?"#define USE_SIZEATTENUATION":"",parameters.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",parameters.logarithmicDepthBuffer&&renderer.extensions.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_COLOR","	attribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif","\n"].filter(filterEmptyLine).join("\n"),prefixFragment=[customExtensions,"precision "+parameters.precision+" float;","precision "+parameters.precision+" int;","#define SHADER_NAME "+shader.name,customDefines,parameters.alphaTest?"#define ALPHATEST "+parameters.alphaTest:"","#define GAMMA_FACTOR "+gammaFactorDefine,parameters.useFog&&parameters.fog?"#define USE_FOG":"",parameters.useFog&&parameters.fogExp?"#define FOG_EXP2":"",parameters.map?"#define USE_MAP":"",parameters.envMap?"#define USE_ENVMAP":"",parameters.envMap?"#define "+envMapTypeDefine:"",parameters.envMap?"#define "+envMapModeDefine:"",parameters.envMap?"#define "+envMapBlendingDefine:"",parameters.lightMap?"#define USE_LIGHTMAP":"",parameters.aoMap?"#define USE_AOMAP":"",parameters.emissiveMap?"#define USE_EMISSIVEMAP":"",parameters.bumpMap?"#define USE_BUMPMAP":"",parameters.normalMap?"#define USE_NORMALMAP":"",parameters.specularMap?"#define USE_SPECULARMAP":"",parameters.roughnessMap?"#define USE_ROUGHNESSMAP":"",parameters.metalnessMap?"#define USE_METALNESSMAP":"",parameters.alphaMap?"#define USE_ALPHAMAP":"",parameters.vertexColors?"#define USE_COLOR":"",parameters.gradientMap?"#define USE_GRADIENTMAP":"",parameters.flatShading?"#define FLAT_SHADED":"",parameters.doubleSided?"#define DOUBLE_SIDED":"",parameters.flipSided?"#define FLIP_SIDED":"","#define NUM_CLIPPING_PLANES "+parameters.numClippingPlanes,"#define UNION_CLIPPING_PLANES "+(parameters.numClippingPlanes-parameters.numClipIntersection),parameters.shadowMapEnabled?"#define USE_SHADOWMAP":"",parameters.shadowMapEnabled?"#define "+shadowMapTypeDefine:"",parameters.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",parameters.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",parameters.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",parameters.logarithmicDepthBuffer&&renderer.extensions.get("EXT_frag_depth")?"#define USE_LOGDEPTHBUF_EXT":"",parameters.envMap&&renderer.extensions.get("EXT_shader_texture_lod")?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;",parameters.toneMapping!==NoToneMapping?"#define TONE_MAPPING":"",parameters.toneMapping!==NoToneMapping?ShaderChunk.tonemapping_pars_fragment:"",parameters.toneMapping!==NoToneMapping?getToneMappingFunction("toneMapping",parameters.toneMapping):"",parameters.dithering?"#define DITHERING":"",parameters.outputEncoding||parameters.mapEncoding||parameters.envMapEncoding||parameters.emissiveMapEncoding?ShaderChunk.encodings_pars_fragment:"",parameters.mapEncoding?getTexelDecodingFunction("mapTexelToLinear",parameters.mapEncoding):"",parameters.envMapEncoding?getTexelDecodingFunction("envMapTexelToLinear",parameters.envMapEncoding):"",parameters.emissiveMapEncoding?getTexelDecodingFunction("emissiveMapTexelToLinear",parameters.emissiveMapEncoding):"",parameters.outputEncoding?getTexelEncodingFunction("linearToOutputTexel",parameters.outputEncoding):"",parameters.depthPacking?"#define DEPTH_PACKING "+material.depthPacking:"","\n"].filter(filterEmptyLine).join("\n")),vertexShader=parseIncludes(vertexShader),vertexShader=replaceLightNums(vertexShader,parameters),fragmentShader=parseIncludes(fragmentShader),fragmentShader=replaceLightNums(fragmentShader,parameters),material.isShaderMaterial||(vertexShader=unrollLoops(vertexShader),fragmentShader=unrollLoops(fragmentShader));var vertexGlsl=prefixVertex+vertexShader,fragmentGlsl=prefixFragment+fragmentShader,glVertexShader=WebGLShader(gl,gl.VERTEX_SHADER,vertexGlsl),glFragmentShader=WebGLShader(gl,gl.FRAGMENT_SHADER,fragmentGlsl);gl.attachShader(program,glVertexShader),gl.attachShader(program,glFragmentShader),void 0!==material.index0AttributeName?gl.bindAttribLocation(program,0,material.index0AttributeName):parameters.morphTargets===!0&&gl.bindAttribLocation(program,0,"position"),gl.linkProgram(program);var programLog=gl.getProgramInfoLog(program),vertexLog=gl.getShaderInfoLog(glVertexShader),fragmentLog=gl.getShaderInfoLog(glFragmentShader),runnable=!0,haveDiagnostics=!0;
gl.getProgramParameter(program,gl.LINK_STATUS)===!1?(runnable=!1,console.error("THREE.WebGLProgram: shader error: ",gl.getError(),"gl.VALIDATE_STATUS",gl.getProgramParameter(program,gl.VALIDATE_STATUS),"gl.getProgramInfoLog",programLog,vertexLog,fragmentLog)):""!==programLog?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",programLog):""!==vertexLog&&""!==fragmentLog||(haveDiagnostics=!1),haveDiagnostics&&(this.diagnostics={runnable:runnable,material:material,programLog:programLog,vertexShader:{log:vertexLog,prefix:prefixVertex},fragmentShader:{log:fragmentLog,prefix:prefixFragment}}),gl.deleteShader(glVertexShader),gl.deleteShader(glFragmentShader);var cachedUniforms;this.getUniforms=function(){return void 0===cachedUniforms&&(cachedUniforms=new WebGLUniforms(gl,program,renderer)),cachedUniforms};var cachedAttributes;return this.getAttributes=function(){return void 0===cachedAttributes&&(cachedAttributes=fetchAttributeLocations(gl,program)),cachedAttributes},this.destroy=function(){gl.deleteProgram(program),this.program=void 0},Object.defineProperties(this,{uniforms:{get:function(){return console.warn("THREE.WebGLProgram: .uniforms is now .getUniforms()."),this.getUniforms()}},attributes:{get:function(){return console.warn("THREE.WebGLProgram: .attributes is now .getAttributes()."),this.getAttributes()}}}),this.id=programIdCount++,this.code=code,this.usedTimes=1,this.program=program,this.vertexShader=glVertexShader,this.fragmentShader=glFragmentShader,this}function WebGLPrograms(renderer,capabilities){function allocateBones(object){var skeleton=object.skeleton,bones=skeleton.bones;if(capabilities.floatVertexTextures)return 1024;var nVertexUniforms=capabilities.maxVertexUniforms,nVertexMatrices=Math.floor((nVertexUniforms-20)/4),maxBones=Math.min(nVertexMatrices,bones.length);return maxBones<bones.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+bones.length+" bones. This GPU supports "+maxBones+"."),0):maxBones}function getTextureEncodingFromMap(map,gammaOverrideLinear){var encoding;return map?map.isTexture?encoding=map.encoding:map.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),encoding=map.texture.encoding):encoding=LinearEncoding,encoding===LinearEncoding&&gammaOverrideLinear&&(encoding=GammaEncoding),encoding}var programs=[],shaderIDs={MeshDepthMaterial:"depth",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"phong",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points"},parameterNames=["precision","supportsVertexTextures","map","mapEncoding","envMap","envMapMode","envMapEncoding","lightMap","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","fog","useFog","fogExp","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering"];this.getParameters=function(material,lights,fog,nClipPlanes,nClipIntersection,object){var shaderID=shaderIDs[material.type],maxBones=object.isSkinnedMesh?allocateBones(object):0,precision=renderer.getPrecision();null!==material.precision&&(precision=capabilities.getMaxPrecision(material.precision),precision!==material.precision&&console.warn("THREE.WebGLProgram.getParameters:",material.precision,"not supported, using",precision,"instead."));var currentRenderTarget=renderer.getRenderTarget(),parameters={shaderID:shaderID,precision:precision,supportsVertexTextures:capabilities.vertexTextures,outputEncoding:getTextureEncodingFromMap(currentRenderTarget?currentRenderTarget.texture:null,renderer.gammaOutput),map:!!material.map,mapEncoding:getTextureEncodingFromMap(material.map,renderer.gammaInput),envMap:!!material.envMap,envMapMode:material.envMap&&material.envMap.mapping,envMapEncoding:getTextureEncodingFromMap(material.envMap,renderer.gammaInput),envMapCubeUV:!!material.envMap&&(material.envMap.mapping===CubeUVReflectionMapping||material.envMap.mapping===CubeUVRefractionMapping),lightMap:!!material.lightMap,aoMap:!!material.aoMap,emissiveMap:!!material.emissiveMap,emissiveMapEncoding:getTextureEncodingFromMap(material.emissiveMap,renderer.gammaInput),bumpMap:!!material.bumpMap,normalMap:!!material.normalMap,displacementMap:!!material.displacementMap,roughnessMap:!!material.roughnessMap,metalnessMap:!!material.metalnessMap,specularMap:!!material.specularMap,alphaMap:!!material.alphaMap,gradientMap:!!material.gradientMap,combine:material.combine,vertexColors:material.vertexColors,fog:!!fog,useFog:material.fog,fogExp:fog&&fog.isFogExp2,flatShading:material.shading===FlatShading,sizeAttenuation:material.sizeAttenuation,logarithmicDepthBuffer:capabilities.logarithmicDepthBuffer,skinning:material.skinning&&maxBones>0,maxBones:maxBones,useVertexTexture:capabilities.floatVertexTextures,morphTargets:material.morphTargets,morphNormals:material.morphNormals,maxMorphTargets:renderer.maxMorphTargets,maxMorphNormals:renderer.maxMorphNormals,numDirLights:lights.directional.length,numPointLights:lights.point.length,numSpotLights:lights.spot.length,numRectAreaLights:lights.rectArea.length,numHemiLights:lights.hemi.length,numClippingPlanes:nClipPlanes,numClipIntersection:nClipIntersection,dithering:material.dithering,shadowMapEnabled:renderer.shadowMap.enabled&&object.receiveShadow&&lights.shadows.length>0,shadowMapType:renderer.shadowMap.type,toneMapping:renderer.toneMapping,physicallyCorrectLights:renderer.physicallyCorrectLights,premultipliedAlpha:material.premultipliedAlpha,alphaTest:material.alphaTest,doubleSided:material.side===DoubleSide,flipSided:material.side===BackSide,depthPacking:void 0!==material.depthPacking?material.depthPacking:!1};return parameters},this.getProgramCode=function(material,parameters){var array=[];if(parameters.shaderID?array.push(parameters.shaderID):(array.push(material.fragmentShader),array.push(material.vertexShader)),void 0!==material.defines)for(var name in material.defines)array.push(name),array.push(material.defines[name]);for(var i=0;i<parameterNames.length;i++)array.push(parameters[parameterNames[i]]);return array.push(material.onBeforeCompile.toString()),array.push(renderer.gammaOutput),array.join()},this.acquireProgram=function(material,shader,parameters,code){for(var program,p=0,pl=programs.length;pl>p;p++){var programInfo=programs[p];if(programInfo.code===code){program=programInfo,++program.usedTimes;break}}return void 0===program&&(program=new WebGLProgram(renderer,code,material,shader,parameters),programs.push(program)),program},this.releaseProgram=function(program){if(0===--program.usedTimes){var i=programs.indexOf(program);programs[i]=programs[programs.length-1],programs.pop(),program.destroy()}},this.programs=programs}function WebGLTextures(_gl,extensions,state,properties,capabilities,paramThreeToGL,infoMemory){function clampToMaxSize(image,maxSize){if(image.width>maxSize||image.height>maxSize){var scale=maxSize/Math.max(image.width,image.height),canvas=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");canvas.width=Math.floor(image.width*scale),canvas.height=Math.floor(image.height*scale);var context=canvas.getContext("2d");return context.drawImage(image,0,0,image.width,image.height,0,0,canvas.width,canvas.height),console.warn("THREE.WebGLRenderer: image is too big ("+image.width+"x"+image.height+"). Resized to "+canvas.width+"x"+canvas.height,image),canvas}return image}function isPowerOfTwo(image){return _Math.isPowerOfTwo(image.width)&&_Math.isPowerOfTwo(image.height)}function makePowerOfTwo(image){if(image instanceof HTMLImageElement||image instanceof HTMLCanvasElement){var canvas=document.createElementNS("http://www.w3.org/1999/xhtml","canvas");canvas.width=_Math.nearestPowerOfTwo(image.width),canvas.height=_Math.nearestPowerOfTwo(image.height);var context=canvas.getContext("2d");return context.drawImage(image,0,0,canvas.width,canvas.height),console.warn("THREE.WebGLRenderer: image is not power of two ("+image.width+"x"+image.height+"). Resized to "+canvas.width+"x"+canvas.height,image),canvas}return image}function textureNeedsPowerOfTwo(texture){return texture.wrapS!==ClampToEdgeWrapping||texture.wrapT!==ClampToEdgeWrapping||texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter}function textureNeedsGenerateMipmaps(texture,isPowerOfTwo){return texture.generateMipmaps&&isPowerOfTwo&&texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter}function filterFallback(f){return f===NearestFilter||f===NearestMipMapNearestFilter||f===NearestMipMapLinearFilter?_gl.NEAREST:_gl.LINEAR}function onTextureDispose(event){var texture=event.target;texture.removeEventListener("dispose",onTextureDispose),deallocateTexture(texture),infoMemory.textures--}function onRenderTargetDispose(event){var renderTarget=event.target;renderTarget.removeEventListener("dispose",onRenderTargetDispose),deallocateRenderTarget(renderTarget),infoMemory.textures--}function deallocateTexture(texture){var textureProperties=properties.get(texture);if(texture.image&&textureProperties.__image__webglTextureCube)_gl.deleteTexture(textureProperties.__image__webglTextureCube);else{if(void 0===textureProperties.__webglInit)return;_gl.deleteTexture(textureProperties.__webglTexture)}properties.remove(texture)}function deallocateRenderTarget(renderTarget){var renderTargetProperties=properties.get(renderTarget),textureProperties=properties.get(renderTarget.texture);if(renderTarget){if(void 0!==textureProperties.__webglTexture&&_gl.deleteTexture(textureProperties.__webglTexture),renderTarget.depthTexture&&renderTarget.depthTexture.dispose(),renderTarget.isWebGLRenderTargetCube)for(var i=0;6>i;i++)_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]),renderTargetProperties.__webglDepthbuffer&&_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);else _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer),renderTargetProperties.__webglDepthbuffer&&_gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);properties.remove(renderTarget.texture),properties.remove(renderTarget)}}function setTexture2D(texture,slot){var textureProperties=properties.get(texture);if(texture.version>0&&textureProperties.__version!==texture.version){var image=texture.image;if(void 0===image)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined",texture);else{if(image.complete!==!1)return void uploadTexture(textureProperties,texture,slot);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete",texture)}}state.activeTexture(_gl.TEXTURE0+slot),state.bindTexture(_gl.TEXTURE_2D,textureProperties.__webglTexture)}function setTextureCube(texture,slot){var textureProperties=properties.get(texture);if(6===texture.image.length)if(texture.version>0&&textureProperties.__version!==texture.version){textureProperties.__image__webglTextureCube||(texture.addEventListener("dispose",onTextureDispose),textureProperties.__image__webglTextureCube=_gl.createTexture(),infoMemory.textures++),state.activeTexture(_gl.TEXTURE0+slot),state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__image__webglTextureCube),_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL,texture.flipY);for(var isCompressed=texture&&texture.isCompressedTexture,isDataTexture=texture.image[0]&&texture.image[0].isDataTexture,cubeImage=[],i=0;6>i;i++)isCompressed||isDataTexture?cubeImage[i]=isDataTexture?texture.image[i].image:texture.image[i]:cubeImage[i]=clampToMaxSize(texture.image[i],capabilities.maxCubemapSize);var image=cubeImage[0],isPowerOfTwoImage=isPowerOfTwo(image),glFormat=paramThreeToGL(texture.format),glType=paramThreeToGL(texture.type);setTextureParameters(_gl.TEXTURE_CUBE_MAP,texture,isPowerOfTwoImage);for(var i=0;6>i;i++)if(isCompressed)for(var mipmap,mipmaps=cubeImage[i].mipmaps,j=0,jl=mipmaps.length;jl>j;j++)mipmap=mipmaps[j],texture.format!==RGBAFormat&&texture.format!==RGBFormat?state.getCompressedTextureFormats().indexOf(glFormat)>-1?state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i,j,glFormat,mipmap.width,mipmap.height,0,mipmap.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i,j,glFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);else isDataTexture?state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,glFormat,cubeImage[i].width,cubeImage[i].height,0,glFormat,glType,cubeImage[i].data):state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,glFormat,glFormat,glType,cubeImage[i]);textureNeedsGenerateMipmaps(texture,isPowerOfTwoImage)&&_gl.generateMipmap(_gl.TEXTURE_CUBE_MAP),textureProperties.__version=texture.version,texture.onUpdate&&texture.onUpdate(texture)}else state.activeTexture(_gl.TEXTURE0+slot),state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__image__webglTextureCube)}function setTextureCubeDynamic(texture,slot){state.activeTexture(_gl.TEXTURE0+slot),state.bindTexture(_gl.TEXTURE_CUBE_MAP,properties.get(texture).__webglTexture)}function setTextureParameters(textureType,texture,isPowerOfTwoImage){var extension;if(isPowerOfTwoImage?(_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_S,paramThreeToGL(texture.wrapS)),_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_T,paramThreeToGL(texture.wrapT)),_gl.texParameteri(textureType,_gl.TEXTURE_MAG_FILTER,paramThreeToGL(texture.magFilter)),_gl.texParameteri(textureType,_gl.TEXTURE_MIN_FILTER,paramThreeToGL(texture.minFilter))):(_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_S,_gl.CLAMP_TO_EDGE),_gl.texParameteri(textureType,_gl.TEXTURE_WRAP_T,_gl.CLAMP_TO_EDGE),texture.wrapS===ClampToEdgeWrapping&&texture.wrapT===ClampToEdgeWrapping||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.",texture),_gl.texParameteri(textureType,_gl.TEXTURE_MAG_FILTER,filterFallback(texture.magFilter)),_gl.texParameteri(textureType,_gl.TEXTURE_MIN_FILTER,filterFallback(texture.minFilter)),texture.minFilter!==NearestFilter&&texture.minFilter!==LinearFilter&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.",texture)),extension=extensions.get("EXT_texture_filter_anisotropic")){if(texture.type===FloatType&&null===extensions.get("OES_texture_float_linear"))return;if(texture.type===HalfFloatType&&null===extensions.get("OES_texture_half_float_linear"))return;(texture.anisotropy>1||properties.get(texture).__currentAnisotropy)&&(_gl.texParameterf(textureType,extension.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(texture.anisotropy,capabilities.getMaxAnisotropy())),properties.get(texture).__currentAnisotropy=texture.anisotropy)}}function uploadTexture(textureProperties,texture,slot){void 0===textureProperties.__webglInit&&(textureProperties.__webglInit=!0,texture.addEventListener("dispose",onTextureDispose),textureProperties.__webglTexture=_gl.createTexture(),infoMemory.textures++),state.activeTexture(_gl.TEXTURE0+slot),state.bindTexture(_gl.TEXTURE_2D,textureProperties.__webglTexture),_gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL,texture.flipY),_gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,texture.premultiplyAlpha),_gl.pixelStorei(_gl.UNPACK_ALIGNMENT,texture.unpackAlignment);var image=clampToMaxSize(texture.image,capabilities.maxTextureSize);textureNeedsPowerOfTwo(texture)&&isPowerOfTwo(image)===!1&&(image=makePowerOfTwo(image));var isPowerOfTwoImage=isPowerOfTwo(image),glFormat=paramThreeToGL(texture.format),glType=paramThreeToGL(texture.type);setTextureParameters(_gl.TEXTURE_2D,texture,isPowerOfTwoImage);var mipmap,mipmaps=texture.mipmaps;if(texture.isDepthTexture){var internalFormat=_gl.DEPTH_COMPONENT;if(texture.type===FloatType){if(!_isWebGL2)throw new Error("Float Depth Texture only supported in WebGL2.0");internalFormat=_gl.DEPTH_COMPONENT32F}else _isWebGL2&&(internalFormat=_gl.DEPTH_COMPONENT16);texture.format===DepthFormat&&internalFormat===_gl.DEPTH_COMPONENT&&texture.type!==UnsignedShortType&&texture.type!==UnsignedIntType&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),texture.type=UnsignedShortType,glType=paramThreeToGL(texture.type)),texture.format===DepthStencilFormat&&(internalFormat=_gl.DEPTH_STENCIL,texture.type!==UnsignedInt248Type&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),texture.type=UnsignedInt248Type,glType=paramThreeToGL(texture.type))),state.texImage2D(_gl.TEXTURE_2D,0,internalFormat,image.width,image.height,0,glFormat,glType,null)}else if(texture.isDataTexture)if(mipmaps.length>0&&isPowerOfTwoImage){for(var i=0,il=mipmaps.length;il>i;i++)mipmap=mipmaps[i],state.texImage2D(_gl.TEXTURE_2D,i,glFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);texture.generateMipmaps=!1}else state.texImage2D(_gl.TEXTURE_2D,0,glFormat,image.width,image.height,0,glFormat,glType,image.data);else if(texture.isCompressedTexture)for(var i=0,il=mipmaps.length;il>i;i++)mipmap=mipmaps[i],texture.format!==RGBAFormat&&texture.format!==RGBFormat?state.getCompressedTextureFormats().indexOf(glFormat)>-1?state.compressedTexImage2D(_gl.TEXTURE_2D,i,glFormat,mipmap.width,mipmap.height,0,mipmap.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):state.texImage2D(_gl.TEXTURE_2D,i,glFormat,mipmap.width,mipmap.height,0,glFormat,glType,mipmap.data);else if(mipmaps.length>0&&isPowerOfTwoImage){for(var i=0,il=mipmaps.length;il>i;i++)mipmap=mipmaps[i],state.texImage2D(_gl.TEXTURE_2D,i,glFormat,glFormat,glType,mipmap);texture.generateMipmaps=!1}else state.texImage2D(_gl.TEXTURE_2D,0,glFormat,glFormat,glType,image);textureNeedsGenerateMipmaps(texture,isPowerOfTwoImage)&&_gl.generateMipmap(_gl.TEXTURE_2D),textureProperties.__version=texture.version,texture.onUpdate&&texture.onUpdate(texture)}function setupFrameBufferTexture(framebuffer,renderTarget,attachment,textureTarget){var glFormat=paramThreeToGL(renderTarget.texture.format),glType=paramThreeToGL(renderTarget.texture.type);state.texImage2D(textureTarget,0,glFormat,renderTarget.width,renderTarget.height,0,glFormat,glType,null),_gl.bindFramebuffer(_gl.FRAMEBUFFER,framebuffer),_gl.framebufferTexture2D(_gl.FRAMEBUFFER,attachment,textureTarget,properties.get(renderTarget.texture).__webglTexture,0),_gl.bindFramebuffer(_gl.FRAMEBUFFER,null)}function setupRenderBufferStorage(renderbuffer,renderTarget){_gl.bindRenderbuffer(_gl.RENDERBUFFER,renderbuffer),renderTarget.depthBuffer&&!renderTarget.stencilBuffer?(_gl.renderbufferStorage(_gl.RENDERBUFFER,_gl.DEPTH_COMPONENT16,renderTarget.width,renderTarget.height),_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER,_gl.DEPTH_ATTACHMENT,_gl.RENDERBUFFER,renderbuffer)):renderTarget.depthBuffer&&renderTarget.stencilBuffer?(_gl.renderbufferStorage(_gl.RENDERBUFFER,_gl.DEPTH_STENCIL,renderTarget.width,renderTarget.height),_gl.framebufferRenderbuffer(_gl.FRAMEBUFFER,_gl.DEPTH_STENCIL_ATTACHMENT,_gl.RENDERBUFFER,renderbuffer)):_gl.renderbufferStorage(_gl.RENDERBUFFER,_gl.RGBA4,renderTarget.width,renderTarget.height),_gl.bindRenderbuffer(_gl.RENDERBUFFER,null)}function setupDepthTexture(framebuffer,renderTarget){var isCube=renderTarget&&renderTarget.isWebGLRenderTargetCube;if(isCube)throw new Error("Depth Texture with cube render targets is not supported!");if(_gl.bindFramebuffer(_gl.FRAMEBUFFER,framebuffer),!renderTarget.depthTexture||!renderTarget.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");properties.get(renderTarget.depthTexture).__webglTexture&&renderTarget.depthTexture.image.width===renderTarget.width&&renderTarget.depthTexture.image.height===renderTarget.height||(renderTarget.depthTexture.image.width=renderTarget.width,renderTarget.depthTexture.image.height=renderTarget.height,renderTarget.depthTexture.needsUpdate=!0),setTexture2D(renderTarget.depthTexture,0);var webglDepthTexture=properties.get(renderTarget.depthTexture).__webglTexture;if(renderTarget.depthTexture.format===DepthFormat)_gl.framebufferTexture2D(_gl.FRAMEBUFFER,_gl.DEPTH_ATTACHMENT,_gl.TEXTURE_2D,webglDepthTexture,0);else{if(renderTarget.depthTexture.format!==DepthStencilFormat)throw new Error("Unknown depthTexture format");_gl.framebufferTexture2D(_gl.FRAMEBUFFER,_gl.DEPTH_STENCIL_ATTACHMENT,_gl.TEXTURE_2D,webglDepthTexture,0)}}function setupDepthRenderbuffer(renderTarget){var renderTargetProperties=properties.get(renderTarget),isCube=renderTarget.isWebGLRenderTargetCube===!0;if(renderTarget.depthTexture){if(isCube)throw new Error("target.depthTexture not supported in Cube render targets");setupDepthTexture(renderTargetProperties.__webglFramebuffer,renderTarget)}else if(isCube){renderTargetProperties.__webglDepthbuffer=[];for(var i=0;6>i;i++)_gl.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer[i]),renderTargetProperties.__webglDepthbuffer[i]=_gl.createRenderbuffer(),setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i],renderTarget)}else _gl.bindFramebuffer(_gl.FRAMEBUFFER,renderTargetProperties.__webglFramebuffer),renderTargetProperties.__webglDepthbuffer=_gl.createRenderbuffer(),setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer,renderTarget);_gl.bindFramebuffer(_gl.FRAMEBUFFER,null)}function setupRenderTarget(renderTarget){var renderTargetProperties=properties.get(renderTarget),textureProperties=properties.get(renderTarget.texture);renderTarget.addEventListener("dispose",onRenderTargetDispose),textureProperties.__webglTexture=_gl.createTexture(),infoMemory.textures++;var isCube=renderTarget.isWebGLRenderTargetCube===!0,isTargetPowerOfTwo=isPowerOfTwo(renderTarget);if(isCube){renderTargetProperties.__webglFramebuffer=[];for(var i=0;6>i;i++)renderTargetProperties.__webglFramebuffer[i]=_gl.createFramebuffer()}else renderTargetProperties.__webglFramebuffer=_gl.createFramebuffer();if(isCube){state.bindTexture(_gl.TEXTURE_CUBE_MAP,textureProperties.__webglTexture),setTextureParameters(_gl.TEXTURE_CUBE_MAP,renderTarget.texture,isTargetPowerOfTwo);for(var i=0;6>i;i++)setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i],renderTarget,_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_CUBE_MAP_POSITIVE_X+i);textureNeedsGenerateMipmaps(renderTarget.texture,isTargetPowerOfTwo)&&_gl.generateMipmap(_gl.TEXTURE_CUBE_MAP),state.bindTexture(_gl.TEXTURE_CUBE_MAP,null)}else state.bindTexture(_gl.TEXTURE_2D,textureProperties.__webglTexture),setTextureParameters(_gl.TEXTURE_2D,renderTarget.texture,isTargetPowerOfTwo),setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer,renderTarget,_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_2D),textureNeedsGenerateMipmaps(renderTarget.texture,isTargetPowerOfTwo)&&_gl.generateMipmap(_gl.TEXTURE_2D),state.bindTexture(_gl.TEXTURE_2D,null);renderTarget.depthBuffer&&setupDepthRenderbuffer(renderTarget)}function updateRenderTargetMipmap(renderTarget){var texture=renderTarget.texture,isTargetPowerOfTwo=isPowerOfTwo(renderTarget);if(textureNeedsGenerateMipmaps(texture,isTargetPowerOfTwo)){var target=renderTarget.isWebGLRenderTargetCube?_gl.TEXTURE_CUBE_MAP:_gl.TEXTURE_2D,webglTexture=properties.get(texture).__webglTexture;state.bindTexture(target,webglTexture),_gl.generateMipmap(target),state.bindTexture(target,null)}}var _isWebGL2="undefined"!=typeof WebGL2RenderingContext&&_gl instanceof WebGL2RenderingContext;this.setTexture2D=setTexture2D,this.setTextureCube=setTextureCube,this.setTextureCubeDynamic=setTextureCubeDynamic,this.setupRenderTarget=setupRenderTarget,this.updateRenderTargetMipmap=updateRenderTargetMipmap}function WebGLProperties(){function get(object){var uuid=object.uuid,map=properties[uuid];return void 0===map&&(map={},properties[uuid]=map),map}function remove(object){delete properties[object.uuid]}function clear(){properties={}}var properties={};return{get:get,remove:remove,clear:clear}}function WebGLState(gl,extensions,paramThreeToGL){function ColorBuffer(){var locked=!1,color=new Vector4,currentColorMask=null,currentColorClear=new Vector4;return{setMask:function(colorMask){currentColorMask===colorMask||locked||(gl.colorMask(colorMask,colorMask,colorMask,colorMask),currentColorMask=colorMask)},setLocked:function(lock){locked=lock},setClear:function(r,g,b,a,premultipliedAlpha){premultipliedAlpha===!0&&(r*=a,g*=a,b*=a),color.set(r,g,b,a),currentColorClear.equals(color)===!1&&(gl.clearColor(r,g,b,a),currentColorClear.copy(color))},reset:function(){locked=!1,currentColorMask=null,currentColorClear.set(0,0,0,1)}}}function DepthBuffer(){var locked=!1,currentDepthMask=null,currentDepthFunc=null,currentDepthClear=null;return{setTest:function(depthTest){depthTest?enable(gl.DEPTH_TEST):disable(gl.DEPTH_TEST)},setMask:function(depthMask){currentDepthMask===depthMask||locked||(gl.depthMask(depthMask),currentDepthMask=depthMask)},setFunc:function(depthFunc){if(currentDepthFunc!==depthFunc){if(depthFunc)switch(depthFunc){case NeverDepth:gl.depthFunc(gl.NEVER);break;case AlwaysDepth:gl.depthFunc(gl.ALWAYS);break;case LessDepth:gl.depthFunc(gl.LESS);break;case LessEqualDepth:gl.depthFunc(gl.LEQUAL);break;case EqualDepth:gl.depthFunc(gl.EQUAL);break;case GreaterEqualDepth:gl.depthFunc(gl.GEQUAL);break;case GreaterDepth:gl.depthFunc(gl.GREATER);break;case NotEqualDepth:gl.depthFunc(gl.NOTEQUAL);break;default:gl.depthFunc(gl.LEQUAL)}else gl.depthFunc(gl.LEQUAL);currentDepthFunc=depthFunc}},setLocked:function(lock){locked=lock},setClear:function(depth){currentDepthClear!==depth&&(gl.clearDepth(depth),currentDepthClear=depth)},reset:function(){locked=!1,currentDepthMask=null,currentDepthFunc=null,currentDepthClear=null}}}function StencilBuffer(){var locked=!1,currentStencilMask=null,currentStencilFunc=null,currentStencilRef=null,currentStencilFuncMask=null,currentStencilFail=null,currentStencilZFail=null,currentStencilZPass=null,currentStencilClear=null;return{setTest:function(stencilTest){stencilTest?enable(gl.STENCIL_TEST):disable(gl.STENCIL_TEST)},setMask:function(stencilMask){currentStencilMask===stencilMask||locked||(gl.stencilMask(stencilMask),currentStencilMask=stencilMask)},setFunc:function(stencilFunc,stencilRef,stencilMask){currentStencilFunc===stencilFunc&&currentStencilRef===stencilRef&&currentStencilFuncMask===stencilMask||(gl.stencilFunc(stencilFunc,stencilRef,stencilMask),currentStencilFunc=stencilFunc,currentStencilRef=stencilRef,currentStencilFuncMask=stencilMask)},setOp:function(stencilFail,stencilZFail,stencilZPass){currentStencilFail===stencilFail&&currentStencilZFail===stencilZFail&&currentStencilZPass===stencilZPass||(gl.stencilOp(stencilFail,stencilZFail,stencilZPass),currentStencilFail=stencilFail,currentStencilZFail=stencilZFail,currentStencilZPass=stencilZPass)},setLocked:function(lock){locked=lock},setClear:function(stencil){currentStencilClear!==stencil&&(gl.clearStencil(stencil),currentStencilClear=stencil)},reset:function(){locked=!1,currentStencilMask=null,currentStencilFunc=null,currentStencilRef=null,currentStencilFuncMask=null,currentStencilFail=null,currentStencilZFail=null,currentStencilZPass=null,currentStencilClear=null}}}function createTexture(type,target,count){var data=new Uint8Array(4),texture=gl.createTexture();gl.bindTexture(type,texture),gl.texParameteri(type,gl.TEXTURE_MIN_FILTER,gl.NEAREST),gl.texParameteri(type,gl.TEXTURE_MAG_FILTER,gl.NEAREST);for(var i=0;count>i;i++)gl.texImage2D(target+i,0,gl.RGBA,1,1,0,gl.RGBA,gl.UNSIGNED_BYTE,data);return texture}function init(){colorBuffer.setClear(0,0,0,1),depthBuffer.setClear(1),stencilBuffer.setClear(0),enable(gl.DEPTH_TEST),depthBuffer.setFunc(LessEqualDepth),setFlipSided(!1),setCullFace(CullFaceBack),enable(gl.CULL_FACE),enable(gl.BLEND),setBlending(NormalBlending)}function initAttributes(){for(var i=0,l=newAttributes.length;l>i;i++)newAttributes[i]=0}function enableAttribute(attribute){if(newAttributes[attribute]=1,0===enabledAttributes[attribute]&&(gl.enableVertexAttribArray(attribute),enabledAttributes[attribute]=1),0!==attributeDivisors[attribute]){var extension=extensions.get("ANGLE_instanced_arrays");extension.vertexAttribDivisorANGLE(attribute,0),attributeDivisors[attribute]=0}}function enableAttributeAndDivisor(attribute,meshPerAttribute){if(newAttributes[attribute]=1,0===enabledAttributes[attribute]&&(gl.enableVertexAttribArray(attribute),enabledAttributes[attribute]=1),attributeDivisors[attribute]!==meshPerAttribute){var extension=extensions.get("ANGLE_instanced_arrays");extension.vertexAttribDivisorANGLE(attribute,meshPerAttribute),attributeDivisors[attribute]=meshPerAttribute}}function disableUnusedAttributes(){for(var i=0,l=enabledAttributes.length;i!==l;++i)enabledAttributes[i]!==newAttributes[i]&&(gl.disableVertexAttribArray(i),enabledAttributes[i]=0)}function enable(id){capabilities[id]!==!0&&(gl.enable(id),capabilities[id]=!0)}function disable(id){capabilities[id]!==!1&&(gl.disable(id),capabilities[id]=!1)}function getCompressedTextureFormats(){if(null===compressedTextureFormats&&(compressedTextureFormats=[],extensions.get("WEBGL_compressed_texture_pvrtc")||extensions.get("WEBGL_compressed_texture_s3tc")||extensions.get("WEBGL_compressed_texture_etc1")))for(var formats=gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS),i=0;i<formats.length;i++)compressedTextureFormats.push(formats[i]);return compressedTextureFormats}function setBlending(blending,blendEquation,blendSrc,blendDst,blendEquationAlpha,blendSrcAlpha,blendDstAlpha,premultipliedAlpha){blending!==NoBlending?enable(gl.BLEND):disable(gl.BLEND),blending===CustomBlending||blending===currentBlending&&premultipliedAlpha===currentPremultipledAlpha||(blending===AdditiveBlending?premultipliedAlpha?(gl.blendEquationSeparate(gl.FUNC_ADD,gl.FUNC_ADD),gl.blendFuncSeparate(gl.ONE,gl.ONE,gl.ONE,gl.ONE)):(gl.blendEquation(gl.FUNC_ADD),gl.blendFunc(gl.SRC_ALPHA,gl.ONE)):blending===SubtractiveBlending?premultipliedAlpha?(gl.blendEquationSeparate(gl.FUNC_ADD,gl.FUNC_ADD),gl.blendFuncSeparate(gl.ZERO,gl.ZERO,gl.ONE_MINUS_SRC_COLOR,gl.ONE_MINUS_SRC_ALPHA)):(gl.blendEquation(gl.FUNC_ADD),gl.blendFunc(gl.ZERO,gl.ONE_MINUS_SRC_COLOR)):blending===MultiplyBlending?premultipliedAlpha?(gl.blendEquationSeparate(gl.FUNC_ADD,gl.FUNC_ADD),gl.blendFuncSeparate(gl.ZERO,gl.SRC_COLOR,gl.ZERO,gl.SRC_ALPHA)):(gl.blendEquation(gl.FUNC_ADD),gl.blendFunc(gl.ZERO,gl.SRC_COLOR)):premultipliedAlpha?(gl.blendEquationSeparate(gl.FUNC_ADD,gl.FUNC_ADD),gl.blendFuncSeparate(gl.ONE,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA)):(gl.blendEquationSeparate(gl.FUNC_ADD,gl.FUNC_ADD),gl.blendFuncSeparate(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA)),currentBlending=blending,currentPremultipledAlpha=premultipliedAlpha),blending===CustomBlending?(blendEquationAlpha=blendEquationAlpha||blendEquation,blendSrcAlpha=blendSrcAlpha||blendSrc,blendDstAlpha=blendDstAlpha||blendDst,blendEquation===currentBlendEquation&&blendEquationAlpha===currentBlendEquationAlpha||(gl.blendEquationSeparate(paramThreeToGL(blendEquation),paramThreeToGL(blendEquationAlpha)),currentBlendEquation=blendEquation,currentBlendEquationAlpha=blendEquationAlpha),blendSrc===currentBlendSrc&&blendDst===currentBlendDst&&blendSrcAlpha===currentBlendSrcAlpha&&blendDstAlpha===currentBlendDstAlpha||(gl.blendFuncSeparate(paramThreeToGL(blendSrc),paramThreeToGL(blendDst),paramThreeToGL(blendSrcAlpha),paramThreeToGL(blendDstAlpha)),currentBlendSrc=blendSrc,
currentBlendDst=blendDst,currentBlendSrcAlpha=blendSrcAlpha,currentBlendDstAlpha=blendDstAlpha)):(currentBlendEquation=null,currentBlendSrc=null,currentBlendDst=null,currentBlendEquationAlpha=null,currentBlendSrcAlpha=null,currentBlendDstAlpha=null)}function setMaterial(material){material.side===DoubleSide?disable(gl.CULL_FACE):enable(gl.CULL_FACE),setFlipSided(material.side===BackSide),material.transparent===!0?setBlending(material.blending,material.blendEquation,material.blendSrc,material.blendDst,material.blendEquationAlpha,material.blendSrcAlpha,material.blendDstAlpha,material.premultipliedAlpha):setBlending(NoBlending),depthBuffer.setFunc(material.depthFunc),depthBuffer.setTest(material.depthTest),depthBuffer.setMask(material.depthWrite),colorBuffer.setMask(material.colorWrite),setPolygonOffset(material.polygonOffset,material.polygonOffsetFactor,material.polygonOffsetUnits)}function setFlipSided(flipSided){currentFlipSided!==flipSided&&(flipSided?gl.frontFace(gl.CW):gl.frontFace(gl.CCW),currentFlipSided=flipSided)}function setCullFace(cullFace){cullFace!==CullFaceNone?(enable(gl.CULL_FACE),cullFace!==currentCullFace&&(cullFace===CullFaceBack?gl.cullFace(gl.BACK):cullFace===CullFaceFront?gl.cullFace(gl.FRONT):gl.cullFace(gl.FRONT_AND_BACK))):disable(gl.CULL_FACE),currentCullFace=cullFace}function setLineWidth(width){width!==currentLineWidth&&(lineWidthAvailable&&gl.lineWidth(width),currentLineWidth=width)}function setPolygonOffset(polygonOffset,factor,units){polygonOffset?(enable(gl.POLYGON_OFFSET_FILL),currentPolygonOffsetFactor===factor&&currentPolygonOffsetUnits===units||(gl.polygonOffset(factor,units),currentPolygonOffsetFactor=factor,currentPolygonOffsetUnits=units)):disable(gl.POLYGON_OFFSET_FILL)}function getScissorTest(){return currentScissorTest}function setScissorTest(scissorTest){currentScissorTest=scissorTest,scissorTest?enable(gl.SCISSOR_TEST):disable(gl.SCISSOR_TEST)}function activeTexture(webglSlot){void 0===webglSlot&&(webglSlot=gl.TEXTURE0+maxTextures-1),currentTextureSlot!==webglSlot&&(gl.activeTexture(webglSlot),currentTextureSlot=webglSlot)}function bindTexture(webglType,webglTexture){null===currentTextureSlot&&activeTexture();var boundTexture=currentBoundTextures[currentTextureSlot];void 0===boundTexture&&(boundTexture={type:void 0,texture:void 0},currentBoundTextures[currentTextureSlot]=boundTexture),boundTexture.type===webglType&&boundTexture.texture===webglTexture||(gl.bindTexture(webglType,webglTexture||emptyTextures[webglType]),boundTexture.type=webglType,boundTexture.texture=webglTexture)}function compressedTexImage2D(){try{gl.compressedTexImage2D.apply(gl,arguments)}catch(error){console.error("THREE.WebGLState:",error)}}function texImage2D(){try{gl.texImage2D.apply(gl,arguments)}catch(error){console.error("THREE.WebGLState:",error)}}function scissor(scissor){currentScissor.equals(scissor)===!1&&(gl.scissor(scissor.x,scissor.y,scissor.z,scissor.w),currentScissor.copy(scissor))}function viewport(viewport){currentViewport.equals(viewport)===!1&&(gl.viewport(viewport.x,viewport.y,viewport.z,viewport.w),currentViewport.copy(viewport))}function reset(){for(var i=0;i<enabledAttributes.length;i++)1===enabledAttributes[i]&&(gl.disableVertexAttribArray(i),enabledAttributes[i]=0);capabilities={},compressedTextureFormats=null,currentTextureSlot=null,currentBoundTextures={},currentBlending=null,currentFlipSided=null,currentCullFace=null,colorBuffer.reset(),depthBuffer.reset(),stencilBuffer.reset()}var colorBuffer=new ColorBuffer,depthBuffer=new DepthBuffer,stencilBuffer=new StencilBuffer,maxVertexAttributes=gl.getParameter(gl.MAX_VERTEX_ATTRIBS),newAttributes=new Uint8Array(maxVertexAttributes),enabledAttributes=new Uint8Array(maxVertexAttributes),attributeDivisors=new Uint8Array(maxVertexAttributes),capabilities={},compressedTextureFormats=null,currentBlending=null,currentBlendEquation=null,currentBlendSrc=null,currentBlendDst=null,currentBlendEquationAlpha=null,currentBlendSrcAlpha=null,currentBlendDstAlpha=null,currentPremultipledAlpha=!1,currentFlipSided=null,currentCullFace=null,currentLineWidth=null,currentPolygonOffsetFactor=null,currentPolygonOffsetUnits=null,currentScissorTest=null,maxTextures=gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),version=parseFloat(/^WebGL\ ([0-9])/.exec(gl.getParameter(gl.VERSION))[1]),lineWidthAvailable=parseFloat(version)>=1,currentTextureSlot=null,currentBoundTextures={},currentScissor=new Vector4,currentViewport=new Vector4,emptyTextures={};return emptyTextures[gl.TEXTURE_2D]=createTexture(gl.TEXTURE_2D,gl.TEXTURE_2D,1),emptyTextures[gl.TEXTURE_CUBE_MAP]=createTexture(gl.TEXTURE_CUBE_MAP,gl.TEXTURE_CUBE_MAP_POSITIVE_X,6),{buffers:{color:colorBuffer,depth:depthBuffer,stencil:stencilBuffer},init:init,initAttributes:initAttributes,enableAttribute:enableAttribute,enableAttributeAndDivisor:enableAttributeAndDivisor,disableUnusedAttributes:disableUnusedAttributes,enable:enable,disable:disable,getCompressedTextureFormats:getCompressedTextureFormats,setBlending:setBlending,setMaterial:setMaterial,setFlipSided:setFlipSided,setCullFace:setCullFace,setLineWidth:setLineWidth,setPolygonOffset:setPolygonOffset,getScissorTest:getScissorTest,setScissorTest:setScissorTest,activeTexture:activeTexture,bindTexture:bindTexture,compressedTexImage2D:compressedTexImage2D,texImage2D:texImage2D,scissor:scissor,viewport:viewport,reset:reset}}function WebGLCapabilities(gl,extensions,parameters){function getMaxAnisotropy(){if(void 0!==maxAnisotropy)return maxAnisotropy;var extension=extensions.get("EXT_texture_filter_anisotropic");return maxAnisotropy=null!==extension?gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}function getMaxPrecision(precision){if("highp"===precision){if(gl.getShaderPrecisionFormat(gl.VERTEX_SHADER,gl.HIGH_FLOAT).precision>0&&gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER,gl.HIGH_FLOAT).precision>0)return"highp";precision="mediump"}return"mediump"===precision&&gl.getShaderPrecisionFormat(gl.VERTEX_SHADER,gl.MEDIUM_FLOAT).precision>0&&gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER,gl.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}var maxAnisotropy,precision=void 0!==parameters.precision?parameters.precision:"highp",maxPrecision=getMaxPrecision(precision);maxPrecision!==precision&&(console.warn("THREE.WebGLRenderer:",precision,"not supported, using",maxPrecision,"instead."),precision=maxPrecision);var logarithmicDepthBuffer=parameters.logarithmicDepthBuffer===!0&&!!extensions.get("EXT_frag_depth"),maxTextures=gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),maxVertexTextures=gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS),maxTextureSize=gl.getParameter(gl.MAX_TEXTURE_SIZE),maxCubemapSize=gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE),maxAttributes=gl.getParameter(gl.MAX_VERTEX_ATTRIBS),maxVertexUniforms=gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS),maxVaryings=gl.getParameter(gl.MAX_VARYING_VECTORS),maxFragmentUniforms=gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS),vertexTextures=maxVertexTextures>0,floatFragmentTextures=!!extensions.get("OES_texture_float"),floatVertexTextures=vertexTextures&&floatFragmentTextures;return{getMaxAnisotropy:getMaxAnisotropy,getMaxPrecision:getMaxPrecision,precision:precision,logarithmicDepthBuffer:logarithmicDepthBuffer,maxTextures:maxTextures,maxVertexTextures:maxVertexTextures,maxTextureSize:maxTextureSize,maxCubemapSize:maxCubemapSize,maxAttributes:maxAttributes,maxVertexUniforms:maxVertexUniforms,maxVaryings:maxVaryings,maxFragmentUniforms:maxFragmentUniforms,vertexTextures:vertexTextures,floatFragmentTextures:floatFragmentTextures,floatVertexTextures:floatVertexTextures}}function ArrayCamera(array){PerspectiveCamera.call(this),this.cameras=array||[]}function WebVRManager(renderer){function onVRDisplayPresentChange(){if(device.isPresenting){var eyeParameters=device.getEyeParameters("left"),renderWidth=eyeParameters.renderWidth,renderHeight=eyeParameters.renderHeight;currentPixelRatio=renderer.getPixelRatio(),currentSize=renderer.getSize(),renderer.setDrawingBufferSize(2*renderWidth,renderHeight,1)}else scope.enabled&&renderer.setDrawingBufferSize(currentSize.width,currentSize.height,currentPixelRatio)}var scope=this,device=null,frameData=null;"VRFrameData"in window&&(frameData=new window.VRFrameData);var matrixWorldInverse=new Matrix4,standingMatrix=new Matrix4,standingMatrixInverse=new Matrix4,cameraL=new PerspectiveCamera;cameraL.bounds=new Vector4(0,0,.5,1),cameraL.layers.enable(1);var cameraR=new PerspectiveCamera;cameraR.bounds=new Vector4(.5,0,.5,1),cameraR.layers.enable(2);var cameraVR=new ArrayCamera([cameraL,cameraR]);cameraVR.layers.enable(1),cameraVR.layers.enable(2);var currentSize,currentPixelRatio;window.addEventListener("vrdisplaypresentchange",onVRDisplayPresentChange,!1),this.enabled=!1,this.standing=!1,this.getDevice=function(){return device},this.setDevice=function(value){void 0!==value&&(device=value)},this.getCamera=function(camera){if(null===device)return camera;device.depthNear=camera.near,device.depthFar=camera.far,device.getFrameData(frameData);var pose=frameData.pose;null!==pose.position?camera.position.fromArray(pose.position):camera.position.set(0,0,0),null!==pose.orientation&&camera.quaternion.fromArray(pose.orientation),camera.updateMatrixWorld();var stageParameters=device.stageParameters;if(this.standing&&stageParameters&&(standingMatrix.fromArray(stageParameters.sittingToStandingTransform),standingMatrixInverse.getInverse(standingMatrix),camera.matrixWorld.multiply(standingMatrix),camera.matrixWorldInverse.multiply(standingMatrixInverse)),device.isPresenting===!1)return camera;cameraVR.matrixWorld.copy(camera.matrixWorld),cameraVR.matrixWorldInverse.copy(camera.matrixWorldInverse),cameraL.matrixWorldInverse.fromArray(frameData.leftViewMatrix),cameraR.matrixWorldInverse.fromArray(frameData.rightViewMatrix),this.standing&&stageParameters&&(cameraL.matrixWorldInverse.multiply(standingMatrixInverse),cameraR.matrixWorldInverse.multiply(standingMatrixInverse));var parent=camera.parent;null!==parent&&(matrixWorldInverse.getInverse(parent.matrixWorld),cameraL.matrixWorldInverse.multiply(matrixWorldInverse),cameraR.matrixWorldInverse.multiply(matrixWorldInverse)),cameraL.matrixWorld.getInverse(cameraL.matrixWorldInverse),cameraR.matrixWorld.getInverse(cameraR.matrixWorldInverse),cameraL.projectionMatrix.fromArray(frameData.leftProjectionMatrix),cameraR.projectionMatrix.fromArray(frameData.rightProjectionMatrix),cameraVR.projectionMatrix.copy(cameraL.projectionMatrix);var layers=device.getLayers();if(layers.length){var layer=layers[0];null!==layer.leftBounds&&4===layer.leftBounds.length&&cameraL.bounds.fromArray(layer.leftBounds),null!==layer.rightBounds&&4===layer.rightBounds.length&&cameraR.bounds.fromArray(layer.rightBounds)}return cameraVR},this.getStandingMatrix=function(){return standingMatrix},this.submitFrame=function(){device&&device.isPresenting&&device.submitFrame()}}function WebGLExtensions(gl){var extensions={};return{get:function(name){if(void 0!==extensions[name])return extensions[name];var extension;switch(name){case"WEBGL_depth_texture":extension=gl.getExtension("WEBGL_depth_texture")||gl.getExtension("MOZ_WEBGL_depth_texture")||gl.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":extension=gl.getExtension("EXT_texture_filter_anisotropic")||gl.getExtension("MOZ_EXT_texture_filter_anisotropic")||gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":extension=gl.getExtension("WEBGL_compressed_texture_s3tc")||gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":extension=gl.getExtension("WEBGL_compressed_texture_pvrtc")||gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;case"WEBGL_compressed_texture_etc1":extension=gl.getExtension("WEBGL_compressed_texture_etc1");break;default:extension=gl.getExtension(name)}return null===extension&&console.warn("THREE.WebGLRenderer: "+name+" extension not supported."),extensions[name]=extension,extension}}}function WebGLClipping(){function resetGlobalState(){uniform.value!==globalState&&(uniform.value=globalState,uniform.needsUpdate=numGlobalPlanes>0),scope.numPlanes=numGlobalPlanes,scope.numIntersection=0}function projectPlanes(planes,camera,dstOffset,skipTransform){var nPlanes=null!==planes?planes.length:0,dstArray=null;if(0!==nPlanes){if(dstArray=uniform.value,skipTransform!==!0||null===dstArray){var flatSize=dstOffset+4*nPlanes,viewMatrix=camera.matrixWorldInverse;viewNormalMatrix.getNormalMatrix(viewMatrix),(null===dstArray||dstArray.length<flatSize)&&(dstArray=new Float32Array(flatSize));for(var i=0,i4=dstOffset;i!==nPlanes;++i,i4+=4)plane.copy(planes[i]).applyMatrix4(viewMatrix,viewNormalMatrix),plane.normal.toArray(dstArray,i4),dstArray[i4+3]=plane.constant}uniform.value=dstArray,uniform.needsUpdate=!0}return scope.numPlanes=nPlanes,dstArray}var scope=this,globalState=null,numGlobalPlanes=0,localClippingEnabled=!1,renderingShadows=!1,plane=new Plane,viewNormalMatrix=new Matrix3,uniform={value:null,needsUpdate:!1};this.uniform=uniform,this.numPlanes=0,this.numIntersection=0,this.init=function(planes,enableLocalClipping,camera){var enabled=0!==planes.length||enableLocalClipping||0!==numGlobalPlanes||localClippingEnabled;return localClippingEnabled=enableLocalClipping,globalState=projectPlanes(planes,camera,0),numGlobalPlanes=planes.length,enabled},this.beginShadows=function(){renderingShadows=!0,projectPlanes(null)},this.endShadows=function(){renderingShadows=!1,resetGlobalState()},this.setState=function(planes,clipIntersection,clipShadows,camera,cache,fromCache){if(!localClippingEnabled||null===planes||0===planes.length||renderingShadows&&!clipShadows)renderingShadows?projectPlanes(null):resetGlobalState();else{var nGlobal=renderingShadows?0:numGlobalPlanes,lGlobal=4*nGlobal,dstArray=cache.clippingState||null;uniform.value=dstArray,dstArray=projectPlanes(planes,camera,lGlobal,fromCache);for(var i=0;i!==lGlobal;++i)dstArray[i]=globalState[i];cache.clippingState=dstArray,this.numIntersection=clipIntersection?this.numPlanes:0,this.numPlanes+=nGlobal}}}function WebGLRenderer(parameters){function getTargetPixelRatio(){return null===_currentRenderTarget?_pixelRatio:1}function setDefaultGLState(){state.init(),state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio)),state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio))}function resetGLState(){_currentProgram=null,_currentCamera=null,_currentGeometryProgram="",_currentMaterialId=-1,state.reset()}function onContextLost(event){event.preventDefault(),resetGLState(),setDefaultGLState(),properties.clear(),objects.clear()}function onMaterialDispose(event){var material=event.target;material.removeEventListener("dispose",onMaterialDispose),deallocateMaterial(material)}function deallocateMaterial(material){releaseMaterialProgramReference(material),properties.remove(material)}function releaseMaterialProgramReference(material){var programInfo=properties.get(material).program;material.program=void 0,void 0!==programInfo&&programCache.releaseProgram(programInfo)}function renderObjectImmediate(object,program,material){object.render(function(object){_this.renderBufferImmediate(object,program,material)})}function absNumericalSort(a,b){return Math.abs(b[0])-Math.abs(a[0])}function setupVertexAttributes(material,program,geometry,startIndex){if(geometry&&geometry.isInstancedBufferGeometry&&null===extensions.get("ANGLE_instanced_arrays"))return void console.error("THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");void 0===startIndex&&(startIndex=0),state.initAttributes();var geometryAttributes=geometry.attributes,programAttributes=program.getAttributes(),materialDefaultAttributeValues=material.defaultAttributeValues;for(var name in programAttributes){var programAttribute=programAttributes[name];if(programAttribute>=0){var geometryAttribute=geometryAttributes[name];if(void 0!==geometryAttribute){var normalized=geometryAttribute.normalized,size=geometryAttribute.itemSize,attribute=attributes.get(geometryAttribute),buffer=attribute.buffer,type=attribute.type,bytesPerElement=attribute.bytesPerElement;if(geometryAttribute.isInterleavedBufferAttribute){var data=geometryAttribute.data,stride=data.stride,offset=geometryAttribute.offset;data&&data.isInstancedInterleavedBuffer?(state.enableAttributeAndDivisor(programAttribute,data.meshPerAttribute),void 0===geometry.maxInstancedCount&&(geometry.maxInstancedCount=data.meshPerAttribute*data.count)):state.enableAttribute(programAttribute),_gl.bindBuffer(_gl.ARRAY_BUFFER,buffer),_gl.vertexAttribPointer(programAttribute,size,type,normalized,stride*bytesPerElement,(startIndex*stride+offset)*bytesPerElement)}else geometryAttribute.isInstancedBufferAttribute?(state.enableAttributeAndDivisor(programAttribute,geometryAttribute.meshPerAttribute),void 0===geometry.maxInstancedCount&&(geometry.maxInstancedCount=geometryAttribute.meshPerAttribute*geometryAttribute.count)):state.enableAttribute(programAttribute),_gl.bindBuffer(_gl.ARRAY_BUFFER,buffer),_gl.vertexAttribPointer(programAttribute,size,type,normalized,0,startIndex*size*bytesPerElement)}else if(void 0!==materialDefaultAttributeValues){var value=materialDefaultAttributeValues[name];if(void 0!==value)switch(value.length){case 2:_gl.vertexAttrib2fv(programAttribute,value);break;case 3:_gl.vertexAttrib3fv(programAttribute,value);break;case 4:_gl.vertexAttrib4fv(programAttribute,value);break;default:_gl.vertexAttrib1fv(programAttribute,value)}}}}state.disableUnusedAttributes()}function projectObject(object,camera,sortObjects){if(object.visible){var visible=object.layers.test(camera.layers);if(visible)if(object.isLight)lights.push(object);else if(object.isSprite)object.frustumCulled&&!_frustum.intersectsSprite(object)||sprites.push(object);else if(object.isLensFlare)lensFlares.push(object);else if(object.isImmediateRenderObject)sortObjects&&_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix),currentRenderList.push(object,null,object.material,_vector3.z,null);else if((object.isMesh||object.isLine||object.isPoints)&&(object.isSkinnedMesh&&object.skeleton.update(),!object.frustumCulled||_frustum.intersectsObject(object))){sortObjects&&_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);var geometry=objects.update(object),material=object.material;if(Array.isArray(material))for(var groups=geometry.groups,i=0,l=groups.length;l>i;i++){var group=groups[i],groupMaterial=material[group.materialIndex];groupMaterial&&groupMaterial.visible&&currentRenderList.push(object,geometry,groupMaterial,_vector3.z,group)}else material.visible&&currentRenderList.push(object,geometry,material,_vector3.z,null)}for(var children=object.children,i=0,l=children.length;l>i;i++)projectObject(children[i],camera,sortObjects)}}function renderObjects(renderList,scene,camera,overrideMaterial){for(var i=0,l=renderList.length;l>i;i++){var renderItem=renderList[i],object=renderItem.object,geometry=renderItem.geometry,material=void 0===overrideMaterial?renderItem.material:overrideMaterial,group=renderItem.group;if(camera.isArrayCamera){_currentArrayCamera=camera;for(var cameras=camera.cameras,j=0,jl=cameras.length;jl>j;j++){var camera2=cameras[j];if(object.layers.test(camera2.layers)){var bounds=camera2.bounds,x=bounds.x*_width,y=bounds.y*_height,width=bounds.z*_width,height=bounds.w*_height;_this.setViewport(x,y,width,height),_this.setScissor(x,y,width,height),_this.setScissorTest(!0),renderObject(object,scene,camera2,geometry,material,group)}}}else _currentArrayCamera=null,renderObject(object,scene,camera,geometry,material,group)}}function renderObject(object,scene,camera,geometry,material,group){if(object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse,object.matrixWorld),object.normalMatrix.getNormalMatrix(object.modelViewMatrix),object.onBeforeRender(_this,scene,camera,geometry,material,group),object.isImmediateRenderObject){state.setMaterial(material);var program=setProgram(camera,scene.fog,material,object);_currentGeometryProgram="",renderObjectImmediate(object,program,material)}else _this.renderBufferDirect(camera,scene.fog,geometry,material,object,group);object.onAfterRender(_this,scene,camera,geometry,material,group)}function initMaterial(material,fog,object){var materialProperties=properties.get(material),parameters=programCache.getParameters(material,_lights,fog,_clipping.numPlanes,_clipping.numIntersection,object),code=programCache.getProgramCode(material,parameters),program=materialProperties.program,programChange=!0;if(void 0===program)material.addEventListener("dispose",onMaterialDispose);else if(program.code!==code)releaseMaterialProgramReference(material);else{if(void 0!==parameters.shaderID)return;programChange=!1}if(programChange){if(parameters.shaderID){var shader=ShaderLib[parameters.shaderID];materialProperties.shader={name:material.type,uniforms:UniformsUtils.clone(shader.uniforms),vertexShader:shader.vertexShader,fragmentShader:shader.fragmentShader}}else materialProperties.shader={name:material.type,uniforms:material.uniforms,vertexShader:material.vertexShader,fragmentShader:material.fragmentShader};material.onBeforeCompile(materialProperties.shader),program=programCache.acquireProgram(material,materialProperties.shader,parameters,code),materialProperties.program=program,material.program=program}var programAttributes=program.getAttributes();if(material.morphTargets){material.numSupportedMorphTargets=0;for(var i=0;i<_this.maxMorphTargets;i++)programAttributes["morphTarget"+i]>=0&&material.numSupportedMorphTargets++}if(material.morphNormals){material.numSupportedMorphNormals=0;for(var i=0;i<_this.maxMorphNormals;i++)programAttributes["morphNormal"+i]>=0&&material.numSupportedMorphNormals++}var uniforms=materialProperties.shader.uniforms;(material.isShaderMaterial||material.isRawShaderMaterial)&&material.clipping!==!0||(materialProperties.numClippingPlanes=_clipping.numPlanes,materialProperties.numIntersection=_clipping.numIntersection,uniforms.clippingPlanes=_clipping.uniform),materialProperties.fog=fog,materialProperties.lightsHash=_lights.hash,material.lights&&(uniforms.ambientLightColor.value=_lights.ambient,uniforms.directionalLights.value=_lights.directional,uniforms.spotLights.value=_lights.spot,uniforms.rectAreaLights.value=_lights.rectArea,uniforms.pointLights.value=_lights.point,uniforms.hemisphereLights.value=_lights.hemi,uniforms.directionalShadowMap.value=_lights.directionalShadowMap,uniforms.directionalShadowMatrix.value=_lights.directionalShadowMatrix,uniforms.spotShadowMap.value=_lights.spotShadowMap,uniforms.spotShadowMatrix.value=_lights.spotShadowMatrix,uniforms.pointShadowMap.value=_lights.pointShadowMap,uniforms.pointShadowMatrix.value=_lights.pointShadowMatrix);var progUniforms=materialProperties.program.getUniforms(),uniformsList=WebGLUniforms.seqWithValue(progUniforms.seq,uniforms);materialProperties.uniformsList=uniformsList}function setProgram(camera,fog,material,object){_usedTextureUnits=0;var materialProperties=properties.get(material);if(_clippingEnabled&&(_localClippingEnabled||camera!==_currentCamera)){var useCache=camera===_currentCamera&&material.id===_currentMaterialId;_clipping.setState(material.clippingPlanes,material.clipIntersection,material.clipShadows,camera,materialProperties,useCache)}material.needsUpdate===!1&&(void 0===materialProperties.program?material.needsUpdate=!0:material.fog&&materialProperties.fog!==fog?material.needsUpdate=!0:material.lights&&materialProperties.lightsHash!==_lights.hash?material.needsUpdate=!0:void 0===materialProperties.numClippingPlanes||materialProperties.numClippingPlanes===_clipping.numPlanes&&materialProperties.numIntersection===_clipping.numIntersection||(material.needsUpdate=!0)),material.needsUpdate&&(initMaterial(material,fog,object),material.needsUpdate=!1);var refreshProgram=!1,refreshMaterial=!1,refreshLights=!1,program=materialProperties.program,p_uniforms=program.getUniforms(),m_uniforms=materialProperties.shader.uniforms;if(program.id!==_currentProgram&&(_gl.useProgram(program.program),_currentProgram=program.id,refreshProgram=!0,refreshMaterial=!0,refreshLights=!0),material.id!==_currentMaterialId&&(_currentMaterialId=material.id,refreshMaterial=!0),refreshProgram||camera!==_currentCamera){if(p_uniforms.setValue(_gl,"projectionMatrix",camera.projectionMatrix),capabilities.logarithmicDepthBuffer&&p_uniforms.setValue(_gl,"logDepthBufFC",2/(Math.log(camera.far+1)/Math.LN2)),_currentCamera!==(_currentArrayCamera||camera)&&(_currentCamera=_currentArrayCamera||camera,refreshMaterial=!0,refreshLights=!0),material.isShaderMaterial||material.isMeshPhongMaterial||material.isMeshStandardMaterial||material.envMap){var uCamPos=p_uniforms.map.cameraPosition;void 0!==uCamPos&&uCamPos.setValue(_gl,_vector3.setFromMatrixPosition(camera.matrixWorld))}(material.isMeshPhongMaterial||material.isMeshLambertMaterial||material.isMeshBasicMaterial||material.isMeshStandardMaterial||material.isShaderMaterial||material.skinning)&&p_uniforms.setValue(_gl,"viewMatrix",camera.matrixWorldInverse)}if(material.skinning){p_uniforms.setOptional(_gl,object,"bindMatrix"),p_uniforms.setOptional(_gl,object,"bindMatrixInverse");var skeleton=object.skeleton;if(skeleton){var bones=skeleton.bones;if(capabilities.floatVertexTextures){if(void 0===skeleton.boneTexture){var size=Math.sqrt(4*bones.length);size=_Math.nextPowerOfTwo(Math.ceil(size)),size=Math.max(size,4);var boneMatrices=new Float32Array(size*size*4);boneMatrices.set(skeleton.boneMatrices);var boneTexture=new DataTexture(boneMatrices,size,size,RGBAFormat,FloatType);skeleton.boneMatrices=boneMatrices,skeleton.boneTexture=boneTexture,skeleton.boneTextureSize=size}p_uniforms.setValue(_gl,"boneTexture",skeleton.boneTexture),p_uniforms.setValue(_gl,"boneTextureSize",skeleton.boneTextureSize)}else p_uniforms.setOptional(_gl,skeleton,"boneMatrices")}}return refreshMaterial&&(p_uniforms.setValue(_gl,"toneMappingExposure",_this.toneMappingExposure),p_uniforms.setValue(_gl,"toneMappingWhitePoint",_this.toneMappingWhitePoint),material.lights&&markUniformsLightsNeedsUpdate(m_uniforms,refreshLights),fog&&material.fog&&refreshUniformsFog(m_uniforms,fog),(material.isMeshBasicMaterial||material.isMeshLambertMaterial||material.isMeshPhongMaterial||material.isMeshStandardMaterial||material.isMeshNormalMaterial||material.isMeshDepthMaterial)&&refreshUniformsCommon(m_uniforms,material),material.isLineBasicMaterial?refreshUniformsLine(m_uniforms,material):material.isLineDashedMaterial?(refreshUniformsLine(m_uniforms,material),refreshUniformsDash(m_uniforms,material)):material.isPointsMaterial?refreshUniformsPoints(m_uniforms,material):material.isMeshLambertMaterial?refreshUniformsLambert(m_uniforms,material):material.isMeshToonMaterial?refreshUniformsToon(m_uniforms,material):material.isMeshPhongMaterial?refreshUniformsPhong(m_uniforms,material):material.isMeshPhysicalMaterial?refreshUniformsPhysical(m_uniforms,material):material.isMeshStandardMaterial?refreshUniformsStandard(m_uniforms,material):material.isMeshDepthMaterial?material.displacementMap&&(m_uniforms.displacementMap.value=material.displacementMap,m_uniforms.displacementScale.value=material.displacementScale,m_uniforms.displacementBias.value=material.displacementBias):material.isMeshNormalMaterial&&refreshUniformsNormal(m_uniforms,material),void 0!==m_uniforms.ltcMat&&(m_uniforms.ltcMat.value=UniformsLib.LTC_MAT_TEXTURE),void 0!==m_uniforms.ltcMag&&(m_uniforms.ltcMag.value=UniformsLib.LTC_MAG_TEXTURE),WebGLUniforms.upload(_gl,materialProperties.uniformsList,m_uniforms,_this)),p_uniforms.setValue(_gl,"modelViewMatrix",object.modelViewMatrix),p_uniforms.setValue(_gl,"normalMatrix",object.normalMatrix),p_uniforms.setValue(_gl,"modelMatrix",object.matrixWorld),program}function refreshUniformsCommon(uniforms,material){uniforms.opacity.value=material.opacity,uniforms.diffuse.value=material.color,material.emissive&&uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity),uniforms.map.value=material.map,uniforms.specularMap.value=material.specularMap,uniforms.alphaMap.value=material.alphaMap,material.lightMap&&(uniforms.lightMap.value=material.lightMap,uniforms.lightMapIntensity.value=material.lightMapIntensity),material.aoMap&&(uniforms.aoMap.value=material.aoMap,uniforms.aoMapIntensity.value=material.aoMapIntensity);var uvScaleMap;if(material.map?uvScaleMap=material.map:material.specularMap?uvScaleMap=material.specularMap:material.displacementMap?uvScaleMap=material.displacementMap:material.normalMap?uvScaleMap=material.normalMap:material.bumpMap?uvScaleMap=material.bumpMap:material.roughnessMap?uvScaleMap=material.roughnessMap:material.metalnessMap?uvScaleMap=material.metalnessMap:material.alphaMap?uvScaleMap=material.alphaMap:material.emissiveMap&&(uvScaleMap=material.emissiveMap),void 0!==uvScaleMap){uvScaleMap.isWebGLRenderTarget&&(uvScaleMap=uvScaleMap.texture);var offset=uvScaleMap.offset,repeat=uvScaleMap.repeat;uniforms.offsetRepeat.value.set(offset.x,offset.y,repeat.x,repeat.y)}uniforms.envMap.value=material.envMap,uniforms.flipEnvMap.value=material.envMap&&material.envMap.isCubeTexture?-1:1,uniforms.reflectivity.value=material.reflectivity,uniforms.refractionRatio.value=material.refractionRatio}function refreshUniformsLine(uniforms,material){uniforms.diffuse.value=material.color,uniforms.opacity.value=material.opacity}function refreshUniformsDash(uniforms,material){uniforms.dashSize.value=material.dashSize,uniforms.totalSize.value=material.dashSize+material.gapSize,uniforms.scale.value=material.scale}function refreshUniformsPoints(uniforms,material){if(uniforms.diffuse.value=material.color,uniforms.opacity.value=material.opacity,uniforms.size.value=material.size*_pixelRatio,uniforms.scale.value=.5*_height,uniforms.map.value=material.map,null!==material.map){var offset=material.map.offset,repeat=material.map.repeat;uniforms.offsetRepeat.value.set(offset.x,offset.y,repeat.x,repeat.y)}}function refreshUniformsFog(uniforms,fog){uniforms.fogColor.value=fog.color,fog.isFog?(uniforms.fogNear.value=fog.near,uniforms.fogFar.value=fog.far):fog.isFogExp2&&(uniforms.fogDensity.value=fog.density)}function refreshUniformsLambert(uniforms,material){material.emissiveMap&&(uniforms.emissiveMap.value=material.emissiveMap)}function refreshUniformsPhong(uniforms,material){uniforms.specular.value=material.specular,uniforms.shininess.value=Math.max(material.shininess,1e-4),material.emissiveMap&&(uniforms.emissiveMap.value=material.emissiveMap),material.bumpMap&&(uniforms.bumpMap.value=material.bumpMap,uniforms.bumpScale.value=material.bumpScale),material.normalMap&&(uniforms.normalMap.value=material.normalMap,uniforms.normalScale.value.copy(material.normalScale)),material.displacementMap&&(uniforms.displacementMap.value=material.displacementMap,uniforms.displacementScale.value=material.displacementScale,uniforms.displacementBias.value=material.displacementBias)}function refreshUniformsToon(uniforms,material){refreshUniformsPhong(uniforms,material),material.gradientMap&&(uniforms.gradientMap.value=material.gradientMap)}function refreshUniformsStandard(uniforms,material){uniforms.roughness.value=material.roughness,uniforms.metalness.value=material.metalness,material.roughnessMap&&(uniforms.roughnessMap.value=material.roughnessMap),material.metalnessMap&&(uniforms.metalnessMap.value=material.metalnessMap),material.emissiveMap&&(uniforms.emissiveMap.value=material.emissiveMap),material.bumpMap&&(uniforms.bumpMap.value=material.bumpMap,uniforms.bumpScale.value=material.bumpScale),material.normalMap&&(uniforms.normalMap.value=material.normalMap,uniforms.normalScale.value.copy(material.normalScale)),material.displacementMap&&(uniforms.displacementMap.value=material.displacementMap,
uniforms.displacementScale.value=material.displacementScale,uniforms.displacementBias.value=material.displacementBias),material.envMap&&(uniforms.envMapIntensity.value=material.envMapIntensity)}function refreshUniformsPhysical(uniforms,material){uniforms.clearCoat.value=material.clearCoat,uniforms.clearCoatRoughness.value=material.clearCoatRoughness,refreshUniformsStandard(uniforms,material)}function refreshUniformsNormal(uniforms,material){material.bumpMap&&(uniforms.bumpMap.value=material.bumpMap,uniforms.bumpScale.value=material.bumpScale),material.normalMap&&(uniforms.normalMap.value=material.normalMap,uniforms.normalScale.value.copy(material.normalScale)),material.displacementMap&&(uniforms.displacementMap.value=material.displacementMap,uniforms.displacementScale.value=material.displacementScale,uniforms.displacementBias.value=material.displacementBias)}function markUniformsLightsNeedsUpdate(uniforms,value){uniforms.ambientLightColor.needsUpdate=value,uniforms.directionalLights.needsUpdate=value,uniforms.pointLights.needsUpdate=value,uniforms.spotLights.needsUpdate=value,uniforms.rectAreaLights.needsUpdate=value,uniforms.hemisphereLights.needsUpdate=value}function setupShadows(lights){for(var lightShadowsLength=0,i=0,l=lights.length;l>i;i++){var light=lights[i];light.castShadow&&(_lights.shadows[lightShadowsLength]=light,lightShadowsLength++)}_lights.shadows.length=lightShadowsLength}function setupLights(lights,camera){var l,ll,light,shadow,color,intensity,distance,shadowMap,r=0,g=0,b=0,viewMatrix=camera.matrixWorldInverse,directionalLength=0,pointLength=0,spotLength=0,rectAreaLength=0,hemiLength=0;for(l=0,ll=lights.length;ll>l;l++)if(light=lights[l],color=light.color,intensity=light.intensity,distance=light.distance,shadowMap=light.shadow&&light.shadow.map?light.shadow.map.texture:null,light.isAmbientLight)r+=color.r*intensity,g+=color.g*intensity,b+=color.b*intensity;else if(light.isDirectionalLight){var uniforms=lightCache.get(light);uniforms.color.copy(light.color).multiplyScalar(light.intensity),uniforms.direction.setFromMatrixPosition(light.matrixWorld),_vector3.setFromMatrixPosition(light.target.matrixWorld),uniforms.direction.sub(_vector3),uniforms.direction.transformDirection(viewMatrix),uniforms.shadow=light.castShadow,light.castShadow&&(shadow=light.shadow,uniforms.shadowBias=shadow.bias,uniforms.shadowRadius=shadow.radius,uniforms.shadowMapSize=shadow.mapSize),_lights.directionalShadowMap[directionalLength]=shadowMap,_lights.directionalShadowMatrix[directionalLength]=light.shadow.matrix,_lights.directional[directionalLength]=uniforms,directionalLength++}else if(light.isSpotLight){var uniforms=lightCache.get(light);uniforms.position.setFromMatrixPosition(light.matrixWorld),uniforms.position.applyMatrix4(viewMatrix),uniforms.color.copy(color).multiplyScalar(intensity),uniforms.distance=distance,uniforms.direction.setFromMatrixPosition(light.matrixWorld),_vector3.setFromMatrixPosition(light.target.matrixWorld),uniforms.direction.sub(_vector3),uniforms.direction.transformDirection(viewMatrix),uniforms.coneCos=Math.cos(light.angle),uniforms.penumbraCos=Math.cos(light.angle*(1-light.penumbra)),uniforms.decay=0===light.distance?0:light.decay,uniforms.shadow=light.castShadow,light.castShadow&&(shadow=light.shadow,uniforms.shadowBias=shadow.bias,uniforms.shadowRadius=shadow.radius,uniforms.shadowMapSize=shadow.mapSize),_lights.spotShadowMap[spotLength]=shadowMap,_lights.spotShadowMatrix[spotLength]=light.shadow.matrix,_lights.spot[spotLength]=uniforms,spotLength++}else if(light.isRectAreaLight){var uniforms=lightCache.get(light);uniforms.color.copy(color).multiplyScalar(intensity/(light.width*light.height)),uniforms.position.setFromMatrixPosition(light.matrixWorld),uniforms.position.applyMatrix4(viewMatrix),_matrix42.identity(),_matrix4.copy(light.matrixWorld),_matrix4.premultiply(viewMatrix),_matrix42.extractRotation(_matrix4),uniforms.halfWidth.set(.5*light.width,0,0),uniforms.halfHeight.set(0,.5*light.height,0),uniforms.halfWidth.applyMatrix4(_matrix42),uniforms.halfHeight.applyMatrix4(_matrix42),_lights.rectArea[rectAreaLength]=uniforms,rectAreaLength++}else if(light.isPointLight){var uniforms=lightCache.get(light);uniforms.position.setFromMatrixPosition(light.matrixWorld),uniforms.position.applyMatrix4(viewMatrix),uniforms.color.copy(light.color).multiplyScalar(light.intensity),uniforms.distance=light.distance,uniforms.decay=0===light.distance?0:light.decay,uniforms.shadow=light.castShadow,light.castShadow&&(shadow=light.shadow,uniforms.shadowBias=shadow.bias,uniforms.shadowRadius=shadow.radius,uniforms.shadowMapSize=shadow.mapSize),_lights.pointShadowMap[pointLength]=shadowMap,_lights.pointShadowMatrix[pointLength]=light.shadow.matrix,_lights.point[pointLength]=uniforms,pointLength++}else if(light.isHemisphereLight){var uniforms=lightCache.get(light);uniforms.direction.setFromMatrixPosition(light.matrixWorld),uniforms.direction.transformDirection(viewMatrix),uniforms.direction.normalize(),uniforms.skyColor.copy(light.color).multiplyScalar(intensity),uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity),_lights.hemi[hemiLength]=uniforms,hemiLength++}_lights.ambient[0]=r,_lights.ambient[1]=g,_lights.ambient[2]=b,_lights.directional.length=directionalLength,_lights.spot.length=spotLength,_lights.rectArea.length=rectAreaLength,_lights.point.length=pointLength,_lights.hemi.length=hemiLength,_lights.hash=directionalLength+","+pointLength+","+spotLength+","+rectAreaLength+","+hemiLength+","+_lights.shadows.length}function allocTextureUnit(){var textureUnit=_usedTextureUnits;return textureUnit>=capabilities.maxTextures&&console.warn("THREE.WebGLRenderer: Trying to use "+textureUnit+" texture units while this GPU supports only "+capabilities.maxTextures),_usedTextureUnits+=1,textureUnit}function paramThreeToGL(p){var extension;if(p===RepeatWrapping)return _gl.REPEAT;if(p===ClampToEdgeWrapping)return _gl.CLAMP_TO_EDGE;if(p===MirroredRepeatWrapping)return _gl.MIRRORED_REPEAT;if(p===NearestFilter)return _gl.NEAREST;if(p===NearestMipMapNearestFilter)return _gl.NEAREST_MIPMAP_NEAREST;if(p===NearestMipMapLinearFilter)return _gl.NEAREST_MIPMAP_LINEAR;if(p===LinearFilter)return _gl.LINEAR;if(p===LinearMipMapNearestFilter)return _gl.LINEAR_MIPMAP_NEAREST;if(p===LinearMipMapLinearFilter)return _gl.LINEAR_MIPMAP_LINEAR;if(p===UnsignedByteType)return _gl.UNSIGNED_BYTE;if(p===UnsignedShort4444Type)return _gl.UNSIGNED_SHORT_4_4_4_4;if(p===UnsignedShort5551Type)return _gl.UNSIGNED_SHORT_5_5_5_1;if(p===UnsignedShort565Type)return _gl.UNSIGNED_SHORT_5_6_5;if(p===ByteType)return _gl.BYTE;if(p===ShortType)return _gl.SHORT;if(p===UnsignedShortType)return _gl.UNSIGNED_SHORT;if(p===IntType)return _gl.INT;if(p===UnsignedIntType)return _gl.UNSIGNED_INT;if(p===FloatType)return _gl.FLOAT;if(p===HalfFloatType&&(extension=extensions.get("OES_texture_half_float"),null!==extension))return extension.HALF_FLOAT_OES;if(p===AlphaFormat)return _gl.ALPHA;if(p===RGBFormat)return _gl.RGB;if(p===RGBAFormat)return _gl.RGBA;if(p===LuminanceFormat)return _gl.LUMINANCE;if(p===LuminanceAlphaFormat)return _gl.LUMINANCE_ALPHA;if(p===DepthFormat)return _gl.DEPTH_COMPONENT;if(p===DepthStencilFormat)return _gl.DEPTH_STENCIL;if(p===AddEquation)return _gl.FUNC_ADD;if(p===SubtractEquation)return _gl.FUNC_SUBTRACT;if(p===ReverseSubtractEquation)return _gl.FUNC_REVERSE_SUBTRACT;if(p===ZeroFactor)return _gl.ZERO;if(p===OneFactor)return _gl.ONE;if(p===SrcColorFactor)return _gl.SRC_COLOR;if(p===OneMinusSrcColorFactor)return _gl.ONE_MINUS_SRC_COLOR;if(p===SrcAlphaFactor)return _gl.SRC_ALPHA;if(p===OneMinusSrcAlphaFactor)return _gl.ONE_MINUS_SRC_ALPHA;if(p===DstAlphaFactor)return _gl.DST_ALPHA;if(p===OneMinusDstAlphaFactor)return _gl.ONE_MINUS_DST_ALPHA;if(p===DstColorFactor)return _gl.DST_COLOR;if(p===OneMinusDstColorFactor)return _gl.ONE_MINUS_DST_COLOR;if(p===SrcAlphaSaturateFactor)return _gl.SRC_ALPHA_SATURATE;if((p===RGB_S3TC_DXT1_Format||p===RGBA_S3TC_DXT1_Format||p===RGBA_S3TC_DXT3_Format||p===RGBA_S3TC_DXT5_Format)&&(extension=extensions.get("WEBGL_compressed_texture_s3tc"),null!==extension)){if(p===RGB_S3TC_DXT1_Format)return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT1_Format)return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(p===RGBA_S3TC_DXT3_Format)return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(p===RGBA_S3TC_DXT5_Format)return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((p===RGB_PVRTC_4BPPV1_Format||p===RGB_PVRTC_2BPPV1_Format||p===RGBA_PVRTC_4BPPV1_Format||p===RGBA_PVRTC_2BPPV1_Format)&&(extension=extensions.get("WEBGL_compressed_texture_pvrtc"),null!==extension)){if(p===RGB_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(p===RGB_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(p===RGBA_PVRTC_4BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(p===RGBA_PVRTC_2BPPV1_Format)return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(p===RGB_ETC1_Format&&(extension=extensions.get("WEBGL_compressed_texture_etc1"),null!==extension))return extension.COMPRESSED_RGB_ETC1_WEBGL;if((p===MinEquation||p===MaxEquation)&&(extension=extensions.get("EXT_blend_minmax"),null!==extension)){if(p===MinEquation)return extension.MIN_EXT;if(p===MaxEquation)return extension.MAX_EXT}return p===UnsignedInt248Type&&(extension=extensions.get("WEBGL_depth_texture"),null!==extension)?extension.UNSIGNED_INT_24_8_WEBGL:0}console.log("THREE.WebGLRenderer",REVISION),parameters=parameters||{};var _canvas=void 0!==parameters.canvas?parameters.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),_context=void 0!==parameters.context?parameters.context:null,_alpha=void 0!==parameters.alpha?parameters.alpha:!1,_depth=void 0!==parameters.depth?parameters.depth:!0,_stencil=void 0!==parameters.stencil?parameters.stencil:!0,_antialias=void 0!==parameters.antialias?parameters.antialias:!1,_premultipliedAlpha=void 0!==parameters.premultipliedAlpha?parameters.premultipliedAlpha:!0,_preserveDrawingBuffer=void 0!==parameters.preserveDrawingBuffer?parameters.preserveDrawingBuffer:!1,lights=[],currentRenderList=null,morphInfluences=new Float32Array(8),sprites=[],lensFlares=[];this.domElement=_canvas,this.context=null,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.gammaInput=!1,this.gammaOutput=!1,this.physicallyCorrectLights=!1,this.toneMapping=LinearToneMapping,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var _this=this,_currentProgram=null,_currentRenderTarget=null,_currentFramebuffer=null,_currentMaterialId=-1,_currentGeometryProgram="",_currentCamera=null,_currentArrayCamera=null,_currentScissor=new Vector4,_currentScissorTest=null,_currentViewport=new Vector4,_usedTextureUnits=0,_width=_canvas.width,_height=_canvas.height,_pixelRatio=1,_scissor=new Vector4(0,0,_width,_height),_scissorTest=!1,_viewport=new Vector4(0,0,_width,_height),_frustum=new Frustum,_clipping=new WebGLClipping,_clippingEnabled=!1,_localClippingEnabled=!1,_projScreenMatrix=new Matrix4,_vector3=new Vector3,_matrix4=new Matrix4,_matrix42=new Matrix4,_lights={hash:"",ambient:[0,0,0],directional:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],shadows:[]},_infoMemory={geometries:0,textures:0},_infoRender={frame:0,calls:0,vertices:0,faces:0,points:0};this.info={render:_infoRender,memory:_infoMemory,programs:null};var _gl;try{var contextAttributes={alpha:_alpha,depth:_depth,stencil:_stencil,antialias:_antialias,premultipliedAlpha:_premultipliedAlpha,preserveDrawingBuffer:_preserveDrawingBuffer};if(_gl=_context||_canvas.getContext("webgl",contextAttributes)||_canvas.getContext("experimental-webgl",contextAttributes),null===_gl)throw null!==_canvas.getContext("webgl")?"Error creating WebGL context with your selected attributes.":"Error creating WebGL context.";void 0===_gl.getShaderPrecisionFormat&&(_gl.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}}),_canvas.addEventListener("webglcontextlost",onContextLost,!1)}catch(error){console.error("THREE.WebGLRenderer: "+error)}var extensions=new WebGLExtensions(_gl);extensions.get("WEBGL_depth_texture"),extensions.get("OES_texture_float"),extensions.get("OES_texture_float_linear"),extensions.get("OES_texture_half_float"),extensions.get("OES_texture_half_float_linear"),extensions.get("OES_standard_derivatives"),extensions.get("ANGLE_instanced_arrays"),extensions.get("OES_element_index_uint")&&(BufferGeometry.MaxIndex=4294967296);var capabilities=new WebGLCapabilities(_gl,extensions,parameters),state=new WebGLState(_gl,extensions,paramThreeToGL),properties=new WebGLProperties,textures=new WebGLTextures(_gl,extensions,state,properties,capabilities,paramThreeToGL,_infoMemory),attributes=new WebGLAttributes(_gl),geometries=new WebGLGeometries(_gl,attributes,_infoMemory),objects=new WebGLObjects(_gl,geometries,_infoRender),programCache=new WebGLPrograms(this,capabilities),lightCache=new WebGLLights,renderLists=new WebGLRenderLists,background=new WebGLBackground(this,state,objects,_premultipliedAlpha),vr=new WebVRManager(this);this.info.programs=programCache.programs;var bufferRenderer=new WebGLBufferRenderer(_gl,extensions,_infoRender),indexedBufferRenderer=new WebGLIndexedBufferRenderer(_gl,extensions,_infoRender);setDefaultGLState(),this.context=_gl,this.capabilities=capabilities,this.extensions=extensions,this.properties=properties,this.renderLists=renderLists,this.state=state,this.vr=vr;var shadowMap=new WebGLShadowMap(this,_lights,objects,capabilities);this.shadowMap=shadowMap;var spritePlugin=new SpritePlugin(this,sprites),lensFlarePlugin=new LensFlarePlugin(this,lensFlares);this.getContext=function(){return _gl},this.getContextAttributes=function(){return _gl.getContextAttributes()},this.forceContextLoss=function(){var extension=extensions.get("WEBGL_lose_context");extension&&extension.loseContext()},this.getMaxAnisotropy=function(){return capabilities.getMaxAnisotropy()},this.getPrecision=function(){return capabilities.precision},this.getPixelRatio=function(){return _pixelRatio},this.setPixelRatio=function(value){void 0!==value&&(_pixelRatio=value,this.setSize(_width,_height,!1))},this.getSize=function(){return{width:_width,height:_height}},this.setSize=function(width,height,updateStyle){var device=vr.getDevice();return device&&device.isPresenting?void console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(_width=width,_height=height,_canvas.width=width*_pixelRatio,_canvas.height=height*_pixelRatio,updateStyle!==!1&&(_canvas.style.width=width+"px",_canvas.style.height=height+"px"),void this.setViewport(0,0,width,height))},this.getDrawingBufferSize=function(){return{width:_width*_pixelRatio,height:_height*_pixelRatio}},this.setDrawingBufferSize=function(width,height,pixelRatio){_width=width,_height=height,_pixelRatio=pixelRatio,_canvas.width=width*pixelRatio,_canvas.height=height*pixelRatio,this.setViewport(0,0,width,height)},this.setViewport=function(x,y,width,height){_viewport.set(x,_height-y-height,width,height),state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio))},this.setScissor=function(x,y,width,height){_scissor.set(x,_height-y-height,width,height),state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio))},this.setScissorTest=function(boolean){state.setScissorTest(_scissorTest=boolean)},this.getClearColor=background.getClearColor,this.setClearColor=background.setClearColor,this.getClearAlpha=background.getClearAlpha,this.setClearAlpha=background.setClearAlpha,this.clear=function(color,depth,stencil){var bits=0;(void 0===color||color)&&(bits|=_gl.COLOR_BUFFER_BIT),(void 0===depth||depth)&&(bits|=_gl.DEPTH_BUFFER_BIT),(void 0===stencil||stencil)&&(bits|=_gl.STENCIL_BUFFER_BIT),_gl.clear(bits)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.clearTarget=function(renderTarget,color,depth,stencil){this.setRenderTarget(renderTarget),this.clear(color,depth,stencil)},this.resetGLState=resetGLState,this.dispose=function(){_canvas.removeEventListener("webglcontextlost",onContextLost,!1),renderLists.dispose()},this.renderBufferImmediate=function(object,program,material){state.initAttributes();var buffers=properties.get(object);object.hasPositions&&!buffers.position&&(buffers.position=_gl.createBuffer()),object.hasNormals&&!buffers.normal&&(buffers.normal=_gl.createBuffer()),object.hasUvs&&!buffers.uv&&(buffers.uv=_gl.createBuffer()),object.hasColors&&!buffers.color&&(buffers.color=_gl.createBuffer());var programAttributes=program.getAttributes();if(object.hasPositions&&(_gl.bindBuffer(_gl.ARRAY_BUFFER,buffers.position),_gl.bufferData(_gl.ARRAY_BUFFER,object.positionArray,_gl.DYNAMIC_DRAW),state.enableAttribute(programAttributes.position),_gl.vertexAttribPointer(programAttributes.position,3,_gl.FLOAT,!1,0,0)),object.hasNormals){if(_gl.bindBuffer(_gl.ARRAY_BUFFER,buffers.normal),!material.isMeshPhongMaterial&&!material.isMeshStandardMaterial&&!material.isMeshNormalMaterial&&material.shading===FlatShading)for(var i=0,l=3*object.count;l>i;i+=9){var array=object.normalArray,nx=(array[i+0]+array[i+3]+array[i+6])/3,ny=(array[i+1]+array[i+4]+array[i+7])/3,nz=(array[i+2]+array[i+5]+array[i+8])/3;array[i+0]=nx,array[i+1]=ny,array[i+2]=nz,array[i+3]=nx,array[i+4]=ny,array[i+5]=nz,array[i+6]=nx,array[i+7]=ny,array[i+8]=nz}_gl.bufferData(_gl.ARRAY_BUFFER,object.normalArray,_gl.DYNAMIC_DRAW),state.enableAttribute(programAttributes.normal),_gl.vertexAttribPointer(programAttributes.normal,3,_gl.FLOAT,!1,0,0)}object.hasUvs&&material.map&&(_gl.bindBuffer(_gl.ARRAY_BUFFER,buffers.uv),_gl.bufferData(_gl.ARRAY_BUFFER,object.uvArray,_gl.DYNAMIC_DRAW),state.enableAttribute(programAttributes.uv),_gl.vertexAttribPointer(attributes.uv,2,_gl.FLOAT,!1,0,0)),object.hasColors&&material.vertexColors!==NoColors&&(_gl.bindBuffer(_gl.ARRAY_BUFFER,buffers.color),_gl.bufferData(_gl.ARRAY_BUFFER,object.colorArray,_gl.DYNAMIC_DRAW),state.enableAttribute(programAttributes.color),_gl.vertexAttribPointer(programAttributes.color,3,_gl.FLOAT,!1,0,0)),state.disableUnusedAttributes(),_gl.drawArrays(_gl.TRIANGLES,0,object.count),object.count=0},this.renderBufferDirect=function(camera,fog,geometry,material,object,group){state.setMaterial(material);var program=setProgram(camera,fog,material,object),geometryProgram=geometry.id+"_"+program.id+"_"+(material.wireframe===!0),updateBuffers=!1;geometryProgram!==_currentGeometryProgram&&(_currentGeometryProgram=geometryProgram,updateBuffers=!0);var morphTargetInfluences=object.morphTargetInfluences;if(void 0!==morphTargetInfluences){for(var activeInfluences=[],i=0,l=morphTargetInfluences.length;l>i;i++){var influence=morphTargetInfluences[i];activeInfluences.push([influence,i])}activeInfluences.sort(absNumericalSort),activeInfluences.length>8&&(activeInfluences.length=8);for(var morphAttributes=geometry.morphAttributes,i=0,l=activeInfluences.length;l>i;i++){var influence=activeInfluences[i];if(morphInfluences[i]=influence[0],0!==influence[0]){var index=influence[1];material.morphTargets===!0&&morphAttributes.position&&geometry.addAttribute("morphTarget"+i,morphAttributes.position[index]),material.morphNormals===!0&&morphAttributes.normal&&geometry.addAttribute("morphNormal"+i,morphAttributes.normal[index])}else material.morphTargets===!0&&geometry.removeAttribute("morphTarget"+i),material.morphNormals===!0&&geometry.removeAttribute("morphNormal"+i)}for(var i=activeInfluences.length,il=morphInfluences.length;il>i;i++)morphInfluences[i]=0;program.getUniforms().setValue(_gl,"morphTargetInfluences",morphInfluences),updateBuffers=!0}var index=geometry.index,position=geometry.attributes.position,rangeFactor=1;material.wireframe===!0&&(index=geometries.getWireframeAttribute(geometry),rangeFactor=2);var attribute,renderer=bufferRenderer;null!==index&&(attribute=attributes.get(index),renderer=indexedBufferRenderer,renderer.setIndex(attribute)),updateBuffers&&(setupVertexAttributes(material,program,geometry),null!==index&&_gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER,attribute.buffer));var dataCount=0;null!==index?dataCount=index.count:void 0!==position&&(dataCount=position.count);var rangeStart=geometry.drawRange.start*rangeFactor,rangeCount=geometry.drawRange.count*rangeFactor,groupStart=null!==group?group.start*rangeFactor:0,groupCount=null!==group?group.count*rangeFactor:1/0,drawStart=Math.max(rangeStart,groupStart),drawEnd=Math.min(dataCount,rangeStart+rangeCount,groupStart+groupCount)-1,drawCount=Math.max(0,drawEnd-drawStart+1);if(0!==drawCount){if(object.isMesh)if(material.wireframe===!0)state.setLineWidth(material.wireframeLinewidth*getTargetPixelRatio()),renderer.setMode(_gl.LINES);else switch(object.drawMode){case TrianglesDrawMode:renderer.setMode(_gl.TRIANGLES);break;case TriangleStripDrawMode:renderer.setMode(_gl.TRIANGLE_STRIP);break;case TriangleFanDrawMode:renderer.setMode(_gl.TRIANGLE_FAN)}else if(object.isLine){var lineWidth=material.linewidth;void 0===lineWidth&&(lineWidth=1),state.setLineWidth(lineWidth*getTargetPixelRatio()),object.isLineSegments?renderer.setMode(_gl.LINES):object.isLineLoop?renderer.setMode(_gl.LINE_LOOP):renderer.setMode(_gl.LINE_STRIP)}else object.isPoints&&renderer.setMode(_gl.POINTS);geometry&&geometry.isInstancedBufferGeometry?geometry.maxInstancedCount>0&&renderer.renderInstances(geometry,drawStart,drawCount):renderer.render(drawStart,drawCount)}},this.compile=function(scene,camera){lights=[],scene.traverse(function(object){object.isLight&&lights.push(object)}),setupLights(lights,camera),scene.traverse(function(object){if(object.material)if(Array.isArray(object.material))for(var i=0;i<object.material.length;i++)initMaterial(object.material[i],scene.fog,object);else initMaterial(object.material,scene.fog,object)})},this.animate=function(callback){function onFrame(){callback(),(vr.getDevice()||window).requestAnimationFrame(onFrame)}(vr.getDevice()||window).requestAnimationFrame(onFrame)},this.render=function(scene,camera,renderTarget,forceClear){if(!camera||!camera.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");_currentGeometryProgram="",_currentMaterialId=-1,_currentCamera=null,scene.autoUpdate===!0&&scene.updateMatrixWorld(),null===camera.parent&&camera.updateMatrixWorld(),vr.enabled&&(camera=vr.getCamera(camera)),_projScreenMatrix.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse),_frustum.setFromMatrix(_projScreenMatrix),lights.length=0,sprites.length=0,lensFlares.length=0,_localClippingEnabled=this.localClippingEnabled,_clippingEnabled=_clipping.init(this.clippingPlanes,_localClippingEnabled,camera),currentRenderList=renderLists.get(scene,camera),currentRenderList.init(),projectObject(scene,camera,_this.sortObjects),currentRenderList.finish(),_this.sortObjects===!0&&currentRenderList.sort(),_clippingEnabled&&_clipping.beginShadows(),setupShadows(lights),shadowMap.render(scene,camera),setupLights(lights,camera),_clippingEnabled&&_clipping.endShadows(),_infoRender.frame++,_infoRender.calls=0,_infoRender.vertices=0,_infoRender.faces=0,_infoRender.points=0,void 0===renderTarget&&(renderTarget=null),this.setRenderTarget(renderTarget),background.render(scene,camera,forceClear);var opaqueObjects=currentRenderList.opaque,transparentObjects=currentRenderList.transparent;if(scene.overrideMaterial){var overrideMaterial=scene.overrideMaterial;opaqueObjects.length&&renderObjects(opaqueObjects,scene,camera,overrideMaterial),transparentObjects.length&&renderObjects(transparentObjects,scene,camera,overrideMaterial)}else opaqueObjects.length&&renderObjects(opaqueObjects,scene,camera),transparentObjects.length&&renderObjects(transparentObjects,scene,camera);spritePlugin.render(scene,camera),lensFlarePlugin.render(scene,camera,_currentViewport),renderTarget&&textures.updateRenderTargetMipmap(renderTarget),state.buffers.depth.setTest(!0),state.buffers.depth.setMask(!0),state.buffers.color.setMask(!0),camera.isArrayCamera&&_this.setScissorTest(!1),vr.enabled&&vr.submitFrame()},this.setFaceCulling=function(cullFace,frontFaceDirection){state.setCullFace(cullFace),state.setFlipSided(frontFaceDirection===FrontFaceDirectionCW)},this.allocTextureUnit=allocTextureUnit,this.setTexture2D=function(){var warned=!1;return function(texture,slot){texture&&texture.isWebGLRenderTarget&&(warned||(console.warn("THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."),warned=!0),texture=texture.texture),textures.setTexture2D(texture,slot)}}(),this.setTexture=function(){var warned=!1;return function(texture,slot){warned||(console.warn("THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead."),warned=!0),textures.setTexture2D(texture,slot)}}(),this.setTextureCube=function(){var warned=!1;return function(texture,slot){texture&&texture.isWebGLRenderTargetCube&&(warned||(console.warn("THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."),warned=!0),texture=texture.texture),texture&&texture.isCubeTexture||Array.isArray(texture.image)&&6===texture.image.length?textures.setTextureCube(texture,slot):textures.setTextureCubeDynamic(texture,slot)}}(),this.getRenderTarget=function(){return _currentRenderTarget},this.setRenderTarget=function(renderTarget){_currentRenderTarget=renderTarget,renderTarget&&void 0===properties.get(renderTarget).__webglFramebuffer&&textures.setupRenderTarget(renderTarget);var framebuffer,isCube=renderTarget&&renderTarget.isWebGLRenderTargetCube;if(renderTarget){var renderTargetProperties=properties.get(renderTarget);framebuffer=isCube?renderTargetProperties.__webglFramebuffer[renderTarget.activeCubeFace]:renderTargetProperties.__webglFramebuffer,_currentScissor.copy(renderTarget.scissor),_currentScissorTest=renderTarget.scissorTest,_currentViewport.copy(renderTarget.viewport)}else framebuffer=null,_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio),_currentScissorTest=_scissorTest,_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio);if(_currentFramebuffer!==framebuffer&&(_gl.bindFramebuffer(_gl.FRAMEBUFFER,framebuffer),_currentFramebuffer=framebuffer),state.scissor(_currentScissor),state.setScissorTest(_currentScissorTest),state.viewport(_currentViewport),isCube){var textureProperties=properties.get(renderTarget.texture);_gl.framebufferTexture2D(_gl.FRAMEBUFFER,_gl.COLOR_ATTACHMENT0,_gl.TEXTURE_CUBE_MAP_POSITIVE_X+renderTarget.activeCubeFace,textureProperties.__webglTexture,renderTarget.activeMipMapLevel)}},this.readRenderTargetPixels=function(renderTarget,x,y,width,height,buffer){if(!renderTarget||!renderTarget.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");var framebuffer=properties.get(renderTarget).__webglFramebuffer;if(framebuffer){var restore=!1;framebuffer!==_currentFramebuffer&&(_gl.bindFramebuffer(_gl.FRAMEBUFFER,framebuffer),restore=!0);try{var texture=renderTarget.texture,textureFormat=texture.format,textureType=texture.type;if(textureFormat!==RGBAFormat&&paramThreeToGL(textureFormat)!==_gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(textureType===UnsignedByteType||paramThreeToGL(textureType)===_gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE)||textureType===FloatType&&(extensions.get("OES_texture_float")||extensions.get("WEBGL_color_buffer_float"))||textureType===HalfFloatType&&extensions.get("EXT_color_buffer_half_float")))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");_gl.checkFramebufferStatus(_gl.FRAMEBUFFER)===_gl.FRAMEBUFFER_COMPLETE?x>=0&&x<=renderTarget.width-width&&y>=0&&y<=renderTarget.height-height&&_gl.readPixels(x,y,width,height,paramThreeToGL(textureFormat),paramThreeToGL(textureType),buffer):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{restore&&_gl.bindFramebuffer(_gl.FRAMEBUFFER,_currentFramebuffer)}}}}function FogExp2(color,density){this.name="",this.color=new Color(color),this.density=void 0!==density?density:25e-5}function Fog(color,near,far){this.name="",this.color=new Color(color),this.near=void 0!==near?near:1,this.far=void 0!==far?far:1e3}function Scene(){Object3D.call(this),this.type="Scene",this.background=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0}function LensFlare(texture,size,distance,blending,color){Object3D.call(this),this.lensFlares=[],this.positionScreen=new Vector3,this.customUpdateCallback=void 0,void 0!==texture&&this.add(texture,size,distance,blending,color)}function SpriteMaterial(parameters){Material.call(this),this.type="SpriteMaterial",this.color=new Color(16777215),this.map=null,this.rotation=0,this.fog=!1,this.lights=!1,this.setValues(parameters)}function Sprite(material){Object3D.call(this),this.type="Sprite",this.material=void 0!==material?material:new SpriteMaterial}function LOD(){Object3D.call(this),this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}})}function Skeleton(bones,boneInverses){if(bones=bones||[],this.bones=bones.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),void 0===boneInverses)this.calculateInverses();else if(this.bones.length===boneInverses.length)this.boneInverses=boneInverses.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var i=0,il=this.bones.length;il>i;i++)this.boneInverses.push(new Matrix4)}}function Bone(){Object3D.call(this),this.type="Bone"}function SkinnedMesh(geometry,material){Mesh.call(this,geometry,material),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Matrix4,this.bindMatrixInverse=new Matrix4;var bones=this.initBones(),skeleton=new Skeleton(bones);this.bind(skeleton,this.matrixWorld),this.normalizeSkinWeights()}function LineBasicMaterial(parameters){Material.call(this),this.type="LineBasicMaterial",this.color=new Color(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.lights=!1,this.setValues(parameters)}function Line(geometry,material,mode){return 1===mode?(console.warn("THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead."),new LineSegments(geometry,material)):(Object3D.call(this),this.type="Line",this.geometry=void 0!==geometry?geometry:new BufferGeometry,void(this.material=void 0!==material?material:new LineBasicMaterial({color:16777215*Math.random()})))}function LineSegments(geometry,material){Line.call(this,geometry,material),this.type="LineSegments"}function LineLoop(geometry,material){Line.call(this,geometry,material),this.type="LineLoop"}function PointsMaterial(parameters){Material.call(this),this.type="PointsMaterial",this.color=new Color(16777215),this.map=null,this.size=1,this.sizeAttenuation=!0,this.lights=!1,this.setValues(parameters)}function Points(geometry,material){Object3D.call(this),this.type="Points",this.geometry=void 0!==geometry?geometry:new BufferGeometry,this.material=void 0!==material?material:new PointsMaterial({color:16777215*Math.random()})}function Group(){Object3D.call(this),this.type="Group"}function VideoTexture(video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){function update(){requestAnimationFrame(update),video.readyState>=video.HAVE_CURRENT_DATA&&(scope.needsUpdate=!0)}Texture.call(this,video,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy),
this.generateMipmaps=!1;var scope=this;update()}function CompressedTexture(mipmaps,width,height,format,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,encoding){Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy,encoding),this.image={width:width,height:height},this.mipmaps=mipmaps,this.flipY=!1,this.generateMipmaps=!1}function CanvasTexture(canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy){Texture.call(this,canvas,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy),this.needsUpdate=!0}function DepthTexture(width,height,type,mapping,wrapS,wrapT,magFilter,minFilter,anisotropy,format){if(format=void 0!==format?format:DepthFormat,format!==DepthFormat&&format!==DepthStencilFormat)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===type&&format===DepthFormat&&(type=UnsignedShortType),void 0===type&&format===DepthStencilFormat&&(type=UnsignedInt248Type),Texture.call(this,null,mapping,wrapS,wrapT,magFilter,minFilter,format,type,anisotropy),this.image={width:width,height:height},this.magFilter=void 0!==magFilter?magFilter:NearestFilter,this.minFilter=void 0!==minFilter?minFilter:NearestFilter,this.flipY=!1,this.generateMipmaps=!1}function WireframeGeometry(geometry){BufferGeometry.call(this),this.type="WireframeGeometry";var i,j,l,o,ol,e,edge1,edge2,key,vertex,vertices=[],edge=[0,0],edges={},keys=["a","b","c"];if(geometry&&geometry.isGeometry){var faces=geometry.faces;for(i=0,l=faces.length;l>i;i++){var face=faces[i];for(j=0;3>j;j++)edge1=face[keys[j]],edge2=face[keys[(j+1)%3]],edge[0]=Math.min(edge1,edge2),edge[1]=Math.max(edge1,edge2),key=edge[0]+","+edge[1],void 0===edges[key]&&(edges[key]={index1:edge[0],index2:edge[1]})}for(key in edges)e=edges[key],vertex=geometry.vertices[e.index1],vertices.push(vertex.x,vertex.y,vertex.z),vertex=geometry.vertices[e.index2],vertices.push(vertex.x,vertex.y,vertex.z)}else if(geometry&&geometry.isBufferGeometry){var position,indices,groups,group,start,count,index1,index2;if(vertex=new Vector3,null!==geometry.index){for(position=geometry.attributes.position,indices=geometry.index,groups=geometry.groups,0===groups.length&&(groups=[{start:0,count:indices.count,materialIndex:0}]),o=0,ol=groups.length;ol>o;++o)for(group=groups[o],start=group.start,count=group.count,i=start,l=start+count;l>i;i+=3)for(j=0;3>j;j++)edge1=indices.getX(i+j),edge2=indices.getX(i+(j+1)%3),edge[0]=Math.min(edge1,edge2),edge[1]=Math.max(edge1,edge2),key=edge[0]+","+edge[1],void 0===edges[key]&&(edges[key]={index1:edge[0],index2:edge[1]});for(key in edges)e=edges[key],vertex.fromBufferAttribute(position,e.index1),vertices.push(vertex.x,vertex.y,vertex.z),vertex.fromBufferAttribute(position,e.index2),vertices.push(vertex.x,vertex.y,vertex.z)}else for(position=geometry.attributes.position,i=0,l=position.count/3;l>i;i++)for(j=0;3>j;j++)index1=3*i+j,vertex.fromBufferAttribute(position,index1),vertices.push(vertex.x,vertex.y,vertex.z),index2=3*i+(j+1)%3,vertex.fromBufferAttribute(position,index2),vertices.push(vertex.x,vertex.y,vertex.z)}this.addAttribute("position",new Float32BufferAttribute(vertices,3))}function ParametricGeometry(func,slices,stacks){Geometry.call(this),this.type="ParametricGeometry",this.parameters={func:func,slices:slices,stacks:stacks},this.fromBufferGeometry(new ParametricBufferGeometry(func,slices,stacks)),this.mergeVertices()}function ParametricBufferGeometry(func,slices,stacks){BufferGeometry.call(this),this.type="ParametricBufferGeometry",this.parameters={func:func,slices:slices,stacks:stacks};var i,j,indices=[],vertices=[],normals=[],uvs=[],EPS=1e-5,normal=new Vector3,p0=new Vector3,p1=new Vector3,pu=new Vector3,pv=new Vector3,sliceCount=slices+1;for(i=0;stacks>=i;i++){var v=i/stacks;for(j=0;slices>=j;j++){var u=j/slices;p0=func(u,v,p0),vertices.push(p0.x,p0.y,p0.z),u-EPS>=0?(p1=func(u-EPS,v,p1),pu.subVectors(p0,p1)):(p1=func(u+EPS,v,p1),pu.subVectors(p1,p0)),v-EPS>=0?(p1=func(u,v-EPS,p1),pv.subVectors(p0,p1)):(p1=func(u,v+EPS,p1),pv.subVectors(p1,p0)),normal.crossVectors(pu,pv).normalize(),normals.push(normal.x,normal.y,normal.z),uvs.push(u,v)}}for(i=0;stacks>i;i++)for(j=0;slices>j;j++){var a=i*sliceCount+j,b=i*sliceCount+j+1,c=(i+1)*sliceCount+j+1,d=(i+1)*sliceCount+j;indices.push(a,b,d),indices.push(b,c,d)}this.setIndex(indices),this.addAttribute("position",new Float32BufferAttribute(vertices,3)),this.addAttribute("normal",new Float32BufferAttribute(normals,3)),this.addAttribute("uv",new Float32BufferAttribute(uvs,2))}function PolyhedronGeometry(vertices,indices,radius,detail){Geometry.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:vertices,indices:indices,radius:radius,detail:detail},this.fromBufferGeometry(new PolyhedronBufferGeometry(vertices,indices,radius,detail)),this.mergeVertices()}function PolyhedronBufferGeometry(vertices,indices,radius,detail){function subdivide(detail){for(var a=new Vector3,b=new Vector3,c=new Vector3,i=0;i<indices.length;i+=3)getVertexByIndex(indices[i+0],a),getVertexByIndex(indices[i+1],b),getVertexByIndex(indices[i+2],c),subdivideFace(a,b,c,detail)}function subdivideFace(a,b,c,detail){var i,j,cols=Math.pow(2,detail),v=[];for(i=0;cols>=i;i++){v[i]=[];var aj=a.clone().lerp(c,i/cols),bj=b.clone().lerp(c,i/cols),rows=cols-i;for(j=0;rows>=j;j++)0===j&&i===cols?v[i][j]=aj:v[i][j]=aj.clone().lerp(bj,j/rows)}for(i=0;cols>i;i++)for(j=0;2*(cols-i)-1>j;j++){var k=Math.floor(j/2);j%2===0?(pushVertex(v[i][k+1]),pushVertex(v[i+1][k]),pushVertex(v[i][k])):(pushVertex(v[i][k+1]),pushVertex(v[i+1][k+1]),pushVertex(v[i+1][k]))}}function appplyRadius(radius){for(var vertex=new Vector3,i=0;i<vertexBuffer.length;i+=3)vertex.x=vertexBuffer[i+0],vertex.y=vertexBuffer[i+1],vertex.z=vertexBuffer[i+2],vertex.normalize().multiplyScalar(radius),vertexBuffer[i+0]=vertex.x,vertexBuffer[i+1]=vertex.y,vertexBuffer[i+2]=vertex.z}function generateUVs(){for(var vertex=new Vector3,i=0;i<vertexBuffer.length;i+=3){vertex.x=vertexBuffer[i+0],vertex.y=vertexBuffer[i+1],vertex.z=vertexBuffer[i+2];var u=azimuth(vertex)/2/Math.PI+.5,v=inclination(vertex)/Math.PI+.5;uvBuffer.push(u,1-v)}correctUVs(),correctSeam()}function correctSeam(){for(var i=0;i<uvBuffer.length;i+=6){var x0=uvBuffer[i+0],x1=uvBuffer[i+2],x2=uvBuffer[i+4],max=Math.max(x0,x1,x2),min=Math.min(x0,x1,x2);max>.9&&.1>min&&(.2>x0&&(uvBuffer[i+0]+=1),.2>x1&&(uvBuffer[i+2]+=1),.2>x2&&(uvBuffer[i+4]+=1))}}function pushVertex(vertex){vertexBuffer.push(vertex.x,vertex.y,vertex.z)}function getVertexByIndex(index,vertex){var stride=3*index;vertex.x=vertices[stride+0],vertex.y=vertices[stride+1],vertex.z=vertices[stride+2]}function correctUVs(){for(var a=new Vector3,b=new Vector3,c=new Vector3,centroid=new Vector3,uvA=new Vector2,uvB=new Vector2,uvC=new Vector2,i=0,j=0;i<vertexBuffer.length;i+=9,j+=6){a.set(vertexBuffer[i+0],vertexBuffer[i+1],vertexBuffer[i+2]),b.set(vertexBuffer[i+3],vertexBuffer[i+4],vertexBuffer[i+5]),c.set(vertexBuffer[i+6],vertexBuffer[i+7],vertexBuffer[i+8]),uvA.set(uvBuffer[j+0],uvBuffer[j+1]),uvB.set(uvBuffer[j+2],uvBuffer[j+3]),uvC.set(uvBuffer[j+4],uvBuffer[j+5]),centroid.copy(a).add(b).add(c).divideScalar(3);var azi=azimuth(centroid);correctUV(uvA,j+0,a,azi),correctUV(uvB,j+2,b,azi),correctUV(uvC,j+4,c,azi)}}function correctUV(uv,stride,vector,azimuth){0>azimuth&&1===uv.x&&(uvBuffer[stride]=uv.x-1),0===vector.x&&0===vector.z&&(uvBuffer[stride]=azimuth/2/Math.PI+.5)}function azimuth(vector){return Math.atan2(vector.z,-vector.x)}function inclination(vector){return Math.atan2(-vector.y,Math.sqrt(vector.x*vector.x+vector.z*vector.z))}BufferGeometry.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:vertices,indices:indices,radius:radius,detail:detail},radius=radius||1,detail=detail||0;var vertexBuffer=[],uvBuffer=[];subdivide(detail),appplyRadius(radius),generateUVs(),this.addAttribute("position",new Float32BufferAttribute(vertexBuffer,3)),this.addAttribute("normal",new Float32BufferAttribute(vertexBuffer.slice(),3)),this.addAttribute("uv",new Float32BufferAttribute(uvBuffer,2)),0===detail?this.computeVertexNormals():this.normalizeNormals()}function TetrahedronGeometry(radius,detail){Geometry.call(this),this.type="TetrahedronGeometry",this.parameters={radius:radius,detail:detail},this.fromBufferGeometry(new TetrahedronBufferGeometry(radius,detail)),this.mergeVertices()}function TetrahedronBufferGeometry(radius,detail){var vertices=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],indices=[2,1,0,0,3,2,1,3,0,2,3,1];PolyhedronBufferGeometry.call(this,vertices,indices,radius,detail),this.type="TetrahedronBufferGeometry",this.parameters={radius:radius,detail:detail}}function OctahedronGeometry(radius,detail){Geometry.call(this),this.type="OctahedronGeometry",this.parameters={radius:radius,detail:detail},this.fromBufferGeometry(new OctahedronBufferGeometry(radius,detail)),this.mergeVertices()}function OctahedronBufferGeometry(radius,detail){var vertices=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],indices=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];PolyhedronBufferGeometry.call(this,vertices,indices,radius,detail),this.type="OctahedronBufferGeometry",this.parameters={radius:radius,detail:detail}}function IcosahedronGeometry(radius,detail){Geometry.call(this),this.type="IcosahedronGeometry",this.parameters={radius:radius,detail:detail},this.fromBufferGeometry(new IcosahedronBufferGeometry(radius,detail)),this.mergeVertices()}function IcosahedronBufferGeometry(radius,detail){var t=(1+Math.sqrt(5))/2,vertices=[-1,t,0,1,t,0,-1,-t,0,1,-t,0,0,-1,t,0,1,t,0,-1,-t,0,1,-t,t,0,-1,t,0,1,-t,0,-1,-t,0,1],indices=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];PolyhedronBufferGeometry.call(this,vertices,indices,radius,detail),this.type="IcosahedronBufferGeometry",this.parameters={radius:radius,detail:detail}}function DodecahedronGeometry(radius,detail){Geometry.call(this),this.type="DodecahedronGeometry",this.parameters={radius:radius,detail:detail},this.fromBufferGeometry(new DodecahedronBufferGeometry(radius,detail)),this.mergeVertices()}function DodecahedronBufferGeometry(radius,detail){var t=(1+Math.sqrt(5))/2,r=1/t,vertices=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-t,0,-r,t,0,r,-t,0,r,t,-r,-t,0,-r,t,0,r,-t,0,r,t,0,-t,0,-r,t,0,-r,-t,0,r,t,0,r],indices=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];PolyhedronBufferGeometry.call(this,vertices,indices,radius,detail),this.type="DodecahedronBufferGeometry",this.parameters={radius:radius,detail:detail}}function TubeGeometry(path,tubularSegments,radius,radialSegments,closed,taper){Geometry.call(this),this.type="TubeGeometry",this.parameters={path:path,tubularSegments:tubularSegments,radius:radius,radialSegments:radialSegments,closed:closed},void 0!==taper&&console.warn("THREE.TubeGeometry: taper has been removed.");var bufferGeometry=new TubeBufferGeometry(path,tubularSegments,radius,radialSegments,closed);this.tangents=bufferGeometry.tangents,this.normals=bufferGeometry.normals,this.binormals=bufferGeometry.binormals,this.fromBufferGeometry(bufferGeometry),this.mergeVertices()}function TubeBufferGeometry(path,tubularSegments,radius,radialSegments,closed){function generateBufferData(){for(i=0;tubularSegments>i;i++)generateSegment(i);generateSegment(closed===!1?tubularSegments:0),generateUVs(),generateIndices()}function generateSegment(i){var P=path.getPointAt(i/tubularSegments),N=frames.normals[i],B=frames.binormals[i];for(j=0;radialSegments>=j;j++){var v=j/radialSegments*Math.PI*2,sin=Math.sin(v),cos=-Math.cos(v);normal.x=cos*N.x+sin*B.x,normal.y=cos*N.y+sin*B.y,normal.z=cos*N.z+sin*B.z,normal.normalize(),normals.push(normal.x,normal.y,normal.z),vertex.x=P.x+radius*normal.x,vertex.y=P.y+radius*normal.y,vertex.z=P.z+radius*normal.z,vertices.push(vertex.x,vertex.y,vertex.z)}}function generateIndices(){for(j=1;tubularSegments>=j;j++)for(i=1;radialSegments>=i;i++){var a=(radialSegments+1)*(j-1)+(i-1),b=(radialSegments+1)*j+(i-1),c=(radialSegments+1)*j+i,d=(radialSegments+1)*(j-1)+i;indices.push(a,b,d),indices.push(b,c,d)}}function generateUVs(){for(i=0;tubularSegments>=i;i++)for(j=0;radialSegments>=j;j++)uv.x=i/tubularSegments,uv.y=j/radialSegments,uvs.push(uv.x,uv.y)}BufferGeometry.call(this),this.type="TubeBufferGeometry",this.parameters={path:path,tubularSegments:tubularSegments,radius:radius,radialSegments:radialSegments,closed:closed},tubularSegments=tubularSegments||64,radius=radius||1,radialSegments=radialSegments||8,closed=closed||!1;var frames=path.computeFrenetFrames(tubularSegments,closed);this.tangents=frames.tangents,this.normals=frames.normals,this.binormals=frames.binormals;var i,j,vertex=new Vector3,normal=new Vector3,uv=new Vector2,vertices=[],normals=[],uvs=[],indices=[];generateBufferData(),this.setIndex(indices),this.addAttribute("position",new Float32BufferAttribute(vertices,3)),this.addAttribute("normal",new Float32BufferAttribute(normals,3)),this.addAttribute("uv",new Float32BufferAttribute(uvs,2))}function TorusKnotGeometry(radius,tube,tubularSegments,radialSegments,p,q,heightScale){Geometry.call(this),this.type="TorusKnotGeometry",this.parameters={radius:radius,tube:tube,tubularSegments:tubularSegments,radialSegments:radialSegments,p:p,q:q},void 0!==heightScale&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new TorusKnotBufferGeometry(radius,tube,tubularSegments,radialSegments,p,q)),this.mergeVertices()}function TorusKnotBufferGeometry(radius,tube,tubularSegments,radialSegments,p,q){function calculatePositionOnCurve(u,p,q,radius,position){var cu=Math.cos(u),su=Math.sin(u),quOverP=q/p*u,cs=Math.cos(quOverP);position.x=radius*(2+cs)*.5*cu,position.y=radius*(2+cs)*su*.5,position.z=radius*Math.sin(quOverP)*.5}BufferGeometry.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:radius,tube:tube,tubularSegments:tubularSegments,radialSegments:radialSegments,p:p,q:q},radius=radius||100,tube=tube||40,tubularSegments=Math.floor(tubularSegments)||64,radialSegments=Math.floor(radialSegments)||8,p=p||2,q=q||3;var i,j,indices=[],vertices=[],normals=[],uvs=[],vertex=new Vector3,normal=new Vector3,P1=new Vector3,P2=new Vector3,B=new Vector3,T=new Vector3,N=new Vector3;for(i=0;tubularSegments>=i;++i){var u=i/tubularSegments*p*Math.PI*2;for(calculatePositionOnCurve(u,p,q,radius,P1),calculatePositionOnCurve(u+.01,p,q,radius,P2),T.subVectors(P2,P1),N.addVectors(P2,P1),B.crossVectors(T,N),N.crossVectors(B,T),B.normalize(),N.normalize(),j=0;radialSegments>=j;++j){var v=j/radialSegments*Math.PI*2,cx=-tube*Math.cos(v),cy=tube*Math.sin(v);vertex.x=P1.x+(cx*N.x+cy*B.x),vertex.y=P1.y+(cx*N.y+cy*B.y),vertex.z=P1.z+(cx*N.z+cy*B.z),vertices.push(vertex.x,vertex.y,vertex.z),normal.subVectors(vertex,P1).normalize(),normals.push(normal.x,normal.y,normal.z),uvs.push(i/tubularSegments),uvs.push(j/radialSegments)}}for(j=1;tubularSegments>=j;j++)for(i=1;radialSegments>=i;i++){var a=(radialSegments+1)*(j-1)+(i-1),b=(radialSegments+1)*j+(i-1),c=(radialSegments+1)*j+i,d=(radialSegments+1)*(j-1)+i;indices.push(a,b,d),indices.push(b,c,d)}this.setIndex(indices),this.addAttribute("position",new Float32BufferAttribute(vertices,3)),this.addAttribute("normal",new Float32BufferAttribute(normals,3)),this.addAttribute("uv",new Float32BufferAttribute(uvs,2))}function TorusGeometry(radius,tube,radialSegments,tubularSegments,arc){Geometry.call(this),this.type="TorusGeometry",this.parameters={radius:radius,tube:tube,radialSegments:radialSegments,tubularSegments:tubularSegments,arc:arc},this.fromBufferGeometry(new TorusBufferGeometry(radius,tube,radialSegments,tubularSegments,arc)),this.mergeVertices()}function TorusBufferGeometry(radius,tube,radialSegments,tubularSegments,arc){BufferGeometry.call(this),this.type="TorusBufferGeometry",this.parameters={radius:radius,tube:tube,radialSegments:radialSegments,tubularSegments:tubularSegments,arc:arc},radius=radius||100,tube=tube||40,radialSegments=Math.floor(radialSegments)||8,tubularSegments=Math.floor(tubularSegments)||6,arc=arc||2*Math.PI;var j,i,indices=[],vertices=[],normals=[],uvs=[],center=new Vector3,vertex=new Vector3,normal=new Vector3;for(j=0;radialSegments>=j;j++)for(i=0;tubularSegments>=i;i++){var u=i/tubularSegments*arc,v=j/radialSegments*Math.PI*2;vertex.x=(radius+tube*Math.cos(v))*Math.cos(u),vertex.y=(radius+tube*Math.cos(v))*Math.sin(u),vertex.z=tube*Math.sin(v),vertices.push(vertex.x,vertex.y,vertex.z),center.x=radius*Math.cos(u),center.y=radius*Math.sin(u),normal.subVectors(vertex,center).normalize(),normals.push(normal.x,normal.y,normal.z),uvs.push(i/tubularSegments),uvs.push(j/radialSegments)}for(j=1;radialSegments>=j;j++)for(i=1;tubularSegments>=i;i++){var a=(tubularSegments+1)*j+i-1,b=(tubularSegments+1)*(j-1)+i-1,c=(tubularSegments+1)*(j-1)+i,d=(tubularSegments+1)*j+i;indices.push(a,b,d),indices.push(b,c,d)}this.setIndex(indices),this.addAttribute("position",new Float32BufferAttribute(vertices,3)),this.addAttribute("normal",new Float32BufferAttribute(normals,3)),this.addAttribute("uv",new Float32BufferAttribute(uvs,2))}function ExtrudeGeometry(shapes,options){Geometry.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:shapes,options:options},this.fromBufferGeometry(new ExtrudeBufferGeometry(shapes,options)),this.mergeVertices()}function ExtrudeBufferGeometry(shapes,options){"undefined"!=typeof shapes&&(BufferGeometry.call(this),this.type="ExtrudeBufferGeometry",shapes=Array.isArray(shapes)?shapes:[shapes],this.addShapeList(shapes,options),this.computeVertexNormals())}function TextGeometry(text,parameters){Geometry.call(this),this.type="TextGeometry",this.parameters={text:text,parameters:parameters},this.fromBufferGeometry(new TextBufferGeometry(text,parameters)),this.mergeVertices()}function TextBufferGeometry(text,parameters){parameters=parameters||{};var font=parameters.font;if(!font||!font.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new Geometry;var shapes=font.generateShapes(text,parameters.size,parameters.curveSegments);parameters.amount=void 0!==parameters.height?parameters.height:50,void 0===parameters.bevelThickness&&(parameters.bevelThickness=10),void 0===parameters.bevelSize&&(parameters.bevelSize=8),void 0===parameters.bevelEnabled&&(parameters.bevelEnabled=!1),ExtrudeBufferGeometry.call(this,shapes,parameters),this.type="TextBufferGeometry"}function SphereGeometry(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength){Geometry.call(this),this.type="SphereGeometry",this.parameters={radius:radius,widthSegments:widthSegments,heightSegments:heightSegments,phiStart:phiStart,phiLength:phiLength,thetaStart:thetaStart,thetaLength:thetaLength},this.fromBufferGeometry(new SphereBufferGeometry(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength)),this.mergeVertices()}function SphereBufferGeometry(radius,widthSegments,heightSegments,phiStart,phiLength,thetaStart,thetaLength){BufferGeometry.call(this),this.type="SphereBufferGeometry",this.parameters={radius:radius,widthSegments:widthSegments,heightSegments:heightSegments,phiStart:phiStart,phiLength:phiLength,thetaStart:thetaStart,thetaLength:thetaLength},radius=radius||50,widthSegments=Math.max(3,Math.floor(widthSegments)||8),heightSegments=Math.max(2,Math.floor(heightSegments)||6),phiStart=void 0!==phiStart?phiStart:0,phiLength=void 0!==phiLength?phiLength:2*Math.PI,thetaStart=void 0!==thetaStart?thetaStart:0,thetaLength=void 0!==thetaLength?thetaLength:Math.PI;var ix,iy,thetaEnd=thetaStart+thetaLength,index=0,grid=[],vertex=new Vector3,normal=new Vector3,indices=[],vertices=[],normals=[],uvs=[];for(iy=0;heightSegments>=iy;iy++){var verticesRow=[],v=iy/heightSegments;for(ix=0;widthSegments>=ix;ix++){var u=ix/widthSegments;vertex.x=-radius*Math.cos(phiStart+u*phiLength)*Math.sin(thetaStart+v*thetaLength),vertex.y=radius*Math.cos(thetaStart+v*thetaLength),vertex.z=radius*Math.sin(phiStart+u*phiLength)*Math.sin(thetaStart+v*thetaLength),vertices.push(vertex.x,vertex.y,vertex.z),normal.set(vertex.x,vertex.y,vertex.z).normalize(),normals.push(normal.x,normal.y,normal.z),uvs.push(u,1-v),verticesRow.push(index++)}grid.push(verticesRow)}for(iy=0;heightSegments>iy;iy++)for(ix=0;widthSegments>ix;ix++){var a=grid[iy][ix+1],b=grid[iy][ix],c=grid[iy+1][ix],d=grid[iy+1][ix+1];(0!==iy||thetaStart>0)&&indices.push(a,b,d),(iy!==heightSegments-1||thetaEnd<Math.PI)&&indices.push(b,c,d)}this.setIndex(indices),this.addAttribute("position",new Float32BufferAttribute(vertices,3)),this.addAttribute("normal",new Float32BufferAttribute(normals,3)),this.addAttribute("uv",new Float32BufferAttribute(uvs,2))}function RingGeometry(innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength){Geometry.call(this),this.type="RingGeometry",this.parameters={innerRadius:innerRadius,outerRadius:outerRadius,thetaSegments:thetaSegments,phiSegments:phiSegments,thetaStart:thetaStart,thetaLength:thetaLength},this.fromBufferGeometry(new RingBufferGeometry(innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength)),this.mergeVertices()}function RingBufferGeometry(innerRadius,outerRadius,thetaSegments,phiSegments,thetaStart,thetaLength){BufferGeometry.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:innerRadius,outerRadius:outerRadius,thetaSegments:thetaSegments,phiSegments:phiSegments,thetaStart:thetaStart,thetaLength:thetaLength},innerRadius=innerRadius||20,outerRadius=outerRadius||50,thetaStart=void 0!==thetaStart?thetaStart:0,thetaLength=void 0!==thetaLength?thetaLength:2*Math.PI,thetaSegments=void 0!==thetaSegments?Math.max(3,thetaSegments):8,phiSegments=void 0!==phiSegments?Math.max(1,phiSegments):1;var segment,j,i,indices=[],vertices=[],normals=[],uvs=[],radius=innerRadius,radiusStep=(outerRadius-innerRadius)/phiSegments,vertex=new Vector3,uv=new Vector2;for(j=0;phiSegments>=j;j++){for(i=0;thetaSegments>=i;i++)segment=thetaStart+i/thetaSegments*thetaLength,vertex.x=radius*Math.cos(segment),vertex.y=radius*Math.sin(segment),vertices.push(vertex.x,vertex.y,vertex.z),normals.push(0,0,1),uv.x=(vertex.x/outerRadius+1)/2,uv.y=(vertex.y/outerRadius+1)/2,uvs.push(uv.x,uv.y);radius+=radiusStep}for(j=0;phiSegments>j;j++){var thetaSegmentLevel=j*(thetaSegments+1);for(i=0;thetaSegments>i;i++){segment=i+thetaSegmentLevel;var a=segment,b=segment+thetaSegments+1,c=segment+thetaSegments+2,d=segment+1;indices.push(a,b,d),indices.push(b,c,d)}}this.setIndex(indices),this.addAttribute("position",new Float32BufferAttribute(vertices,3)),this.addAttribute("normal",new Float32BufferAttribute(normals,3)),this.addAttribute("uv",new Float32BufferAttribute(uvs,2))}function LatheGeometry(points,segments,phiStart,phiLength){Geometry.call(this),this.type="LatheGeometry",this.parameters={points:points,segments:segments,phiStart:phiStart,phiLength:phiLength},this.fromBufferGeometry(new LatheBufferGeometry(points,segments,phiStart,phiLength)),this.mergeVertices()}function LatheBufferGeometry(points,segments,phiStart,phiLength){BufferGeometry.call(this),this.type="LatheBufferGeometry",this.parameters={points:points,segments:segments,phiStart:phiStart,phiLength:phiLength},segments=Math.floor(segments)||12,phiStart=phiStart||0,phiLength=phiLength||2*Math.PI,phiLength=_Math.clamp(phiLength,0,2*Math.PI);var base,i,j,indices=[],vertices=[],uvs=[],inverseSegments=1/segments,vertex=new Vector3,uv=new Vector2;for(i=0;segments>=i;i++){var phi=phiStart+i*inverseSegments*phiLength,sin=Math.sin(phi),cos=Math.cos(phi);for(j=0;j<=points.length-1;j++)vertex.x=points[j].x*sin,vertex.y=points[j].y,vertex.z=points[j].x*cos,vertices.push(vertex.x,vertex.y,vertex.z),uv.x=i/segments,uv.y=j/(points.length-1),uvs.push(uv.x,uv.y)}for(i=0;segments>i;i++)for(j=0;j<points.length-1;j++){base=j+i*points.length;var a=base,b=base+points.length,c=base+points.length+1,d=base+1;indices.push(a,b,d),indices.push(b,c,d)}if(this.setIndex(indices),this.addAttribute("position",new Float32BufferAttribute(vertices,3)),this.addAttribute("uv",new Float32BufferAttribute(uvs,2)),this.computeVertexNormals(),phiLength===2*Math.PI){var normals=this.attributes.normal.array,n1=new Vector3,n2=new Vector3,n=new Vector3;for(base=segments*points.length*3,i=0,j=0;i<points.length;i++,j+=3)n1.x=normals[j+0],n1.y=normals[j+1],n1.z=normals[j+2],n2.x=normals[base+j+0],n2.y=normals[base+j+1],n2.z=normals[base+j+2],n.addVectors(n1,n2).normalize(),normals[j+0]=normals[base+j+0]=n.x,normals[j+1]=normals[base+j+1]=n.y,normals[j+2]=normals[base+j+2]=n.z}}function ShapeGeometry(shapes,curveSegments){Geometry.call(this),this.type="ShapeGeometry","object"==typeof curveSegments&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),curveSegments=curveSegments.curveSegments),this.parameters={shapes:shapes,curveSegments:curveSegments},this.fromBufferGeometry(new ShapeBufferGeometry(shapes,curveSegments)),this.mergeVertices()}function ShapeBufferGeometry(shapes,curveSegments){function addShape(shape){var i,l,shapeHole,indexOffset=vertices.length/3,points=shape.extractPoints(curveSegments),shapeVertices=points.shape,shapeHoles=points.holes;if(ShapeUtils.isClockWise(shapeVertices)===!1)for(shapeVertices=shapeVertices.reverse(),i=0,l=shapeHoles.length;l>i;i++)shapeHole=shapeHoles[i],ShapeUtils.isClockWise(shapeHole)===!0&&(shapeHoles[i]=shapeHole.reverse());var faces=ShapeUtils.triangulateShape(shapeVertices,shapeHoles);for(i=0,l=shapeHoles.length;l>i;i++)shapeHole=shapeHoles[i],shapeVertices=shapeVertices.concat(shapeHole);for(i=0,l=shapeVertices.length;l>i;i++){var vertex=shapeVertices[i];vertices.push(vertex.x,vertex.y,0),normals.push(0,0,1),uvs.push(vertex.x,vertex.y)}for(i=0,l=faces.length;l>i;i++){var face=faces[i],a=face[0]+indexOffset,b=face[1]+indexOffset,c=face[2]+indexOffset;indices.push(a,b,c),groupCount+=3}}BufferGeometry.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:shapes,curveSegments:curveSegments},curveSegments=curveSegments||12;var indices=[],vertices=[],normals=[],uvs=[],groupStart=0,groupCount=0;if(Array.isArray(shapes)===!1)addShape(shapes);else for(var i=0;i<shapes.length;i++)addShape(shapes[i]),this.addGroup(groupStart,groupCount,i),groupStart+=groupCount,groupCount=0;this.setIndex(indices),this.addAttribute("position",new Float32BufferAttribute(vertices,3)),this.addAttribute("normal",new Float32BufferAttribute(normals,3)),this.addAttribute("uv",new Float32BufferAttribute(uvs,2))}function EdgesGeometry(geometry,thresholdAngle){BufferGeometry.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:thresholdAngle},thresholdAngle=void 0!==thresholdAngle?thresholdAngle:1;var edge1,edge2,key,geometry2,vertices=[],thresholdDot=Math.cos(_Math.DEG2RAD*thresholdAngle),edge=[0,0],edges={},keys=["a","b","c"];geometry.isBufferGeometry?(geometry2=new Geometry,geometry2.fromBufferGeometry(geometry)):geometry2=geometry.clone(),geometry2.mergeVertices(),geometry2.computeFaceNormals();for(var sourceVertices=geometry2.vertices,faces=geometry2.faces,i=0,l=faces.length;l>i;i++)for(var face=faces[i],j=0;3>j;j++)edge1=face[keys[j]],edge2=face[keys[(j+1)%3]],edge[0]=Math.min(edge1,edge2),edge[1]=Math.max(edge1,edge2),key=edge[0]+","+edge[1],void 0===edges[key]?edges[key]={index1:edge[0],index2:edge[1],face1:i,face2:void 0}:edges[key].face2=i;for(key in edges){var e=edges[key];if(void 0===e.face2||faces[e.face1].normal.dot(faces[e.face2].normal)<=thresholdDot){var vertex=sourceVertices[e.index1];vertices.push(vertex.x,vertex.y,vertex.z),vertex=sourceVertices[e.index2],vertices.push(vertex.x,vertex.y,vertex.z)}}this.addAttribute("position",new Float32BufferAttribute(vertices,3))}function CylinderGeometry(radiusTop,radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){Geometry.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:radiusTop,radiusBottom:radiusBottom,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength},this.fromBufferGeometry(new CylinderBufferGeometry(radiusTop,radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength)),this.mergeVertices()}function CylinderBufferGeometry(radiusTop,radiusBottom,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){function generateTorso(){var x,y,normal=new Vector3,vertex=new Vector3,groupCount=0,slope=(radiusBottom-radiusTop)/height;for(y=0;heightSegments>=y;y++){var indexRow=[],v=y/heightSegments,radius=v*(radiusBottom-radiusTop)+radiusTop;for(x=0;radialSegments>=x;x++){var u=x/radialSegments,theta=u*thetaLength+thetaStart,sinTheta=Math.sin(theta),cosTheta=Math.cos(theta);vertex.x=radius*sinTheta,vertex.y=-v*height+halfHeight,vertex.z=radius*cosTheta,vertices.push(vertex.x,vertex.y,vertex.z),normal.set(sinTheta,slope,cosTheta).normalize(),normals.push(normal.x,normal.y,normal.z),uvs.push(u,1-v),indexRow.push(index++)}indexArray.push(indexRow)}for(x=0;radialSegments>x;x++)for(y=0;heightSegments>y;y++){var a=indexArray[y][x],b=indexArray[y+1][x],c=indexArray[y+1][x+1],d=indexArray[y][x+1];indices.push(a,b,d),indices.push(b,c,d),groupCount+=6}scope.addGroup(groupStart,groupCount,0),groupStart+=groupCount}function generateCap(top){var x,centerIndexStart,centerIndexEnd,uv=new Vector2,vertex=new Vector3,groupCount=0,radius=top===!0?radiusTop:radiusBottom,sign=top===!0?1:-1;for(centerIndexStart=index,x=1;radialSegments>=x;x++)vertices.push(0,halfHeight*sign,0),normals.push(0,sign,0),uvs.push(.5,.5),index++;for(centerIndexEnd=index,x=0;radialSegments>=x;x++){var u=x/radialSegments,theta=u*thetaLength+thetaStart,cosTheta=Math.cos(theta),sinTheta=Math.sin(theta);vertex.x=radius*sinTheta,vertex.y=halfHeight*sign,vertex.z=radius*cosTheta,vertices.push(vertex.x,vertex.y,vertex.z),normals.push(0,sign,0),uv.x=.5*cosTheta+.5,uv.y=.5*sinTheta*sign+.5,uvs.push(uv.x,uv.y),index++}for(x=0;radialSegments>x;x++){var c=centerIndexStart+x,i=centerIndexEnd+x;top===!0?indices.push(i,i+1,c):indices.push(i+1,i,c),groupCount+=3}scope.addGroup(groupStart,groupCount,top===!0?1:2),groupStart+=groupCount}BufferGeometry.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:radiusTop,radiusBottom:radiusBottom,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength};var scope=this;radiusTop=void 0!==radiusTop?radiusTop:20,radiusBottom=void 0!==radiusBottom?radiusBottom:20,height=void 0!==height?height:100,radialSegments=Math.floor(radialSegments)||8,heightSegments=Math.floor(heightSegments)||1,openEnded=void 0!==openEnded?openEnded:!1,thetaStart=void 0!==thetaStart?thetaStart:0,thetaLength=void 0!==thetaLength?thetaLength:2*Math.PI;var indices=[],vertices=[],normals=[],uvs=[],index=0,indexArray=[],halfHeight=height/2,groupStart=0;generateTorso(),openEnded===!1&&(radiusTop>0&&generateCap(!0),radiusBottom>0&&generateCap(!1)),this.setIndex(indices),this.addAttribute("position",new Float32BufferAttribute(vertices,3)),this.addAttribute("normal",new Float32BufferAttribute(normals,3)),this.addAttribute("uv",new Float32BufferAttribute(uvs,2))}function ConeGeometry(radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){CylinderGeometry.call(this,0,radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength),this.type="ConeGeometry",this.parameters={radius:radius,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength}}function ConeBufferGeometry(radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength){CylinderBufferGeometry.call(this,0,radius,height,radialSegments,heightSegments,openEnded,thetaStart,thetaLength),
this.type="ConeBufferGeometry",this.parameters={radius:radius,height:height,radialSegments:radialSegments,heightSegments:heightSegments,openEnded:openEnded,thetaStart:thetaStart,thetaLength:thetaLength}}function CircleGeometry(radius,segments,thetaStart,thetaLength){Geometry.call(this),this.type="CircleGeometry",this.parameters={radius:radius,segments:segments,thetaStart:thetaStart,thetaLength:thetaLength},this.fromBufferGeometry(new CircleBufferGeometry(radius,segments,thetaStart,thetaLength)),this.mergeVertices()}function CircleBufferGeometry(radius,segments,thetaStart,thetaLength){BufferGeometry.call(this),this.type="CircleBufferGeometry",this.parameters={radius:radius,segments:segments,thetaStart:thetaStart,thetaLength:thetaLength},radius=radius||50,segments=void 0!==segments?Math.max(3,segments):8,thetaStart=void 0!==thetaStart?thetaStart:0,thetaLength=void 0!==thetaLength?thetaLength:2*Math.PI;var i,s,indices=[],vertices=[],normals=[],uvs=[],vertex=new Vector3,uv=new Vector2;for(vertices.push(0,0,0),normals.push(0,0,1),uvs.push(.5,.5),s=0,i=3;segments>=s;s++,i+=3){var segment=thetaStart+s/segments*thetaLength;vertex.x=radius*Math.cos(segment),vertex.y=radius*Math.sin(segment),vertices.push(vertex.x,vertex.y,vertex.z),normals.push(0,0,1),uv.x=(vertices[i]/radius+1)/2,uv.y=(vertices[i+1]/radius+1)/2,uvs.push(uv.x,uv.y)}for(i=1;segments>=i;i++)indices.push(i,i+1,0);this.setIndex(indices),this.addAttribute("position",new Float32BufferAttribute(vertices,3)),this.addAttribute("normal",new Float32BufferAttribute(normals,3)),this.addAttribute("uv",new Float32BufferAttribute(uvs,2))}function ShadowMaterial(parameters){ShaderMaterial.call(this,{uniforms:UniformsUtils.merge([UniformsLib.lights,{opacity:{value:1}}]),vertexShader:ShaderChunk.shadow_vert,fragmentShader:ShaderChunk.shadow_frag}),this.lights=!0,this.transparent=!0,Object.defineProperties(this,{opacity:{enumerable:!0,get:function(){return this.uniforms.opacity.value},set:function(value){this.uniforms.opacity.value=value}}}),this.setValues(parameters)}function RawShaderMaterial(parameters){ShaderMaterial.call(this,parameters),this.type="RawShaderMaterial"}function MeshStandardMaterial(parameters){Material.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Color(16777215),this.roughness=.5,this.metalness=.5,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(parameters)}function MeshPhysicalMaterial(parameters){MeshStandardMaterial.call(this),this.defines={PHYSICAL:""},this.type="MeshPhysicalMaterial",this.reflectivity=.5,this.clearCoat=0,this.clearCoatRoughness=0,this.setValues(parameters)}function MeshPhongMaterial(parameters){Material.call(this),this.type="MeshPhongMaterial",this.color=new Color(16777215),this.specular=new Color(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(parameters)}function MeshToonMaterial(parameters){MeshPhongMaterial.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.gradientMap=null,this.setValues(parameters)}function MeshNormalMaterial(parameters){Material.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalScale=new Vector2(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(parameters)}function MeshLambertMaterial(parameters){Material.call(this),this.type="MeshLambertMaterial",this.color=new Color(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Color(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=MultiplyOperation,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(parameters)}function LineDashedMaterial(parameters){Material.call(this),this.type="LineDashedMaterial",this.color=new Color(16777215),this.linewidth=1,this.scale=1,this.dashSize=3,this.gapSize=1,this.lights=!1,this.setValues(parameters)}function LoadingManager(onLoad,onProgress,onError){var scope=this,isLoading=!1,itemsLoaded=0,itemsTotal=0;this.onStart=void 0,this.onLoad=onLoad,this.onProgress=onProgress,this.onError=onError,this.itemStart=function(url){itemsTotal++,isLoading===!1&&void 0!==scope.onStart&&scope.onStart(url,itemsLoaded,itemsTotal),isLoading=!0},this.itemEnd=function(url){itemsLoaded++,void 0!==scope.onProgress&&scope.onProgress(url,itemsLoaded,itemsTotal),itemsLoaded===itemsTotal&&(isLoading=!1,void 0!==scope.onLoad&&scope.onLoad())},this.itemError=function(url){void 0!==scope.onError&&scope.onError(url)}}function FileLoader(manager){this.manager=void 0!==manager?manager:DefaultLoadingManager}function CompressedTextureLoader(manager){this.manager=void 0!==manager?manager:DefaultLoadingManager,this._parser=null}function DataTextureLoader(manager){this.manager=void 0!==manager?manager:DefaultLoadingManager,this._parser=null}function ImageLoader(manager){this.manager=void 0!==manager?manager:DefaultLoadingManager}function CubeTextureLoader(manager){this.manager=void 0!==manager?manager:DefaultLoadingManager}function TextureLoader(manager){this.manager=void 0!==manager?manager:DefaultLoadingManager}function Light(color,intensity){Object3D.call(this),this.type="Light",this.color=new Color(color),this.intensity=void 0!==intensity?intensity:1,this.receiveShadow=void 0}function HemisphereLight(skyColor,groundColor,intensity){Light.call(this,skyColor,intensity),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(Object3D.DefaultUp),this.updateMatrix(),this.groundColor=new Color(groundColor)}function LightShadow(camera){this.camera=camera,this.bias=0,this.radius=1,this.mapSize=new Vector2(512,512),this.map=null,this.matrix=new Matrix4}function SpotLightShadow(){LightShadow.call(this,new PerspectiveCamera(50,1,.5,500))}function SpotLight(color,intensity,distance,angle,penumbra,decay){Light.call(this,color,intensity),this.type="SpotLight",this.position.copy(Object3D.DefaultUp),this.updateMatrix(),this.target=new Object3D,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(power){this.intensity=power/Math.PI}}),this.distance=void 0!==distance?distance:0,this.angle=void 0!==angle?angle:Math.PI/3,this.penumbra=void 0!==penumbra?penumbra:0,this.decay=void 0!==decay?decay:1,this.shadow=new SpotLightShadow}function PointLight(color,intensity,distance,decay){Light.call(this,color,intensity),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(power){this.intensity=power/(4*Math.PI)}}),this.distance=void 0!==distance?distance:0,this.decay=void 0!==decay?decay:1,this.shadow=new LightShadow(new PerspectiveCamera(90,1,.5,500))}function DirectionalLightShadow(){LightShadow.call(this,new OrthographicCamera(-5,5,5,-5,.5,500))}function DirectionalLight(color,intensity){Light.call(this,color,intensity),this.type="DirectionalLight",this.position.copy(Object3D.DefaultUp),this.updateMatrix(),this.target=new Object3D,this.shadow=new DirectionalLightShadow}function AmbientLight(color,intensity){Light.call(this,color,intensity),this.type="AmbientLight",this.castShadow=void 0}function RectAreaLight(color,intensity,width,height){Light.call(this,color,intensity),this.type="RectAreaLight",this.position.set(0,1,0),this.updateMatrix(),this.width=void 0!==width?width:10,this.height=void 0!==height?height:10}function Interpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){this.parameterPositions=parameterPositions,this._cachedIndex=0,this.resultBuffer=void 0!==resultBuffer?resultBuffer:new sampleValues.constructor(sampleSize),this.sampleValues=sampleValues,this.valueSize=sampleSize}function CubicInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function LinearInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer)}function DiscreteInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer)}function KeyframeTrackConstructor(name,times,values,interpolation){if(void 0===name)throw new Error("track name is undefined");if(void 0===times||0===times.length)throw new Error("no keyframes in track named "+name);this.name=name,this.times=AnimationUtils.convertArray(times,this.TimeBufferType),this.values=AnimationUtils.convertArray(values,this.ValueBufferType),this.setInterpolation(interpolation||this.DefaultInterpolation),this.validate(),this.optimize()}function VectorKeyframeTrack(name,times,values,interpolation){KeyframeTrackConstructor.call(this,name,times,values,interpolation)}function QuaternionLinearInterpolant(parameterPositions,sampleValues,sampleSize,resultBuffer){Interpolant.call(this,parameterPositions,sampleValues,sampleSize,resultBuffer)}function QuaternionKeyframeTrack(name,times,values,interpolation){KeyframeTrackConstructor.call(this,name,times,values,interpolation)}function NumberKeyframeTrack(name,times,values,interpolation){KeyframeTrackConstructor.call(this,name,times,values,interpolation)}function StringKeyframeTrack(name,times,values,interpolation){KeyframeTrackConstructor.call(this,name,times,values,interpolation)}function BooleanKeyframeTrack(name,times,values){KeyframeTrackConstructor.call(this,name,times,values)}function ColorKeyframeTrack(name,times,values,interpolation){KeyframeTrackConstructor.call(this,name,times,values,interpolation)}function KeyframeTrack(name,times,values,interpolation){KeyframeTrackConstructor.apply(this,arguments)}function AnimationClip(name,duration,tracks){this.name=name,this.tracks=tracks,this.duration=void 0!==duration?duration:-1,this.uuid=_Math.generateUUID(),this.duration<0&&this.resetDuration(),this.optimize()}function MaterialLoader(manager){this.manager=void 0!==manager?manager:DefaultLoadingManager,this.textures={}}function BufferGeometryLoader(manager){this.manager=void 0!==manager?manager:DefaultLoadingManager}function Loader(){this.onLoadStart=function(){},this.onLoadProgress=function(){},this.onLoadComplete=function(){}}function JSONLoader(manager){"boolean"==typeof manager&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),manager=void 0),this.manager=void 0!==manager?manager:DefaultLoadingManager,this.withCredentials=!1}function ObjectLoader(manager){this.manager=void 0!==manager?manager:DefaultLoadingManager,this.texturePath=""}function CatmullRom(t,p0,p1,p2,p3){var v0=.5*(p2-p0),v1=.5*(p3-p1),t2=t*t,t3=t*t2;return(2*p1-2*p2+v0+v1)*t3+(-3*p1+3*p2-2*v0-v1)*t2+v0*t+p1}function QuadraticBezierP0(t,p){var k=1-t;return k*k*p}function QuadraticBezierP1(t,p){return 2*(1-t)*t*p}function QuadraticBezierP2(t,p){return t*t*p}function QuadraticBezier(t,p0,p1,p2){return QuadraticBezierP0(t,p0)+QuadraticBezierP1(t,p1)+QuadraticBezierP2(t,p2)}function CubicBezierP0(t,p){var k=1-t;return k*k*k*p}function CubicBezierP1(t,p){var k=1-t;return 3*k*k*t*p}function CubicBezierP2(t,p){return 3*(1-t)*t*t*p}function CubicBezierP3(t,p){return t*t*t*p}function CubicBezier(t,p0,p1,p2,p3){return CubicBezierP0(t,p0)+CubicBezierP1(t,p1)+CubicBezierP2(t,p2)+CubicBezierP3(t,p3)}function Curve(){this.arcLengthDivisions=200}function LineCurve(v1,v2){Curve.call(this),this.v1=v1,this.v2=v2}function CurvePath(){Curve.call(this),this.curves=[],this.autoClose=!1}function EllipseCurve(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){Curve.call(this),this.aX=aX,this.aY=aY,this.xRadius=xRadius,this.yRadius=yRadius,this.aStartAngle=aStartAngle,this.aEndAngle=aEndAngle,this.aClockwise=aClockwise,this.aRotation=aRotation||0}function SplineCurve(points){Curve.call(this),this.points=void 0===points?[]:points}function CubicBezierCurve(v0,v1,v2,v3){Curve.call(this),this.v0=v0,this.v1=v1,this.v2=v2,this.v3=v3}function QuadraticBezierCurve(v0,v1,v2){Curve.call(this),this.v0=v0,this.v1=v1,this.v2=v2}function Path(points){CurvePath.call(this),this.currentPoint=new Vector2,points&&this.fromPoints(points)}function Shape(){Path.apply(this,arguments),this.holes=[]}function ShapePath(){this.subPaths=[],this.currentPath=null}function Font(data){this.data=data}function FontLoader(manager){this.manager=void 0!==manager?manager:DefaultLoadingManager}function AudioLoader(manager){this.manager=void 0!==manager?manager:DefaultLoadingManager}function StereoCamera(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new PerspectiveCamera,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new PerspectiveCamera,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1}function CubeCamera(near,far,cubeResolution){Object3D.call(this),this.type="CubeCamera";var fov=90,aspect=1,cameraPX=new PerspectiveCamera(fov,aspect,near,far);cameraPX.up.set(0,-1,0),cameraPX.lookAt(new Vector3(1,0,0)),this.add(cameraPX);var cameraNX=new PerspectiveCamera(fov,aspect,near,far);cameraNX.up.set(0,-1,0),cameraNX.lookAt(new Vector3(-1,0,0)),this.add(cameraNX);var cameraPY=new PerspectiveCamera(fov,aspect,near,far);cameraPY.up.set(0,0,1),cameraPY.lookAt(new Vector3(0,1,0)),this.add(cameraPY);var cameraNY=new PerspectiveCamera(fov,aspect,near,far);cameraNY.up.set(0,0,-1),cameraNY.lookAt(new Vector3(0,-1,0)),this.add(cameraNY);var cameraPZ=new PerspectiveCamera(fov,aspect,near,far);cameraPZ.up.set(0,-1,0),cameraPZ.lookAt(new Vector3(0,0,1)),this.add(cameraPZ);var cameraNZ=new PerspectiveCamera(fov,aspect,near,far);cameraNZ.up.set(0,-1,0),cameraNZ.lookAt(new Vector3(0,0,-1)),this.add(cameraNZ);var options={format:RGBFormat,magFilter:LinearFilter,minFilter:LinearFilter};this.renderTarget=new WebGLRenderTargetCube(cubeResolution,cubeResolution,options),this.renderTarget.texture.name="CubeCamera",this.updateCubeMap=function(renderer,scene){null===this.parent&&this.updateMatrixWorld();var renderTarget=this.renderTarget,generateMipmaps=renderTarget.texture.generateMipmaps;renderTarget.texture.generateMipmaps=!1,renderTarget.activeCubeFace=0,renderer.render(scene,cameraPX,renderTarget),renderTarget.activeCubeFace=1,renderer.render(scene,cameraNX,renderTarget),renderTarget.activeCubeFace=2,renderer.render(scene,cameraPY,renderTarget),renderTarget.activeCubeFace=3,renderer.render(scene,cameraNY,renderTarget),renderTarget.activeCubeFace=4,renderer.render(scene,cameraPZ,renderTarget),renderTarget.texture.generateMipmaps=generateMipmaps,renderTarget.activeCubeFace=5,renderer.render(scene,cameraNZ,renderTarget),renderer.setRenderTarget(null)}}function AudioListener(){Object3D.call(this),this.type="AudioListener",this.context=AudioContext.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null}function Audio(listener){Object3D.call(this),this.type="Audio",this.context=listener.context,this.gain=this.context.createGain(),this.gain.connect(listener.getInput()),this.autoplay=!1,this.buffer=null,this.loop=!1,this.startTime=0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this.filters=[]}function PositionalAudio(listener){Audio.call(this,listener),this.panner=this.context.createPanner(),this.panner.connect(this.gain)}function AudioAnalyser(audio,fftSize){this.analyser=audio.context.createAnalyser(),this.analyser.fftSize=void 0!==fftSize?fftSize:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),audio.getOutput().connect(this.analyser)}function PropertyMixer(binding,typeName,valueSize){this.binding=binding,this.valueSize=valueSize;var mixFunction,bufferType=Float64Array;switch(typeName){case"quaternion":mixFunction=this._slerp;break;case"string":case"bool":bufferType=Array,mixFunction=this._select;break;default:mixFunction=this._lerp}this.buffer=new bufferType(4*valueSize),this._mixBufferRegion=mixFunction,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}function Composite(targetGroup,path,optionalParsedPath){var parsedPath=optionalParsedPath||PropertyBinding.parseTrackName(path);this._targetGroup=targetGroup,this._bindings=targetGroup.subscribe_(path,parsedPath)}function PropertyBinding(rootNode,path,parsedPath){this.path=path,this.parsedPath=parsedPath||PropertyBinding.parseTrackName(path),this.node=PropertyBinding.findNode(rootNode,this.parsedPath.nodeName)||rootNode,this.rootNode=rootNode}function AnimationObjectGroup(var_args){this.uuid=_Math.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var indices={};this._indicesByUUID=indices;for(var i=0,n=arguments.length;i!==n;++i)indices[arguments[i].uuid]=i;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var scope=this;this.stats={objects:{get total(){return scope._objects.length},get inUse(){return this.total-scope.nCachedObjects_}},get bindingsPerObject(){return scope._bindings.length}}}function AnimationAction(mixer,clip,localRoot){this._mixer=mixer,this._clip=clip,this._localRoot=localRoot||null;for(var tracks=clip.tracks,nTracks=tracks.length,interpolants=new Array(nTracks),interpolantSettings={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding},i=0;i!==nTracks;++i){var interpolant=tracks[i].createInterpolant(null);interpolants[i]=interpolant,interpolant.settings=interpolantSettings}this._interpolantSettings=interpolantSettings,this._interpolants=interpolants,this._propertyBindings=new Array(nTracks),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=LoopRepeat,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function AnimationMixer(root){this._root=root,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function Uniform(value){"string"==typeof value&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),value=arguments[1]),this.value=value}function InstancedBufferGeometry(){BufferGeometry.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function InterleavedBufferAttribute(interleavedBuffer,itemSize,offset,normalized){this.uuid=_Math.generateUUID(),this.data=interleavedBuffer,this.itemSize=itemSize,this.offset=offset,this.normalized=normalized===!0}function InterleavedBuffer(array,stride){this.uuid=_Math.generateUUID(),this.array=array,this.stride=stride,this.count=void 0!==array?array.length/stride:0,this.dynamic=!1,this.updateRange={offset:0,count:-1},this.onUploadCallback=function(){},this.version=0}function InstancedInterleavedBuffer(array,stride,meshPerAttribute){InterleavedBuffer.call(this,array,stride),this.meshPerAttribute=meshPerAttribute||1}function InstancedBufferAttribute(array,itemSize,meshPerAttribute){BufferAttribute.call(this,array,itemSize),this.meshPerAttribute=meshPerAttribute||1}function Raycaster(origin,direction,near,far){this.ray=new Ray(origin,direction),this.near=near||0,this.far=far||1/0,this.params={Mesh:{},Line:{},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function ascSort(a,b){return a.distance-b.distance}function intersectObject(object,raycaster,intersects,recursive){if(object.visible!==!1&&(object.raycast(raycaster,intersects),recursive===!0))for(var children=object.children,i=0,l=children.length;l>i;i++)intersectObject(children[i],raycaster,intersects,!0)}function Clock(autoStart){this.autoStart=void 0!==autoStart?autoStart:!0,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}function Spherical(radius,phi,theta){return this.radius=void 0!==radius?radius:1,this.phi=void 0!==phi?phi:0,this.theta=void 0!==theta?theta:0,this}function Cylindrical(radius,theta,y){return this.radius=void 0!==radius?radius:1,this.theta=void 0!==theta?theta:0,this.y=void 0!==y?y:0,this}function MorphBlendMesh(geometry,material){Mesh.call(this,geometry,material),this.animationsMap={},this.animationsList=[];var numFrames=this.geometry.morphTargets.length,name="__default",startFrame=0,endFrame=numFrames-1,fps=numFrames/1;this.createAnimation(name,startFrame,endFrame,fps),this.setAnimationWeight(name,1)}function ImmediateRenderObject(material){Object3D.call(this),this.material=material,this.render=function(renderCallback){}}function VertexNormalsHelper(object,size,hex,linewidth){this.object=object,this.size=void 0!==size?size:1;var color=void 0!==hex?hex:16711680,width=void 0!==linewidth?linewidth:1,nNormals=0,objGeometry=this.object.geometry;objGeometry&&objGeometry.isGeometry?nNormals=3*objGeometry.faces.length:objGeometry&&objGeometry.isBufferGeometry&&(nNormals=objGeometry.attributes.normal.count);var geometry=new BufferGeometry,positions=new Float32BufferAttribute(2*nNormals*3,3);geometry.addAttribute("position",positions),LineSegments.call(this,geometry,new LineBasicMaterial({color:color,linewidth:width})),this.matrixAutoUpdate=!1,this.update()}function SpotLightHelper(light){Object3D.call(this),this.light=light,this.light.updateMatrixWorld(),this.matrix=light.matrixWorld,this.matrixAutoUpdate=!1;for(var geometry=new BufferGeometry,positions=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],i=0,j=1,l=32;l>i;i++,j++){var p1=i/l*Math.PI*2,p2=j/l*Math.PI*2;positions.push(Math.cos(p1),Math.sin(p1),1,Math.cos(p2),Math.sin(p2),1)}geometry.addAttribute("position",new Float32BufferAttribute(positions,3));var material=new LineBasicMaterial({fog:!1});this.cone=new LineSegments(geometry,material),this.add(this.cone),this.update()}function getBoneList(object){var boneList=[];object&&object.isBone&&boneList.push(object);for(var i=0;i<object.children.length;i++)boneList.push.apply(boneList,getBoneList(object.children[i]));return boneList}function SkeletonHelper(object){for(var bones=getBoneList(object),geometry=new BufferGeometry,vertices=[],colors=[],color1=new Color(0,0,1),color2=new Color(0,1,0),i=0;i<bones.length;i++){var bone=bones[i];bone.parent&&bone.parent.isBone&&(vertices.push(0,0,0),vertices.push(0,0,0),colors.push(color1.r,color1.g,color1.b),colors.push(color2.r,color2.g,color2.b))}geometry.addAttribute("position",new Float32BufferAttribute(vertices,3)),geometry.addAttribute("color",new Float32BufferAttribute(colors,3));var material=new LineBasicMaterial({vertexColors:VertexColors,depthTest:!1,depthWrite:!1,transparent:!0});LineSegments.call(this,geometry,material),this.root=object,this.bones=bones,this.matrix=object.matrixWorld,this.matrixAutoUpdate=!1,this.onBeforeRender()}function PointLightHelper(light,sphereSize){this.light=light,this.light.updateMatrixWorld();var geometry=new SphereBufferGeometry(sphereSize,4,2),material=new MeshBasicMaterial({wireframe:!0,fog:!1});material.color.copy(this.light.color),Mesh.call(this,geometry,material),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1}function RectAreaLightHelper(light){Object3D.call(this),this.light=light,this.light.updateMatrixWorld(),this.matrix=light.matrixWorld,this.matrixAutoUpdate=!1;var material=new LineBasicMaterial({color:light.color}),geometry=new BufferGeometry;geometry.addAttribute("position",new BufferAttribute(new Float32Array(15),3)),this.add(new Line(geometry,material)),this.update()}function HemisphereLightHelper(light,size){Object3D.call(this),this.light=light,this.light.updateMatrixWorld(),this.matrix=light.matrixWorld,this.matrixAutoUpdate=!1;var geometry=new OctahedronBufferGeometry(size);geometry.rotateY(.5*Math.PI);var material=new MeshBasicMaterial({vertexColors:VertexColors,wireframe:!0}),position=geometry.getAttribute("position"),colors=new Float32Array(3*position.count);geometry.addAttribute("color",new BufferAttribute(colors,3)),this.add(new Mesh(geometry,material)),this.update()}function GridHelper(size,divisions,color1,color2){size=size||10,divisions=divisions||10,color1=new Color(void 0!==color1?color1:4473924),color2=new Color(void 0!==color2?color2:8947848);for(var center=divisions/2,step=size/divisions,halfSize=size/2,vertices=[],colors=[],i=0,j=0,k=-halfSize;divisions>=i;i++,k+=step){vertices.push(-halfSize,0,k,halfSize,0,k),vertices.push(k,0,-halfSize,k,0,halfSize);var color=i===center?color1:color2;color.toArray(colors,j),j+=3,color.toArray(colors,j),j+=3,color.toArray(colors,j),j+=3,color.toArray(colors,j),j+=3}var geometry=new BufferGeometry;geometry.addAttribute("position",new Float32BufferAttribute(vertices,3)),geometry.addAttribute("color",new Float32BufferAttribute(colors,3));var material=new LineBasicMaterial({vertexColors:VertexColors});LineSegments.call(this,geometry,material)}function PolarGridHelper(radius,radials,circles,divisions,color1,color2){radius=radius||10,radials=radials||16,circles=circles||8,divisions=divisions||64,color1=new Color(void 0!==color1?color1:4473924),color2=new Color(void 0!==color2?color2:8947848);var x,z,v,i,j,r,color,vertices=[],colors=[];for(i=0;radials>=i;i++)v=i/radials*(2*Math.PI),x=Math.sin(v)*radius,z=Math.cos(v)*radius,vertices.push(0,0,0),vertices.push(x,0,z),color=1&i?color1:color2,colors.push(color.r,color.g,color.b),colors.push(color.r,color.g,color.b);for(i=0;circles>=i;i++)for(color=1&i?color1:color2,r=radius-radius/circles*i,j=0;divisions>j;j++)v=j/divisions*(2*Math.PI),x=Math.sin(v)*r,z=Math.cos(v)*r,vertices.push(x,0,z),colors.push(color.r,color.g,color.b),v=(j+1)/divisions*(2*Math.PI),x=Math.sin(v)*r,z=Math.cos(v)*r,vertices.push(x,0,z),colors.push(color.r,color.g,color.b);var geometry=new BufferGeometry;geometry.addAttribute("position",new Float32BufferAttribute(vertices,3)),geometry.addAttribute("color",new Float32BufferAttribute(colors,3));var material=new LineBasicMaterial({vertexColors:VertexColors});LineSegments.call(this,geometry,material)}function FaceNormalsHelper(object,size,hex,linewidth){this.object=object,this.size=void 0!==size?size:1;var color=void 0!==hex?hex:16776960,width=void 0!==linewidth?linewidth:1,nNormals=0,objGeometry=this.object.geometry;objGeometry&&objGeometry.isGeometry?nNormals=objGeometry.faces.length:console.warn("THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.");var geometry=new BufferGeometry,positions=new Float32BufferAttribute(2*nNormals*3,3);geometry.addAttribute("position",positions),LineSegments.call(this,geometry,new LineBasicMaterial({color:color,linewidth:width})),this.matrixAutoUpdate=!1,this.update()}function DirectionalLightHelper(light,size){Object3D.call(this),this.light=light,this.light.updateMatrixWorld(),this.matrix=light.matrixWorld,this.matrixAutoUpdate=!1,void 0===size&&(size=1);var geometry=new BufferGeometry;geometry.addAttribute("position",new Float32BufferAttribute([-size,size,0,size,size,0,size,-size,0,-size,-size,0,-size,size,0],3));var material=new LineBasicMaterial({fog:!1});this.add(new Line(geometry,material)),geometry=new BufferGeometry,geometry.addAttribute("position",new Float32BufferAttribute([0,0,0,0,0,1],3)),this.add(new Line(geometry,material)),this.update()}function CameraHelper(camera){function addLine(a,b,color){addPoint(a,color),addPoint(b,color)}function addPoint(id,color){vertices.push(0,0,0),colors.push(color.r,color.g,color.b),void 0===pointMap[id]&&(pointMap[id]=[]),pointMap[id].push(vertices.length/3-1)}var geometry=new BufferGeometry,material=new LineBasicMaterial({color:16777215,vertexColors:FaceColors}),vertices=[],colors=[],pointMap={},colorFrustum=new Color(16755200),colorCone=new Color(16711680),colorUp=new Color(43775),colorTarget=new Color(16777215),colorCross=new Color(3355443);addLine("n1","n2",colorFrustum),addLine("n2","n4",colorFrustum),addLine("n4","n3",colorFrustum),addLine("n3","n1",colorFrustum),addLine("f1","f2",colorFrustum),addLine("f2","f4",colorFrustum),addLine("f4","f3",colorFrustum),addLine("f3","f1",colorFrustum),addLine("n1","f1",colorFrustum),addLine("n2","f2",colorFrustum),addLine("n3","f3",colorFrustum),addLine("n4","f4",colorFrustum),addLine("p","n1",colorCone),addLine("p","n2",colorCone),addLine("p","n3",colorCone),addLine("p","n4",colorCone),addLine("u1","u2",colorUp),addLine("u2","u3",colorUp),addLine("u3","u1",colorUp),addLine("c","t",colorTarget),addLine("p","c",colorCross),addLine("cn1","cn2",colorCross),addLine("cn3","cn4",colorCross),addLine("cf1","cf2",colorCross),addLine("cf3","cf4",colorCross),geometry.addAttribute("position",new Float32BufferAttribute(vertices,3)),geometry.addAttribute("color",new Float32BufferAttribute(colors,3)),LineSegments.call(this,geometry,material),this.camera=camera,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=camera.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=pointMap,this.update()}function BoxHelper(object,color){this.object=object,void 0===color&&(color=16776960);var indices=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),positions=new Float32Array(24),geometry=new BufferGeometry;geometry.setIndex(new BufferAttribute(indices,1)),geometry.addAttribute("position",new BufferAttribute(positions,3)),LineSegments.call(this,geometry,new LineBasicMaterial({color:color})),this.matrixAutoUpdate=!1,this.update()}function ArrowHelper(dir,origin,length,color,headLength,headWidth){Object3D.call(this),void 0===color&&(color=16776960),void 0===length&&(length=1),void 0===headLength&&(headLength=.2*length),void 0===headWidth&&(headWidth=.2*headLength),void 0===lineGeometry&&(lineGeometry=new BufferGeometry,lineGeometry.addAttribute("position",new Float32BufferAttribute([0,0,0,0,1,0],3)),coneGeometry=new CylinderBufferGeometry(0,.5,1,5,1),coneGeometry.translate(0,-.5,0)),this.position.copy(origin),this.line=new Line(lineGeometry,new LineBasicMaterial({color:color})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new Mesh(coneGeometry,new MeshBasicMaterial({color:color})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(dir),this.setLength(length,headLength,headWidth)}function AxisHelper(size){size=size||1;var vertices=[0,0,0,size,0,0,0,0,0,0,size,0,0,0,0,0,0,size],colors=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],geometry=new BufferGeometry;geometry.addAttribute("position",new Float32BufferAttribute(vertices,3)),
geometry.addAttribute("color",new Float32BufferAttribute(colors,3));var material=new LineBasicMaterial({vertexColors:VertexColors});LineSegments.call(this,geometry,material)}function CubicPoly(){function init(x0,x1,t0,t1){c0=x0,c1=t0,c2=-3*x0+3*x1-2*t0-t1,c3=2*x0-2*x1+t0+t1}var c0=0,c1=0,c2=0,c3=0;return{initCatmullRom:function(x0,x1,x2,x3,tension){init(x1,x2,tension*(x2-x0),tension*(x3-x1))},initNonuniformCatmullRom:function(x0,x1,x2,x3,dt0,dt1,dt2){var t1=(x1-x0)/dt0-(x2-x0)/(dt0+dt1)+(x2-x1)/dt1,t2=(x2-x1)/dt1-(x3-x1)/(dt1+dt2)+(x3-x2)/dt2;t1*=dt1,t2*=dt1,init(x1,x2,t1,t2)},calc:function(t){var t2=t*t,t3=t2*t;return c0+c1*t+c2*t2+c3*t3}}}function CatmullRomCurve3(points){Curve.call(this),points.length<2&&console.warn("THREE.CatmullRomCurve3: Points array needs at least two entries."),this.points=points||[],this.closed=!1}function CubicBezierCurve3(v0,v1,v2,v3){Curve.call(this),this.v0=v0,this.v1=v1,this.v2=v2,this.v3=v3}function QuadraticBezierCurve3(v0,v1,v2){Curve.call(this),this.v0=v0,this.v1=v1,this.v2=v2}function LineCurve3(v1,v2){Curve.call(this),this.v1=v1,this.v2=v2}function ArcCurve(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){EllipseCurve.call(this,aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise)}function Face4(a,b,c,d,normal,color,materialIndex){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new Face3(a,b,c,normal,color,materialIndex)}function MeshFaceMaterial(materials){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),materials}function MultiMaterial(materials){return void 0===materials&&(materials=[]),console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),materials.isMultiMaterial=!0,materials.materials=materials,materials.clone=function(){return materials.slice()},materials}function PointCloud(geometry,material){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new Points(geometry,material)}function Particle(material){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new Sprite(material)}function ParticleSystem(geometry,material){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new Points(geometry,material)}function PointCloudMaterial(parameters){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new PointsMaterial(parameters)}function ParticleBasicMaterial(parameters){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new PointsMaterial(parameters)}function ParticleSystemMaterial(parameters){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new PointsMaterial(parameters)}function Vertex(x,y,z){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new Vector3(x,y,z)}function DynamicBufferAttribute(array,itemSize){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead."),new BufferAttribute(array,itemSize).setDynamic(!0)}function Int8Attribute(array,itemSize){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new Int8BufferAttribute(array,itemSize)}function Uint8Attribute(array,itemSize){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new Uint8BufferAttribute(array,itemSize)}function Uint8ClampedAttribute(array,itemSize){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new Uint8ClampedBufferAttribute(array,itemSize)}function Int16Attribute(array,itemSize){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new Int16BufferAttribute(array,itemSize)}function Uint16Attribute(array,itemSize){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new Uint16BufferAttribute(array,itemSize)}function Int32Attribute(array,itemSize){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new Int32BufferAttribute(array,itemSize)}function Uint32Attribute(array,itemSize){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new Uint32BufferAttribute(array,itemSize)}function Float32Attribute(array,itemSize){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new Float32BufferAttribute(array,itemSize)}function Float64Attribute(array,itemSize){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new Float64BufferAttribute(array,itemSize)}function ClosedSplineCurve3(points){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),CatmullRomCurve3.call(this,points),this.type="catmullrom",this.closed=!0}function SplineCurve3(points){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),CatmullRomCurve3.call(this,points),this.type="catmullrom"}function Spline(points){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),CatmullRomCurve3.call(this,points),this.type="catmullrom"}function BoundingBoxHelper(object,color){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new BoxHelper(object,color)}function EdgesHelper(object,hex){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new LineSegments(new EdgesGeometry(object.geometry),new LineBasicMaterial({color:void 0!==hex?hex:16777215}))}function WireframeHelper(object,hex){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new LineSegments(new WireframeGeometry(object.geometry),new LineBasicMaterial({color:void 0!==hex?hex:16777215}))}function XHRLoader(manager){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new FileLoader(manager)}function BinaryTextureLoader(manager){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new DataTextureLoader(manager)}function Projector(){console.error("THREE.Projector has been moved to /examples/js/renderers/Projector.js."),this.projectVector=function(vector,camera){console.warn("THREE.Projector: .projectVector() is now vector.project()."),vector.project(camera)},this.unprojectVector=function(vector,camera){console.warn("THREE.Projector: .unprojectVector() is now vector.unproject()."),vector.unproject(camera)},this.pickingRay=function(){console.error("THREE.Projector: .pickingRay() is now raycaster.setFromCamera().")}}function CanvasRenderer(){console.error("THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js"),this.domElement=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),this.clear=function(){},this.render=function(){},this.setClearColor=function(){},this.setSize=function(){}}void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(value){return"number"==typeof value&&isFinite(value)&&Math.floor(value)===value}),void 0===Math.sign&&(Math.sign=function(x){return 0>x?-1:x>0?1:+x}),void 0===Function.prototype.name&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&!function(){Object.assign=function(target){if(void 0===target||null===target)throw new TypeError("Cannot convert undefined or null to object");for(var output=Object(target),index=1;index<arguments.length;index++){var source=arguments[index];if(void 0!==source&&null!==source)for(var nextKey in source)Object.prototype.hasOwnProperty.call(source,nextKey)&&(output[nextKey]=source[nextKey])}return output}}(),Object.assign(EventDispatcher.prototype,{addEventListener:function(type,listener){void 0===this._listeners&&(this._listeners={});var listeners=this._listeners;void 0===listeners[type]&&(listeners[type]=[]),-1===listeners[type].indexOf(listener)&&listeners[type].push(listener)},hasEventListener:function(type,listener){if(void 0===this._listeners)return!1;var listeners=this._listeners;return void 0!==listeners[type]&&-1!==listeners[type].indexOf(listener)},removeEventListener:function(type,listener){if(void 0!==this._listeners){var listeners=this._listeners,listenerArray=listeners[type];if(void 0!==listenerArray){var index=listenerArray.indexOf(listener);-1!==index&&listenerArray.splice(index,1)}}},dispatchEvent:function(event){if(void 0!==this._listeners){var listeners=this._listeners,listenerArray=listeners[event.type];if(void 0!==listenerArray){event.target=this;for(var array=listenerArray.slice(0),i=0,l=array.length;l>i;i++)array[i].call(this,event)}}}});var REVISION="86",MOUSE={LEFT:0,MIDDLE:1,RIGHT:2},CullFaceNone=0,CullFaceBack=1,CullFaceFront=2,CullFaceFrontBack=3,FrontFaceDirectionCW=0,FrontFaceDirectionCCW=1,BasicShadowMap=0,PCFShadowMap=1,PCFSoftShadowMap=2,FrontSide=0,BackSide=1,DoubleSide=2,FlatShading=1,SmoothShading=2,NoColors=0,FaceColors=1,VertexColors=2,NoBlending=0,NormalBlending=1,AdditiveBlending=2,SubtractiveBlending=3,MultiplyBlending=4,CustomBlending=5,AddEquation=100,SubtractEquation=101,ReverseSubtractEquation=102,MinEquation=103,MaxEquation=104,ZeroFactor=200,OneFactor=201,SrcColorFactor=202,OneMinusSrcColorFactor=203,SrcAlphaFactor=204,OneMinusSrcAlphaFactor=205,DstAlphaFactor=206,OneMinusDstAlphaFactor=207,DstColorFactor=208,OneMinusDstColorFactor=209,SrcAlphaSaturateFactor=210,NeverDepth=0,AlwaysDepth=1,LessDepth=2,LessEqualDepth=3,EqualDepth=4,GreaterEqualDepth=5,GreaterDepth=6,NotEqualDepth=7,MultiplyOperation=0,MixOperation=1,AddOperation=2,NoToneMapping=0,LinearToneMapping=1,ReinhardToneMapping=2,Uncharted2ToneMapping=3,CineonToneMapping=4,UVMapping=300,CubeReflectionMapping=301,CubeRefractionMapping=302,EquirectangularReflectionMapping=303,EquirectangularRefractionMapping=304,SphericalReflectionMapping=305,CubeUVReflectionMapping=306,CubeUVRefractionMapping=307,RepeatWrapping=1e3,ClampToEdgeWrapping=1001,MirroredRepeatWrapping=1002,NearestFilter=1003,NearestMipMapNearestFilter=1004,NearestMipMapLinearFilter=1005,LinearFilter=1006,LinearMipMapNearestFilter=1007,LinearMipMapLinearFilter=1008,UnsignedByteType=1009,ByteType=1010,ShortType=1011,UnsignedShortType=1012,IntType=1013,UnsignedIntType=1014,FloatType=1015,HalfFloatType=1016,UnsignedShort4444Type=1017,UnsignedShort5551Type=1018,UnsignedShort565Type=1019,UnsignedInt248Type=1020,AlphaFormat=1021,RGBFormat=1022,RGBAFormat=1023,LuminanceFormat=1024,LuminanceAlphaFormat=1025,RGBEFormat=RGBAFormat,DepthFormat=1026,DepthStencilFormat=1027,RGB_S3TC_DXT1_Format=2001,RGBA_S3TC_DXT1_Format=2002,RGBA_S3TC_DXT3_Format=2003,RGBA_S3TC_DXT5_Format=2004,RGB_PVRTC_4BPPV1_Format=2100,RGB_PVRTC_2BPPV1_Format=2101,RGBA_PVRTC_4BPPV1_Format=2102,RGBA_PVRTC_2BPPV1_Format=2103,RGB_ETC1_Format=2151,LoopOnce=2200,LoopRepeat=2201,LoopPingPong=2202,InterpolateDiscrete=2300,InterpolateLinear=2301,InterpolateSmooth=2302,ZeroCurvatureEnding=2400,ZeroSlopeEnding=2401,WrapAroundEnding=2402,TrianglesDrawMode=0,TriangleStripDrawMode=1,TriangleFanDrawMode=2,LinearEncoding=3e3,sRGBEncoding=3001,GammaEncoding=3007,RGBEEncoding=3002,LogLuvEncoding=3003,RGBM7Encoding=3004,RGBM16Encoding=3005,RGBDEncoding=3006,BasicDepthPacking=3200,RGBADepthPacking=3201,_Math={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var r,chars="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split(""),uuid=new Array(36),rnd=0;return function(){for(var i=0;36>i;i++)8===i||13===i||18===i||23===i?uuid[i]="-":14===i?uuid[i]="4":(2>=rnd&&(rnd=33554432+16777216*Math.random()|0),r=15&rnd,rnd>>=4,uuid[i]=chars[19===i?3&r|8:r]);return uuid.join("")}}(),clamp:function(value,min,max){return Math.max(min,Math.min(max,value))},euclideanModulo:function(n,m){return(n%m+m)%m},mapLinear:function(x,a1,a2,b1,b2){return b1+(x-a1)*(b2-b1)/(a2-a1)},lerp:function(x,y,t){return(1-t)*x+t*y},smoothstep:function(x,min,max){return min>=x?0:x>=max?1:(x=(x-min)/(max-min),x*x*(3-2*x))},smootherstep:function(x,min,max){return min>=x?0:x>=max?1:(x=(x-min)/(max-min),x*x*x*(x*(6*x-15)+10))},randInt:function(low,high){return low+Math.floor(Math.random()*(high-low+1))},randFloat:function(low,high){return low+Math.random()*(high-low)},randFloatSpread:function(range){return range*(.5-Math.random())},degToRad:function(degrees){return degrees*_Math.DEG2RAD},radToDeg:function(radians){return radians*_Math.RAD2DEG},isPowerOfTwo:function(value){return 0===(value&value-1)&&0!==value},nearestPowerOfTwo:function(value){return Math.pow(2,Math.round(Math.log(value)/Math.LN2))},nextPowerOfTwo:function(value){return value--,value|=value>>1,value|=value>>2,value|=value>>4,value|=value>>8,value|=value>>16,value++,value}};Object.defineProperties(Vector2.prototype,{width:{get:function(){return this.x},set:function(value){this.x=value}},height:{get:function(){return this.y},set:function(value){this.y=value}}}),Object.assign(Vector2.prototype,{isVector2:!0,set:function(x,y){return this.x=x,this.y=y,this},setScalar:function(scalar){return this.x=scalar,this.y=scalar,this},setX:function(x){return this.x=x,this},setY:function(y){return this.y=y,this},setComponent:function(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;default:throw new Error("index is out of range: "+index)}return this},getComponent:function(index){switch(index){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+index)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(v){return this.x=v.x,this.y=v.y,this},add:function(v,w){return void 0!==w?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(v,w)):(this.x+=v.x,this.y+=v.y,this)},addScalar:function(s){return this.x+=s,this.y+=s,this},addVectors:function(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this},addScaledVector:function(v,s){return this.x+=v.x*s,this.y+=v.y*s,this},sub:function(v,w){return void 0!==w?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(v,w)):(this.x-=v.x,this.y-=v.y,this)},subScalar:function(s){return this.x-=s,this.y-=s,this},subVectors:function(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this},multiply:function(v){return this.x*=v.x,this.y*=v.y,this},multiplyScalar:function(scalar){return this.x*=scalar,this.y*=scalar,this},divide:function(v){return this.x/=v.x,this.y/=v.y,this},divideScalar:function(scalar){return this.multiplyScalar(1/scalar)},min:function(v){return this.x=Math.min(this.x,v.x),this.y=Math.min(this.y,v.y),this},max:function(v){return this.x=Math.max(this.x,v.x),this.y=Math.max(this.y,v.y),this},clamp:function(min,max){return this.x=Math.max(min.x,Math.min(max.x,this.x)),this.y=Math.max(min.y,Math.min(max.y,this.y)),this},clampScalar:function(){var min=new Vector2,max=new Vector2;return function(minVal,maxVal){return min.set(minVal,minVal),max.set(maxVal,maxVal),this.clamp(min,max)}}(),clampLength:function(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(v){return this.x*v.x+this.y*v.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){var angle=Math.atan2(this.y,this.x);return 0>angle&&(angle+=2*Math.PI),angle},distanceTo:function(v){return Math.sqrt(this.distanceToSquared(v))},distanceToSquared:function(v){var dx=this.x-v.x,dy=this.y-v.y;return dx*dx+dy*dy},distanceToManhattan:function(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y)},setLength:function(length){return this.normalize().multiplyScalar(length)},lerp:function(v,alpha){return this.x+=(v.x-this.x)*alpha,this.y+=(v.y-this.y)*alpha,this},lerpVectors:function(v1,v2,alpha){return this.subVectors(v2,v1).multiplyScalar(alpha).add(v1)},equals:function(v){return v.x===this.x&&v.y===this.y},fromArray:function(array,offset){return void 0===offset&&(offset=0),this.x=array[offset],this.y=array[offset+1],this},toArray:function(array,offset){return void 0===array&&(array=[]),void 0===offset&&(offset=0),array[offset]=this.x,array[offset+1]=this.y,array},fromBufferAttribute:function(attribute,index,offset){return void 0!==offset&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=attribute.getX(index),this.y=attribute.getY(index),this},rotateAround:function(center,angle){var c=Math.cos(angle),s=Math.sin(angle),x=this.x-center.x,y=this.y-center.y;return this.x=x*c-y*s+center.x,this.y=x*s+y*c+center.y,this}});var textureId=0;Texture.DEFAULT_IMAGE=void 0,Texture.DEFAULT_MAPPING=UVMapping,Object.defineProperty(Texture.prototype,"needsUpdate",{set:function(value){value===!0&&this.version++}}),Object.assign(Texture.prototype,EventDispatcher.prototype,{constructor:Texture,isTexture:!0,clone:function(){return(new this.constructor).copy(this)},copy:function(source){return this.name=source.name,this.image=source.image,this.mipmaps=source.mipmaps.slice(0),this.mapping=source.mapping,this.wrapS=source.wrapS,this.wrapT=source.wrapT,this.magFilter=source.magFilter,this.minFilter=source.minFilter,this.anisotropy=source.anisotropy,this.format=source.format,this.type=source.type,this.offset.copy(source.offset),this.repeat.copy(source.repeat),this.generateMipmaps=source.generateMipmaps,this.premultiplyAlpha=source.premultiplyAlpha,this.flipY=source.flipY,this.unpackAlignment=source.unpackAlignment,this.encoding=source.encoding,this},toJSON:function(meta){function getDataURL(image){var canvas;return void 0!==image.toDataURL?canvas=image:(canvas=document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),canvas.width=image.width,canvas.height=image.height,canvas.getContext("2d").drawImage(image,0,0,image.width,image.height)),canvas.width>2048||canvas.height>2048?canvas.toDataURL("image/jpeg",.6):canvas.toDataURL("image/png")}if(void 0!==meta.textures[this.uuid])return meta.textures[this.uuid];var output={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],wrap:[this.wrapS,this.wrapT],minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY};if(void 0!==this.image){var image=this.image;void 0===image.uuid&&(image.uuid=_Math.generateUUID()),void 0===meta.images[image.uuid]&&(meta.images[image.uuid]={uuid:image.uuid,url:getDataURL(image)}),output.image=image.uuid}return meta.textures[this.uuid]=output,output},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(uv){if(this.mapping===UVMapping){if(uv.multiply(this.repeat),uv.add(this.offset),uv.x<0||uv.x>1)switch(this.wrapS){case RepeatWrapping:uv.x=uv.x-Math.floor(uv.x);break;case ClampToEdgeWrapping:uv.x=uv.x<0?0:1;break;case MirroredRepeatWrapping:1===Math.abs(Math.floor(uv.x)%2)?uv.x=Math.ceil(uv.x)-uv.x:uv.x=uv.x-Math.floor(uv.x)}if(uv.y<0||uv.y>1)switch(this.wrapT){case RepeatWrapping:uv.y=uv.y-Math.floor(uv.y);break;case ClampToEdgeWrapping:uv.y=uv.y<0?0:1;break;case MirroredRepeatWrapping:1===Math.abs(Math.floor(uv.y)%2)?uv.y=Math.ceil(uv.y)-uv.y:uv.y=uv.y-Math.floor(uv.y)}this.flipY&&(uv.y=1-uv.y)}}}),Object.assign(Vector4.prototype,{isVector4:!0,set:function(x,y,z,w){return this.x=x,this.y=y,this.z=z,this.w=w,this},setScalar:function(scalar){return this.x=scalar,this.y=scalar,this.z=scalar,this.w=scalar,this},setX:function(x){return this.x=x,this},setY:function(y){return this.y=y,this},setZ:function(z){return this.z=z,this},setW:function(w){return this.w=w,this},setComponent:function(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;case 3:this.w=value;break;default:throw new Error("index is out of range: "+index)}return this},getComponent:function(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+index)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(v){return this.x=v.x,this.y=v.y,this.z=v.z,this.w=void 0!==v.w?v.w:1,this},add:function(v,w){return void 0!==w?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(v,w)):(this.x+=v.x,this.y+=v.y,this.z+=v.z,this.w+=v.w,this)},addScalar:function(s){return this.x+=s,this.y+=s,this.z+=s,this.w+=s,this},addVectors:function(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this.z=a.z+b.z,this.w=a.w+b.w,this},addScaledVector:function(v,s){return this.x+=v.x*s,this.y+=v.y*s,this.z+=v.z*s,this.w+=v.w*s,this},sub:function(v,w){return void 0!==w?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(v,w)):(this.x-=v.x,this.y-=v.y,this.z-=v.z,this.w-=v.w,this)},subScalar:function(s){return this.x-=s,this.y-=s,this.z-=s,this.w-=s,this},subVectors:function(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this.z=a.z-b.z,this.w=a.w-b.w,this},multiplyScalar:function(scalar){return this.x*=scalar,this.y*=scalar,this.z*=scalar,this.w*=scalar,this},applyMatrix4:function(m){var x=this.x,y=this.y,z=this.z,w=this.w,e=m.elements;return this.x=e[0]*x+e[4]*y+e[8]*z+e[12]*w,this.y=e[1]*x+e[5]*y+e[9]*z+e[13]*w,this.z=e[2]*x+e[6]*y+e[10]*z+e[14]*w,this.w=e[3]*x+e[7]*y+e[11]*z+e[15]*w,this},divideScalar:function(scalar){return this.multiplyScalar(1/scalar)},setAxisAngleFromQuaternion:function(q){this.w=2*Math.acos(q.w);var s=Math.sqrt(1-q.w*q.w);return 1e-4>s?(this.x=1,this.y=0,this.z=0):(this.x=q.x/s,this.y=q.y/s,this.z=q.z/s),this},setAxisAngleFromRotationMatrix:function(m){var angle,x,y,z,epsilon=.01,epsilon2=.1,te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10];if(Math.abs(m12-m21)<epsilon&&Math.abs(m13-m31)<epsilon&&Math.abs(m23-m32)<epsilon){if(Math.abs(m12+m21)<epsilon2&&Math.abs(m13+m31)<epsilon2&&Math.abs(m23+m32)<epsilon2&&Math.abs(m11+m22+m33-3)<epsilon2)return this.set(1,0,0,0),this;angle=Math.PI;var xx=(m11+1)/2,yy=(m22+1)/2,zz=(m33+1)/2,xy=(m12+m21)/4,xz=(m13+m31)/4,yz=(m23+m32)/4;return xx>yy&&xx>zz?epsilon>xx?(x=0,y=.707106781,z=.707106781):(x=Math.sqrt(xx),y=xy/x,z=xz/x):yy>zz?epsilon>yy?(x=.707106781,y=0,z=.707106781):(y=Math.sqrt(yy),x=xy/y,z=yz/y):epsilon>zz?(x=.707106781,y=.707106781,z=0):(z=Math.sqrt(zz),x=xz/z,y=yz/z),this.set(x,y,z,angle),this}var s=Math.sqrt((m32-m23)*(m32-m23)+(m13-m31)*(m13-m31)+(m21-m12)*(m21-m12));return Math.abs(s)<.001&&(s=1),this.x=(m32-m23)/s,this.y=(m13-m31)/s,this.z=(m21-m12)/s,this.w=Math.acos((m11+m22+m33-1)/2),this},min:function(v){return this.x=Math.min(this.x,v.x),this.y=Math.min(this.y,v.y),this.z=Math.min(this.z,v.z),this.w=Math.min(this.w,v.w),this},max:function(v){return this.x=Math.max(this.x,v.x),this.y=Math.max(this.y,v.y),this.z=Math.max(this.z,v.z),this.w=Math.max(this.w,v.w),this},clamp:function(min,max){return this.x=Math.max(min.x,Math.min(max.x,this.x)),this.y=Math.max(min.y,Math.min(max.y,this.y)),this.z=Math.max(min.z,Math.min(max.z,this.z)),this.w=Math.max(min.w,Math.min(max.w,this.w)),this},clampScalar:function(){var min,max;return function(minVal,maxVal){return void 0===min&&(min=new Vector4,max=new Vector4),min.set(minVal,minVal,minVal,minVal),max.set(maxVal,maxVal,maxVal,maxVal),this.clamp(min,max)}}(),clampLength:function(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(v){return this.x*v.x+this.y*v.y+this.z*v.z+this.w*v.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(length){return this.normalize().multiplyScalar(length)},lerp:function(v,alpha){return this.x+=(v.x-this.x)*alpha,this.y+=(v.y-this.y)*alpha,this.z+=(v.z-this.z)*alpha,this.w+=(v.w-this.w)*alpha,this},lerpVectors:function(v1,v2,alpha){return this.subVectors(v2,v1).multiplyScalar(alpha).add(v1)},equals:function(v){return v.x===this.x&&v.y===this.y&&v.z===this.z&&v.w===this.w},fromArray:function(array,offset){return void 0===offset&&(offset=0),this.x=array[offset],this.y=array[offset+1],this.z=array[offset+2],this.w=array[offset+3],this},toArray:function(array,offset){return void 0===array&&(array=[]),void 0===offset&&(offset=0),array[offset]=this.x,array[offset+1]=this.y,array[offset+2]=this.z,array[offset+3]=this.w,array},fromBufferAttribute:function(attribute,index,offset){return void 0!==offset&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=attribute.getX(index),this.y=attribute.getY(index),this.z=attribute.getZ(index),this.w=attribute.getW(index),this}}),Object.assign(WebGLRenderTarget.prototype,EventDispatcher.prototype,{isWebGLRenderTarget:!0,setSize:function(width,height){this.width===width&&this.height===height||(this.width=width,this.height=height,this.dispose()),this.viewport.set(0,0,width,height),this.scissor.set(0,0,width,height)},clone:function(){return(new this.constructor).copy(this)},copy:function(source){return this.width=source.width,this.height=source.height,this.viewport.copy(source.viewport),this.texture=source.texture.clone(),this.depthBuffer=source.depthBuffer,this.stencilBuffer=source.stencilBuffer,this.depthTexture=source.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),WebGLRenderTargetCube.prototype=Object.create(WebGLRenderTarget.prototype),WebGLRenderTargetCube.prototype.constructor=WebGLRenderTargetCube,WebGLRenderTargetCube.prototype.isWebGLRenderTargetCube=!0,Object.assign(Quaternion,{slerp:function(qa,qb,qm,t){return qm.copy(qa).slerp(qb,t)},slerpFlat:function(dst,dstOffset,src0,srcOffset0,src1,srcOffset1,t){var x0=src0[srcOffset0+0],y0=src0[srcOffset0+1],z0=src0[srcOffset0+2],w0=src0[srcOffset0+3],x1=src1[srcOffset1+0],y1=src1[srcOffset1+1],z1=src1[srcOffset1+2],w1=src1[srcOffset1+3];if(w0!==w1||x0!==x1||y0!==y1||z0!==z1){var s=1-t,cos=x0*x1+y0*y1+z0*z1+w0*w1,dir=cos>=0?1:-1,sqrSin=1-cos*cos;if(sqrSin>Number.EPSILON){var sin=Math.sqrt(sqrSin),len=Math.atan2(sin,cos*dir);s=Math.sin(s*len)/sin,t=Math.sin(t*len)/sin}var tDir=t*dir;if(x0=x0*s+x1*tDir,y0=y0*s+y1*tDir,z0=z0*s+z1*tDir,w0=w0*s+w1*tDir,s===1-t){var f=1/Math.sqrt(x0*x0+y0*y0+z0*z0+w0*w0);x0*=f,y0*=f,z0*=f,w0*=f}}dst[dstOffset]=x0,dst[dstOffset+1]=y0,dst[dstOffset+2]=z0,dst[dstOffset+3]=w0}}),Object.defineProperties(Quaternion.prototype,{x:{get:function(){return this._x},set:function(value){this._x=value,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(value){this._y=value,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(value){this._z=value,this.onChangeCallback()}},w:{get:function(){return this._w},set:function(value){this._w=value,this.onChangeCallback()}}}),Object.assign(Quaternion.prototype,{set:function(x,y,z,w){return this._x=x,this._y=y,this._z=z,this._w=w,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(quaternion){return this._x=quaternion.x,this._y=quaternion.y,this._z=quaternion.z,this._w=quaternion.w,this.onChangeCallback(),this},setFromEuler:function(euler,update){if(!euler||!euler.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var x=euler._x,y=euler._y,z=euler._z,order=euler.order,cos=Math.cos,sin=Math.sin,c1=cos(x/2),c2=cos(y/2),c3=cos(z/2),s1=sin(x/2),s2=sin(y/2),s3=sin(z/2);return"XYZ"===order?(this._x=s1*c2*c3+c1*s2*s3,this._y=c1*s2*c3-s1*c2*s3,this._z=c1*c2*s3+s1*s2*c3,this._w=c1*c2*c3-s1*s2*s3):"YXZ"===order?(this._x=s1*c2*c3+c1*s2*s3,this._y=c1*s2*c3-s1*c2*s3,this._z=c1*c2*s3-s1*s2*c3,this._w=c1*c2*c3+s1*s2*s3):"ZXY"===order?(this._x=s1*c2*c3-c1*s2*s3,this._y=c1*s2*c3+s1*c2*s3,this._z=c1*c2*s3+s1*s2*c3,this._w=c1*c2*c3-s1*s2*s3):"ZYX"===order?(this._x=s1*c2*c3-c1*s2*s3,this._y=c1*s2*c3+s1*c2*s3,this._z=c1*c2*s3-s1*s2*c3,this._w=c1*c2*c3+s1*s2*s3):"YZX"===order?(this._x=s1*c2*c3+c1*s2*s3,this._y=c1*s2*c3+s1*c2*s3,this._z=c1*c2*s3-s1*s2*c3,this._w=c1*c2*c3-s1*s2*s3):"XZY"===order&&(this._x=s1*c2*c3-c1*s2*s3,this._y=c1*s2*c3-s1*c2*s3,this._z=c1*c2*s3+s1*s2*c3,this._w=c1*c2*c3+s1*s2*s3),update!==!1&&this.onChangeCallback(),this},setFromAxisAngle:function(axis,angle){var halfAngle=angle/2,s=Math.sin(halfAngle);return this._x=axis.x*s,this._y=axis.y*s,this._z=axis.z*s,this._w=Math.cos(halfAngle),this.onChangeCallback(),this},setFromRotationMatrix:function(m){var s,te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10],trace=m11+m22+m33;return trace>0?(s=.5/Math.sqrt(trace+1),this._w=.25/s,this._x=(m32-m23)*s,this._y=(m13-m31)*s,this._z=(m21-m12)*s):m11>m22&&m11>m33?(s=2*Math.sqrt(1+m11-m22-m33),this._w=(m32-m23)/s,this._x=.25*s,this._y=(m12+m21)/s,this._z=(m13+m31)/s):m22>m33?(s=2*Math.sqrt(1+m22-m11-m33),this._w=(m13-m31)/s,this._x=(m12+m21)/s,this._y=.25*s,this._z=(m23+m32)/s):(s=2*Math.sqrt(1+m33-m11-m22),this._w=(m21-m12)/s,this._x=(m13+m31)/s,this._y=(m23+m32)/s,this._z=.25*s),this.onChangeCallback(),this},setFromUnitVectors:function(){var r,v1=new Vector3,EPS=1e-6;return function(vFrom,vTo){return void 0===v1&&(v1=new Vector3),r=vFrom.dot(vTo)+1,EPS>r?(r=0,Math.abs(vFrom.x)>Math.abs(vFrom.z)?v1.set(-vFrom.y,vFrom.x,0):v1.set(0,-vFrom.z,vFrom.y)):v1.crossVectors(vFrom,vTo),this._x=v1.x,this._y=v1.y,this._z=v1.z,this._w=r,this.normalize()}}(),inverse:function(){return this.conjugate().normalize()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this.onChangeCallback(),this},dot:function(v){return this._x*v._x+this._y*v._y+this._z*v._z+this._w*v._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var l=this.length();return 0===l?(this._x=0,this._y=0,this._z=0,this._w=1):(l=1/l,this._x=this._x*l,this._y=this._y*l,this._z=this._z*l,
this._w=this._w*l),this.onChangeCallback(),this},multiply:function(q,p){return void 0!==p?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(q,p)):this.multiplyQuaternions(this,q)},premultiply:function(q){return this.multiplyQuaternions(q,this)},multiplyQuaternions:function(a,b){var qax=a._x,qay=a._y,qaz=a._z,qaw=a._w,qbx=b._x,qby=b._y,qbz=b._z,qbw=b._w;return this._x=qax*qbw+qaw*qbx+qay*qbz-qaz*qby,this._y=qay*qbw+qaw*qby+qaz*qbx-qax*qbz,this._z=qaz*qbw+qaw*qbz+qax*qby-qay*qbx,this._w=qaw*qbw-qax*qbx-qay*qby-qaz*qbz,this.onChangeCallback(),this},slerp:function(qb,t){if(0===t)return this;if(1===t)return this.copy(qb);var x=this._x,y=this._y,z=this._z,w=this._w,cosHalfTheta=w*qb._w+x*qb._x+y*qb._y+z*qb._z;if(0>cosHalfTheta?(this._w=-qb._w,this._x=-qb._x,this._y=-qb._y,this._z=-qb._z,cosHalfTheta=-cosHalfTheta):this.copy(qb),cosHalfTheta>=1)return this._w=w,this._x=x,this._y=y,this._z=z,this;var sinHalfTheta=Math.sqrt(1-cosHalfTheta*cosHalfTheta);if(Math.abs(sinHalfTheta)<.001)return this._w=.5*(w+this._w),this._x=.5*(x+this._x),this._y=.5*(y+this._y),this._z=.5*(z+this._z),this;var halfTheta=Math.atan2(sinHalfTheta,cosHalfTheta),ratioA=Math.sin((1-t)*halfTheta)/sinHalfTheta,ratioB=Math.sin(t*halfTheta)/sinHalfTheta;return this._w=w*ratioA+this._w*ratioB,this._x=x*ratioA+this._x*ratioB,this._y=y*ratioA+this._y*ratioB,this._z=z*ratioA+this._z*ratioB,this.onChangeCallback(),this},equals:function(quaternion){return quaternion._x===this._x&&quaternion._y===this._y&&quaternion._z===this._z&&quaternion._w===this._w},fromArray:function(array,offset){return void 0===offset&&(offset=0),this._x=array[offset],this._y=array[offset+1],this._z=array[offset+2],this._w=array[offset+3],this.onChangeCallback(),this},toArray:function(array,offset){return void 0===array&&(array=[]),void 0===offset&&(offset=0),array[offset]=this._x,array[offset+1]=this._y,array[offset+2]=this._z,array[offset+3]=this._w,array},onChange:function(callback){return this.onChangeCallback=callback,this},onChangeCallback:function(){}}),Object.assign(Vector3.prototype,{isVector3:!0,set:function(x,y,z){return this.x=x,this.y=y,this.z=z,this},setScalar:function(scalar){return this.x=scalar,this.y=scalar,this.z=scalar,this},setX:function(x){return this.x=x,this},setY:function(y){return this.y=y,this},setZ:function(z){return this.z=z,this},setComponent:function(index,value){switch(index){case 0:this.x=value;break;case 1:this.y=value;break;case 2:this.z=value;break;default:throw new Error("index is out of range: "+index)}return this},getComponent:function(index){switch(index){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+index)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(v){return this.x=v.x,this.y=v.y,this.z=v.z,this},add:function(v,w){return void 0!==w?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(v,w)):(this.x+=v.x,this.y+=v.y,this.z+=v.z,this)},addScalar:function(s){return this.x+=s,this.y+=s,this.z+=s,this},addVectors:function(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this.z=a.z+b.z,this},addScaledVector:function(v,s){return this.x+=v.x*s,this.y+=v.y*s,this.z+=v.z*s,this},sub:function(v,w){return void 0!==w?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(v,w)):(this.x-=v.x,this.y-=v.y,this.z-=v.z,this)},subScalar:function(s){return this.x-=s,this.y-=s,this.z-=s,this},subVectors:function(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this.z=a.z-b.z,this},multiply:function(v,w){return void 0!==w?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(v,w)):(this.x*=v.x,this.y*=v.y,this.z*=v.z,this)},multiplyScalar:function(scalar){return this.x*=scalar,this.y*=scalar,this.z*=scalar,this},multiplyVectors:function(a,b){return this.x=a.x*b.x,this.y=a.y*b.y,this.z=a.z*b.z,this},applyEuler:function(){var quaternion=new Quaternion;return function(euler){return euler&&euler.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(quaternion.setFromEuler(euler))}}(),applyAxisAngle:function(){var quaternion=new Quaternion;return function(axis,angle){return this.applyQuaternion(quaternion.setFromAxisAngle(axis,angle))}}(),applyMatrix3:function(m){var x=this.x,y=this.y,z=this.z,e=m.elements;return this.x=e[0]*x+e[3]*y+e[6]*z,this.y=e[1]*x+e[4]*y+e[7]*z,this.z=e[2]*x+e[5]*y+e[8]*z,this},applyMatrix4:function(m){var x=this.x,y=this.y,z=this.z,e=m.elements,w=1/(e[3]*x+e[7]*y+e[11]*z+e[15]);return this.x=(e[0]*x+e[4]*y+e[8]*z+e[12])*w,this.y=(e[1]*x+e[5]*y+e[9]*z+e[13])*w,this.z=(e[2]*x+e[6]*y+e[10]*z+e[14])*w,this},applyQuaternion:function(q){var x=this.x,y=this.y,z=this.z,qx=q.x,qy=q.y,qz=q.z,qw=q.w,ix=qw*x+qy*z-qz*y,iy=qw*y+qz*x-qx*z,iz=qw*z+qx*y-qy*x,iw=-qx*x-qy*y-qz*z;return this.x=ix*qw+iw*-qx+iy*-qz-iz*-qy,this.y=iy*qw+iw*-qy+iz*-qx-ix*-qz,this.z=iz*qw+iw*-qz+ix*-qy-iy*-qx,this},project:function(){var matrix=new Matrix4;return function(camera){return matrix.multiplyMatrices(camera.projectionMatrix,matrix.getInverse(camera.matrixWorld)),this.applyMatrix4(matrix)}}(),unproject:function(){var matrix=new Matrix4;return function(camera){return matrix.multiplyMatrices(camera.matrixWorld,matrix.getInverse(camera.projectionMatrix)),this.applyMatrix4(matrix)}}(),transformDirection:function(m){var x=this.x,y=this.y,z=this.z,e=m.elements;return this.x=e[0]*x+e[4]*y+e[8]*z,this.y=e[1]*x+e[5]*y+e[9]*z,this.z=e[2]*x+e[6]*y+e[10]*z,this.normalize()},divide:function(v){return this.x/=v.x,this.y/=v.y,this.z/=v.z,this},divideScalar:function(scalar){return this.multiplyScalar(1/scalar)},min:function(v){return this.x=Math.min(this.x,v.x),this.y=Math.min(this.y,v.y),this.z=Math.min(this.z,v.z),this},max:function(v){return this.x=Math.max(this.x,v.x),this.y=Math.max(this.y,v.y),this.z=Math.max(this.z,v.z),this},clamp:function(min,max){return this.x=Math.max(min.x,Math.min(max.x,this.x)),this.y=Math.max(min.y,Math.min(max.y,this.y)),this.z=Math.max(min.z,Math.min(max.z,this.z)),this},clampScalar:function(){var min=new Vector3,max=new Vector3;return function(minVal,maxVal){return min.set(minVal,minVal,minVal),max.set(maxVal,maxVal,maxVal),this.clamp(min,max)}}(),clampLength:function(min,max){var length=this.length();return this.divideScalar(length||1).multiplyScalar(Math.max(min,Math.min(max,length)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(v){return this.x*v.x+this.y*v.y+this.z*v.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(length){return this.normalize().multiplyScalar(length)},lerp:function(v,alpha){return this.x+=(v.x-this.x)*alpha,this.y+=(v.y-this.y)*alpha,this.z+=(v.z-this.z)*alpha,this},lerpVectors:function(v1,v2,alpha){return this.subVectors(v2,v1).multiplyScalar(alpha).add(v1)},cross:function(v,w){if(void 0!==w)return console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(v,w);var x=this.x,y=this.y,z=this.z;return this.x=y*v.z-z*v.y,this.y=z*v.x-x*v.z,this.z=x*v.y-y*v.x,this},crossVectors:function(a,b){var ax=a.x,ay=a.y,az=a.z,bx=b.x,by=b.y,bz=b.z;return this.x=ay*bz-az*by,this.y=az*bx-ax*bz,this.z=ax*by-ay*bx,this},projectOnVector:function(vector){var scalar=vector.dot(this)/vector.lengthSq();return this.copy(vector).multiplyScalar(scalar)},projectOnPlane:function(){var v1=new Vector3;return function(planeNormal){return v1.copy(this).projectOnVector(planeNormal),this.sub(v1)}}(),reflect:function(){var v1=new Vector3;return function(normal){return this.sub(v1.copy(normal).multiplyScalar(2*this.dot(normal)))}}(),angleTo:function(v){var theta=this.dot(v)/Math.sqrt(this.lengthSq()*v.lengthSq());return Math.acos(_Math.clamp(theta,-1,1))},distanceTo:function(v){return Math.sqrt(this.distanceToSquared(v))},distanceToSquared:function(v){var dx=this.x-v.x,dy=this.y-v.y,dz=this.z-v.z;return dx*dx+dy*dy+dz*dz},distanceToManhattan:function(v){return Math.abs(this.x-v.x)+Math.abs(this.y-v.y)+Math.abs(this.z-v.z)},setFromSpherical:function(s){var sinPhiRadius=Math.sin(s.phi)*s.radius;return this.x=sinPhiRadius*Math.sin(s.theta),this.y=Math.cos(s.phi)*s.radius,this.z=sinPhiRadius*Math.cos(s.theta),this},setFromCylindrical:function(c){return this.x=c.radius*Math.sin(c.theta),this.y=c.y,this.z=c.radius*Math.cos(c.theta),this},setFromMatrixPosition:function(m){var e=m.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this},setFromMatrixScale:function(m){var sx=this.setFromMatrixColumn(m,0).length(),sy=this.setFromMatrixColumn(m,1).length(),sz=this.setFromMatrixColumn(m,2).length();return this.x=sx,this.y=sy,this.z=sz,this},setFromMatrixColumn:function(m,index){return this.fromArray(m.elements,4*index)},equals:function(v){return v.x===this.x&&v.y===this.y&&v.z===this.z},fromArray:function(array,offset){return void 0===offset&&(offset=0),this.x=array[offset],this.y=array[offset+1],this.z=array[offset+2],this},toArray:function(array,offset){return void 0===array&&(array=[]),void 0===offset&&(offset=0),array[offset]=this.x,array[offset+1]=this.y,array[offset+2]=this.z,array},fromBufferAttribute:function(attribute,index,offset){return void 0!==offset&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=attribute.getX(index),this.y=attribute.getY(index),this.z=attribute.getZ(index),this}}),Object.assign(Matrix4.prototype,{isMatrix4:!0,set:function(n11,n12,n13,n14,n21,n22,n23,n24,n31,n32,n33,n34,n41,n42,n43,n44){var te=this.elements;return te[0]=n11,te[4]=n12,te[8]=n13,te[12]=n14,te[1]=n21,te[5]=n22,te[9]=n23,te[13]=n24,te[2]=n31,te[6]=n32,te[10]=n33,te[14]=n34,te[3]=n41,te[7]=n42,te[11]=n43,te[15]=n44,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new Matrix4).fromArray(this.elements)},copy:function(m){var te=this.elements,me=m.elements;return te[0]=me[0],te[1]=me[1],te[2]=me[2],te[3]=me[3],te[4]=me[4],te[5]=me[5],te[6]=me[6],te[7]=me[7],te[8]=me[8],te[9]=me[9],te[10]=me[10],te[11]=me[11],te[12]=me[12],te[13]=me[13],te[14]=me[14],te[15]=me[15],this},copyPosition:function(m){var te=this.elements,me=m.elements;return te[12]=me[12],te[13]=me[13],te[14]=me[14],this},extractBasis:function(xAxis,yAxis,zAxis){return xAxis.setFromMatrixColumn(this,0),yAxis.setFromMatrixColumn(this,1),zAxis.setFromMatrixColumn(this,2),this},makeBasis:function(xAxis,yAxis,zAxis){return this.set(xAxis.x,yAxis.x,zAxis.x,0,xAxis.y,yAxis.y,zAxis.y,0,xAxis.z,yAxis.z,zAxis.z,0,0,0,0,1),this},extractRotation:function(){var v1=new Vector3;return function(m){var te=this.elements,me=m.elements,scaleX=1/v1.setFromMatrixColumn(m,0).length(),scaleY=1/v1.setFromMatrixColumn(m,1).length(),scaleZ=1/v1.setFromMatrixColumn(m,2).length();return te[0]=me[0]*scaleX,te[1]=me[1]*scaleX,te[2]=me[2]*scaleX,te[4]=me[4]*scaleY,te[5]=me[5]*scaleY,te[6]=me[6]*scaleY,te[8]=me[8]*scaleZ,te[9]=me[9]*scaleZ,te[10]=me[10]*scaleZ,this}}(),makeRotationFromEuler:function(euler){euler&&euler.isEuler||console.error("THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var te=this.elements,x=euler.x,y=euler.y,z=euler.z,a=Math.cos(x),b=Math.sin(x),c=Math.cos(y),d=Math.sin(y),e=Math.cos(z),f=Math.sin(z);if("XYZ"===euler.order){var ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e,te[4]=-c*f,te[8]=d,te[1]=af+be*d,te[5]=ae-bf*d,te[9]=-b*c,te[2]=bf-ae*d,te[6]=be+af*d,te[10]=a*c}else if("YXZ"===euler.order){var ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce+df*b,te[4]=de*b-cf,te[8]=a*d,te[1]=a*f,te[5]=a*e,te[9]=-b,te[2]=cf*b-de,te[6]=df+ce*b,te[10]=a*c}else if("ZXY"===euler.order){var ce=c*e,cf=c*f,de=d*e,df=d*f;te[0]=ce-df*b,te[4]=-a*f,te[8]=de+cf*b,te[1]=cf+de*b,te[5]=a*e,te[9]=df-ce*b,te[2]=-a*d,te[6]=b,te[10]=a*c}else if("ZYX"===euler.order){var ae=a*e,af=a*f,be=b*e,bf=b*f;te[0]=c*e,te[4]=be*d-af,te[8]=ae*d+bf,te[1]=c*f,te[5]=bf*d+ae,te[9]=af*d-be,te[2]=-d,te[6]=b*c,te[10]=a*c}else if("YZX"===euler.order){var ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e,te[4]=bd-ac*f,te[8]=bc*f+ad,te[1]=f,te[5]=a*e,te[9]=-b*e,te[2]=-d*e,te[6]=ad*f+bc,te[10]=ac-bd*f}else if("XZY"===euler.order){var ac=a*c,ad=a*d,bc=b*c,bd=b*d;te[0]=c*e,te[4]=-f,te[8]=d*e,te[1]=ac*f+bd,te[5]=a*e,te[9]=ad*f-bc,te[2]=bc*f-ad,te[6]=b*e,te[10]=bd*f+ac}return te[3]=0,te[7]=0,te[11]=0,te[12]=0,te[13]=0,te[14]=0,te[15]=1,this},makeRotationFromQuaternion:function(q){var te=this.elements,x=q._x,y=q._y,z=q._z,w=q._w,x2=x+x,y2=y+y,z2=z+z,xx=x*x2,xy=x*y2,xz=x*z2,yy=y*y2,yz=y*z2,zz=z*z2,wx=w*x2,wy=w*y2,wz=w*z2;return te[0]=1-(yy+zz),te[4]=xy-wz,te[8]=xz+wy,te[1]=xy+wz,te[5]=1-(xx+zz),te[9]=yz-wx,te[2]=xz-wy,te[6]=yz+wx,te[10]=1-(xx+yy),te[3]=0,te[7]=0,te[11]=0,te[12]=0,te[13]=0,te[14]=0,te[15]=1,this},lookAt:function(){var x=new Vector3,y=new Vector3,z=new Vector3;return function(eye,target,up){var te=this.elements;return z.subVectors(eye,target),0===z.lengthSq()&&(z.z=1),z.normalize(),x.crossVectors(up,z),0===x.lengthSq()&&(1===Math.abs(up.z)?z.x+=1e-4:z.z+=1e-4,z.normalize(),x.crossVectors(up,z)),x.normalize(),y.crossVectors(z,x),te[0]=x.x,te[4]=y.x,te[8]=z.x,te[1]=x.y,te[5]=y.y,te[9]=z.y,te[2]=x.z,te[6]=y.z,te[10]=z.z,this}}(),multiply:function(m,n){return void 0!==n?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(m,n)):this.multiplyMatrices(this,m)},premultiply:function(m){return this.multiplyMatrices(m,this)},multiplyMatrices:function(a,b){var ae=a.elements,be=b.elements,te=this.elements,a11=ae[0],a12=ae[4],a13=ae[8],a14=ae[12],a21=ae[1],a22=ae[5],a23=ae[9],a24=ae[13],a31=ae[2],a32=ae[6],a33=ae[10],a34=ae[14],a41=ae[3],a42=ae[7],a43=ae[11],a44=ae[15],b11=be[0],b12=be[4],b13=be[8],b14=be[12],b21=be[1],b22=be[5],b23=be[9],b24=be[13],b31=be[2],b32=be[6],b33=be[10],b34=be[14],b41=be[3],b42=be[7],b43=be[11],b44=be[15];return te[0]=a11*b11+a12*b21+a13*b31+a14*b41,te[4]=a11*b12+a12*b22+a13*b32+a14*b42,te[8]=a11*b13+a12*b23+a13*b33+a14*b43,te[12]=a11*b14+a12*b24+a13*b34+a14*b44,te[1]=a21*b11+a22*b21+a23*b31+a24*b41,te[5]=a21*b12+a22*b22+a23*b32+a24*b42,te[9]=a21*b13+a22*b23+a23*b33+a24*b43,te[13]=a21*b14+a22*b24+a23*b34+a24*b44,te[2]=a31*b11+a32*b21+a33*b31+a34*b41,te[6]=a31*b12+a32*b22+a33*b32+a34*b42,te[10]=a31*b13+a32*b23+a33*b33+a34*b43,te[14]=a31*b14+a32*b24+a33*b34+a34*b44,te[3]=a41*b11+a42*b21+a43*b31+a44*b41,te[7]=a41*b12+a42*b22+a43*b32+a44*b42,te[11]=a41*b13+a42*b23+a43*b33+a44*b43,te[15]=a41*b14+a42*b24+a43*b34+a44*b44,this},multiplyScalar:function(s){var te=this.elements;return te[0]*=s,te[4]*=s,te[8]*=s,te[12]*=s,te[1]*=s,te[5]*=s,te[9]*=s,te[13]*=s,te[2]*=s,te[6]*=s,te[10]*=s,te[14]*=s,te[3]*=s,te[7]*=s,te[11]*=s,te[15]*=s,this},applyToBufferAttribute:function(){var v1=new Vector3;return function(attribute){for(var i=0,l=attribute.count;l>i;i++)v1.x=attribute.getX(i),v1.y=attribute.getY(i),v1.z=attribute.getZ(i),v1.applyMatrix4(this),attribute.setXYZ(i,v1.x,v1.y,v1.z);return attribute}}(),determinant:function(){var te=this.elements,n11=te[0],n12=te[4],n13=te[8],n14=te[12],n21=te[1],n22=te[5],n23=te[9],n24=te[13],n31=te[2],n32=te[6],n33=te[10],n34=te[14],n41=te[3],n42=te[7],n43=te[11],n44=te[15];return n41*(+n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34)+n42*(+n11*n23*n34-n11*n24*n33+n14*n21*n33-n13*n21*n34+n13*n24*n31-n14*n23*n31)+n43*(+n11*n24*n32-n11*n22*n34-n14*n21*n32+n12*n21*n34+n14*n22*n31-n12*n24*n31)+n44*(-n13*n22*n31-n11*n23*n32+n11*n22*n33+n13*n21*n32-n12*n21*n33+n12*n23*n31)},transpose:function(){var tmp,te=this.elements;return tmp=te[1],te[1]=te[4],te[4]=tmp,tmp=te[2],te[2]=te[8],te[8]=tmp,tmp=te[6],te[6]=te[9],te[9]=tmp,tmp=te[3],te[3]=te[12],te[12]=tmp,tmp=te[7],te[7]=te[13],te[13]=tmp,tmp=te[11],te[11]=te[14],te[14]=tmp,this},setPosition:function(v){var te=this.elements;return te[12]=v.x,te[13]=v.y,te[14]=v.z,this},getInverse:function(m,throwOnDegenerate){var te=this.elements,me=m.elements,n11=me[0],n21=me[1],n31=me[2],n41=me[3],n12=me[4],n22=me[5],n32=me[6],n42=me[7],n13=me[8],n23=me[9],n33=me[10],n43=me[11],n14=me[12],n24=me[13],n34=me[14],n44=me[15],t11=n23*n34*n42-n24*n33*n42+n24*n32*n43-n22*n34*n43-n23*n32*n44+n22*n33*n44,t12=n14*n33*n42-n13*n34*n42-n14*n32*n43+n12*n34*n43+n13*n32*n44-n12*n33*n44,t13=n13*n24*n42-n14*n23*n42+n14*n22*n43-n12*n24*n43-n13*n22*n44+n12*n23*n44,t14=n14*n23*n32-n13*n24*n32-n14*n22*n33+n12*n24*n33+n13*n22*n34-n12*n23*n34,det=n11*t11+n21*t12+n31*t13+n41*t14;if(0===det){var msg="THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";if(throwOnDegenerate===!0)throw new Error(msg);return console.warn(msg),this.identity()}var detInv=1/det;return te[0]=t11*detInv,te[1]=(n24*n33*n41-n23*n34*n41-n24*n31*n43+n21*n34*n43+n23*n31*n44-n21*n33*n44)*detInv,te[2]=(n22*n34*n41-n24*n32*n41+n24*n31*n42-n21*n34*n42-n22*n31*n44+n21*n32*n44)*detInv,te[3]=(n23*n32*n41-n22*n33*n41-n23*n31*n42+n21*n33*n42+n22*n31*n43-n21*n32*n43)*detInv,te[4]=t12*detInv,te[5]=(n13*n34*n41-n14*n33*n41+n14*n31*n43-n11*n34*n43-n13*n31*n44+n11*n33*n44)*detInv,te[6]=(n14*n32*n41-n12*n34*n41-n14*n31*n42+n11*n34*n42+n12*n31*n44-n11*n32*n44)*detInv,te[7]=(n12*n33*n41-n13*n32*n41+n13*n31*n42-n11*n33*n42-n12*n31*n43+n11*n32*n43)*detInv,te[8]=t13*detInv,te[9]=(n14*n23*n41-n13*n24*n41-n14*n21*n43+n11*n24*n43+n13*n21*n44-n11*n23*n44)*detInv,te[10]=(n12*n24*n41-n14*n22*n41+n14*n21*n42-n11*n24*n42-n12*n21*n44+n11*n22*n44)*detInv,te[11]=(n13*n22*n41-n12*n23*n41-n13*n21*n42+n11*n23*n42+n12*n21*n43-n11*n22*n43)*detInv,te[12]=t14*detInv,te[13]=(n13*n24*n31-n14*n23*n31+n14*n21*n33-n11*n24*n33-n13*n21*n34+n11*n23*n34)*detInv,te[14]=(n14*n22*n31-n12*n24*n31-n14*n21*n32+n11*n24*n32+n12*n21*n34-n11*n22*n34)*detInv,te[15]=(n12*n23*n31-n13*n22*n31+n13*n21*n32-n11*n23*n32-n12*n21*n33+n11*n22*n33)*detInv,this},scale:function(v){var te=this.elements,x=v.x,y=v.y,z=v.z;return te[0]*=x,te[4]*=y,te[8]*=z,te[1]*=x,te[5]*=y,te[9]*=z,te[2]*=x,te[6]*=y,te[10]*=z,te[3]*=x,te[7]*=y,te[11]*=z,this},getMaxScaleOnAxis:function(){var te=this.elements,scaleXSq=te[0]*te[0]+te[1]*te[1]+te[2]*te[2],scaleYSq=te[4]*te[4]+te[5]*te[5]+te[6]*te[6],scaleZSq=te[8]*te[8]+te[9]*te[9]+te[10]*te[10];return Math.sqrt(Math.max(scaleXSq,scaleYSq,scaleZSq))},makeTranslation:function(x,y,z){return this.set(1,0,0,x,0,1,0,y,0,0,1,z,0,0,0,1),this},makeRotationX:function(theta){var c=Math.cos(theta),s=Math.sin(theta);return this.set(1,0,0,0,0,c,-s,0,0,s,c,0,0,0,0,1),this},makeRotationY:function(theta){var c=Math.cos(theta),s=Math.sin(theta);return this.set(c,0,s,0,0,1,0,0,-s,0,c,0,0,0,0,1),this},makeRotationZ:function(theta){var c=Math.cos(theta),s=Math.sin(theta);return this.set(c,-s,0,0,s,c,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(axis,angle){var c=Math.cos(angle),s=Math.sin(angle),t=1-c,x=axis.x,y=axis.y,z=axis.z,tx=t*x,ty=t*y;return this.set(tx*x+c,tx*y-s*z,tx*z+s*y,0,tx*y+s*z,ty*y+c,ty*z-s*x,0,tx*z-s*y,ty*z+s*x,t*z*z+c,0,0,0,0,1),this},makeScale:function(x,y,z){return this.set(x,0,0,0,0,y,0,0,0,0,z,0,0,0,0,1),this},makeShear:function(x,y,z){return this.set(1,y,z,0,x,1,z,0,x,y,1,0,0,0,0,1),this},compose:function(position,quaternion,scale){return this.makeRotationFromQuaternion(quaternion),this.scale(scale),this.setPosition(position),this},decompose:function(){var vector=new Vector3,matrix=new Matrix4;return function(position,quaternion,scale){var te=this.elements,sx=vector.set(te[0],te[1],te[2]).length(),sy=vector.set(te[4],te[5],te[6]).length(),sz=vector.set(te[8],te[9],te[10]).length(),det=this.determinant();0>det&&(sx=-sx),position.x=te[12],position.y=te[13],position.z=te[14],matrix.copy(this);var invSX=1/sx,invSY=1/sy,invSZ=1/sz;return matrix.elements[0]*=invSX,matrix.elements[1]*=invSX,matrix.elements[2]*=invSX,matrix.elements[4]*=invSY,matrix.elements[5]*=invSY,matrix.elements[6]*=invSY,matrix.elements[8]*=invSZ,matrix.elements[9]*=invSZ,matrix.elements[10]*=invSZ,quaternion.setFromRotationMatrix(matrix),scale.x=sx,scale.y=sy,scale.z=sz,this}}(),makePerspective:function(left,right,top,bottom,near,far){void 0===far&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var te=this.elements,x=2*near/(right-left),y=2*near/(top-bottom),a=(right+left)/(right-left),b=(top+bottom)/(top-bottom),c=-(far+near)/(far-near),d=-2*far*near/(far-near);return te[0]=x,te[4]=0,te[8]=a,te[12]=0,te[1]=0,te[5]=y,te[9]=b,te[13]=0,te[2]=0,te[6]=0,te[10]=c,te[14]=d,te[3]=0,te[7]=0,te[11]=-1,te[15]=0,this},makeOrthographic:function(left,right,top,bottom,near,far){var te=this.elements,w=1/(right-left),h=1/(top-bottom),p=1/(far-near),x=(right+left)*w,y=(top+bottom)*h,z=(far+near)*p;return te[0]=2*w,te[4]=0,te[8]=0,te[12]=-x,te[1]=0,te[5]=2*h,te[9]=0,te[13]=-y,te[2]=0,te[6]=0,te[10]=-2*p,te[14]=-z,te[3]=0,te[7]=0,te[11]=0,te[15]=1,this},equals:function(matrix){for(var te=this.elements,me=matrix.elements,i=0;16>i;i++)if(te[i]!==me[i])return!1;return!0},fromArray:function(array,offset){void 0===offset&&(offset=0);for(var i=0;16>i;i++)this.elements[i]=array[i+offset];return this},toArray:function(array,offset){void 0===array&&(array=[]),void 0===offset&&(offset=0);var te=this.elements;return array[offset]=te[0],array[offset+1]=te[1],array[offset+2]=te[2],array[offset+3]=te[3],array[offset+4]=te[4],array[offset+5]=te[5],array[offset+6]=te[6],array[offset+7]=te[7],array[offset+8]=te[8],array[offset+9]=te[9],array[offset+10]=te[10],array[offset+11]=te[11],array[offset+12]=te[12],array[offset+13]=te[13],array[offset+14]=te[14],array[offset+15]=te[15],array}}),DataTexture.prototype=Object.create(Texture.prototype),DataTexture.prototype.constructor=DataTexture,DataTexture.prototype.isDataTexture=!0,CubeTexture.prototype=Object.create(Texture.prototype),CubeTexture.prototype.constructor=CubeTexture,CubeTexture.prototype.isCubeTexture=!0,Object.defineProperty(CubeTexture.prototype,"images",{get:function(){return this.image},set:function(value){this.image=value}});var emptyTexture=new Texture,emptyCubeTexture=new CubeTexture,arrayCacheF32=[],arrayCacheI32=[],mat4array=new Float32Array(16),mat3array=new Float32Array(9);StructuredUniform.prototype.setValue=function(gl,value){for(var seq=this.seq,i=0,n=seq.length;i!==n;++i){var u=seq[i];u.setValue(gl,value[u.id])}};var RePathPart=/([\w\d_]+)(\])?(\[|\.)?/g;WebGLUniforms.prototype.setValue=function(gl,name,value){var u=this.map[name];void 0!==u&&u.setValue(gl,value,this.renderer)},WebGLUniforms.prototype.setOptional=function(gl,object,name){var v=object[name];void 0!==v&&this.setValue(gl,name,v)},WebGLUniforms.upload=function(gl,seq,values,renderer){for(var i=0,n=seq.length;i!==n;++i){var u=seq[i],v=values[u.id];v.needsUpdate!==!1&&u.setValue(gl,v.value,renderer)}},WebGLUniforms.seqWithValue=function(seq,values){for(var r=[],i=0,n=seq.length;i!==n;++i){var u=seq[i];u.id in values&&r.push(u)}return r};var ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};Object.assign(Color.prototype,{isColor:!0,r:1,g:1,b:1,set:function(value){return value&&value.isColor?this.copy(value):"number"==typeof value?this.setHex(value):"string"==typeof value&&this.setStyle(value),this},setScalar:function(scalar){return this.r=scalar,this.g=scalar,this.b=scalar,this},setHex:function(hex){return hex=Math.floor(hex),this.r=(hex>>16&255)/255,this.g=(hex>>8&255)/255,this.b=(255&hex)/255,this},setRGB:function(r,g,b){return this.r=r,this.g=g,this.b=b,this},setHSL:function(){function hue2rgb(p,q,t){return 0>t&&(t+=1),t>1&&(t-=1),1/6>t?p+6*(q-p)*t:.5>t?q:2/3>t?p+6*(q-p)*(2/3-t):p}return function(h,s,l){if(h=_Math.euclideanModulo(h,1),s=_Math.clamp(s,0,1),l=_Math.clamp(l,0,1),0===s)this.r=this.g=this.b=l;else{var p=.5>=l?l*(1+s):l+s-l*s,q=2*l-p;this.r=hue2rgb(q,p,h+1/3),this.g=hue2rgb(q,p,h),this.b=hue2rgb(q,p,h-1/3)}return this}}(),setStyle:function(style){function handleAlpha(string){void 0!==string&&parseFloat(string)<1&&console.warn("THREE.Color: Alpha component of "+style+" will be ignored.")}var m;if(m=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(style)){var color,name=m[1],components=m[2];switch(name){case"rgb":case"rgba":if(color=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components))return this.r=Math.min(255,parseInt(color[1],10))/255,this.g=Math.min(255,parseInt(color[2],10))/255,this.b=Math.min(255,parseInt(color[3],10))/255,handleAlpha(color[5]),this;if(color=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components))return this.r=Math.min(100,parseInt(color[1],10))/100,this.g=Math.min(100,parseInt(color[2],10))/100,this.b=Math.min(100,parseInt(color[3],10))/100,handleAlpha(color[5]),this;break;case"hsl":case"hsla":if(color=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(components)){var h=parseFloat(color[1])/360,s=parseInt(color[2],10)/100,l=parseInt(color[3],10)/100;return handleAlpha(color[5]),this.setHSL(h,s,l)}}}else if(m=/^\#([A-Fa-f0-9]+)$/.exec(style)){var hex=m[1],size=hex.length;if(3===size)return this.r=parseInt(hex.charAt(0)+hex.charAt(0),16)/255,this.g=parseInt(hex.charAt(1)+hex.charAt(1),16)/255,this.b=parseInt(hex.charAt(2)+hex.charAt(2),16)/255,this;if(6===size)return this.r=parseInt(hex.charAt(0)+hex.charAt(1),16)/255,this.g=parseInt(hex.charAt(2)+hex.charAt(3),16)/255,this.b=parseInt(hex.charAt(4)+hex.charAt(5),16)/255,this}if(style&&style.length>0){var hex=ColorKeywords[style];void 0!==hex?this.setHex(hex):console.warn("THREE.Color: Unknown color "+style)}return this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(color){return this.r=color.r,this.g=color.g,this.b=color.b,this},copyGammaToLinear:function(color,gammaFactor){return void 0===gammaFactor&&(gammaFactor=2),this.r=Math.pow(color.r,gammaFactor),this.g=Math.pow(color.g,gammaFactor),this.b=Math.pow(color.b,gammaFactor),this},copyLinearToGamma:function(color,gammaFactor){void 0===gammaFactor&&(gammaFactor=2);var safeInverse=gammaFactor>0?1/gammaFactor:1;return this.r=Math.pow(color.r,safeInverse),this.g=Math.pow(color.g,safeInverse),this.b=Math.pow(color.b,safeInverse),this},convertGammaToLinear:function(){var r=this.r,g=this.g,b=this.b;return this.r=r*r,this.g=g*g,this.b=b*b,this},convertLinearToGamma:function(){return this.r=Math.sqrt(this.r),this.g=Math.sqrt(this.g),this.b=Math.sqrt(this.b),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(optionalTarget){var hue,saturation,hsl=optionalTarget||{h:0,s:0,l:0},r=this.r,g=this.g,b=this.b,max=Math.max(r,g,b),min=Math.min(r,g,b),lightness=(min+max)/2;if(min===max)hue=0,saturation=0;else{var delta=max-min;switch(saturation=.5>=lightness?delta/(max+min):delta/(2-max-min),max){case r:hue=(g-b)/delta+(b>g?6:0);break;case g:hue=(b-r)/delta+2;break;case b:hue=(r-g)/delta+4}hue/=6}return hsl.h=hue,hsl.s=saturation,hsl.l=lightness,hsl},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(h,s,l){var hsl=this.getHSL();return hsl.h+=h,hsl.s+=s,hsl.l+=l,this.setHSL(hsl.h,hsl.s,hsl.l),this},add:function(color){return this.r+=color.r,this.g+=color.g,this.b+=color.b,this},addColors:function(color1,color2){return this.r=color1.r+color2.r,this.g=color1.g+color2.g,this.b=color1.b+color2.b,this},addScalar:function(s){return this.r+=s,this.g+=s,this.b+=s,this},sub:function(color){return this.r=Math.max(0,this.r-color.r),this.g=Math.max(0,this.g-color.g),this.b=Math.max(0,this.b-color.b),this},multiply:function(color){return this.r*=color.r,this.g*=color.g,this.b*=color.b,this},multiplyScalar:function(s){return this.r*=s,this.g*=s,this.b*=s,this},lerp:function(color,alpha){return this.r+=(color.r-this.r)*alpha,this.g+=(color.g-this.g)*alpha,this.b+=(color.b-this.b)*alpha,this},equals:function(c){return c.r===this.r&&c.g===this.g&&c.b===this.b},fromArray:function(array,offset){return void 0===offset&&(offset=0),this.r=array[offset],this.g=array[offset+1],this.b=array[offset+2],this},toArray:function(array,offset){return void 0===array&&(array=[]),void 0===offset&&(offset=0),array[offset]=this.r,array[offset+1]=this.g,array[offset+2]=this.b,array},toJSON:function(){return this.getHex()}});var UniformsLib={common:{diffuse:{value:new Color(15658734)},opacity:{value:1},map:{value:null},offsetRepeat:{value:new Vector4(0,0,1,1)},specularMap:{value:null},alphaMap:{value:null
},envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Color(16777215)}},lights:{ambientLightColor:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{},shadow:{},shadowBias:{},shadowRadius:{},shadowMapSize:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new Color(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},offsetRepeat:{value:new Vector4(0,0,1,1)}}},UniformsUtils={merge:function(uniforms){for(var merged={},u=0;u<uniforms.length;u++){var tmp=this.clone(uniforms[u]);for(var p in tmp)merged[p]=tmp[p]}return merged},clone:function(uniforms_src){var uniforms_dst={};for(var u in uniforms_src){uniforms_dst[u]={};for(var p in uniforms_src[u]){var parameter_src=uniforms_src[u][p];parameter_src&&(parameter_src.isColor||parameter_src.isMatrix3||parameter_src.isMatrix4||parameter_src.isVector2||parameter_src.isVector3||parameter_src.isVector4||parameter_src.isTexture)?uniforms_dst[u][p]=parameter_src.clone():Array.isArray(parameter_src)?uniforms_dst[u][p]=parameter_src.slice():uniforms_dst[u][p]=parameter_src}}return uniforms_dst}},alphamap_fragment="#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n",alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif\n",alphatest_fragment="#ifdef ALPHATEST\n	if ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n",aomap_fragment="#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n	#endif\n#endif\n",aomap_pars_fragment="#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif",begin_vertex="\nvec3 transformed = vec3( position );\n",beginnormal_vertex="\nvec3 objectNormal = vec3( normal );\n",bsdfs="float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	if( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n		float maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n		return distanceFalloff * maxDistanceCutoffFactor;\n#else\n		return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n	}\n	return 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	return 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n	float D = D_GGX( alpha, dotNH );\n	return F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE  = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS  = 0.5 / LUT_SIZE;\n	float theta = acos( dot( N, V ) );\n	vec2 uv = vec2(\n		sqrt( saturate( roughness ) ),\n		saturate( theta / ( 0.5 * PI ) ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\n	float b = 3.45068 + (4.18814 + y) * y;\n	float v = a / b;\n	float theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transpose( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	vec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\n	return result;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n	return specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n	float dotNH = saturate( dot( geometry.normal, halfDir ) );\n	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n	vec3 F = F_Schlick( specularColor, dotLH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n",bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 );\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif\n",clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\n	for ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n		vec4 plane = clippingPlanes[ i ];\n		if ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n	}\n		\n	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n		bool clipped = true;\n		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n			vec4 plane = clippingPlanes[ i ];\n			clipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n		}\n		if ( clipped ) discard;\n	\n	#endif\n#endif\n",clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\n	#if ! defined( PHYSICAL ) && ! defined( PHONG )\n		varying vec3 vViewPosition;\n	#endif\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n",clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n	varying vec3 vViewPosition;\n#endif\n",clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n	vViewPosition = - mvPosition.xyz;\n#endif\n",color_fragment="#ifdef USE_COLOR\n	diffuseColor.rgb *= vColor;\n#endif",color_pars_fragment="#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif\n",color_pars_vertex="#ifdef USE_COLOR\n	varying vec3 vColor;\n#endif",color_vertex="#ifdef USE_COLOR\n	vColor.xyz = color.xyz;\n#endif",common="#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract(sin(sn) * c);\n}\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\nstruct GeometricContext {\n	vec3 position;\n	vec3 normal;\n	vec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	float distance = dot( planeNormal, point - pointOnPlane );\n	return - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transpose( const in mat3 v ) {\n	mat3 tmp;\n	tmp[0] = vec3(v[0].x, v[1].x, v[2].x);\n	tmp[1] = vec3(v[0].y, v[1].y, v[2].y);\n	tmp[2] = vec3(v[0].z, v[1].z, v[2].z);\n	return tmp;\n}\n",cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n	vec3 absDirection = abs(direction);\n	int face = -1;\n	if( absDirection.x > absDirection.z ) {\n		if(absDirection.x > absDirection.y )\n			face = direction.x > 0.0 ? 0 : 3;\n		else\n			face = direction.y > 0.0 ? 1 : 4;\n	}\n	else {\n		if(absDirection.z > absDirection.y )\n			face = direction.z > 0.0 ? 2 : 5;\n		else\n			face = direction.y > 0.0 ? 1 : 4;\n	}\n	return face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n	float scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n	float dxRoughness = dFdx(roughness);\n	float dyRoughness = dFdy(roughness);\n	vec3 dx = dFdx( vec * scale * dxRoughness );\n	vec3 dy = dFdy( vec * scale * dyRoughness );\n	float d = max( dot( dx, dx ), dot( dy, dy ) );\n	d = clamp(d, 1.0, cubeUV_rangeClamp);\n	float mipLevel = 0.5 * log2(d);\n	return vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n	mipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n	float a = 16.0 * cubeUV_rcpTextureSize;\n	vec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n	vec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n	float powScale = exp2_packed.x * exp2_packed.y;\n	float scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n	float mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n	bool bRes = mipLevel == 0.0;\n	scale =  bRes && (scale < a) ? a : scale;\n	vec3 r;\n	vec2 offset;\n	int face = getFaceFromDirection(direction);\n	float rcpPowScale = 1.0 / powScale;\n	if( face == 0) {\n		r = vec3(direction.x, -direction.z, direction.y);\n		offset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n	}\n	else if( face == 1) {\n		r = vec3(direction.y, direction.x, direction.z);\n		offset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n	}\n	else if( face == 2) {\n		r = vec3(direction.z, direction.x, direction.y);\n		offset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n	}\n	else if( face == 3) {\n		r = vec3(direction.x, direction.z, direction.y);\n		offset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n	}\n	else if( face == 4) {\n		r = vec3(direction.y, direction.x, -direction.z);\n		offset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n	}\n	else {\n		r = vec3(direction.z, -direction.x, direction.y);\n		offset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n		offset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n	}\n	r = normalize(r);\n	float texelOffset = 0.5 * cubeUV_rcpTextureSize;\n	vec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n	vec2 base = offset + vec2( texelOffset );\n	return base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n	float roughnessVal = roughness* cubeUV_maxLods3;\n	float r1 = floor(roughnessVal);\n	float r2 = r1 + 1.0;\n	float t = fract(roughnessVal);\n	vec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n	float s = mipInfo.y;\n	float level0 = mipInfo.x;\n	float level1 = level0 + 1.0;\n	level1 = level1 > 5.0 ? 5.0 : level1;\n	level0 += min( floor( s + 0.5 ), 5.0 );\n	vec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n	vec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n	vec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n	vec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n	vec4 result = mix(color10, color20, t);\n	return vec4(result.rgb, 1.0);\n}\n#endif\n",defaultnormal_vertex="vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n",displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif\n",displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n",emissivemap_fragment="#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n",emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif\n",encodings_fragment="  gl_FragColor = linearToOutputTexel( gl_FragColor );\n",encodings_pars_fragment="\nvec4 LinearToLinear( in vec4 value ) {\n	return value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n	return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n	float maxComponent = max( max( value.r, value.g ), value.b );\n	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.x, max( value.g, value.b ) );\n	float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n	M            = ceil( M * 255.0 ) / 255.0;\n	return vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n	float maxRGB = max( value.x, max( value.g, value.b ) );\n	float D      = max( maxRange / maxRGB, 1.0 );\n	D            = min( floor( D ) / 255.0, 1.0 );\n	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n	vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n	Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n	vec4 vResult;\n	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n	vResult.w = fract(Le);\n	vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n	return vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n	float Le = value.z * 255.0 + value.w;\n	vec3 Xp_Y_XYZp;\n	Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n	vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n	return vec4( max(vRGB, 0.0), 1.0 );\n}\n",envmap_fragment="#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToVertex, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#elif defined( ENVMAP_TYPE_EQUIREC )\n		vec2 sampleUV;\n		sampleUV.y = asin( flipNormal * reflectVec.y ) * RECIPROCAL_PI + 0.5;\n		sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n		vec4 envColor = texture2D( envMap, sampleUV );\n	#elif defined( ENVMAP_TYPE_SPHERE )\n		vec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n		vec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	envColor = envMapTexelToLinear( envColor );\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif\n",envmap_pars_fragment="#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n	uniform float reflectivity;\n	uniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n	#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n		varying vec3 vWorldPosition;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	uniform float flipEnvMap;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif\n",envmap_pars_vertex="#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif\n",envmap_vertex="#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif\n",fog_vertex="\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex="#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n",fog_fragment="#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n",fog_pars_fragment="#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float fogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif\n",gradientmap_pars_fragment="#ifdef TOON\n	uniform sampler2D gradientMap;\n	vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n		float dotNL = dot( normal, lightDirection );\n		vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n		#ifdef USE_GRADIENTMAP\n			return texture2D( gradientMap, coord ).rgb;\n		#else\n			return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n		#endif\n	}\n#endif\n",lightmap_fragment="#ifdef USE_LIGHTMAP\n	reflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n",lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif",lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n	vLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_DIR_LIGHTS > 0\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n		dotNL = dot( geometry.normal, directLight.direction );\n		directLightColor_Diffuse = PI * directLight.color;\n		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n		#ifdef DOUBLE_SIDED\n			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n		#endif\n	}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n		vLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		#ifdef DOUBLE_SIDED\n			vLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n		#endif\n	}\n#endif\n",lights_pars="uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	return irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		directLight.color = directionalLight.color;\n		directLight.direction = directionalLight.direction;\n		directLight.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n		vec3 lVector = pointLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		directLight.color = pointLight.color;\n		directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n		directLight.visible = ( directLight.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n		int shadow;\n		float shadowBias;\n		float shadowRadius;\n		vec2 shadowMapSize;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n		vec3 lVector = spotLight.position - geometry.position;\n		directLight.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		float angleCos = dot( directLight.direction, spotLight.direction );\n		if ( angleCos > spotLight.coneCos ) {\n			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n			directLight.color = spotLight.color;\n			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n			directLight.visible = true;\n		} else {\n			directLight.color = vec3( 0.0 );\n			directLight.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltcMat;	uniform sampler2D ltcMag;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n		float dotNL = dot( geometry.normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			irradiance *= PI;\n		#endif\n		return irradiance;\n	}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n			vec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n		#else\n			vec4 envMapColor = vec4( 0.0 );\n		#endif\n		return PI * envMapColor.rgb * envMapIntensity;\n	}\n	float getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		float maxMIPLevelScalar = float( maxMIPLevel );\n		float desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n	}\n	vec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n		#else\n			vec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n		#endif\n		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n		float specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n		#ifdef ENVMAP_TYPE_CUBE\n			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n			#else\n				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_CUBE_UV )\n			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n			vec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n		#elif defined( ENVMAP_TYPE_EQUIREC )\n			vec2 sampleUV;\n			sampleUV.y = saturate( reflectVec.y * 0.5 + 0.5 );\n			sampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#elif defined( ENVMAP_TYPE_SPHERE )\n			vec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n			#ifdef TEXTURE_LOD_EXT\n				vec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#else\n				vec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n			#endif\n			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n		#endif\n		return envMapColor.rgb * envMapIntensity;\n	}\n#endif\n",lights_phong_fragment="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",lights_phong_pars_fragment="varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n	vec3	diffuseColor;\n	vec3	specularColor;\n	float	specularShininess;\n	float	specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	#ifdef TOON\n		vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n	#else\n		float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n		vec3 irradiance = dotNL * directLight.color;\n	#endif\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )	(0)\n",lights_physical_fragment="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n	material.clearCoat = saturate( clearCoat );	material.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n",lights_physical_pars_fragment="struct PhysicalMaterial {\n	vec3	diffuseColor;\n	float	specularRoughness;\n	vec3	specularColor;\n	#ifndef STANDARD\n		float clearCoat;\n		float clearCoatRoughness;\n	#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n	return DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometry.normal;\n		vec3 viewDir = geometry.viewDir;\n		vec3 position = geometry.position;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.specularRoughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos - halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		float norm = texture2D( ltcMag, uv ).a;\n		vec4 t = texture2D( ltcMat, uv );\n		mat3 mInv = mat3(\n			vec3(   1,   0, t.y ),\n			vec3(   0, t.z,   0 ),\n			vec3( t.w,   0, t.x )\n		);\n		reflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifndef PHYSICALLY_CORRECT_LIGHTS\n		irradiance *= PI;\n	#endif\n	#ifndef STANDARD\n		float clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n	#else\n		float clearCoatDHR = 0.0;\n	#endif\n	reflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n	reflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n	#ifndef STANDARD\n		reflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n	#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	#ifndef STANDARD\n		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n		float dotNL = dotNV;\n		float clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n	#else\n		float clearCoatDHR = 0.0;\n	#endif\n	reflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n	#ifndef STANDARD\n		reflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n	#endif\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n",lights_template="\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointDirectLightIrradiance( pointLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotDirectLightIrradiance( spotLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n		#ifdef USE_SHADOWMAP\n		directLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometry, material, reflectedLight );\n	}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n	}\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#ifdef USE_LIGHTMAP\n		vec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n		#ifndef PHYSICALLY_CORRECT_LIGHTS\n			lightMapIrradiance *= PI;\n		#endif\n		irradiance += lightMapIrradiance;\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n		}\n	#endif\n	#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n		irradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n	#endif\n	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	vec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n	#ifndef STANDARD\n		vec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n	#else\n		vec3 clearCoatRadiance = vec3( 0.0 );\n	#endif\n	RE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n",logdepthbuf_fragment="#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n	gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment="#ifdef USE_LOGDEPTHBUF\n	uniform float logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n#endif\n",logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n	#ifdef USE_LOGDEPTHBUF_EXT\n		varying float vFragDepth;\n	#endif\n	uniform float logDepthBufFC;\n#endif",logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n	gl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n	#ifdef USE_LOGDEPTHBUF_EXT\n		vFragDepth = 1.0 + gl_Position.w;\n	#else\n		gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n	#endif\n#endif\n",map_fragment="#ifdef USE_MAP\n	vec4 texelColor = texture2D( map, vUv );\n	texelColor = mapTexelToLinear( texelColor );\n	diffuseColor *= texelColor;\n#endif\n",map_pars_fragment="#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n",map_particle_fragment="#ifdef USE_MAP\n	vec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n	diffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n",map_particle_pars_fragment="#ifdef USE_MAP\n	uniform vec4 offsetRepeat;\n	uniform sampler2D map;\n#endif\n",metalnessmap_fragment="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vUv );\n	metalnessFactor *= texelMetalness.b;\n#endif\n",metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif",morphnormal_vertex="#ifdef USE_MORPHNORMALS\n	objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n	objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n	objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n	objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n",morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n	#ifndef USE_MORPHNORMALS\n	uniform float morphTargetInfluences[ 8 ];\n	#else\n	uniform float morphTargetInfluences[ 4 ];\n	#endif\n#endif",morphtarget_vertex="#ifdef USE_MORPHTARGETS\n	transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n	transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n	transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n	transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n	#ifndef USE_MORPHNORMALS\n	transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n	transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n	transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n	transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n	#endif\n#endif\n",normal_flip="#ifdef DOUBLE_SIDED\n	float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n#else\n	float flipNormal = 1.0;\n#endif\n",normal_fragment="#ifdef FLAT_SHADED\n	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal ) * flipNormal;\n#endif\n#ifdef USE_NORMALMAP\n	normal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n",normalmap_pars_fragment="#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n		vec3 S = normalize( q0 * st1.t - q1 * st0.t );\n		vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n		vec3 N = normalize( surf_norm );\n		vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n		mapN.xy = normalScale * mapN.xy;\n		mat3 tsn = mat3( S, T, N );\n		return normalize( tsn * mapN );\n	}\n#endif\n",packing="vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n	vec4 r = vec4( fract( v * PackFactors ), v );\n	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n	return linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif\n",project_vertex="vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n",dithering_fragment="#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n",dithering_pars_fragment="#if defined( DITHERING )\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif\n",roughnessmap_fragment="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vUv );\n	roughnessFactor *= texelRoughness.g;\n#endif\n",roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	float texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n		const vec2 offset = vec2( 0.0, 1.0 );\n		vec2 texelSize = vec2( 1.0 ) / size;\n		vec2 centroidUV = floor( uv * size + 0.5 ) / size;\n		float lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n		float lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n		float rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n		float rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n		vec2 f = fract( uv * size + 0.5 );\n		float a = mix( lb, lt, f.y );\n		float b = mix( rb, rt, f.y );\n		float c = mix( a, b, f.x );\n		return c;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n		bool frustumTest = all( frustumTestVec );\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			shadow = (\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 9.0 );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return shadow;\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n		vec3 lightToPosition = shadowCoord.xyz;\n		vec3 bd3D = normalize( lightToPosition );\n		float dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\n		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n			return (\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n			) * ( 1.0 / 9.0 );\n		#else\n			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n		#endif\n	}\n#endif\n",shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n	#endif\n#endif\n",shadowmap_vertex="#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n	}\n	#endif\n#endif\n",shadowmask_pars_fragment="float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHTS > 0\n	DirectionalLight directionalLight;\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		shadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_SPOT_LIGHTS > 0\n	SpotLight spotLight;\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		shadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#if NUM_POINT_LIGHTS > 0\n	PointLight pointLight;\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		shadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\n	}\n	#endif\n	#endif\n	return shadow;\n}\n",skinbase_vertex="#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex="#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	#ifdef BONE_TEXTURE\n		uniform sampler2D boneTexture;\n		uniform int boneTextureSize;\n		mat4 getBoneMatrix( const in float i ) {\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureSize ) );\n			float y = floor( j / float( boneTextureSize ) );\n			float dx = 1.0 / float( boneTextureSize );\n			float dy = 1.0 / float( boneTextureSize );\n			y = dy * ( y + 0.5 );\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n			mat4 bone = mat4( v1, v2, v3, v4 );\n			return bone;\n		}\n	#else\n		uniform mat4 boneMatrices[ MAX_BONES ];\n		mat4 getBoneMatrix( const in float i ) {\n			mat4 bone = boneMatrices[ int(i) ];\n			return bone;\n		}\n	#endif\n#endif\n",skinning_vertex="#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n",skinnormal_vertex="#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n",specularmap_fragment="float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif",specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif",tonemapping_fragment="#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n",tonemapping_pars_fragment="#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n	return toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n",uv_pars_fragment="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n#endif",uv_pars_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	varying vec2 vUv;\n	uniform vec4 offsetRepeat;\n#endif\n",uv_vertex="#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n	vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	varying vec2 vUv2;\n#endif",uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n#endif",uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n	vUv2 = uv2;\n#endif",worldpos_vertex="#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n	vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n",cube_frag="uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n	gl_FragColor.a *= opacity;\n}\n",cube_vert="varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n	vWorldPosition = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}\n",depth_frag="#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( 1.0 );\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <logdepthbuf_fragment>\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n	#endif\n}\n",depth_vert="#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n}\n",distanceRGBA_frag="uniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n#include <common>\n#include <packing>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	#include <clipping_planes_fragment>\n	gl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\n}\n",distanceRGBA_vert="varying vec4 vWorldPosition;\n#include <common>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <skinbase_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition;\n}\n",equirect_frag="uniform sampler2D tEquirect;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldPosition );\n	vec2 sampleUV;\n	sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\n	sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n}\n",equirect_vert="varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n	vWorldPosition = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}\n",linedashed_frag="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",linedashed_vert="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	vLineDistance = scale * lineDistance;\n	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}\n",meshbasic_frag="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		reflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <normal_flip>\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",meshbasic_vert="#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <skinbase_vertex>\n	#ifdef USE_ENVMAP\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}\n",meshlambert_frag="uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <emissivemap_fragment>\n	reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n	#include <lightmap_fragment>\n	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n	#ifdef DOUBLE_SIDED\n		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n	#else\n		reflectedLight.directDiffuse = vLightFront;\n	#endif\n	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <normal_flip>\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}\n",meshlambert_vert="#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n	varying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <lights_lambert_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}\n",meshphong_frag="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <specularmap_fragment>\n	#include <normal_flip>\n	#include <normal_fragment>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_template>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}\n",meshphong_vert="#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}\n",meshphysical_frag="#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n	uniform float clearCoat;\n	uniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_flip>\n	#include <normal_fragment>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_template>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}\n",meshphysical_vert="#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <uv2_vertex>\n	#include <color_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}\n",normal_frag="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	#include <normal_flip>\n	#include <normal_fragment>\n	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n",normal_vert="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n	varying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}\n",points_frag="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	outgoingLight = diffuseColor.rgb;\n	gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n	#include <premultiplied_alpha_fragment>\n	#include <tonemapping_fragment>\n	#include <encodings_fragment>\n	#include <fog_fragment>\n}\n",points_vert="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <color_vertex>\n	#include <begin_vertex>\n	#include <project_vertex>\n	#ifdef USE_SIZEATTENUATION\n		gl_PointSize = size * ( scale / - mvPosition.z );\n	#else\n		gl_PointSize = size;\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}\n",shadow_frag="uniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	gl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0 - getShadowMask() ) );\n}\n",shadow_vert="#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <begin_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n}\n",ShaderChunk={
alphamap_fragment:alphamap_fragment,alphamap_pars_fragment:alphamap_pars_fragment,alphatest_fragment:alphatest_fragment,aomap_fragment:aomap_fragment,aomap_pars_fragment:aomap_pars_fragment,begin_vertex:begin_vertex,beginnormal_vertex:beginnormal_vertex,bsdfs:bsdfs,bumpmap_pars_fragment:bumpmap_pars_fragment,clipping_planes_fragment:clipping_planes_fragment,clipping_planes_pars_fragment:clipping_planes_pars_fragment,clipping_planes_pars_vertex:clipping_planes_pars_vertex,clipping_planes_vertex:clipping_planes_vertex,color_fragment:color_fragment,color_pars_fragment:color_pars_fragment,color_pars_vertex:color_pars_vertex,color_vertex:color_vertex,common:common,cube_uv_reflection_fragment:cube_uv_reflection_fragment,defaultnormal_vertex:defaultnormal_vertex,displacementmap_pars_vertex:displacementmap_pars_vertex,displacementmap_vertex:displacementmap_vertex,emissivemap_fragment:emissivemap_fragment,emissivemap_pars_fragment:emissivemap_pars_fragment,encodings_fragment:encodings_fragment,encodings_pars_fragment:encodings_pars_fragment,envmap_fragment:envmap_fragment,envmap_pars_fragment:envmap_pars_fragment,envmap_pars_vertex:envmap_pars_vertex,envmap_vertex:envmap_vertex,fog_vertex:fog_vertex,fog_pars_vertex:fog_pars_vertex,fog_fragment:fog_fragment,fog_pars_fragment:fog_pars_fragment,gradientmap_pars_fragment:gradientmap_pars_fragment,lightmap_fragment:lightmap_fragment,lightmap_pars_fragment:lightmap_pars_fragment,lights_lambert_vertex:lights_lambert_vertex,lights_pars:lights_pars,lights_phong_fragment:lights_phong_fragment,lights_phong_pars_fragment:lights_phong_pars_fragment,lights_physical_fragment:lights_physical_fragment,lights_physical_pars_fragment:lights_physical_pars_fragment,lights_template:lights_template,logdepthbuf_fragment:logdepthbuf_fragment,logdepthbuf_pars_fragment:logdepthbuf_pars_fragment,logdepthbuf_pars_vertex:logdepthbuf_pars_vertex,logdepthbuf_vertex:logdepthbuf_vertex,map_fragment:map_fragment,map_pars_fragment:map_pars_fragment,map_particle_fragment:map_particle_fragment,map_particle_pars_fragment:map_particle_pars_fragment,metalnessmap_fragment:metalnessmap_fragment,metalnessmap_pars_fragment:metalnessmap_pars_fragment,morphnormal_vertex:morphnormal_vertex,morphtarget_pars_vertex:morphtarget_pars_vertex,morphtarget_vertex:morphtarget_vertex,normal_flip:normal_flip,normal_fragment:normal_fragment,normalmap_pars_fragment:normalmap_pars_fragment,packing:packing,premultiplied_alpha_fragment:premultiplied_alpha_fragment,project_vertex:project_vertex,dithering_fragment:dithering_fragment,dithering_pars_fragment:dithering_pars_fragment,roughnessmap_fragment:roughnessmap_fragment,roughnessmap_pars_fragment:roughnessmap_pars_fragment,shadowmap_pars_fragment:shadowmap_pars_fragment,shadowmap_pars_vertex:shadowmap_pars_vertex,shadowmap_vertex:shadowmap_vertex,shadowmask_pars_fragment:shadowmask_pars_fragment,skinbase_vertex:skinbase_vertex,skinning_pars_vertex:skinning_pars_vertex,skinning_vertex:skinning_vertex,skinnormal_vertex:skinnormal_vertex,specularmap_fragment:specularmap_fragment,specularmap_pars_fragment:specularmap_pars_fragment,tonemapping_fragment:tonemapping_fragment,tonemapping_pars_fragment:tonemapping_pars_fragment,uv_pars_fragment:uv_pars_fragment,uv_pars_vertex:uv_pars_vertex,uv_vertex:uv_vertex,uv2_pars_fragment:uv2_pars_fragment,uv2_pars_vertex:uv2_pars_vertex,uv2_vertex:uv2_vertex,worldpos_vertex:worldpos_vertex,cube_frag:cube_frag,cube_vert:cube_vert,depth_frag:depth_frag,depth_vert:depth_vert,distanceRGBA_frag:distanceRGBA_frag,distanceRGBA_vert:distanceRGBA_vert,equirect_frag:equirect_frag,equirect_vert:equirect_vert,linedashed_frag:linedashed_frag,linedashed_vert:linedashed_vert,meshbasic_frag:meshbasic_frag,meshbasic_vert:meshbasic_vert,meshlambert_frag:meshlambert_frag,meshlambert_vert:meshlambert_vert,meshphong_frag:meshphong_frag,meshphong_vert:meshphong_vert,meshphysical_frag:meshphysical_frag,meshphysical_vert:meshphysical_vert,normal_frag:normal_frag,normal_vert:normal_vert,points_frag:points_frag,points_vert:points_vert,shadow_frag:shadow_frag,shadow_vert:shadow_vert},ShaderLib={basic:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.fog]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},lambert:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)}}]),vertexShader:ShaderChunk.meshlambert_vert,fragmentShader:ShaderChunk.meshlambert_frag},phong:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.gradientmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)},specular:{value:new Color(1118481)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag},standard:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.roughnessmap,UniformsLib.metalnessmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag},points:{uniforms:UniformsUtils.merge([UniformsLib.points,UniformsLib.fog]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},dashed:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ShaderChunk.linedashed_vert,fragmentShader:ShaderChunk.linedashed_frag},depth:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.displacementmap]),vertexShader:ShaderChunk.depth_vert,fragmentShader:ShaderChunk.depth_frag},normal:{uniforms:UniformsUtils.merge([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,{opacity:{value:1}}]),vertexShader:ShaderChunk.normal_vert,fragmentShader:ShaderChunk.normal_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:ShaderChunk.cube_vert,fragmentShader:ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null},tFlip:{value:-1}},vertexShader:ShaderChunk.equirect_vert,fragmentShader:ShaderChunk.equirect_frag},distanceRGBA:{uniforms:{lightPos:{value:new Vector3}},vertexShader:ShaderChunk.distanceRGBA_vert,fragmentShader:ShaderChunk.distanceRGBA_frag}};ShaderLib.physical={uniforms:UniformsUtils.merge([ShaderLib.standard.uniforms,{clearCoat:{value:0},clearCoatRoughness:{value:0}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag},Object.assign(Box2.prototype,{set:function(min,max){return this.min.copy(min),this.max.copy(max),this},setFromPoints:function(points){this.makeEmpty();for(var i=0,il=points.length;il>i;i++)this.expandByPoint(points[i]);return this},setFromCenterAndSize:function(){var v1=new Vector2;return function(center,size){var halfSize=v1.copy(size).multiplyScalar(.5);return this.min.copy(center).sub(halfSize),this.max.copy(center).add(halfSize),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(box){return this.min.copy(box.min),this.max.copy(box.max),this},makeEmpty:function(){return this.min.x=this.min.y=+(1/0),this.max.x=this.max.y=-(1/0),this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(optionalTarget){var result=optionalTarget||new Vector2;return this.isEmpty()?result.set(0,0):result.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(optionalTarget){var result=optionalTarget||new Vector2;return this.isEmpty()?result.set(0,0):result.subVectors(this.max,this.min)},expandByPoint:function(point){return this.min.min(point),this.max.max(point),this},expandByVector:function(vector){return this.min.sub(vector),this.max.add(vector),this},expandByScalar:function(scalar){return this.min.addScalar(-scalar),this.max.addScalar(scalar),this},containsPoint:function(point){return!(point.x<this.min.x||point.x>this.max.x||point.y<this.min.y||point.y>this.max.y)},containsBox:function(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y},getParameter:function(point,optionalTarget){var result=optionalTarget||new Vector2;return result.set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(box){return!(box.max.x<this.min.x||box.min.x>this.max.x||box.max.y<this.min.y||box.min.y>this.max.y)},clampPoint:function(point,optionalTarget){var result=optionalTarget||new Vector2;return result.copy(point).clamp(this.min,this.max)},distanceToPoint:function(){var v1=new Vector2;return function(point){var clampedPoint=v1.copy(point).clamp(this.min,this.max);return clampedPoint.sub(point).length()}}(),intersect:function(box){return this.min.max(box.min),this.max.min(box.max),this},union:function(box){return this.min.min(box.min),this.max.max(box.max),this},translate:function(offset){return this.min.add(offset),this.max.add(offset),this},equals:function(box){return box.min.equals(this.min)&&box.max.equals(this.max)}});var materialId=0;Object.assign(Material.prototype,EventDispatcher.prototype,{isMaterial:!0,onBeforeCompile:function(){},setValues:function(values){if(void 0!==values)for(var key in values){var newValue=values[key];if(void 0!==newValue){var currentValue=this[key];void 0!==currentValue?currentValue&&currentValue.isColor?currentValue.set(newValue):currentValue&&currentValue.isVector3&&newValue&&newValue.isVector3?currentValue.copy(newValue):"overdraw"===key?this[key]=Number(newValue):this[key]=newValue:console.warn("THREE."+this.type+": '"+key+"' is not a property of this material.")}else console.warn("THREE.Material: '"+key+"' parameter is undefined.")}},toJSON:function(meta){function extractFromCache(cache){var values=[];for(var key in cache){var data=cache[key];delete data.metadata,values.push(data)}return values}var isRoot=void 0===meta;isRoot&&(meta={textures:{},images:{}});var data={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};if(data.uuid=this.uuid,data.type=this.type,""!==this.name&&(data.name=this.name),this.color&&this.color.isColor&&(data.color=this.color.getHex()),void 0!==this.roughness&&(data.roughness=this.roughness),void 0!==this.metalness&&(data.metalness=this.metalness),this.emissive&&this.emissive.isColor&&(data.emissive=this.emissive.getHex()),this.specular&&this.specular.isColor&&(data.specular=this.specular.getHex()),void 0!==this.shininess&&(data.shininess=this.shininess),void 0!==this.clearCoat&&(data.clearCoat=this.clearCoat),void 0!==this.clearCoatRoughness&&(data.clearCoatRoughness=this.clearCoatRoughness),this.map&&this.map.isTexture&&(data.map=this.map.toJSON(meta).uuid),this.alphaMap&&this.alphaMap.isTexture&&(data.alphaMap=this.alphaMap.toJSON(meta).uuid),this.lightMap&&this.lightMap.isTexture&&(data.lightMap=this.lightMap.toJSON(meta).uuid),this.bumpMap&&this.bumpMap.isTexture&&(data.bumpMap=this.bumpMap.toJSON(meta).uuid,data.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(data.normalMap=this.normalMap.toJSON(meta).uuid,data.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(data.displacementMap=this.displacementMap.toJSON(meta).uuid,data.displacementScale=this.displacementScale,data.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(data.roughnessMap=this.roughnessMap.toJSON(meta).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(data.metalnessMap=this.metalnessMap.toJSON(meta).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(data.emissiveMap=this.emissiveMap.toJSON(meta).uuid),this.specularMap&&this.specularMap.isTexture&&(data.specularMap=this.specularMap.toJSON(meta).uuid),this.envMap&&this.envMap.isTexture&&(data.envMap=this.envMap.toJSON(meta).uuid,data.reflectivity=this.reflectivity),this.gradientMap&&this.gradientMap.isTexture&&(data.gradientMap=this.gradientMap.toJSON(meta).uuid),void 0!==this.size&&(data.size=this.size),void 0!==this.sizeAttenuation&&(data.sizeAttenuation=this.sizeAttenuation),this.blending!==NormalBlending&&(data.blending=this.blending),this.shading!==SmoothShading&&(data.shading=this.shading),this.side!==FrontSide&&(data.side=this.side),this.vertexColors!==NoColors&&(data.vertexColors=this.vertexColors),this.opacity<1&&(data.opacity=this.opacity),this.transparent===!0&&(data.transparent=this.transparent),data.depthFunc=this.depthFunc,data.depthTest=this.depthTest,data.depthWrite=this.depthWrite,this.alphaTest>0&&(data.alphaTest=this.alphaTest),this.premultipliedAlpha===!0&&(data.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(data.wireframe=this.wireframe),this.wireframeLinewidth>1&&(data.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(data.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(data.wireframeLinejoin=this.wireframeLinejoin),data.skinning=this.skinning,data.morphTargets=this.morphTargets,data.dithering=this.dithering,isRoot){var textures=extractFromCache(meta.textures),images=extractFromCache(meta.images);textures.length>0&&(data.textures=textures),images.length>0&&(data.images=images)}return data},clone:function(){return(new this.constructor).copy(this)},copy:function(source){this.name=source.name,this.fog=source.fog,this.lights=source.lights,this.blending=source.blending,this.side=source.side,this.shading=source.shading,this.vertexColors=source.vertexColors,this.opacity=source.opacity,this.transparent=source.transparent,this.blendSrc=source.blendSrc,this.blendDst=source.blendDst,this.blendEquation=source.blendEquation,this.blendSrcAlpha=source.blendSrcAlpha,this.blendDstAlpha=source.blendDstAlpha,this.blendEquationAlpha=source.blendEquationAlpha,this.depthFunc=source.depthFunc,this.depthTest=source.depthTest,this.depthWrite=source.depthWrite,this.colorWrite=source.colorWrite,this.precision=source.precision,this.polygonOffset=source.polygonOffset,this.polygonOffsetFactor=source.polygonOffsetFactor,this.polygonOffsetUnits=source.polygonOffsetUnits,this.dithering=source.dithering,this.alphaTest=source.alphaTest,this.premultipliedAlpha=source.premultipliedAlpha,this.overdraw=source.overdraw,this.visible=source.visible,this.clipShadows=source.clipShadows,this.clipIntersection=source.clipIntersection;var srcPlanes=source.clippingPlanes,dstPlanes=null;if(null!==srcPlanes){var n=srcPlanes.length;dstPlanes=new Array(n);for(var i=0;i!==n;++i)dstPlanes[i]=srcPlanes[i].clone()}return this.clippingPlanes=dstPlanes,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),ShaderMaterial.prototype=Object.create(Material.prototype),ShaderMaterial.prototype.constructor=ShaderMaterial,ShaderMaterial.prototype.isShaderMaterial=!0,ShaderMaterial.prototype.copy=function(source){return Material.prototype.copy.call(this,source),this.fragmentShader=source.fragmentShader,this.vertexShader=source.vertexShader,this.uniforms=UniformsUtils.clone(source.uniforms),this.defines=source.defines,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.lights=source.lights,this.clipping=source.clipping,this.skinning=source.skinning,this.morphTargets=source.morphTargets,this.morphNormals=source.morphNormals,this.extensions=source.extensions,this},ShaderMaterial.prototype.toJSON=function(meta){var data=Material.prototype.toJSON.call(this,meta);return data.uniforms=this.uniforms,data.vertexShader=this.vertexShader,data.fragmentShader=this.fragmentShader,data},MeshDepthMaterial.prototype=Object.create(Material.prototype),MeshDepthMaterial.prototype.constructor=MeshDepthMaterial,MeshDepthMaterial.prototype.isMeshDepthMaterial=!0,MeshDepthMaterial.prototype.copy=function(source){return Material.prototype.copy.call(this,source),this.depthPacking=source.depthPacking,this.skinning=source.skinning,this.morphTargets=source.morphTargets,this.map=source.map,this.alphaMap=source.alphaMap,this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this},Object.assign(Box3.prototype,{isBox3:!0,set:function(min,max){return this.min.copy(min),this.max.copy(max),this},setFromArray:function(array){for(var minX=+(1/0),minY=+(1/0),minZ=+(1/0),maxX=-(1/0),maxY=-(1/0),maxZ=-(1/0),i=0,l=array.length;l>i;i+=3){var x=array[i],y=array[i+1],z=array[i+2];minX>x&&(minX=x),minY>y&&(minY=y),minZ>z&&(minZ=z),x>maxX&&(maxX=x),y>maxY&&(maxY=y),z>maxZ&&(maxZ=z)}return this.min.set(minX,minY,minZ),this.max.set(maxX,maxY,maxZ),this},setFromBufferAttribute:function(attribute){for(var minX=+(1/0),minY=+(1/0),minZ=+(1/0),maxX=-(1/0),maxY=-(1/0),maxZ=-(1/0),i=0,l=attribute.count;l>i;i++){var x=attribute.getX(i),y=attribute.getY(i),z=attribute.getZ(i);minX>x&&(minX=x),minY>y&&(minY=y),minZ>z&&(minZ=z),x>maxX&&(maxX=x),y>maxY&&(maxY=y),z>maxZ&&(maxZ=z)}return this.min.set(minX,minY,minZ),this.max.set(maxX,maxY,maxZ),this},setFromPoints:function(points){this.makeEmpty();for(var i=0,il=points.length;il>i;i++)this.expandByPoint(points[i]);return this},setFromCenterAndSize:function(){var v1=new Vector3;return function(center,size){var halfSize=v1.copy(size).multiplyScalar(.5);return this.min.copy(center).sub(halfSize),this.max.copy(center).add(halfSize),this}}(),setFromObject:function(object){return this.makeEmpty(),this.expandByObject(object)},clone:function(){return(new this.constructor).copy(this)},copy:function(box){return this.min.copy(box.min),this.max.copy(box.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=+(1/0),this.max.x=this.max.y=this.max.z=-(1/0),this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(optionalTarget){var result=optionalTarget||new Vector3;return this.isEmpty()?result.set(0,0,0):result.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(optionalTarget){var result=optionalTarget||new Vector3;return this.isEmpty()?result.set(0,0,0):result.subVectors(this.max,this.min)},expandByPoint:function(point){return this.min.min(point),this.max.max(point),this},expandByVector:function(vector){return this.min.sub(vector),this.max.add(vector),this},expandByScalar:function(scalar){return this.min.addScalar(-scalar),this.max.addScalar(scalar),this},expandByObject:function(){var v1=new Vector3;return function(object){var scope=this;return object.updateMatrixWorld(!0),object.traverse(function(node){var i,l,geometry=node.geometry;if(void 0!==geometry)if(geometry.isGeometry){var vertices=geometry.vertices;for(i=0,l=vertices.length;l>i;i++)v1.copy(vertices[i]),v1.applyMatrix4(node.matrixWorld),scope.expandByPoint(v1)}else if(geometry.isBufferGeometry){var attribute=geometry.attributes.position;if(void 0!==attribute)for(i=0,l=attribute.count;l>i;i++)v1.fromBufferAttribute(attribute,i).applyMatrix4(node.matrixWorld),scope.expandByPoint(v1)}}),this}}(),containsPoint:function(point){return!(point.x<this.min.x||point.x>this.max.x||point.y<this.min.y||point.y>this.max.y||point.z<this.min.z||point.z>this.max.z)},containsBox:function(box){return this.min.x<=box.min.x&&box.max.x<=this.max.x&&this.min.y<=box.min.y&&box.max.y<=this.max.y&&this.min.z<=box.min.z&&box.max.z<=this.max.z},getParameter:function(point,optionalTarget){var result=optionalTarget||new Vector3;return result.set((point.x-this.min.x)/(this.max.x-this.min.x),(point.y-this.min.y)/(this.max.y-this.min.y),(point.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(box){return!(box.max.x<this.min.x||box.min.x>this.max.x||box.max.y<this.min.y||box.min.y>this.max.y||box.max.z<this.min.z||box.min.z>this.max.z)},intersectsSphere:function(){var closestPoint=new Vector3;return function(sphere){return this.clampPoint(sphere.center,closestPoint),closestPoint.distanceToSquared(sphere.center)<=sphere.radius*sphere.radius}}(),intersectsPlane:function(plane){var min,max;return plane.normal.x>0?(min=plane.normal.x*this.min.x,max=plane.normal.x*this.max.x):(min=plane.normal.x*this.max.x,max=plane.normal.x*this.min.x),plane.normal.y>0?(min+=plane.normal.y*this.min.y,max+=plane.normal.y*this.max.y):(min+=plane.normal.y*this.max.y,max+=plane.normal.y*this.min.y),plane.normal.z>0?(min+=plane.normal.z*this.min.z,max+=plane.normal.z*this.max.z):(min+=plane.normal.z*this.max.z,max+=plane.normal.z*this.min.z),min<=plane.constant&&max>=plane.constant},clampPoint:function(point,optionalTarget){var result=optionalTarget||new Vector3;return result.copy(point).clamp(this.min,this.max)},distanceToPoint:function(){var v1=new Vector3;return function(point){var clampedPoint=v1.copy(point).clamp(this.min,this.max);return clampedPoint.sub(point).length()}}(),getBoundingSphere:function(){var v1=new Vector3;return function(optionalTarget){var result=optionalTarget||new Sphere;return this.getCenter(result.center),result.radius=.5*this.getSize(v1).length(),result}}(),intersect:function(box){return this.min.max(box.min),this.max.min(box.max),this.isEmpty()&&this.makeEmpty(),this},union:function(box){return this.min.min(box.min),this.max.max(box.max),this},applyMatrix4:function(){var points=[new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3,new Vector3];return function(matrix){return this.isEmpty()?this:(points[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(matrix),points[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(matrix),points[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(matrix),points[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(matrix),points[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(matrix),points[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(matrix),points[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(matrix),points[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(matrix),this.setFromPoints(points),this)}}(),translate:function(offset){return this.min.add(offset),this.max.add(offset),this},equals:function(box){return box.min.equals(this.min)&&box.max.equals(this.max)}}),Object.assign(Sphere.prototype,{set:function(center,radius){return this.center.copy(center),this.radius=radius,this},setFromPoints:function(){var box=new Box3;return function(points,optionalCenter){var center=this.center;void 0!==optionalCenter?center.copy(optionalCenter):box.setFromPoints(points).getCenter(center);for(var maxRadiusSq=0,i=0,il=points.length;il>i;i++)maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(points[i]));return this.radius=Math.sqrt(maxRadiusSq),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(sphere){return this.center.copy(sphere.center),this.radius=sphere.radius,this},empty:function(){return this.radius<=0},containsPoint:function(point){return point.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(point){return point.distanceTo(this.center)-this.radius},intersectsSphere:function(sphere){var radiusSum=this.radius+sphere.radius;return sphere.center.distanceToSquared(this.center)<=radiusSum*radiusSum},intersectsBox:function(box){return box.intersectsSphere(this)},intersectsPlane:function(plane){return Math.abs(this.center.dot(plane.normal)-plane.constant)<=this.radius},clampPoint:function(point,optionalTarget){var deltaLengthSq=this.center.distanceToSquared(point),result=optionalTarget||new Vector3;return result.copy(point),deltaLengthSq>this.radius*this.radius&&(result.sub(this.center).normalize(),result.multiplyScalar(this.radius).add(this.center)),result},getBoundingBox:function(optionalTarget){var box=optionalTarget||new Box3;return box.set(this.center,this.center),box.expandByScalar(this.radius),box},applyMatrix4:function(matrix){return this.center.applyMatrix4(matrix),this.radius=this.radius*matrix.getMaxScaleOnAxis(),this},translate:function(offset){return this.center.add(offset),this},equals:function(sphere){return sphere.center.equals(this.center)&&sphere.radius===this.radius}}),Object.assign(Matrix3.prototype,{isMatrix3:!0,set:function(n11,n12,n13,n21,n22,n23,n31,n32,n33){var te=this.elements;return te[0]=n11,te[1]=n21,te[2]=n31,te[3]=n12,te[4]=n22,te[5]=n32,te[6]=n13,te[7]=n23,te[8]=n33,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(m){var te=this.elements,me=m.elements;return te[0]=me[0],te[1]=me[1],te[2]=me[2],te[3]=me[3],te[4]=me[4],te[5]=me[5],te[6]=me[6],te[7]=me[7],te[8]=me[8],this},setFromMatrix4:function(m){var me=m.elements;return this.set(me[0],me[4],me[8],me[1],me[5],me[9],me[2],me[6],me[10]),this},applyToBufferAttribute:function(){var v1=new Vector3;return function(attribute){for(var i=0,l=attribute.count;l>i;i++)v1.x=attribute.getX(i),v1.y=attribute.getY(i),v1.z=attribute.getZ(i),v1.applyMatrix3(this),attribute.setXYZ(i,v1.x,v1.y,v1.z);return attribute}}(),multiply:function(m){return this.multiplyMatrices(this,m)},premultiply:function(m){return this.multiplyMatrices(m,this)},multiplyMatrices:function(a,b){var ae=a.elements,be=b.elements,te=this.elements,a11=ae[0],a12=ae[3],a13=ae[6],a21=ae[1],a22=ae[4],a23=ae[7],a31=ae[2],a32=ae[5],a33=ae[8],b11=be[0],b12=be[3],b13=be[6],b21=be[1],b22=be[4],b23=be[7],b31=be[2],b32=be[5],b33=be[8];return te[0]=a11*b11+a12*b21+a13*b31,te[3]=a11*b12+a12*b22+a13*b32,te[6]=a11*b13+a12*b23+a13*b33,te[1]=a21*b11+a22*b21+a23*b31,te[4]=a21*b12+a22*b22+a23*b32,te[7]=a21*b13+a22*b23+a23*b33,te[2]=a31*b11+a32*b21+a33*b31,te[5]=a31*b12+a32*b22+a33*b32,te[8]=a31*b13+a32*b23+a33*b33,this},multiplyScalar:function(s){var te=this.elements;return te[0]*=s,te[3]*=s,te[6]*=s,te[1]*=s,te[4]*=s,te[7]*=s,te[2]*=s,te[5]*=s,te[8]*=s,this},determinant:function(){var te=this.elements,a=te[0],b=te[1],c=te[2],d=te[3],e=te[4],f=te[5],g=te[6],h=te[7],i=te[8];return a*e*i-a*f*h-b*d*i+b*f*g+c*d*h-c*e*g},getInverse:function(matrix,throwOnDegenerate){matrix&&matrix.isMatrix4&&console.error("THREE.Matrix3.getInverse no longer takes a Matrix4 argument.");var me=matrix.elements,te=this.elements,n11=me[0],n21=me[1],n31=me[2],n12=me[3],n22=me[4],n32=me[5],n13=me[6],n23=me[7],n33=me[8],t11=n33*n22-n32*n23,t12=n32*n13-n33*n12,t13=n23*n12-n22*n13,det=n11*t11+n21*t12+n31*t13;if(0===det){var msg="THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0";if(throwOnDegenerate===!0)throw new Error(msg);return console.warn(msg),this.identity()}var detInv=1/det;return te[0]=t11*detInv,te[1]=(n31*n23-n33*n21)*detInv,te[2]=(n32*n21-n31*n22)*detInv,te[3]=t12*detInv,te[4]=(n33*n11-n31*n13)*detInv,te[5]=(n31*n12-n32*n11)*detInv,te[6]=t13*detInv,te[7]=(n21*n13-n23*n11)*detInv,te[8]=(n22*n11-n21*n12)*detInv,this},transpose:function(){var tmp,m=this.elements;return tmp=m[1],m[1]=m[3],m[3]=tmp,tmp=m[2],m[2]=m[6],m[6]=tmp,tmp=m[5],m[5]=m[7],m[7]=tmp,this},getNormalMatrix:function(matrix4){return this.setFromMatrix4(matrix4).getInverse(this).transpose()},transposeIntoArray:function(r){var m=this.elements;return r[0]=m[0],r[1]=m[3],r[2]=m[6],r[3]=m[1],r[4]=m[4],r[5]=m[7],r[6]=m[2],r[7]=m[5],r[8]=m[8],this},equals:function(matrix){for(var te=this.elements,me=matrix.elements,i=0;9>i;i++)if(te[i]!==me[i])return!1;return!0},fromArray:function(array,offset){void 0===offset&&(offset=0);for(var i=0;9>i;i++)this.elements[i]=array[i+offset];return this},toArray:function(array,offset){void 0===array&&(array=[]),void 0===offset&&(offset=0);var te=this.elements;return array[offset]=te[0],array[offset+1]=te[1],array[offset+2]=te[2],array[offset+3]=te[3],array[offset+4]=te[4],array[offset+5]=te[5],array[offset+6]=te[6],array[offset+7]=te[7],array[offset+8]=te[8],array}}),Object.assign(Plane.prototype,{set:function(normal,constant){return this.normal.copy(normal),this.constant=constant,this},setComponents:function(x,y,z,w){return this.normal.set(x,y,z),this.constant=w,this},setFromNormalAndCoplanarPoint:function(normal,point){return this.normal.copy(normal),this.constant=-point.dot(this.normal),this},setFromCoplanarPoints:function(){var v1=new Vector3,v2=new Vector3;return function(a,b,c){var normal=v1.subVectors(c,b).cross(v2.subVectors(a,b)).normalize();return this.setFromNormalAndCoplanarPoint(normal,a),this}}(),clone:function(){return(new this.constructor).copy(this)},copy:function(plane){return this.normal.copy(plane.normal),this.constant=plane.constant,this},normalize:function(){var inverseNormalLength=1/this.normal.length();return this.normal.multiplyScalar(inverseNormalLength),this.constant*=inverseNormalLength,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(point){return this.normal.dot(point)+this.constant},distanceToSphere:function(sphere){return this.distanceToPoint(sphere.center)-sphere.radius},projectPoint:function(point,optionalTarget){return this.orthoPoint(point,optionalTarget).sub(point).negate()},orthoPoint:function(point,optionalTarget){var perpendicularMagnitude=this.distanceToPoint(point),result=optionalTarget||new Vector3;return result.copy(this.normal).multiplyScalar(perpendicularMagnitude)},intersectLine:function(){var v1=new Vector3;return function(line,optionalTarget){var result=optionalTarget||new Vector3,direction=line.delta(v1),denominator=this.normal.dot(direction);if(0!==denominator){var t=-(line.start.dot(this.normal)+this.constant)/denominator;if(!(0>t||t>1))return result.copy(direction).multiplyScalar(t).add(line.start)}else if(0===this.distanceToPoint(line.start))return result.copy(line.start)}}(),intersectsLine:function(line){var startSign=this.distanceToPoint(line.start),endSign=this.distanceToPoint(line.end);return 0>startSign&&endSign>0||0>endSign&&startSign>0},intersectsBox:function(box){return box.intersectsPlane(this)},intersectsSphere:function(sphere){return sphere.intersectsPlane(this)},coplanarPoint:function(optionalTarget){var result=optionalTarget||new Vector3;return result.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var v1=new Vector3,m1=new Matrix3;return function(matrix,optionalNormalMatrix){var referencePoint=this.coplanarPoint(v1).applyMatrix4(matrix),normalMatrix=optionalNormalMatrix||m1.getNormalMatrix(matrix),normal=this.normal.applyMatrix3(normalMatrix).normalize();return this.constant=-referencePoint.dot(normal),this}}(),translate:function(offset){return this.constant=this.constant-offset.dot(this.normal),this},equals:function(plane){return plane.normal.equals(this.normal)&&plane.constant===this.constant}}),Object.assign(Frustum.prototype,{set:function(p0,p1,p2,p3,p4,p5){var planes=this.planes;return planes[0].copy(p0),planes[1].copy(p1),planes[2].copy(p2),planes[3].copy(p3),planes[4].copy(p4),planes[5].copy(p5),this},clone:function(){return(new this.constructor).copy(this)},copy:function(frustum){for(var planes=this.planes,i=0;6>i;i++)planes[i].copy(frustum.planes[i]);return this},setFromMatrix:function(m){var planes=this.planes,me=m.elements,me0=me[0],me1=me[1],me2=me[2],me3=me[3],me4=me[4],me5=me[5],me6=me[6],me7=me[7],me8=me[8],me9=me[9],me10=me[10],me11=me[11],me12=me[12],me13=me[13],me14=me[14],me15=me[15];return planes[0].setComponents(me3-me0,me7-me4,me11-me8,me15-me12).normalize(),planes[1].setComponents(me3+me0,me7+me4,me11+me8,me15+me12).normalize(),planes[2].setComponents(me3+me1,me7+me5,me11+me9,me15+me13).normalize(),planes[3].setComponents(me3-me1,me7-me5,me11-me9,me15-me13).normalize(),planes[4].setComponents(me3-me2,me7-me6,me11-me10,me15-me14).normalize(),planes[5].setComponents(me3+me2,me7+me6,me11+me10,me15+me14).normalize(),this},intersectsObject:function(){var sphere=new Sphere;return function(object){var geometry=object.geometry;return null===geometry.boundingSphere&&geometry.computeBoundingSphere(),
sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld),this.intersectsSphere(sphere)}}(),intersectsSprite:function(){var sphere=new Sphere;return function(sprite){return sphere.center.set(0,0,0),sphere.radius=.7071067811865476,sphere.applyMatrix4(sprite.matrixWorld),this.intersectsSphere(sphere)}}(),intersectsSphere:function(sphere){for(var planes=this.planes,center=sphere.center,negRadius=-sphere.radius,i=0;6>i;i++){var distance=planes[i].distanceToPoint(center);if(negRadius>distance)return!1}return!0},intersectsBox:function(){var p1=new Vector3,p2=new Vector3;return function(box){for(var planes=this.planes,i=0;6>i;i++){var plane=planes[i];p1.x=plane.normal.x>0?box.min.x:box.max.x,p2.x=plane.normal.x>0?box.max.x:box.min.x,p1.y=plane.normal.y>0?box.min.y:box.max.y,p2.y=plane.normal.y>0?box.max.y:box.min.y,p1.z=plane.normal.z>0?box.min.z:box.max.z,p2.z=plane.normal.z>0?box.max.z:box.min.z;var d1=plane.distanceToPoint(p1),d2=plane.distanceToPoint(p2);if(0>d1&&0>d2)return!1}return!0}}(),containsPoint:function(point){for(var planes=this.planes,i=0;6>i;i++)if(planes[i].distanceToPoint(point)<0)return!1;return!0}}),Euler.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],Euler.DefaultOrder="XYZ",Object.defineProperties(Euler.prototype,{x:{get:function(){return this._x},set:function(value){this._x=value,this.onChangeCallback()}},y:{get:function(){return this._y},set:function(value){this._y=value,this.onChangeCallback()}},z:{get:function(){return this._z},set:function(value){this._z=value,this.onChangeCallback()}},order:{get:function(){return this._order},set:function(value){this._order=value,this.onChangeCallback()}}}),Object.assign(Euler.prototype,{isEuler:!0,set:function(x,y,z,order){return this._x=x,this._y=y,this._z=z,this._order=order||this._order,this.onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(euler){return this._x=euler._x,this._y=euler._y,this._z=euler._z,this._order=euler._order,this.onChangeCallback(),this},setFromRotationMatrix:function(m,order,update){var clamp=_Math.clamp,te=m.elements,m11=te[0],m12=te[4],m13=te[8],m21=te[1],m22=te[5],m23=te[9],m31=te[2],m32=te[6],m33=te[10];return order=order||this._order,"XYZ"===order?(this._y=Math.asin(clamp(m13,-1,1)),Math.abs(m13)<.99999?(this._x=Math.atan2(-m23,m33),this._z=Math.atan2(-m12,m11)):(this._x=Math.atan2(m32,m22),this._z=0)):"YXZ"===order?(this._x=Math.asin(-clamp(m23,-1,1)),Math.abs(m23)<.99999?(this._y=Math.atan2(m13,m33),this._z=Math.atan2(m21,m22)):(this._y=Math.atan2(-m31,m11),this._z=0)):"ZXY"===order?(this._x=Math.asin(clamp(m32,-1,1)),Math.abs(m32)<.99999?(this._y=Math.atan2(-m31,m33),this._z=Math.atan2(-m12,m22)):(this._y=0,this._z=Math.atan2(m21,m11))):"ZYX"===order?(this._y=Math.asin(-clamp(m31,-1,1)),Math.abs(m31)<.99999?(this._x=Math.atan2(m32,m33),this._z=Math.atan2(m21,m11)):(this._x=0,this._z=Math.atan2(-m12,m22))):"YZX"===order?(this._z=Math.asin(clamp(m21,-1,1)),Math.abs(m21)<.99999?(this._x=Math.atan2(-m23,m22),this._y=Math.atan2(-m31,m11)):(this._x=0,this._y=Math.atan2(m13,m33))):"XZY"===order?(this._z=Math.asin(-clamp(m12,-1,1)),Math.abs(m12)<.99999?(this._x=Math.atan2(m32,m22),this._y=Math.atan2(m13,m11)):(this._x=Math.atan2(-m23,m33),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+order),this._order=order,update!==!1&&this.onChangeCallback(),this},setFromQuaternion:function(){var matrix=new Matrix4;return function(q,order,update){return matrix.makeRotationFromQuaternion(q),this.setFromRotationMatrix(matrix,order,update)}}(),setFromVector3:function(v,order){return this.set(v.x,v.y,v.z,order||this._order)},reorder:function(){var q=new Quaternion;return function(newOrder){return q.setFromEuler(this),this.setFromQuaternion(q,newOrder)}}(),equals:function(euler){return euler._x===this._x&&euler._y===this._y&&euler._z===this._z&&euler._order===this._order},fromArray:function(array){return this._x=array[0],this._y=array[1],this._z=array[2],void 0!==array[3]&&(this._order=array[3]),this.onChangeCallback(),this},toArray:function(array,offset){return void 0===array&&(array=[]),void 0===offset&&(offset=0),array[offset]=this._x,array[offset+1]=this._y,array[offset+2]=this._z,array[offset+3]=this._order,array},toVector3:function(optionalResult){return optionalResult?optionalResult.set(this._x,this._y,this._z):new Vector3(this._x,this._y,this._z)},onChange:function(callback){return this.onChangeCallback=callback,this},onChangeCallback:function(){}}),Object.assign(Layers.prototype,{set:function(channel){this.mask=1<<channel|0},enable:function(channel){this.mask|=1<<channel|0},toggle:function(channel){this.mask^=1<<channel|0},disable:function(channel){this.mask&=~(1<<channel|0)},test:function(layers){return 0!==(this.mask&layers.mask)}});var object3DId=0;Object3D.DefaultUp=new Vector3(0,1,0),Object3D.DefaultMatrixAutoUpdate=!0,Object.assign(Object3D.prototype,EventDispatcher.prototype,{isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix:function(matrix){this.matrix.multiplyMatrices(matrix,this.matrix),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(q){return this.quaternion.premultiply(q),this},setRotationFromAxisAngle:function(axis,angle){this.quaternion.setFromAxisAngle(axis,angle)},setRotationFromEuler:function(euler){this.quaternion.setFromEuler(euler,!0)},setRotationFromMatrix:function(m){this.quaternion.setFromRotationMatrix(m)},setRotationFromQuaternion:function(q){this.quaternion.copy(q)},rotateOnAxis:function(){var q1=new Quaternion;return function(axis,angle){return q1.setFromAxisAngle(axis,angle),this.quaternion.multiply(q1),this}}(),rotateX:function(){var v1=new Vector3(1,0,0);return function(angle){return this.rotateOnAxis(v1,angle)}}(),rotateY:function(){var v1=new Vector3(0,1,0);return function(angle){return this.rotateOnAxis(v1,angle)}}(),rotateZ:function(){var v1=new Vector3(0,0,1);return function(angle){return this.rotateOnAxis(v1,angle)}}(),translateOnAxis:function(){var v1=new Vector3;return function(axis,distance){return v1.copy(axis).applyQuaternion(this.quaternion),this.position.add(v1.multiplyScalar(distance)),this}}(),translateX:function(){var v1=new Vector3(1,0,0);return function(distance){return this.translateOnAxis(v1,distance)}}(),translateY:function(){var v1=new Vector3(0,1,0);return function(distance){return this.translateOnAxis(v1,distance)}}(),translateZ:function(){var v1=new Vector3(0,0,1);return function(distance){return this.translateOnAxis(v1,distance)}}(),localToWorld:function(vector){return vector.applyMatrix4(this.matrixWorld)},worldToLocal:function(){var m1=new Matrix4;return function(vector){return vector.applyMatrix4(m1.getInverse(this.matrixWorld))}}(),lookAt:function(){var m1=new Matrix4;return function(vector){this.isCamera?m1.lookAt(this.position,vector,this.up):m1.lookAt(vector,this.position,this.up),this.quaternion.setFromRotationMatrix(m1)}}(),add:function(object){if(arguments.length>1){for(var i=0;i<arguments.length;i++)this.add(arguments[i]);return this}return object===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",object),this):(object&&object.isObject3D?(null!==object.parent&&object.parent.remove(object),object.parent=this,object.dispatchEvent({type:"added"}),this.children.push(object)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",object),this)},remove:function(object){if(arguments.length>1){for(var i=0;i<arguments.length;i++)this.remove(arguments[i]);return this}var index=this.children.indexOf(object);return-1!==index&&(object.parent=null,object.dispatchEvent({type:"removed"}),this.children.splice(index,1)),this},getObjectById:function(id){return this.getObjectByProperty("id",id)},getObjectByName:function(name){return this.getObjectByProperty("name",name)},getObjectByProperty:function(name,value){if(this[name]===value)return this;for(var i=0,l=this.children.length;l>i;i++){var child=this.children[i],object=child.getObjectByProperty(name,value);if(void 0!==object)return object}},getWorldPosition:function(optionalTarget){var result=optionalTarget||new Vector3;return this.updateMatrixWorld(!0),result.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(){var position=new Vector3,scale=new Vector3;return function(optionalTarget){var result=optionalTarget||new Quaternion;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(position,result,scale),result}}(),getWorldRotation:function(){var quaternion=new Quaternion;return function(optionalTarget){var result=optionalTarget||new Euler;return this.getWorldQuaternion(quaternion),result.setFromQuaternion(quaternion,this.rotation.order,!1)}}(),getWorldScale:function(){var position=new Vector3,quaternion=new Quaternion;return function(optionalTarget){var result=optionalTarget||new Vector3;return this.updateMatrixWorld(!0),this.matrixWorld.decompose(position,quaternion,result),result}}(),getWorldDirection:function(){var quaternion=new Quaternion;return function(optionalTarget){var result=optionalTarget||new Vector3;return this.getWorldQuaternion(quaternion),result.set(0,0,1).applyQuaternion(quaternion)}}(),raycast:function(){},traverse:function(callback){callback(this);for(var children=this.children,i=0,l=children.length;l>i;i++)children[i].traverse(callback)},traverseVisible:function(callback){if(this.visible!==!1){callback(this);for(var children=this.children,i=0,l=children.length;l>i;i++)children[i].traverseVisible(callback)}},traverseAncestors:function(callback){var parent=this.parent;null!==parent&&(callback(parent),parent.traverseAncestors(callback))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(force){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||force)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,force=!0);for(var children=this.children,i=0,l=children.length;l>i;i++)children[i].updateMatrixWorld(force)},toJSON:function(meta){function serialize(library,element){return void 0===library[element.uuid]&&(library[element.uuid]=element.toJSON(meta)),element.uuid}function extractFromCache(cache){var values=[];for(var key in cache){var data=cache[key];delete data.metadata,values.push(data)}return values}var isRootObject=void 0===meta||""===meta,output={};isRootObject&&(meta={geometries:{},materials:{},textures:{},images:{}},output.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var object={};if(object.uuid=this.uuid,object.type=this.type,""!==this.name&&(object.name=this.name),"{}"!==JSON.stringify(this.userData)&&(object.userData=this.userData),this.castShadow===!0&&(object.castShadow=!0),this.receiveShadow===!0&&(object.receiveShadow=!0),this.visible===!1&&(object.visible=!1),object.matrix=this.matrix.toArray(),void 0!==this.geometry&&(object.geometry=serialize(meta.geometries,this.geometry)),void 0!==this.material)if(Array.isArray(this.material)){for(var uuids=[],i=0,l=this.material.length;l>i;i++)uuids.push(serialize(meta.materials,this.material[i]));object.material=uuids}else object.material=serialize(meta.materials,this.material);if(this.children.length>0){object.children=[];for(var i=0;i<this.children.length;i++)object.children.push(this.children[i].toJSON(meta).object)}if(isRootObject){var geometries=extractFromCache(meta.geometries),materials=extractFromCache(meta.materials),textures=extractFromCache(meta.textures),images=extractFromCache(meta.images);geometries.length>0&&(output.geometries=geometries),materials.length>0&&(output.materials=materials),textures.length>0&&(output.textures=textures),images.length>0&&(output.images=images)}return output.object=object,output},clone:function(recursive){return(new this.constructor).copy(this,recursive)},copy:function(source,recursive){if(void 0===recursive&&(recursive=!0),this.name=source.name,this.up.copy(source.up),this.position.copy(source.position),this.quaternion.copy(source.quaternion),this.scale.copy(source.scale),this.matrix.copy(source.matrix),this.matrixWorld.copy(source.matrixWorld),this.matrixAutoUpdate=source.matrixAutoUpdate,this.matrixWorldNeedsUpdate=source.matrixWorldNeedsUpdate,this.layers.mask=source.layers.mask,this.visible=source.visible,this.castShadow=source.castShadow,this.receiveShadow=source.receiveShadow,this.frustumCulled=source.frustumCulled,this.renderOrder=source.renderOrder,this.userData=JSON.parse(JSON.stringify(source.userData)),recursive===!0)for(var i=0;i<source.children.length;i++){var child=source.children[i];this.add(child.clone())}return this}}),Camera.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Camera,isCamera:!0,copy:function(source,recursive){return Object3D.prototype.copy.call(this,source,recursive),this.matrixWorldInverse.copy(source.matrixWorldInverse),this.projectionMatrix.copy(source.projectionMatrix),this},getWorldDirection:function(){var quaternion=new Quaternion;return function(optionalTarget){var result=optionalTarget||new Vector3;return this.getWorldQuaternion(quaternion),result.set(0,0,-1).applyQuaternion(quaternion)}}(),updateMatrixWorld:function(force){Object3D.prototype.updateMatrixWorld.call(this,force),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),OrthographicCamera.prototype=Object.assign(Object.create(Camera.prototype),{constructor:OrthographicCamera,isOrthographicCamera:!0,copy:function(source,recursive){return Camera.prototype.copy.call(this,source,recursive),this.left=source.left,this.right=source.right,this.top=source.top,this.bottom=source.bottom,this.near=source.near,this.far=source.far,this.zoom=source.zoom,this.view=null===source.view?null:Object.assign({},source.view),this},setViewOffset:function(fullWidth,fullHeight,x,y,width,height){this.view={fullWidth:fullWidth,fullHeight:fullHeight,offsetX:x,offsetY:y,width:width,height:height},this.updateProjectionMatrix()},clearViewOffset:function(){this.view=null,this.updateProjectionMatrix()},updateProjectionMatrix:function(){var dx=(this.right-this.left)/(2*this.zoom),dy=(this.top-this.bottom)/(2*this.zoom),cx=(this.right+this.left)/2,cy=(this.top+this.bottom)/2,left=cx-dx,right=cx+dx,top=cy+dy,bottom=cy-dy;if(null!==this.view){var zoomW=this.zoom/(this.view.width/this.view.fullWidth),zoomH=this.zoom/(this.view.height/this.view.fullHeight),scaleW=(this.right-this.left)/this.view.width,scaleH=(this.top-this.bottom)/this.view.height;left+=scaleW*(this.view.offsetX/zoomW),right=left+scaleW*(this.view.width/zoomW),top-=scaleH*(this.view.offsetY/zoomH),bottom=top-scaleH*(this.view.height/zoomH)}this.projectionMatrix.makeOrthographic(left,right,top,bottom,this.near,this.far)},toJSON:function(meta){var data=Object3D.prototype.toJSON.call(this,meta);return data.object.zoom=this.zoom,data.object.left=this.left,data.object.right=this.right,data.object.top=this.top,data.object.bottom=this.bottom,data.object.near=this.near,data.object.far=this.far,null!==this.view&&(data.object.view=Object.assign({},this.view)),data}}),PerspectiveCamera.prototype=Object.assign(Object.create(Camera.prototype),{constructor:PerspectiveCamera,isPerspectiveCamera:!0,copy:function(source,recursive){return Camera.prototype.copy.call(this,source,recursive),this.fov=source.fov,this.zoom=source.zoom,this.near=source.near,this.far=source.far,this.focus=source.focus,this.aspect=source.aspect,this.view=null===source.view?null:Object.assign({},source.view),this.filmGauge=source.filmGauge,this.filmOffset=source.filmOffset,this},setFocalLength:function(focalLength){var vExtentSlope=.5*this.getFilmHeight()/focalLength;this.fov=2*_Math.RAD2DEG*Math.atan(vExtentSlope),this.updateProjectionMatrix()},getFocalLength:function(){var vExtentSlope=Math.tan(.5*_Math.DEG2RAD*this.fov);return.5*this.getFilmHeight()/vExtentSlope},getEffectiveFOV:function(){return 2*_Math.RAD2DEG*Math.atan(Math.tan(.5*_Math.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(fullWidth,fullHeight,x,y,width,height){this.aspect=fullWidth/fullHeight,this.view={fullWidth:fullWidth,fullHeight:fullHeight,offsetX:x,offsetY:y,width:width,height:height},this.updateProjectionMatrix()},clearViewOffset:function(){this.view=null,this.updateProjectionMatrix()},updateProjectionMatrix:function(){var near=this.near,top=near*Math.tan(.5*_Math.DEG2RAD*this.fov)/this.zoom,height=2*top,width=this.aspect*height,left=-.5*width,view=this.view;if(null!==view){var fullWidth=view.fullWidth,fullHeight=view.fullHeight;left+=view.offsetX*width/fullWidth,top-=view.offsetY*height/fullHeight,width*=view.width/fullWidth,height*=view.height/fullHeight}var skew=this.filmOffset;0!==skew&&(left+=near*skew/this.getFilmWidth()),this.projectionMatrix.makePerspective(left,left+width,top,top-height,near,this.far)},toJSON:function(meta){var data=Object3D.prototype.toJSON.call(this,meta);return data.object.fov=this.fov,data.object.zoom=this.zoom,data.object.near=this.near,data.object.far=this.far,data.object.focus=this.focus,data.object.aspect=this.aspect,null!==this.view&&(data.object.view=Object.assign({},this.view)),data.object.filmGauge=this.filmGauge,data.object.filmOffset=this.filmOffset,data}}),Object.assign(Face3.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(source){this.a=source.a,this.b=source.b,this.c=source.c,this.normal.copy(source.normal),this.color.copy(source.color),this.materialIndex=source.materialIndex;for(var i=0,il=source.vertexNormals.length;il>i;i++)this.vertexNormals[i]=source.vertexNormals[i].clone();for(var i=0,il=source.vertexColors.length;il>i;i++)this.vertexColors[i]=source.vertexColors[i].clone();return this}});var count=0;Object.assign(Geometry.prototype,EventDispatcher.prototype,{isGeometry:!0,applyMatrix:function(matrix){for(var normalMatrix=(new Matrix3).getNormalMatrix(matrix),i=0,il=this.vertices.length;il>i;i++){var vertex=this.vertices[i];vertex.applyMatrix4(matrix)}for(var i=0,il=this.faces.length;il>i;i++){var face=this.faces[i];face.normal.applyMatrix3(normalMatrix).normalize();for(var j=0,jl=face.vertexNormals.length;jl>j;j++)face.vertexNormals[j].applyMatrix3(normalMatrix).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(){var m1=new Matrix4;return function(angle){return m1.makeRotationX(angle),this.applyMatrix(m1),this}}(),rotateY:function(){var m1=new Matrix4;return function(angle){return m1.makeRotationY(angle),this.applyMatrix(m1),this}}(),rotateZ:function(){var m1=new Matrix4;return function(angle){return m1.makeRotationZ(angle),this.applyMatrix(m1),this}}(),translate:function(){var m1=new Matrix4;return function(x,y,z){return m1.makeTranslation(x,y,z),this.applyMatrix(m1),this}}(),scale:function(){var m1=new Matrix4;return function(x,y,z){return m1.makeScale(x,y,z),this.applyMatrix(m1),this}}(),lookAt:function(){var obj=new Object3D;return function(vector){obj.lookAt(vector),obj.updateMatrix(),this.applyMatrix(obj.matrix)}}(),fromBufferGeometry:function(geometry){function addFace(a,b,c,materialIndex){var vertexNormals=void 0!==normals?[tempNormals[a].clone(),tempNormals[b].clone(),tempNormals[c].clone()]:[],vertexColors=void 0!==colors?[scope.colors[a].clone(),scope.colors[b].clone(),scope.colors[c].clone()]:[],face=new Face3(a,b,c,vertexNormals,vertexColors,materialIndex);scope.faces.push(face),void 0!==uvs&&scope.faceVertexUvs[0].push([tempUVs[a].clone(),tempUVs[b].clone(),tempUVs[c].clone()]),void 0!==uvs2&&scope.faceVertexUvs[1].push([tempUVs2[a].clone(),tempUVs2[b].clone(),tempUVs2[c].clone()])}var scope=this,indices=null!==geometry.index?geometry.index.array:void 0,attributes=geometry.attributes,positions=attributes.position.array,normals=void 0!==attributes.normal?attributes.normal.array:void 0,colors=void 0!==attributes.color?attributes.color.array:void 0,uvs=void 0!==attributes.uv?attributes.uv.array:void 0,uvs2=void 0!==attributes.uv2?attributes.uv2.array:void 0;void 0!==uvs2&&(this.faceVertexUvs[1]=[]);for(var tempNormals=[],tempUVs=[],tempUVs2=[],i=0,j=0;i<positions.length;i+=3,j+=2)scope.vertices.push(new Vector3(positions[i],positions[i+1],positions[i+2])),void 0!==normals&&tempNormals.push(new Vector3(normals[i],normals[i+1],normals[i+2])),void 0!==colors&&scope.colors.push(new Color(colors[i],colors[i+1],colors[i+2])),void 0!==uvs&&tempUVs.push(new Vector2(uvs[j],uvs[j+1])),void 0!==uvs2&&tempUVs2.push(new Vector2(uvs2[j],uvs2[j+1]));var groups=geometry.groups;if(groups.length>0)for(var i=0;i<groups.length;i++)for(var group=groups[i],start=group.start,count=group.count,j=start,jl=start+count;jl>j;j+=3)void 0!==indices?addFace(indices[j],indices[j+1],indices[j+2],group.materialIndex):addFace(j,j+1,j+2,group.materialIndex);else if(void 0!==indices)for(var i=0;i<indices.length;i+=3)addFace(indices[i],indices[i+1],indices[i+2]);else for(var i=0;i<positions.length/3;i+=3)addFace(i,i+1,i+2);return this.computeFaceNormals(),null!==geometry.boundingBox&&(this.boundingBox=geometry.boundingBox.clone()),null!==geometry.boundingSphere&&(this.boundingSphere=geometry.boundingSphere.clone()),this},center:function(){this.computeBoundingBox();var offset=this.boundingBox.getCenter().negate();return this.translate(offset.x,offset.y,offset.z),offset},normalize:function(){this.computeBoundingSphere();var center=this.boundingSphere.center,radius=this.boundingSphere.radius,s=0===radius?1:1/radius,matrix=new Matrix4;return matrix.set(s,0,0,-s*center.x,0,s,0,-s*center.y,0,0,s,-s*center.z,0,0,0,1),this.applyMatrix(matrix),this},computeFaceNormals:function(){for(var cb=new Vector3,ab=new Vector3,f=0,fl=this.faces.length;fl>f;f++){var face=this.faces[f],vA=this.vertices[face.a],vB=this.vertices[face.b],vC=this.vertices[face.c];cb.subVectors(vC,vB),ab.subVectors(vA,vB),cb.cross(ab),cb.normalize(),face.normal.copy(cb)}},computeVertexNormals:function(areaWeighted){void 0===areaWeighted&&(areaWeighted=!0);var v,vl,f,fl,face,vertices;for(vertices=new Array(this.vertices.length),v=0,vl=this.vertices.length;vl>v;v++)vertices[v]=new Vector3;if(areaWeighted){var vA,vB,vC,cb=new Vector3,ab=new Vector3;for(f=0,fl=this.faces.length;fl>f;f++)face=this.faces[f],vA=this.vertices[face.a],vB=this.vertices[face.b],vC=this.vertices[face.c],cb.subVectors(vC,vB),ab.subVectors(vA,vB),cb.cross(ab),vertices[face.a].add(cb),vertices[face.b].add(cb),vertices[face.c].add(cb)}else for(this.computeFaceNormals(),f=0,fl=this.faces.length;fl>f;f++)face=this.faces[f],vertices[face.a].add(face.normal),vertices[face.b].add(face.normal),vertices[face.c].add(face.normal);for(v=0,vl=this.vertices.length;vl>v;v++)vertices[v].normalize();for(f=0,fl=this.faces.length;fl>f;f++){face=this.faces[f];var vertexNormals=face.vertexNormals;3===vertexNormals.length?(vertexNormals[0].copy(vertices[face.a]),vertexNormals[1].copy(vertices[face.b]),vertexNormals[2].copy(vertices[face.c])):(vertexNormals[0]=vertices[face.a].clone(),vertexNormals[1]=vertices[face.b].clone(),vertexNormals[2]=vertices[face.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var f,fl,face;for(this.computeFaceNormals(),f=0,fl=this.faces.length;fl>f;f++){face=this.faces[f];var vertexNormals=face.vertexNormals;3===vertexNormals.length?(vertexNormals[0].copy(face.normal),vertexNormals[1].copy(face.normal),vertexNormals[2].copy(face.normal)):(vertexNormals[0]=face.normal.clone(),vertexNormals[1]=face.normal.clone(),vertexNormals[2]=face.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var i,il,f,fl,face;for(f=0,fl=this.faces.length;fl>f;f++)for(face=this.faces[f],face.__originalFaceNormal?face.__originalFaceNormal.copy(face.normal):face.__originalFaceNormal=face.normal.clone(),face.__originalVertexNormals||(face.__originalVertexNormals=[]),i=0,il=face.vertexNormals.length;il>i;i++)face.__originalVertexNormals[i]?face.__originalVertexNormals[i].copy(face.vertexNormals[i]):face.__originalVertexNormals[i]=face.vertexNormals[i].clone();var tmpGeo=new Geometry;for(tmpGeo.faces=this.faces,i=0,il=this.morphTargets.length;il>i;i++){if(!this.morphNormals[i]){this.morphNormals[i]={},this.morphNormals[i].faceNormals=[],this.morphNormals[i].vertexNormals=[];var faceNormal,vertexNormals,dstNormalsFace=this.morphNormals[i].faceNormals,dstNormalsVertex=this.morphNormals[i].vertexNormals;for(f=0,fl=this.faces.length;fl>f;f++)faceNormal=new Vector3,vertexNormals={a:new Vector3,b:new Vector3,c:new Vector3},dstNormalsFace.push(faceNormal),dstNormalsVertex.push(vertexNormals)}var morphNormals=this.morphNormals[i];tmpGeo.vertices=this.morphTargets[i].vertices,tmpGeo.computeFaceNormals(),tmpGeo.computeVertexNormals();var faceNormal,vertexNormals;for(f=0,fl=this.faces.length;fl>f;f++)face=this.faces[f],faceNormal=morphNormals.faceNormals[f],vertexNormals=morphNormals.vertexNormals[f],faceNormal.copy(face.normal),vertexNormals.a.copy(face.vertexNormals[0]),vertexNormals.b.copy(face.vertexNormals[1]),vertexNormals.c.copy(face.vertexNormals[2])}for(f=0,fl=this.faces.length;fl>f;f++)face=this.faces[f],face.normal=face.__originalFaceNormal,face.vertexNormals=face.__originalVertexNormals},computeLineDistances:function(){for(var d=0,vertices=this.vertices,i=0,il=vertices.length;il>i;i++)i>0&&(d+=vertices[i].distanceTo(vertices[i-1])),this.lineDistances[i]=d},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Box3),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new Sphere),this.boundingSphere.setFromPoints(this.vertices)},merge:function(geometry,matrix,materialIndexOffset){if(!geometry||!geometry.isGeometry)return void console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",geometry);var normalMatrix,vertexOffset=this.vertices.length,vertices1=this.vertices,vertices2=geometry.vertices,faces1=this.faces,faces2=geometry.faces,uvs1=this.faceVertexUvs[0],uvs2=geometry.faceVertexUvs[0],colors1=this.colors,colors2=geometry.colors;void 0===materialIndexOffset&&(materialIndexOffset=0),void 0!==matrix&&(normalMatrix=(new Matrix3).getNormalMatrix(matrix));for(var i=0,il=vertices2.length;il>i;i++){var vertex=vertices2[i],vertexCopy=vertex.clone();void 0!==matrix&&vertexCopy.applyMatrix4(matrix),vertices1.push(vertexCopy)}for(var i=0,il=colors2.length;il>i;i++)colors1.push(colors2[i].clone());for(i=0,il=faces2.length;il>i;i++){var faceCopy,normal,color,face=faces2[i],faceVertexNormals=face.vertexNormals,faceVertexColors=face.vertexColors;faceCopy=new Face3(face.a+vertexOffset,face.b+vertexOffset,face.c+vertexOffset),faceCopy.normal.copy(face.normal),void 0!==normalMatrix&&faceCopy.normal.applyMatrix3(normalMatrix).normalize();for(var j=0,jl=faceVertexNormals.length;jl>j;j++)normal=faceVertexNormals[j].clone(),void 0!==normalMatrix&&normal.applyMatrix3(normalMatrix).normalize(),faceCopy.vertexNormals.push(normal);faceCopy.color.copy(face.color);for(var j=0,jl=faceVertexColors.length;jl>j;j++)color=faceVertexColors[j],faceCopy.vertexColors.push(color.clone());faceCopy.materialIndex=face.materialIndex+materialIndexOffset,faces1.push(faceCopy)}for(i=0,il=uvs2.length;il>i;i++){var uv=uvs2[i],uvCopy=[];if(void 0!==uv){for(var j=0,jl=uv.length;jl>j;j++)uvCopy.push(uv[j].clone());uvs1.push(uvCopy)}}},mergeMesh:function(mesh){return mesh&&mesh.isMesh?(mesh.matrixAutoUpdate&&mesh.updateMatrix(),void this.merge(mesh.geometry,mesh.matrix)):void console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",mesh)},mergeVertices:function(){var v,key,i,il,face,indices,j,jl,verticesMap={},unique=[],changes=[],precisionPoints=4,precision=Math.pow(10,precisionPoints);for(i=0,il=this.vertices.length;il>i;i++)v=this.vertices[i],key=Math.round(v.x*precision)+"_"+Math.round(v.y*precision)+"_"+Math.round(v.z*precision),void 0===verticesMap[key]?(verticesMap[key]=i,unique.push(this.vertices[i]),changes[i]=unique.length-1):changes[i]=changes[verticesMap[key]];var faceIndicesToRemove=[];for(i=0,il=this.faces.length;il>i;i++){face=this.faces[i],face.a=changes[face.a],face.b=changes[face.b],face.c=changes[face.c],indices=[face.a,face.b,face.c];for(var n=0;3>n;n++)if(indices[n]===indices[(n+1)%3]){faceIndicesToRemove.push(i);break}}for(i=faceIndicesToRemove.length-1;i>=0;i--){var idx=faceIndicesToRemove[i];for(this.faces.splice(idx,1),j=0,jl=this.faceVertexUvs.length;jl>j;j++)this.faceVertexUvs[j].splice(idx,1)}var diff=this.vertices.length-unique.length;return this.vertices=unique,diff},sortFacesByMaterialIndex:function(){function materialIndexSort(a,b){return a.materialIndex-b.materialIndex}for(var faces=this.faces,length=faces.length,i=0;length>i;i++)faces[i]._id=i;faces.sort(materialIndexSort);var newUvs1,newUvs2,uvs1=this.faceVertexUvs[0],uvs2=this.faceVertexUvs[1];uvs1&&uvs1.length===length&&(newUvs1=[]),uvs2&&uvs2.length===length&&(newUvs2=[]);for(var i=0;length>i;i++){var id=faces[i]._id;newUvs1&&newUvs1.push(uvs1[id]),newUvs2&&newUvs2.push(uvs2[id])}newUvs1&&(this.faceVertexUvs[0]=newUvs1),newUvs2&&(this.faceVertexUvs[1]=newUvs2)},toJSON:function(){function setBit(value,position,enabled){return enabled?value|1<<position:value&~(1<<position)}function getNormalIndex(normal){var hash=normal.x.toString()+normal.y.toString()+normal.z.toString();return void 0!==normalsHash[hash]?normalsHash[hash]:(normalsHash[hash]=normals.length/3,normals.push(normal.x,normal.y,normal.z),normalsHash[hash])}function getColorIndex(color){var hash=color.r.toString()+color.g.toString()+color.b.toString();return void 0!==colorsHash[hash]?colorsHash[hash]:(colorsHash[hash]=colors.length,colors.push(color.getHex()),colorsHash[hash])}function getUvIndex(uv){var hash=uv.x.toString()+uv.y.toString();return void 0!==uvsHash[hash]?uvsHash[hash]:(uvsHash[hash]=uvs.length/2,uvs.push(uv.x,uv.y),uvsHash[hash])}var data={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(data.uuid=this.uuid,data.type=this.type,""!==this.name&&(data.name=this.name),void 0!==this.parameters){var parameters=this.parameters;for(var key in parameters)void 0!==parameters[key]&&(data[key]=parameters[key]);return data}for(var vertices=[],i=0;i<this.vertices.length;i++){var vertex=this.vertices[i];vertices.push(vertex.x,vertex.y,vertex.z)}for(var faces=[],normals=[],normalsHash={},colors=[],colorsHash={},uvs=[],uvsHash={},i=0;i<this.faces.length;i++){var face=this.faces[i],hasMaterial=!0,hasFaceUv=!1,hasFaceVertexUv=void 0!==this.faceVertexUvs[0][i],hasFaceNormal=face.normal.length()>0,hasFaceVertexNormal=face.vertexNormals.length>0,hasFaceColor=1!==face.color.r||1!==face.color.g||1!==face.color.b,hasFaceVertexColor=face.vertexColors.length>0,faceType=0;if(faceType=setBit(faceType,0,0),faceType=setBit(faceType,1,hasMaterial),faceType=setBit(faceType,2,hasFaceUv),faceType=setBit(faceType,3,hasFaceVertexUv),faceType=setBit(faceType,4,hasFaceNormal),faceType=setBit(faceType,5,hasFaceVertexNormal),faceType=setBit(faceType,6,hasFaceColor),faceType=setBit(faceType,7,hasFaceVertexColor),faces.push(faceType),faces.push(face.a,face.b,face.c),faces.push(face.materialIndex),hasFaceVertexUv){var faceVertexUvs=this.faceVertexUvs[0][i];faces.push(getUvIndex(faceVertexUvs[0]),getUvIndex(faceVertexUvs[1]),getUvIndex(faceVertexUvs[2]))}if(hasFaceNormal&&faces.push(getNormalIndex(face.normal)),hasFaceVertexNormal){var vertexNormals=face.vertexNormals;faces.push(getNormalIndex(vertexNormals[0]),getNormalIndex(vertexNormals[1]),getNormalIndex(vertexNormals[2]))}if(hasFaceColor&&faces.push(getColorIndex(face.color)),hasFaceVertexColor){var vertexColors=face.vertexColors;
faces.push(getColorIndex(vertexColors[0]),getColorIndex(vertexColors[1]),getColorIndex(vertexColors[2]))}}return data.data={},data.data.vertices=vertices,data.data.normals=normals,colors.length>0&&(data.data.colors=colors),uvs.length>0&&(data.data.uvs=[uvs]),data.data.faces=faces,data},clone:function(){return(new Geometry).copy(this)},copy:function(source){var i,il,j,jl,k,kl;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=source.name;var vertices=source.vertices;for(i=0,il=vertices.length;il>i;i++)this.vertices.push(vertices[i].clone());var colors=source.colors;for(i=0,il=colors.length;il>i;i++)this.colors.push(colors[i].clone());var faces=source.faces;for(i=0,il=faces.length;il>i;i++)this.faces.push(faces[i].clone());for(i=0,il=source.faceVertexUvs.length;il>i;i++){var faceVertexUvs=source.faceVertexUvs[i];for(void 0===this.faceVertexUvs[i]&&(this.faceVertexUvs[i]=[]),j=0,jl=faceVertexUvs.length;jl>j;j++){var uvs=faceVertexUvs[j],uvsCopy=[];for(k=0,kl=uvs.length;kl>k;k++){var uv=uvs[k];uvsCopy.push(uv.clone())}this.faceVertexUvs[i].push(uvsCopy)}}var morphTargets=source.morphTargets;for(i=0,il=morphTargets.length;il>i;i++){var morphTarget={};if(morphTarget.name=morphTargets[i].name,void 0!==morphTargets[i].vertices)for(morphTarget.vertices=[],j=0,jl=morphTargets[i].vertices.length;jl>j;j++)morphTarget.vertices.push(morphTargets[i].vertices[j].clone());if(void 0!==morphTargets[i].normals)for(morphTarget.normals=[],j=0,jl=morphTargets[i].normals.length;jl>j;j++)morphTarget.normals.push(morphTargets[i].normals[j].clone());this.morphTargets.push(morphTarget)}var morphNormals=source.morphNormals;for(i=0,il=morphNormals.length;il>i;i++){var morphNormal={};if(void 0!==morphNormals[i].vertexNormals)for(morphNormal.vertexNormals=[],j=0,jl=morphNormals[i].vertexNormals.length;jl>j;j++){var srcVertexNormal=morphNormals[i].vertexNormals[j],destVertexNormal={};destVertexNormal.a=srcVertexNormal.a.clone(),destVertexNormal.b=srcVertexNormal.b.clone(),destVertexNormal.c=srcVertexNormal.c.clone(),morphNormal.vertexNormals.push(destVertexNormal)}if(void 0!==morphNormals[i].faceNormals)for(morphNormal.faceNormals=[],j=0,jl=morphNormals[i].faceNormals.length;jl>j;j++)morphNormal.faceNormals.push(morphNormals[i].faceNormals[j].clone());this.morphNormals.push(morphNormal)}var skinWeights=source.skinWeights;for(i=0,il=skinWeights.length;il>i;i++)this.skinWeights.push(skinWeights[i].clone());var skinIndices=source.skinIndices;for(i=0,il=skinIndices.length;il>i;i++)this.skinIndices.push(skinIndices[i].clone());var lineDistances=source.lineDistances;for(i=0,il=lineDistances.length;il>i;i++)this.lineDistances.push(lineDistances[i]);var boundingBox=source.boundingBox;null!==boundingBox&&(this.boundingBox=boundingBox.clone());var boundingSphere=source.boundingSphere;return null!==boundingSphere&&(this.boundingSphere=boundingSphere.clone()),this.elementsNeedUpdate=source.elementsNeedUpdate,this.verticesNeedUpdate=source.verticesNeedUpdate,this.uvsNeedUpdate=source.uvsNeedUpdate,this.normalsNeedUpdate=source.normalsNeedUpdate,this.colorsNeedUpdate=source.colorsNeedUpdate,this.lineDistancesNeedUpdate=source.lineDistancesNeedUpdate,this.groupsNeedUpdate=source.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Object.defineProperty(BufferAttribute.prototype,"needsUpdate",{set:function(value){value===!0&&this.version++}}),Object.assign(BufferAttribute.prototype,{isBufferAttribute:!0,setArray:function(array){if(Array.isArray(array))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.count=void 0!==array?array.length/this.itemSize:0,this.array=array},setDynamic:function(value){return this.dynamic=value,this},copy:function(source){return this.array=new source.array.constructor(source.array),this.itemSize=source.itemSize,this.count=source.count,this.normalized=source.normalized,this.dynamic=source.dynamic,this},copyAt:function(index1,attribute,index2){index1*=this.itemSize,index2*=attribute.itemSize;for(var i=0,l=this.itemSize;l>i;i++)this.array[index1+i]=attribute.array[index2+i];return this},copyArray:function(array){return this.array.set(array),this},copyColorsArray:function(colors){for(var array=this.array,offset=0,i=0,l=colors.length;l>i;i++){var color=colors[i];void 0===color&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),color=new Color),array[offset++]=color.r,array[offset++]=color.g,array[offset++]=color.b}return this},copyIndicesArray:function(indices){for(var array=this.array,offset=0,i=0,l=indices.length;l>i;i++){var index=indices[i];array[offset++]=index.a,array[offset++]=index.b,array[offset++]=index.c}return this},copyVector2sArray:function(vectors){for(var array=this.array,offset=0,i=0,l=vectors.length;l>i;i++){var vector=vectors[i];void 0===vector&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),vector=new Vector2),array[offset++]=vector.x,array[offset++]=vector.y}return this},copyVector3sArray:function(vectors){for(var array=this.array,offset=0,i=0,l=vectors.length;l>i;i++){var vector=vectors[i];void 0===vector&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),vector=new Vector3),array[offset++]=vector.x,array[offset++]=vector.y,array[offset++]=vector.z}return this},copyVector4sArray:function(vectors){for(var array=this.array,offset=0,i=0,l=vectors.length;l>i;i++){var vector=vectors[i];void 0===vector&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),vector=new Vector4),array[offset++]=vector.x,array[offset++]=vector.y,array[offset++]=vector.z,array[offset++]=vector.w}return this},set:function(value,offset){return void 0===offset&&(offset=0),this.array.set(value,offset),this},getX:function(index){return this.array[index*this.itemSize]},setX:function(index,x){return this.array[index*this.itemSize]=x,this},getY:function(index){return this.array[index*this.itemSize+1]},setY:function(index,y){return this.array[index*this.itemSize+1]=y,this},getZ:function(index){return this.array[index*this.itemSize+2]},setZ:function(index,z){return this.array[index*this.itemSize+2]=z,this},getW:function(index){return this.array[index*this.itemSize+3]},setW:function(index,w){return this.array[index*this.itemSize+3]=w,this},setXY:function(index,x,y){return index*=this.itemSize,this.array[index+0]=x,this.array[index+1]=y,this},setXYZ:function(index,x,y,z){return index*=this.itemSize,this.array[index+0]=x,this.array[index+1]=y,this.array[index+2]=z,this},setXYZW:function(index,x,y,z,w){return index*=this.itemSize,this.array[index+0]=x,this.array[index+1]=y,this.array[index+2]=z,this.array[index+3]=w,this},onUpload:function(callback){return this.onUploadCallback=callback,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)}}),Int8BufferAttribute.prototype=Object.create(BufferAttribute.prototype),Int8BufferAttribute.prototype.constructor=Int8BufferAttribute,Uint8BufferAttribute.prototype=Object.create(BufferAttribute.prototype),Uint8BufferAttribute.prototype.constructor=Uint8BufferAttribute,Uint8ClampedBufferAttribute.prototype=Object.create(BufferAttribute.prototype),Uint8ClampedBufferAttribute.prototype.constructor=Uint8ClampedBufferAttribute,Int16BufferAttribute.prototype=Object.create(BufferAttribute.prototype),Int16BufferAttribute.prototype.constructor=Int16BufferAttribute,Uint16BufferAttribute.prototype=Object.create(BufferAttribute.prototype),Uint16BufferAttribute.prototype.constructor=Uint16BufferAttribute,Int32BufferAttribute.prototype=Object.create(BufferAttribute.prototype),Int32BufferAttribute.prototype.constructor=Int32BufferAttribute,Uint32BufferAttribute.prototype=Object.create(BufferAttribute.prototype),Uint32BufferAttribute.prototype.constructor=Uint32BufferAttribute,Float32BufferAttribute.prototype=Object.create(BufferAttribute.prototype),Float32BufferAttribute.prototype.constructor=Float32BufferAttribute,Float64BufferAttribute.prototype=Object.create(BufferAttribute.prototype),Float64BufferAttribute.prototype.constructor=Float64BufferAttribute,Object.assign(DirectGeometry.prototype,{computeGroups:function(geometry){for(var group,groups=[],materialIndex=void 0,faces=geometry.faces,i=0;i<faces.length;i++){var face=faces[i];face.materialIndex!==materialIndex&&(materialIndex=face.materialIndex,void 0!==group&&(group.count=3*i-group.start,groups.push(group)),group={start:3*i,materialIndex:materialIndex})}void 0!==group&&(group.count=3*i-group.start,groups.push(group)),this.groups=groups},fromGeometry:function(geometry){var morphTargetsPosition,faces=geometry.faces,vertices=geometry.vertices,faceVertexUvs=geometry.faceVertexUvs,hasFaceVertexUv=faceVertexUvs[0]&&faceVertexUvs[0].length>0,hasFaceVertexUv2=faceVertexUvs[1]&&faceVertexUvs[1].length>0,morphTargets=geometry.morphTargets,morphTargetsLength=morphTargets.length;if(morphTargetsLength>0){morphTargetsPosition=[];for(var i=0;morphTargetsLength>i;i++)morphTargetsPosition[i]=[];this.morphTargets.position=morphTargetsPosition}var morphTargetsNormal,morphNormals=geometry.morphNormals,morphNormalsLength=morphNormals.length;if(morphNormalsLength>0){morphTargetsNormal=[];for(var i=0;morphNormalsLength>i;i++)morphTargetsNormal[i]=[];this.morphTargets.normal=morphTargetsNormal}for(var skinIndices=geometry.skinIndices,skinWeights=geometry.skinWeights,hasSkinIndices=skinIndices.length===vertices.length,hasSkinWeights=skinWeights.length===vertices.length,i=0;i<faces.length;i++){var face=faces[i];this.vertices.push(vertices[face.a],vertices[face.b],vertices[face.c]);var vertexNormals=face.vertexNormals;if(3===vertexNormals.length)this.normals.push(vertexNormals[0],vertexNormals[1],vertexNormals[2]);else{var normal=face.normal;this.normals.push(normal,normal,normal)}var vertexColors=face.vertexColors;if(3===vertexColors.length)this.colors.push(vertexColors[0],vertexColors[1],vertexColors[2]);else{var color=face.color;this.colors.push(color,color,color)}if(hasFaceVertexUv===!0){var vertexUvs=faceVertexUvs[0][i];void 0!==vertexUvs?this.uvs.push(vertexUvs[0],vertexUvs[1],vertexUvs[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",i),this.uvs.push(new Vector2,new Vector2,new Vector2))}if(hasFaceVertexUv2===!0){var vertexUvs=faceVertexUvs[1][i];void 0!==vertexUvs?this.uvs2.push(vertexUvs[0],vertexUvs[1],vertexUvs[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",i),this.uvs2.push(new Vector2,new Vector2,new Vector2))}for(var j=0;morphTargetsLength>j;j++){var morphTarget=morphTargets[j].vertices;morphTargetsPosition[j].push(morphTarget[face.a],morphTarget[face.b],morphTarget[face.c])}for(var j=0;morphNormalsLength>j;j++){var morphNormal=morphNormals[j].vertexNormals[i];morphTargetsNormal[j].push(morphNormal.a,morphNormal.b,morphNormal.c)}hasSkinIndices&&this.skinIndices.push(skinIndices[face.a],skinIndices[face.b],skinIndices[face.c]),hasSkinWeights&&this.skinWeights.push(skinWeights[face.a],skinWeights[face.b],skinWeights[face.c])}return this.computeGroups(geometry),this.verticesNeedUpdate=geometry.verticesNeedUpdate,this.normalsNeedUpdate=geometry.normalsNeedUpdate,this.colorsNeedUpdate=geometry.colorsNeedUpdate,this.uvsNeedUpdate=geometry.uvsNeedUpdate,this.groupsNeedUpdate=geometry.groupsNeedUpdate,this}}),BufferGeometry.MaxIndex=65535,Object.assign(BufferGeometry.prototype,EventDispatcher.prototype,{isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(index){Array.isArray(index)?this.index=new(arrayMax(index)>65535?Uint32BufferAttribute:Uint16BufferAttribute)(index,1):this.index=index},addAttribute:function(name,attribute){return attribute&&attribute.isBufferAttribute||attribute&&attribute.isInterleavedBufferAttribute?"index"===name?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),void this.setIndex(attribute)):(this.attributes[name]=attribute,this):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),void this.addAttribute(name,new BufferAttribute(arguments[1],arguments[2])))},getAttribute:function(name){return this.attributes[name]},removeAttribute:function(name){return delete this.attributes[name],this},addGroup:function(start,count,materialIndex){this.groups.push({start:start,count:count,materialIndex:void 0!==materialIndex?materialIndex:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(start,count){this.drawRange.start=start,this.drawRange.count=count},applyMatrix:function(matrix){var position=this.attributes.position;void 0!==position&&(matrix.applyToBufferAttribute(position),position.needsUpdate=!0);var normal=this.attributes.normal;if(void 0!==normal){var normalMatrix=(new Matrix3).getNormalMatrix(matrix);normalMatrix.applyToBufferAttribute(normal),normal.needsUpdate=!0}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(){var m1=new Matrix4;return function(angle){return m1.makeRotationX(angle),this.applyMatrix(m1),this}}(),rotateY:function(){var m1=new Matrix4;return function(angle){return m1.makeRotationY(angle),this.applyMatrix(m1),this}}(),rotateZ:function(){var m1=new Matrix4;return function(angle){return m1.makeRotationZ(angle),this.applyMatrix(m1),this}}(),translate:function(){var m1=new Matrix4;return function(x,y,z){return m1.makeTranslation(x,y,z),this.applyMatrix(m1),this}}(),scale:function(){var m1=new Matrix4;return function(x,y,z){return m1.makeScale(x,y,z),this.applyMatrix(m1),this}}(),lookAt:function(){var obj=new Object3D;return function(vector){obj.lookAt(vector),obj.updateMatrix(),this.applyMatrix(obj.matrix)}}(),center:function(){this.computeBoundingBox();var offset=this.boundingBox.getCenter().negate();return this.translate(offset.x,offset.y,offset.z),offset},setFromObject:function(object){var geometry=object.geometry;if(object.isPoints||object.isLine){var positions=new Float32BufferAttribute(3*geometry.vertices.length,3),colors=new Float32BufferAttribute(3*geometry.colors.length,3);if(this.addAttribute("position",positions.copyVector3sArray(geometry.vertices)),this.addAttribute("color",colors.copyColorsArray(geometry.colors)),geometry.lineDistances&&geometry.lineDistances.length===geometry.vertices.length){var lineDistances=new Float32BufferAttribute(geometry.lineDistances.length,1);this.addAttribute("lineDistance",lineDistances.copyArray(geometry.lineDistances))}null!==geometry.boundingSphere&&(this.boundingSphere=geometry.boundingSphere.clone()),null!==geometry.boundingBox&&(this.boundingBox=geometry.boundingBox.clone())}else object.isMesh&&geometry&&geometry.isGeometry&&this.fromGeometry(geometry);return this},updateFromObject:function(object){var geometry=object.geometry;if(object.isMesh){var direct=geometry.__directGeometry;if(geometry.elementsNeedUpdate===!0&&(direct=void 0,geometry.elementsNeedUpdate=!1),void 0===direct)return this.fromGeometry(geometry);direct.verticesNeedUpdate=geometry.verticesNeedUpdate,direct.normalsNeedUpdate=geometry.normalsNeedUpdate,direct.colorsNeedUpdate=geometry.colorsNeedUpdate,direct.uvsNeedUpdate=geometry.uvsNeedUpdate,direct.groupsNeedUpdate=geometry.groupsNeedUpdate,geometry.verticesNeedUpdate=!1,geometry.normalsNeedUpdate=!1,geometry.colorsNeedUpdate=!1,geometry.uvsNeedUpdate=!1,geometry.groupsNeedUpdate=!1,geometry=direct}var attribute;return geometry.verticesNeedUpdate===!0&&(attribute=this.attributes.position,void 0!==attribute&&(attribute.copyVector3sArray(geometry.vertices),attribute.needsUpdate=!0),geometry.verticesNeedUpdate=!1),geometry.normalsNeedUpdate===!0&&(attribute=this.attributes.normal,void 0!==attribute&&(attribute.copyVector3sArray(geometry.normals),attribute.needsUpdate=!0),geometry.normalsNeedUpdate=!1),geometry.colorsNeedUpdate===!0&&(attribute=this.attributes.color,void 0!==attribute&&(attribute.copyColorsArray(geometry.colors),attribute.needsUpdate=!0),geometry.colorsNeedUpdate=!1),geometry.uvsNeedUpdate&&(attribute=this.attributes.uv,void 0!==attribute&&(attribute.copyVector2sArray(geometry.uvs),attribute.needsUpdate=!0),geometry.uvsNeedUpdate=!1),geometry.lineDistancesNeedUpdate&&(attribute=this.attributes.lineDistance,void 0!==attribute&&(attribute.copyArray(geometry.lineDistances),attribute.needsUpdate=!0),geometry.lineDistancesNeedUpdate=!1),geometry.groupsNeedUpdate&&(geometry.computeGroups(object.geometry),this.groups=geometry.groups,geometry.groupsNeedUpdate=!1),this},fromGeometry:function(geometry){return geometry.__directGeometry=(new DirectGeometry).fromGeometry(geometry),this.fromDirectGeometry(geometry.__directGeometry)},fromDirectGeometry:function(geometry){var positions=new Float32Array(3*geometry.vertices.length);if(this.addAttribute("position",new BufferAttribute(positions,3).copyVector3sArray(geometry.vertices)),geometry.normals.length>0){var normals=new Float32Array(3*geometry.normals.length);this.addAttribute("normal",new BufferAttribute(normals,3).copyVector3sArray(geometry.normals))}if(geometry.colors.length>0){var colors=new Float32Array(3*geometry.colors.length);this.addAttribute("color",new BufferAttribute(colors,3).copyColorsArray(geometry.colors))}if(geometry.uvs.length>0){var uvs=new Float32Array(2*geometry.uvs.length);this.addAttribute("uv",new BufferAttribute(uvs,2).copyVector2sArray(geometry.uvs))}if(geometry.uvs2.length>0){var uvs2=new Float32Array(2*geometry.uvs2.length);this.addAttribute("uv2",new BufferAttribute(uvs2,2).copyVector2sArray(geometry.uvs2))}if(geometry.indices.length>0){var TypeArray=arrayMax(geometry.indices)>65535?Uint32Array:Uint16Array,indices=new TypeArray(3*geometry.indices.length);this.setIndex(new BufferAttribute(indices,1).copyIndicesArray(geometry.indices))}this.groups=geometry.groups;for(var name in geometry.morphTargets){for(var array=[],morphTargets=geometry.morphTargets[name],i=0,l=morphTargets.length;l>i;i++){var morphTarget=morphTargets[i],attribute=new Float32BufferAttribute(3*morphTarget.length,3);array.push(attribute.copyVector3sArray(morphTarget))}this.morphAttributes[name]=array}if(geometry.skinIndices.length>0){var skinIndices=new Float32BufferAttribute(4*geometry.skinIndices.length,4);this.addAttribute("skinIndex",skinIndices.copyVector4sArray(geometry.skinIndices))}if(geometry.skinWeights.length>0){var skinWeights=new Float32BufferAttribute(4*geometry.skinWeights.length,4);this.addAttribute("skinWeight",skinWeights.copyVector4sArray(geometry.skinWeights))}return null!==geometry.boundingSphere&&(this.boundingSphere=geometry.boundingSphere.clone()),null!==geometry.boundingBox&&(this.boundingBox=geometry.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Box3);var position=this.attributes.position;void 0!==position?this.boundingBox.setFromBufferAttribute(position):this.boundingBox.makeEmpty(),(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){var box=new Box3,vector=new Vector3;return function(){null===this.boundingSphere&&(this.boundingSphere=new Sphere);var position=this.attributes.position;if(position){var center=this.boundingSphere.center;box.setFromBufferAttribute(position),box.getCenter(center);for(var maxRadiusSq=0,i=0,il=position.count;il>i;i++)vector.x=position.getX(i),vector.y=position.getY(i),vector.z=position.getZ(i),maxRadiusSq=Math.max(maxRadiusSq,center.distanceToSquared(vector));this.boundingSphere.radius=Math.sqrt(maxRadiusSq),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}(),computeFaceNormals:function(){},computeVertexNormals:function(){var index=this.index,attributes=this.attributes,groups=this.groups;if(attributes.position){var positions=attributes.position.array;if(void 0===attributes.normal)this.addAttribute("normal",new BufferAttribute(new Float32Array(positions.length),3));else for(var array=attributes.normal.array,i=0,il=array.length;il>i;i++)array[i]=0;var vA,vB,vC,normals=attributes.normal.array,pA=new Vector3,pB=new Vector3,pC=new Vector3,cb=new Vector3,ab=new Vector3;if(index){var indices=index.array;0===groups.length&&this.addGroup(0,indices.length);for(var j=0,jl=groups.length;jl>j;++j)for(var group=groups[j],start=group.start,count=group.count,i=start,il=start+count;il>i;i+=3)vA=3*indices[i+0],vB=3*indices[i+1],vC=3*indices[i+2],pA.fromArray(positions,vA),pB.fromArray(positions,vB),pC.fromArray(positions,vC),cb.subVectors(pC,pB),ab.subVectors(pA,pB),cb.cross(ab),normals[vA]+=cb.x,normals[vA+1]+=cb.y,normals[vA+2]+=cb.z,normals[vB]+=cb.x,normals[vB+1]+=cb.y,normals[vB+2]+=cb.z,normals[vC]+=cb.x,normals[vC+1]+=cb.y,normals[vC+2]+=cb.z}else for(var i=0,il=positions.length;il>i;i+=9)pA.fromArray(positions,i),pB.fromArray(positions,i+3),pC.fromArray(positions,i+6),cb.subVectors(pC,pB),ab.subVectors(pA,pB),cb.cross(ab),normals[i]=cb.x,normals[i+1]=cb.y,normals[i+2]=cb.z,normals[i+3]=cb.x,normals[i+4]=cb.y,normals[i+5]=cb.z,normals[i+6]=cb.x,normals[i+7]=cb.y,normals[i+8]=cb.z;this.normalizeNormals(),attributes.normal.needsUpdate=!0}},merge:function(geometry,offset){if(!geometry||!geometry.isBufferGeometry)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",geometry);void 0===offset&&(offset=0);var attributes=this.attributes;for(var key in attributes)if(void 0!==geometry.attributes[key])for(var attribute1=attributes[key],attributeArray1=attribute1.array,attribute2=geometry.attributes[key],attributeArray2=attribute2.array,attributeSize=attribute2.itemSize,i=0,j=attributeSize*offset;i<attributeArray2.length;i++,j++)attributeArray1[j]=attributeArray2[i];return this},normalizeNormals:function(){for(var x,y,z,n,normals=this.attributes.normal,i=0,il=normals.count;il>i;i++)x=normals.getX(i),y=normals.getY(i),z=normals.getZ(i),n=1/Math.sqrt(x*x+y*y+z*z),normals.setXYZ(i,x*n,y*n,z*n)},toNonIndexed:function(){if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var geometry2=new BufferGeometry,indices=this.index.array,attributes=this.attributes;for(var name in attributes){for(var attribute=attributes[name],array=attribute.array,itemSize=attribute.itemSize,array2=new array.constructor(indices.length*itemSize),index=0,index2=0,i=0,l=indices.length;l>i;i++){index=indices[i]*itemSize;for(var j=0;itemSize>j;j++)array2[index2++]=array[index++]}geometry2.addAttribute(name,new BufferAttribute(array2,itemSize))}return geometry2},toJSON:function(){var data={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(data.uuid=this.uuid,data.type=this.type,""!==this.name&&(data.name=this.name),void 0!==this.parameters){var parameters=this.parameters;for(var key in parameters)void 0!==parameters[key]&&(data[key]=parameters[key]);return data}data.data={attributes:{}};var index=this.index;if(null!==index){var array=Array.prototype.slice.call(index.array);data.data.index={type:index.array.constructor.name,array:array}}var attributes=this.attributes;for(var key in attributes){var attribute=attributes[key],array=Array.prototype.slice.call(attribute.array);data.data.attributes[key]={itemSize:attribute.itemSize,type:attribute.array.constructor.name,array:array,normalized:attribute.normalized}}var groups=this.groups;groups.length>0&&(data.data.groups=JSON.parse(JSON.stringify(groups)));var boundingSphere=this.boundingSphere;return null!==boundingSphere&&(data.data.boundingSphere={center:boundingSphere.center.toArray(),radius:boundingSphere.radius}),data},clone:function(){return(new BufferGeometry).copy(this)},copy:function(source){var name,i,l;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=source.name;var index=source.index;null!==index&&this.setIndex(index.clone());var attributes=source.attributes;for(name in attributes){var attribute=attributes[name];this.addAttribute(name,attribute.clone())}var morphAttributes=source.morphAttributes;for(name in morphAttributes){var array=[],morphAttribute=morphAttributes[name];for(i=0,l=morphAttribute.length;l>i;i++)array.push(morphAttribute[i].clone());this.morphAttributes[name]=array}var groups=source.groups;for(i=0,l=groups.length;l>i;i++){var group=groups[i];this.addGroup(group.start,group.count,group.materialIndex)}var boundingBox=source.boundingBox;null!==boundingBox&&(this.boundingBox=boundingBox.clone());var boundingSphere=source.boundingSphere;return null!==boundingSphere&&(this.boundingSphere=boundingSphere.clone()),this.drawRange.start=source.drawRange.start,this.drawRange.count=source.drawRange.count,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),BoxGeometry.prototype=Object.create(Geometry.prototype),BoxGeometry.prototype.constructor=BoxGeometry,BoxBufferGeometry.prototype=Object.create(BufferGeometry.prototype),BoxBufferGeometry.prototype.constructor=BoxBufferGeometry,PlaneGeometry.prototype=Object.create(Geometry.prototype),PlaneGeometry.prototype.constructor=PlaneGeometry,PlaneBufferGeometry.prototype=Object.create(BufferGeometry.prototype),PlaneBufferGeometry.prototype.constructor=PlaneBufferGeometry,MeshBasicMaterial.prototype=Object.create(Material.prototype),MeshBasicMaterial.prototype.constructor=MeshBasicMaterial,MeshBasicMaterial.prototype.isMeshBasicMaterial=!0,MeshBasicMaterial.prototype.copy=function(source){return Material.prototype.copy.call(this,source),this.color.copy(source.color),this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.specularMap=source.specularMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.combine=source.combine,this.reflectivity=source.reflectivity,this.refractionRatio=source.refractionRatio,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.skinning=source.skinning,this.morphTargets=source.morphTargets,this},Object.assign(Ray.prototype,{set:function(origin,direction){return this.origin.copy(origin),this.direction.copy(direction),this},clone:function(){return(new this.constructor).copy(this)},copy:function(ray){return this.origin.copy(ray.origin),this.direction.copy(ray.direction),this},at:function(t,optionalTarget){var result=optionalTarget||new Vector3;return result.copy(this.direction).multiplyScalar(t).add(this.origin)},lookAt:function(v){return this.direction.copy(v).sub(this.origin).normalize(),this},recast:function(){var v1=new Vector3;return function(t){return this.origin.copy(this.at(t,v1)),this}}(),closestPointToPoint:function(point,optionalTarget){var result=optionalTarget||new Vector3;result.subVectors(point,this.origin);var directionDistance=result.dot(this.direction);return 0>directionDistance?result.copy(this.origin):result.copy(this.direction).multiplyScalar(directionDistance).add(this.origin)},distanceToPoint:function(point){return Math.sqrt(this.distanceSqToPoint(point))},distanceSqToPoint:function(){var v1=new Vector3;return function(point){var directionDistance=v1.subVectors(point,this.origin).dot(this.direction);return 0>directionDistance?this.origin.distanceToSquared(point):(v1.copy(this.direction).multiplyScalar(directionDistance).add(this.origin),v1.distanceToSquared(point))}}(),distanceSqToSegment:function(){var segCenter=new Vector3,segDir=new Vector3,diff=new Vector3;return function(v0,v1,optionalPointOnRay,optionalPointOnSegment){segCenter.copy(v0).add(v1).multiplyScalar(.5),segDir.copy(v1).sub(v0).normalize(),diff.copy(this.origin).sub(segCenter);var s0,s1,sqrDist,extDet,segExtent=.5*v0.distanceTo(v1),a01=-this.direction.dot(segDir),b0=diff.dot(this.direction),b1=-diff.dot(segDir),c=diff.lengthSq(),det=Math.abs(1-a01*a01);if(det>0)if(s0=a01*b1-b0,s1=a01*b0-b1,extDet=segExtent*det,s0>=0)if(s1>=-extDet)if(extDet>=s1){var invDet=1/det;s0*=invDet,s1*=invDet,sqrDist=s0*(s0+a01*s1+2*b0)+s1*(a01*s0+s1+2*b1)+c}else s1=segExtent,s0=Math.max(0,-(a01*s1+b0)),sqrDist=-s0*s0+s1*(s1+2*b1)+c;else s1=-segExtent,s0=Math.max(0,-(a01*s1+b0)),sqrDist=-s0*s0+s1*(s1+2*b1)+c;else-extDet>=s1?(s0=Math.max(0,-(-a01*segExtent+b0)),s1=s0>0?-segExtent:Math.min(Math.max(-segExtent,-b1),segExtent),sqrDist=-s0*s0+s1*(s1+2*b1)+c):extDet>=s1?(s0=0,s1=Math.min(Math.max(-segExtent,-b1),segExtent),sqrDist=s1*(s1+2*b1)+c):(s0=Math.max(0,-(a01*segExtent+b0)),s1=s0>0?segExtent:Math.min(Math.max(-segExtent,-b1),segExtent),sqrDist=-s0*s0+s1*(s1+2*b1)+c);else s1=a01>0?-segExtent:segExtent,s0=Math.max(0,-(a01*s1+b0)),sqrDist=-s0*s0+s1*(s1+2*b1)+c;return optionalPointOnRay&&optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin),optionalPointOnSegment&&optionalPointOnSegment.copy(segDir).multiplyScalar(s1).add(segCenter),sqrDist}}(),intersectSphere:function(){var v1=new Vector3;return function(sphere,optionalTarget){v1.subVectors(sphere.center,this.origin);var tca=v1.dot(this.direction),d2=v1.dot(v1)-tca*tca,radius2=sphere.radius*sphere.radius;if(d2>radius2)return null;var thc=Math.sqrt(radius2-d2),t0=tca-thc,t1=tca+thc;return 0>t0&&0>t1?null:0>t0?this.at(t1,optionalTarget):this.at(t0,optionalTarget)}}(),intersectsSphere:function(sphere){return this.distanceToPoint(sphere.center)<=sphere.radius},distanceToPlane:function(plane){var denominator=plane.normal.dot(this.direction);if(0===denominator)return 0===plane.distanceToPoint(this.origin)?0:null;var t=-(this.origin.dot(plane.normal)+plane.constant)/denominator;return t>=0?t:null},intersectPlane:function(plane,optionalTarget){var t=this.distanceToPlane(plane);return null===t?null:this.at(t,optionalTarget)},intersectsPlane:function(plane){var distToPoint=plane.distanceToPoint(this.origin);if(0===distToPoint)return!0;var denominator=plane.normal.dot(this.direction);return 0>denominator*distToPoint},intersectBox:function(box,optionalTarget){var tmin,tmax,tymin,tymax,tzmin,tzmax,invdirx=1/this.direction.x,invdiry=1/this.direction.y,invdirz=1/this.direction.z,origin=this.origin;return invdirx>=0?(tmin=(box.min.x-origin.x)*invdirx,tmax=(box.max.x-origin.x)*invdirx):(tmin=(box.max.x-origin.x)*invdirx,tmax=(box.min.x-origin.x)*invdirx),invdiry>=0?(tymin=(box.min.y-origin.y)*invdiry,tymax=(box.max.y-origin.y)*invdiry):(tymin=(box.max.y-origin.y)*invdiry,tymax=(box.min.y-origin.y)*invdiry),tmin>tymax||tymin>tmax?null:((tymin>tmin||tmin!==tmin)&&(tmin=tymin),(tmax>tymax||tmax!==tmax)&&(tmax=tymax),invdirz>=0?(tzmin=(box.min.z-origin.z)*invdirz,tzmax=(box.max.z-origin.z)*invdirz):(tzmin=(box.max.z-origin.z)*invdirz,tzmax=(box.min.z-origin.z)*invdirz),tmin>tzmax||tzmin>tmax?null:((tzmin>tmin||tmin!==tmin)&&(tmin=tzmin),(tmax>tzmax||tmax!==tmax)&&(tmax=tzmax),0>tmax?null:this.at(tmin>=0?tmin:tmax,optionalTarget)))},intersectsBox:function(){var v=new Vector3;return function(box){return null!==this.intersectBox(box,v)}}(),intersectTriangle:function(){var diff=new Vector3,edge1=new Vector3,edge2=new Vector3,normal=new Vector3;return function(a,b,c,backfaceCulling,optionalTarget){edge1.subVectors(b,a),edge2.subVectors(c,a),normal.crossVectors(edge1,edge2);var sign,DdN=this.direction.dot(normal);if(DdN>0){if(backfaceCulling)return null;sign=1}else{if(!(0>DdN))return null;sign=-1,DdN=-DdN}diff.subVectors(this.origin,a);var DdQxE2=sign*this.direction.dot(edge2.crossVectors(diff,edge2));if(0>DdQxE2)return null;var DdE1xQ=sign*this.direction.dot(edge1.cross(diff));if(0>DdE1xQ)return null;if(DdQxE2+DdE1xQ>DdN)return null;var QdN=-sign*diff.dot(normal);
return 0>QdN?null:this.at(QdN/DdN,optionalTarget)}}(),applyMatrix4:function(matrix4){return this.origin.applyMatrix4(matrix4),this.direction.transformDirection(matrix4),this},equals:function(ray){return ray.origin.equals(this.origin)&&ray.direction.equals(this.direction)}}),Object.assign(Line3.prototype,{set:function(start,end){return this.start.copy(start),this.end.copy(end),this},clone:function(){return(new this.constructor).copy(this)},copy:function(line){return this.start.copy(line.start),this.end.copy(line.end),this},getCenter:function(optionalTarget){var result=optionalTarget||new Vector3;return result.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(optionalTarget){var result=optionalTarget||new Vector3;return result.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(t,optionalTarget){var result=optionalTarget||new Vector3;return this.delta(result).multiplyScalar(t).add(this.start)},closestPointToPointParameter:function(){var startP=new Vector3,startEnd=new Vector3;return function(point,clampToLine){startP.subVectors(point,this.start),startEnd.subVectors(this.end,this.start);var startEnd2=startEnd.dot(startEnd),startEnd_startP=startEnd.dot(startP),t=startEnd_startP/startEnd2;return clampToLine&&(t=_Math.clamp(t,0,1)),t}}(),closestPointToPoint:function(point,clampToLine,optionalTarget){var t=this.closestPointToPointParameter(point,clampToLine),result=optionalTarget||new Vector3;return this.delta(result).multiplyScalar(t).add(this.start)},applyMatrix4:function(matrix){return this.start.applyMatrix4(matrix),this.end.applyMatrix4(matrix),this},equals:function(line){return line.start.equals(this.start)&&line.end.equals(this.end)}}),Object.assign(Triangle,{normal:function(){var v0=new Vector3;return function(a,b,c,optionalTarget){var result=optionalTarget||new Vector3;result.subVectors(c,b),v0.subVectors(a,b),result.cross(v0);var resultLengthSq=result.lengthSq();return resultLengthSq>0?result.multiplyScalar(1/Math.sqrt(resultLengthSq)):result.set(0,0,0)}}(),barycoordFromPoint:function(){var v0=new Vector3,v1=new Vector3,v2=new Vector3;return function(point,a,b,c,optionalTarget){v0.subVectors(c,a),v1.subVectors(b,a),v2.subVectors(point,a);var dot00=v0.dot(v0),dot01=v0.dot(v1),dot02=v0.dot(v2),dot11=v1.dot(v1),dot12=v1.dot(v2),denom=dot00*dot11-dot01*dot01,result=optionalTarget||new Vector3;if(0===denom)return result.set(-2,-1,-1);var invDenom=1/denom,u=(dot11*dot02-dot01*dot12)*invDenom,v=(dot00*dot12-dot01*dot02)*invDenom;return result.set(1-u-v,v,u)}}(),containsPoint:function(){var v1=new Vector3;return function(point,a,b,c){var result=Triangle.barycoordFromPoint(point,a,b,c,v1);return result.x>=0&&result.y>=0&&result.x+result.y<=1}}()}),Object.assign(Triangle.prototype,{set:function(a,b,c){return this.a.copy(a),this.b.copy(b),this.c.copy(c),this},setFromPointsAndIndices:function(points,i0,i1,i2){return this.a.copy(points[i0]),this.b.copy(points[i1]),this.c.copy(points[i2]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(triangle){return this.a.copy(triangle.a),this.b.copy(triangle.b),this.c.copy(triangle.c),this},area:function(){var v0=new Vector3,v1=new Vector3;return function(){return v0.subVectors(this.c,this.b),v1.subVectors(this.a,this.b),.5*v0.cross(v1).length()}}(),midpoint:function(optionalTarget){var result=optionalTarget||new Vector3;return result.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(optionalTarget){return Triangle.normal(this.a,this.b,this.c,optionalTarget)},plane:function(optionalTarget){var result=optionalTarget||new Plane;return result.setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(point,optionalTarget){return Triangle.barycoordFromPoint(point,this.a,this.b,this.c,optionalTarget)},containsPoint:function(point){return Triangle.containsPoint(point,this.a,this.b,this.c)},closestPointToPoint:function(){var plane=new Plane,edgeList=[new Line3,new Line3,new Line3],projectedPoint=new Vector3,closestPoint=new Vector3;return function(point,optionalTarget){var result=optionalTarget||new Vector3,minDistance=1/0;if(plane.setFromCoplanarPoints(this.a,this.b,this.c),plane.projectPoint(point,projectedPoint),this.containsPoint(projectedPoint)===!0)result.copy(projectedPoint);else{edgeList[0].set(this.a,this.b),edgeList[1].set(this.b,this.c),edgeList[2].set(this.c,this.a);for(var i=0;i<edgeList.length;i++){edgeList[i].closestPointToPoint(projectedPoint,!0,closestPoint);var distance=projectedPoint.distanceToSquared(closestPoint);minDistance>distance&&(minDistance=distance,result.copy(closestPoint))}}return result}}(),equals:function(triangle){return triangle.a.equals(this.a)&&triangle.b.equals(this.b)&&triangle.c.equals(this.c)}}),Mesh.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Mesh,isMesh:!0,setDrawMode:function(value){this.drawMode=value},copy:function(source){return Object3D.prototype.copy.call(this,source),this.drawMode=source.drawMode,this},updateMorphTargets:function(){var m,ml,name,geometry=this.geometry;if(geometry.isBufferGeometry){var morphAttributes=geometry.morphAttributes,keys=Object.keys(morphAttributes);if(keys.length>0){var morphAttribute=morphAttributes[keys[0]];if(void 0!==morphAttribute)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},m=0,ml=morphAttribute.length;ml>m;m++)name=morphAttribute[m].name||String(m),this.morphTargetInfluences.push(0),this.morphTargetDictionary[name]=m}}else{var morphTargets=geometry.morphTargets;if(void 0!==morphTargets&&morphTargets.length>0)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},m=0,ml=morphTargets.length;ml>m;m++)name=morphTargets[m].name||String(m),this.morphTargetInfluences.push(0),this.morphTargetDictionary[name]=m}},raycast:function(){function uvIntersection(point,p1,p2,p3,uv1,uv2,uv3){return Triangle.barycoordFromPoint(point,p1,p2,p3,barycoord),uv1.multiplyScalar(barycoord.x),uv2.multiplyScalar(barycoord.y),uv3.multiplyScalar(barycoord.z),uv1.add(uv2).add(uv3),uv1.clone()}function checkIntersection(object,raycaster,ray,pA,pB,pC,point){var intersect,material=object.material;if(intersect=material.side===BackSide?ray.intersectTriangle(pC,pB,pA,!0,point):ray.intersectTriangle(pA,pB,pC,material.side!==DoubleSide,point),null===intersect)return null;intersectionPointWorld.copy(point),intersectionPointWorld.applyMatrix4(object.matrixWorld);var distance=raycaster.ray.origin.distanceTo(intersectionPointWorld);return distance<raycaster.near||distance>raycaster.far?null:{distance:distance,point:intersectionPointWorld.clone(),object:object}}function checkBufferGeometryIntersection(object,raycaster,ray,position,uv,a,b,c){vA.fromBufferAttribute(position,a),vB.fromBufferAttribute(position,b),vC.fromBufferAttribute(position,c);var intersection=checkIntersection(object,raycaster,ray,vA,vB,vC,intersectionPoint);return intersection&&(uv&&(uvA.fromBufferAttribute(uv,a),uvB.fromBufferAttribute(uv,b),uvC.fromBufferAttribute(uv,c),intersection.uv=uvIntersection(intersectionPoint,vA,vB,vC,uvA,uvB,uvC)),intersection.face=new Face3(a,b,c,Triangle.normal(vA,vB,vC)),intersection.faceIndex=a),intersection}var inverseMatrix=new Matrix4,ray=new Ray,sphere=new Sphere,vA=new Vector3,vB=new Vector3,vC=new Vector3,tempA=new Vector3,tempB=new Vector3,tempC=new Vector3,uvA=new Vector2,uvB=new Vector2,uvC=new Vector2,barycoord=new Vector3,intersectionPoint=new Vector3,intersectionPointWorld=new Vector3;return function(raycaster,intersects){var geometry=this.geometry,material=this.material,matrixWorld=this.matrixWorld;if(void 0!==material&&(null===geometry.boundingSphere&&geometry.computeBoundingSphere(),sphere.copy(geometry.boundingSphere),sphere.applyMatrix4(matrixWorld),raycaster.ray.intersectsSphere(sphere)!==!1&&(inverseMatrix.getInverse(matrixWorld),ray.copy(raycaster.ray).applyMatrix4(inverseMatrix),null===geometry.boundingBox||ray.intersectsBox(geometry.boundingBox)!==!1))){var intersection;if(geometry.isBufferGeometry){var a,b,c,i,l,index=geometry.index,position=geometry.attributes.position,uv=geometry.attributes.uv;if(null!==index)for(i=0,l=index.count;l>i;i+=3)a=index.getX(i),b=index.getX(i+1),c=index.getX(i+2),intersection=checkBufferGeometryIntersection(this,raycaster,ray,position,uv,a,b,c),intersection&&(intersection.faceIndex=Math.floor(i/3),intersects.push(intersection));else for(i=0,l=position.count;l>i;i+=3)a=i,b=i+1,c=i+2,intersection=checkBufferGeometryIntersection(this,raycaster,ray,position,uv,a,b,c),intersection&&(intersection.index=a,intersects.push(intersection))}else if(geometry.isGeometry){var fvA,fvB,fvC,uvs,isMultiMaterial=Array.isArray(material),vertices=geometry.vertices,faces=geometry.faces,faceVertexUvs=geometry.faceVertexUvs[0];faceVertexUvs.length>0&&(uvs=faceVertexUvs);for(var f=0,fl=faces.length;fl>f;f++){var face=faces[f],faceMaterial=isMultiMaterial?material[face.materialIndex]:material;if(void 0!==faceMaterial){if(fvA=vertices[face.a],fvB=vertices[face.b],fvC=vertices[face.c],faceMaterial.morphTargets===!0){var morphTargets=geometry.morphTargets,morphInfluences=this.morphTargetInfluences;vA.set(0,0,0),vB.set(0,0,0),vC.set(0,0,0);for(var t=0,tl=morphTargets.length;tl>t;t++){var influence=morphInfluences[t];if(0!==influence){var targets=morphTargets[t].vertices;vA.addScaledVector(tempA.subVectors(targets[face.a],fvA),influence),vB.addScaledVector(tempB.subVectors(targets[face.b],fvB),influence),vC.addScaledVector(tempC.subVectors(targets[face.c],fvC),influence)}}vA.add(fvA),vB.add(fvB),vC.add(fvC),fvA=vA,fvB=vB,fvC=vC}if(intersection=checkIntersection(this,raycaster,ray,fvA,fvB,fvC,intersectionPoint)){if(uvs&&uvs[f]){var uvs_f=uvs[f];uvA.copy(uvs_f[0]),uvB.copy(uvs_f[1]),uvC.copy(uvs_f[2]),intersection.uv=uvIntersection(intersectionPoint,fvA,fvB,fvC,uvA,uvB,uvC)}intersection.face=face,intersection.faceIndex=f,intersects.push(intersection)}}}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var programIdCount=0;ArrayCamera.prototype=Object.assign(Object.create(PerspectiveCamera.prototype),{constructor:ArrayCamera,isArrayCamera:!0}),FogExp2.prototype.isFogExp2=!0,FogExp2.prototype.clone=function(){return new FogExp2(this.color.getHex(),this.density)},FogExp2.prototype.toJSON=function(meta){return{type:"FogExp2",color:this.color.getHex(),density:this.density}},Fog.prototype.isFog=!0,Fog.prototype.clone=function(){return new Fog(this.color.getHex(),this.near,this.far)},Fog.prototype.toJSON=function(meta){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}},Scene.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Scene,copy:function(source,recursive){return Object3D.prototype.copy.call(this,source,recursive),null!==source.background&&(this.background=source.background.clone()),null!==source.fog&&(this.fog=source.fog.clone()),null!==source.overrideMaterial&&(this.overrideMaterial=source.overrideMaterial.clone()),this.autoUpdate=source.autoUpdate,this.matrixAutoUpdate=source.matrixAutoUpdate,this},toJSON:function(meta){var data=Object3D.prototype.toJSON.call(this,meta);return null!==this.background&&(data.object.background=this.background.toJSON(meta)),null!==this.fog&&(data.object.fog=this.fog.toJSON()),data}}),LensFlare.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:LensFlare,isLensFlare:!0,copy:function(source){Object3D.prototype.copy.call(this,source),this.positionScreen.copy(source.positionScreen),this.customUpdateCallback=source.customUpdateCallback;for(var i=0,l=source.lensFlares.length;l>i;i++)this.lensFlares.push(source.lensFlares[i]);return this},add:function(texture,size,distance,blending,color,opacity){void 0===size&&(size=-1),void 0===distance&&(distance=0),void 0===opacity&&(opacity=1),void 0===color&&(color=new Color(16777215)),void 0===blending&&(blending=NormalBlending),distance=Math.min(distance,Math.max(0,distance)),this.lensFlares.push({texture:texture,size:size,distance:distance,x:0,y:0,z:0,scale:1,rotation:0,opacity:opacity,color:color,blending:blending})},updateLensFlares:function(){var f,flare,fl=this.lensFlares.length,vecX=2*-this.positionScreen.x,vecY=2*-this.positionScreen.y;for(f=0;fl>f;f++)flare=this.lensFlares[f],flare.x=this.positionScreen.x+vecX*flare.distance,flare.y=this.positionScreen.y+vecY*flare.distance,flare.wantedRotation=flare.x*Math.PI*.25,flare.rotation+=.25*(flare.wantedRotation-flare.rotation)}}),SpriteMaterial.prototype=Object.create(Material.prototype),SpriteMaterial.prototype.constructor=SpriteMaterial,SpriteMaterial.prototype.isSpriteMaterial=!0,SpriteMaterial.prototype.copy=function(source){return Material.prototype.copy.call(this,source),this.color.copy(source.color),this.map=source.map,this.rotation=source.rotation,this},Sprite.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Sprite,isSprite:!0,raycast:function(){var intersectPoint=new Vector3,worldPosition=new Vector3,worldScale=new Vector3;return function(raycaster,intersects){worldPosition.setFromMatrixPosition(this.matrixWorld),raycaster.ray.closestPointToPoint(worldPosition,intersectPoint),worldScale.setFromMatrixScale(this.matrixWorld);var guessSizeSq=worldScale.x*worldScale.y/4;if(!(worldPosition.distanceToSquared(intersectPoint)>guessSizeSq)){var distance=raycaster.ray.origin.distanceTo(intersectPoint);distance<raycaster.near||distance>raycaster.far||intersects.push({distance:distance,point:intersectPoint.clone(),face:null,object:this})}}}(),clone:function(){return new this.constructor(this.material).copy(this)}}),LOD.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:LOD,copy:function(source){Object3D.prototype.copy.call(this,source,!1);for(var levels=source.levels,i=0,l=levels.length;l>i;i++){var level=levels[i];this.addLevel(level.object.clone(),level.distance)}return this},addLevel:function(object,distance){void 0===distance&&(distance=0),distance=Math.abs(distance);for(var levels=this.levels,l=0;l<levels.length&&!(distance<levels[l].distance);l++);levels.splice(l,0,{distance:distance,object:object}),this.add(object)},getObjectForDistance:function(distance){for(var levels=this.levels,i=1,l=levels.length;l>i&&!(distance<levels[i].distance);i++);return levels[i-1].object},raycast:function(){var matrixPosition=new Vector3;return function(raycaster,intersects){matrixPosition.setFromMatrixPosition(this.matrixWorld);var distance=raycaster.ray.origin.distanceTo(matrixPosition);this.getObjectForDistance(distance).raycast(raycaster,intersects)}}(),update:function(){var v1=new Vector3,v2=new Vector3;return function(camera){var levels=this.levels;if(levels.length>1){v1.setFromMatrixPosition(camera.matrixWorld),v2.setFromMatrixPosition(this.matrixWorld);var distance=v1.distanceTo(v2);levels[0].object.visible=!0;for(var i=1,l=levels.length;l>i&&distance>=levels[i].distance;i++)levels[i-1].object.visible=!1,levels[i].object.visible=!0;for(;l>i;i++)levels[i].object.visible=!1}}}(),toJSON:function(meta){var data=Object3D.prototype.toJSON.call(this,meta);data.object.levels=[];for(var levels=this.levels,i=0,l=levels.length;l>i;i++){var level=levels[i];data.object.levels.push({object:level.object.uuid,distance:level.distance})}return data}}),Object.assign(Skeleton.prototype,{calculateInverses:function(){this.boneInverses=[];for(var i=0,il=this.bones.length;il>i;i++){var inverse=new Matrix4;this.bones[i]&&inverse.getInverse(this.bones[i].matrixWorld),this.boneInverses.push(inverse)}},pose:function(){var bone,i,il;for(i=0,il=this.bones.length;il>i;i++)bone=this.bones[i],bone&&bone.matrixWorld.getInverse(this.boneInverses[i]);for(i=0,il=this.bones.length;il>i;i++)bone=this.bones[i],bone&&(bone.parent&&bone.parent.isBone?(bone.matrix.getInverse(bone.parent.matrixWorld),bone.matrix.multiply(bone.matrixWorld)):bone.matrix.copy(bone.matrixWorld),bone.matrix.decompose(bone.position,bone.quaternion,bone.scale))},update:function(){var offsetMatrix=new Matrix4,identityMatrix=new Matrix4;return function(){for(var bones=this.bones,boneInverses=this.boneInverses,boneMatrices=this.boneMatrices,boneTexture=this.boneTexture,i=0,il=bones.length;il>i;i++){var matrix=bones[i]?bones[i].matrixWorld:identityMatrix;offsetMatrix.multiplyMatrices(matrix,boneInverses[i]),offsetMatrix.toArray(boneMatrices,16*i)}void 0!==boneTexture&&(boneTexture.needsUpdate=!0)}}(),clone:function(){return new Skeleton(this.bones,this.boneInverses)}}),Bone.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Bone,isBone:!0}),SkinnedMesh.prototype=Object.assign(Object.create(Mesh.prototype),{constructor:SkinnedMesh,isSkinnedMesh:!0,initBones:function(){var bone,gbone,i,il,bones=[];if(this.geometry&&void 0!==this.geometry.bones){for(i=0,il=this.geometry.bones.length;il>i;i++)gbone=this.geometry.bones[i],bone=new Bone,bones.push(bone),bone.name=gbone.name,bone.position.fromArray(gbone.pos),bone.quaternion.fromArray(gbone.rotq),void 0!==gbone.scl&&bone.scale.fromArray(gbone.scl);for(i=0,il=this.geometry.bones.length;il>i;i++)gbone=this.geometry.bones[i],-1!==gbone.parent&&null!==gbone.parent&&void 0!==bones[gbone.parent]?bones[gbone.parent].add(bones[i]):this.add(bones[i])}return this.updateMatrixWorld(!0),bones},bind:function(skeleton,bindMatrix){this.skeleton=skeleton,void 0===bindMatrix&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),bindMatrix=this.matrixWorld),this.bindMatrix.copy(bindMatrix),this.bindMatrixInverse.getInverse(bindMatrix)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){var scale,i;if(this.geometry&&this.geometry.isGeometry)for(i=0;i<this.geometry.skinWeights.length;i++){var sw=this.geometry.skinWeights[i];scale=1/sw.lengthManhattan(),scale!==1/0?sw.multiplyScalar(scale):sw.set(1,0,0,0)}else if(this.geometry&&this.geometry.isBufferGeometry){var vec=new Vector4,skinWeight=this.geometry.attributes.skinWeight;for(i=0;i<skinWeight.count;i++)vec.x=skinWeight.getX(i),vec.y=skinWeight.getY(i),vec.z=skinWeight.getZ(i),vec.w=skinWeight.getW(i),scale=1/vec.lengthManhattan(),scale!==1/0?vec.multiplyScalar(scale):vec.set(1,0,0,0),skinWeight.setXYZW(i,vec.x,vec.y,vec.z,vec.w)}},updateMatrixWorld:function(force){Mesh.prototype.updateMatrixWorld.call(this,force),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),LineBasicMaterial.prototype=Object.create(Material.prototype),LineBasicMaterial.prototype.constructor=LineBasicMaterial,LineBasicMaterial.prototype.isLineBasicMaterial=!0,LineBasicMaterial.prototype.copy=function(source){return Material.prototype.copy.call(this,source),this.color.copy(source.color),this.linewidth=source.linewidth,this.linecap=source.linecap,this.linejoin=source.linejoin,this},Line.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Line,isLine:!0,raycast:function(){var inverseMatrix=new Matrix4,ray=new Ray,sphere=new Sphere;return function(raycaster,intersects){var precision=raycaster.linePrecision,precisionSq=precision*precision,geometry=this.geometry,matrixWorld=this.matrixWorld;if(null===geometry.boundingSphere&&geometry.computeBoundingSphere(),sphere.copy(geometry.boundingSphere),sphere.applyMatrix4(matrixWorld),raycaster.ray.intersectsSphere(sphere)!==!1){inverseMatrix.getInverse(matrixWorld),ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);var vStart=new Vector3,vEnd=new Vector3,interSegment=new Vector3,interRay=new Vector3,step=this&&this.isLineSegments?2:1;if(geometry.isBufferGeometry){var index=geometry.index,attributes=geometry.attributes,positions=attributes.position.array;if(null!==index)for(var indices=index.array,i=0,l=indices.length-1;l>i;i+=step){var a=indices[i],b=indices[i+1];vStart.fromArray(positions,3*a),vEnd.fromArray(positions,3*b);var distSq=ray.distanceSqToSegment(vStart,vEnd,interRay,interSegment);if(!(distSq>precisionSq)){interRay.applyMatrix4(this.matrixWorld);var distance=raycaster.ray.origin.distanceTo(interRay);distance<raycaster.near||distance>raycaster.far||intersects.push({distance:distance,point:interSegment.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this})}}else for(var i=0,l=positions.length/3-1;l>i;i+=step){vStart.fromArray(positions,3*i),vEnd.fromArray(positions,3*i+3);var distSq=ray.distanceSqToSegment(vStart,vEnd,interRay,interSegment);if(!(distSq>precisionSq)){interRay.applyMatrix4(this.matrixWorld);var distance=raycaster.ray.origin.distanceTo(interRay);distance<raycaster.near||distance>raycaster.far||intersects.push({distance:distance,point:interSegment.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this})}}}else if(geometry.isGeometry)for(var vertices=geometry.vertices,nbVertices=vertices.length,i=0;nbVertices-1>i;i+=step){var distSq=ray.distanceSqToSegment(vertices[i],vertices[i+1],interRay,interSegment);if(!(distSq>precisionSq)){interRay.applyMatrix4(this.matrixWorld);var distance=raycaster.ray.origin.distanceTo(interRay);distance<raycaster.near||distance>raycaster.far||intersects.push({distance:distance,point:interSegment.clone().applyMatrix4(this.matrixWorld),index:i,face:null,faceIndex:null,object:this})}}}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),LineSegments.prototype=Object.assign(Object.create(Line.prototype),{constructor:LineSegments,isLineSegments:!0}),LineLoop.prototype=Object.assign(Object.create(Line.prototype),{constructor:LineLoop,isLineLoop:!0}),PointsMaterial.prototype=Object.create(Material.prototype),PointsMaterial.prototype.constructor=PointsMaterial,PointsMaterial.prototype.isPointsMaterial=!0,PointsMaterial.prototype.copy=function(source){return Material.prototype.copy.call(this,source),this.color.copy(source.color),this.map=source.map,this.size=source.size,this.sizeAttenuation=source.sizeAttenuation,this},Points.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Points,isPoints:!0,raycast:function(){var inverseMatrix=new Matrix4,ray=new Ray,sphere=new Sphere;return function(raycaster,intersects){function testPoint(point,index){var rayPointDistanceSq=ray.distanceSqToPoint(point);if(localThresholdSq>rayPointDistanceSq){var intersectPoint=ray.closestPointToPoint(point);intersectPoint.applyMatrix4(matrixWorld);var distance=raycaster.ray.origin.distanceTo(intersectPoint);if(distance<raycaster.near||distance>raycaster.far)return;intersects.push({distance:distance,distanceToRay:Math.sqrt(rayPointDistanceSq),point:intersectPoint.clone(),index:index,face:null,object:object})}}var object=this,geometry=this.geometry,matrixWorld=this.matrixWorld,threshold=raycaster.params.Points.threshold;if(null===geometry.boundingSphere&&geometry.computeBoundingSphere(),sphere.copy(geometry.boundingSphere),sphere.applyMatrix4(matrixWorld),sphere.radius+=threshold,raycaster.ray.intersectsSphere(sphere)!==!1){inverseMatrix.getInverse(matrixWorld),ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);var localThreshold=threshold/((this.scale.x+this.scale.y+this.scale.z)/3),localThresholdSq=localThreshold*localThreshold,position=new Vector3;if(geometry.isBufferGeometry){var index=geometry.index,attributes=geometry.attributes,positions=attributes.position.array;if(null!==index)for(var indices=index.array,i=0,il=indices.length;il>i;i++){var a=indices[i];position.fromArray(positions,3*a),testPoint(position,a)}else for(var i=0,l=positions.length/3;l>i;i++)position.fromArray(positions,3*i),testPoint(position,i)}else for(var vertices=geometry.vertices,i=0,l=vertices.length;l>i;i++)testPoint(vertices[i],i)}}}(),clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Group.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Group}),VideoTexture.prototype=Object.create(Texture.prototype),VideoTexture.prototype.constructor=VideoTexture,CompressedTexture.prototype=Object.create(Texture.prototype),CompressedTexture.prototype.constructor=CompressedTexture,CompressedTexture.prototype.isCompressedTexture=!0,CanvasTexture.prototype=Object.create(Texture.prototype),CanvasTexture.prototype.constructor=CanvasTexture,DepthTexture.prototype=Object.create(Texture.prototype),DepthTexture.prototype.constructor=DepthTexture,DepthTexture.prototype.isDepthTexture=!0,WireframeGeometry.prototype=Object.create(BufferGeometry.prototype),WireframeGeometry.prototype.constructor=WireframeGeometry,ParametricGeometry.prototype=Object.create(Geometry.prototype),ParametricGeometry.prototype.constructor=ParametricGeometry,ParametricBufferGeometry.prototype=Object.create(BufferGeometry.prototype),ParametricBufferGeometry.prototype.constructor=ParametricBufferGeometry,PolyhedronGeometry.prototype=Object.create(Geometry.prototype),PolyhedronGeometry.prototype.constructor=PolyhedronGeometry,PolyhedronBufferGeometry.prototype=Object.create(BufferGeometry.prototype),PolyhedronBufferGeometry.prototype.constructor=PolyhedronBufferGeometry,TetrahedronGeometry.prototype=Object.create(Geometry.prototype),TetrahedronGeometry.prototype.constructor=TetrahedronGeometry,TetrahedronBufferGeometry.prototype=Object.create(PolyhedronBufferGeometry.prototype),TetrahedronBufferGeometry.prototype.constructor=TetrahedronBufferGeometry,OctahedronGeometry.prototype=Object.create(Geometry.prototype),OctahedronGeometry.prototype.constructor=OctahedronGeometry,OctahedronBufferGeometry.prototype=Object.create(PolyhedronBufferGeometry.prototype),OctahedronBufferGeometry.prototype.constructor=OctahedronBufferGeometry,IcosahedronGeometry.prototype=Object.create(Geometry.prototype),IcosahedronGeometry.prototype.constructor=IcosahedronGeometry,IcosahedronBufferGeometry.prototype=Object.create(PolyhedronBufferGeometry.prototype),IcosahedronBufferGeometry.prototype.constructor=IcosahedronBufferGeometry,DodecahedronGeometry.prototype=Object.create(Geometry.prototype),DodecahedronGeometry.prototype.constructor=DodecahedronGeometry,DodecahedronBufferGeometry.prototype=Object.create(PolyhedronBufferGeometry.prototype),DodecahedronBufferGeometry.prototype.constructor=DodecahedronBufferGeometry,TubeGeometry.prototype=Object.create(Geometry.prototype),TubeGeometry.prototype.constructor=TubeGeometry,TubeBufferGeometry.prototype=Object.create(BufferGeometry.prototype),TubeBufferGeometry.prototype.constructor=TubeBufferGeometry,TorusKnotGeometry.prototype=Object.create(Geometry.prototype),TorusKnotGeometry.prototype.constructor=TorusKnotGeometry,TorusKnotBufferGeometry.prototype=Object.create(BufferGeometry.prototype),TorusKnotBufferGeometry.prototype.constructor=TorusKnotBufferGeometry,TorusGeometry.prototype=Object.create(Geometry.prototype),TorusGeometry.prototype.constructor=TorusGeometry,TorusBufferGeometry.prototype=Object.create(BufferGeometry.prototype),TorusBufferGeometry.prototype.constructor=TorusBufferGeometry;var ShapeUtils={area:function(contour){for(var n=contour.length,a=0,p=n-1,q=0;n>q;p=q++)a+=contour[p].x*contour[q].y-contour[q].x*contour[p].y;return.5*a},triangulate:function(){function snip(contour,u,v,w,n,verts){var p,ax,ay,bx,by,cx,cy,px,py;if(ax=contour[verts[u]].x,ay=contour[verts[u]].y,bx=contour[verts[v]].x,by=contour[verts[v]].y,cx=contour[verts[w]].x,cy=contour[verts[w]].y,0>=(bx-ax)*(cy-ay)-(by-ay)*(cx-ax))return!1;var aX,aY,bX,bY,cX,cY,apx,apy,bpx,bpy,cpx,cpy,cCROSSap,bCROSScp,aCROSSbp;for(aX=cx-bx,aY=cy-by,bX=ax-cx,bY=ay-cy,cX=bx-ax,cY=by-ay,p=0;n>p;p++)if(px=contour[verts[p]].x,py=contour[verts[p]].y,!(px===ax&&py===ay||px===bx&&py===by||px===cx&&py===cy)&&(apx=px-ax,apy=py-ay,bpx=px-bx,bpy=py-by,cpx=px-cx,cpy=py-cy,aCROSSbp=aX*bpy-aY*bpx,cCROSSap=cX*apy-cY*apx,bCROSScp=bX*cpy-bY*cpx,aCROSSbp>=-Number.EPSILON&&bCROSScp>=-Number.EPSILON&&cCROSSap>=-Number.EPSILON))return!1;return!0}return function(contour,indices){var n=contour.length;if(3>n)return null;var u,v,w,result=[],verts=[],vertIndices=[];if(ShapeUtils.area(contour)>0)for(v=0;n>v;v++)verts[v]=v;else for(v=0;n>v;v++)verts[v]=n-1-v;var nv=n,count=2*nv;for(v=nv-1;nv>2;){if(count--<=0)return console.warn("THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()"),indices?vertIndices:result;if(u=v,u>=nv&&(u=0),v=u+1,v>=nv&&(v=0),w=v+1,w>=nv&&(w=0),snip(contour,u,v,w,nv,verts)){var a,b,c,s,t;for(a=verts[u],b=verts[v],c=verts[w],result.push([contour[a],contour[b],contour[c]]),vertIndices.push([verts[u],verts[v],verts[w]]),s=v,t=v+1;nv>t;s++,t++)verts[s]=verts[t];nv--,count=2*nv}}return indices?vertIndices:result}}(),triangulateShape:function(contour,holes){function removeDupEndPts(points){var l=points.length;l>2&&points[l-1].equals(points[0])&&points.pop()}function point_in_segment_2D_colin(inSegPt1,inSegPt2,inOtherPt){return inSegPt1.x!==inSegPt2.x?inSegPt1.x<inSegPt2.x?inSegPt1.x<=inOtherPt.x&&inOtherPt.x<=inSegPt2.x:inSegPt2.x<=inOtherPt.x&&inOtherPt.x<=inSegPt1.x:inSegPt1.y<inSegPt2.y?inSegPt1.y<=inOtherPt.y&&inOtherPt.y<=inSegPt2.y:inSegPt2.y<=inOtherPt.y&&inOtherPt.y<=inSegPt1.y}function intersect_segments_2D(inSeg1Pt1,inSeg1Pt2,inSeg2Pt1,inSeg2Pt2,inExcludeAdjacentSegs){var seg1dx=inSeg1Pt2.x-inSeg1Pt1.x,seg1dy=inSeg1Pt2.y-inSeg1Pt1.y,seg2dx=inSeg2Pt2.x-inSeg2Pt1.x,seg2dy=inSeg2Pt2.y-inSeg2Pt1.y,seg1seg2dx=inSeg1Pt1.x-inSeg2Pt1.x,seg1seg2dy=inSeg1Pt1.y-inSeg2Pt1.y,limit=seg1dy*seg2dx-seg1dx*seg2dy,perpSeg1=seg1dy*seg1seg2dx-seg1dx*seg1seg2dy;if(Math.abs(limit)>Number.EPSILON){var perpSeg2;if(limit>0){if(0>perpSeg1||perpSeg1>limit)return[];if(perpSeg2=seg2dy*seg1seg2dx-seg2dx*seg1seg2dy,0>perpSeg2||perpSeg2>limit)return[]}else{if(perpSeg1>0||limit>perpSeg1)return[];if(perpSeg2=seg2dy*seg1seg2dx-seg2dx*seg1seg2dy,perpSeg2>0||limit>perpSeg2)return[]}if(0===perpSeg2)return!inExcludeAdjacentSegs||0!==perpSeg1&&perpSeg1!==limit?[inSeg1Pt1]:[];if(perpSeg2===limit)return!inExcludeAdjacentSegs||0!==perpSeg1&&perpSeg1!==limit?[inSeg1Pt2]:[];if(0===perpSeg1)return[inSeg2Pt1];if(perpSeg1===limit)return[inSeg2Pt2];var factorSeg1=perpSeg2/limit;return[{x:inSeg1Pt1.x+factorSeg1*seg1dx,y:inSeg1Pt1.y+factorSeg1*seg1dy}]}if(0!==perpSeg1||seg2dy*seg1seg2dx!==seg2dx*seg1seg2dy)return[];var seg1Pt=0===seg1dx&&0===seg1dy,seg2Pt=0===seg2dx&&0===seg2dy;if(seg1Pt&&seg2Pt)return inSeg1Pt1.x!==inSeg2Pt1.x||inSeg1Pt1.y!==inSeg2Pt1.y?[]:[inSeg1Pt1];if(seg1Pt)return point_in_segment_2D_colin(inSeg2Pt1,inSeg2Pt2,inSeg1Pt1)?[inSeg1Pt1]:[];if(seg2Pt)return point_in_segment_2D_colin(inSeg1Pt1,inSeg1Pt2,inSeg2Pt1)?[inSeg2Pt1]:[];var seg1min,seg1max,seg1minVal,seg1maxVal,seg2min,seg2max,seg2minVal,seg2maxVal;return 0!==seg1dx?(inSeg1Pt1.x<inSeg1Pt2.x?(seg1min=inSeg1Pt1,seg1minVal=inSeg1Pt1.x,seg1max=inSeg1Pt2,seg1maxVal=inSeg1Pt2.x):(seg1min=inSeg1Pt2,seg1minVal=inSeg1Pt2.x,seg1max=inSeg1Pt1,seg1maxVal=inSeg1Pt1.x),inSeg2Pt1.x<inSeg2Pt2.x?(seg2min=inSeg2Pt1,seg2minVal=inSeg2Pt1.x,seg2max=inSeg2Pt2,seg2maxVal=inSeg2Pt2.x):(seg2min=inSeg2Pt2,seg2minVal=inSeg2Pt2.x,seg2max=inSeg2Pt1,seg2maxVal=inSeg2Pt1.x)):(inSeg1Pt1.y<inSeg1Pt2.y?(seg1min=inSeg1Pt1,seg1minVal=inSeg1Pt1.y,seg1max=inSeg1Pt2,seg1maxVal=inSeg1Pt2.y):(seg1min=inSeg1Pt2,seg1minVal=inSeg1Pt2.y,seg1max=inSeg1Pt1,seg1maxVal=inSeg1Pt1.y),inSeg2Pt1.y<inSeg2Pt2.y?(seg2min=inSeg2Pt1,seg2minVal=inSeg2Pt1.y,seg2max=inSeg2Pt2,seg2maxVal=inSeg2Pt2.y):(seg2min=inSeg2Pt2,seg2minVal=inSeg2Pt2.y,seg2max=inSeg2Pt1,seg2maxVal=inSeg2Pt1.y)),seg2minVal>=seg1minVal?seg2minVal>seg1maxVal?[]:seg1maxVal===seg2minVal?inExcludeAdjacentSegs?[]:[seg2min]:seg2maxVal>=seg1maxVal?[seg2min,seg1max]:[seg2min,seg2max]:seg1minVal>seg2maxVal?[]:seg1minVal===seg2maxVal?inExcludeAdjacentSegs?[]:[seg1min]:seg2maxVal>=seg1maxVal?[seg1min,seg1max]:[seg1min,seg2max]}function isPointInsideAngle(inVertex,inLegFromPt,inLegToPt,inOtherPt){var legFromPtX=inLegFromPt.x-inVertex.x,legFromPtY=inLegFromPt.y-inVertex.y,legToPtX=inLegToPt.x-inVertex.x,legToPtY=inLegToPt.y-inVertex.y,otherPtX=inOtherPt.x-inVertex.x,otherPtY=inOtherPt.y-inVertex.y,from2toAngle=legFromPtX*legToPtY-legFromPtY*legToPtX,from2otherAngle=legFromPtX*otherPtY-legFromPtY*otherPtX;
if(Math.abs(from2toAngle)>Number.EPSILON){var other2toAngle=otherPtX*legToPtY-otherPtY*legToPtX;return from2toAngle>0?from2otherAngle>=0&&other2toAngle>=0:from2otherAngle>=0||other2toAngle>=0}return from2otherAngle>0}function removeHoles(contour,holes){function isCutLineInsideAngles(inShapeIdx,inHoleIdx){var lastShapeIdx=shape.length-1,prevShapeIdx=inShapeIdx-1;0>prevShapeIdx&&(prevShapeIdx=lastShapeIdx);var nextShapeIdx=inShapeIdx+1;nextShapeIdx>lastShapeIdx&&(nextShapeIdx=0);var insideAngle=isPointInsideAngle(shape[inShapeIdx],shape[prevShapeIdx],shape[nextShapeIdx],hole[inHoleIdx]);if(!insideAngle)return!1;var lastHoleIdx=hole.length-1,prevHoleIdx=inHoleIdx-1;0>prevHoleIdx&&(prevHoleIdx=lastHoleIdx);var nextHoleIdx=inHoleIdx+1;return nextHoleIdx>lastHoleIdx&&(nextHoleIdx=0),insideAngle=isPointInsideAngle(hole[inHoleIdx],hole[prevHoleIdx],hole[nextHoleIdx],shape[inShapeIdx]),!!insideAngle}function intersectsShapeEdge(inShapePt,inHolePt){var sIdx,nextIdx,intersection;for(sIdx=0;sIdx<shape.length;sIdx++)if(nextIdx=sIdx+1,nextIdx%=shape.length,intersection=intersect_segments_2D(inShapePt,inHolePt,shape[sIdx],shape[nextIdx],!0),intersection.length>0)return!0;return!1}function intersectsHoleEdge(inShapePt,inHolePt){var ihIdx,chkHole,hIdx,nextIdx,intersection;for(ihIdx=0;ihIdx<indepHoles.length;ihIdx++)for(chkHole=holes[indepHoles[ihIdx]],hIdx=0;hIdx<chkHole.length;hIdx++)if(nextIdx=hIdx+1,nextIdx%=chkHole.length,intersection=intersect_segments_2D(inShapePt,inHolePt,chkHole[hIdx],chkHole[nextIdx],!0),intersection.length>0)return!0;return!1}for(var hole,holeIndex,shapeIndex,shapePt,holePt,holeIdx,cutKey,tmpShape1,tmpShape2,tmpHole1,tmpHole2,shape=contour.concat(),indepHoles=[],failedCuts=[],h=0,hl=holes.length;hl>h;h++)indepHoles.push(h);for(var minShapeIndex=0,counter=2*indepHoles.length;indepHoles.length>0;){if(counter--,0>counter){console.log("Infinite Loop! Holes left:"+indepHoles.length+", Probably Hole outside Shape!");break}for(shapeIndex=minShapeIndex;shapeIndex<shape.length;shapeIndex++){shapePt=shape[shapeIndex],holeIndex=-1;for(var h=0;h<indepHoles.length;h++)if(holeIdx=indepHoles[h],cutKey=shapePt.x+":"+shapePt.y+":"+holeIdx,void 0===failedCuts[cutKey]){hole=holes[holeIdx];for(var h2=0;h2<hole.length;h2++)if(holePt=hole[h2],isCutLineInsideAngles(shapeIndex,h2)&&!intersectsShapeEdge(shapePt,holePt)&&!intersectsHoleEdge(shapePt,holePt)){holeIndex=h2,indepHoles.splice(h,1),tmpShape1=shape.slice(0,shapeIndex+1),tmpShape2=shape.slice(shapeIndex),tmpHole1=hole.slice(holeIndex),tmpHole2=hole.slice(0,holeIndex+1),shape=tmpShape1.concat(tmpHole1).concat(tmpHole2).concat(tmpShape2),minShapeIndex=shapeIndex;break}if(holeIndex>=0)break;failedCuts[cutKey]=!0}if(holeIndex>=0)break}}return shape}removeDupEndPts(contour),holes.forEach(removeDupEndPts);for(var i,il,f,face,key,index,allPointsMap={},allpoints=contour.concat(),h=0,hl=holes.length;hl>h;h++)Array.prototype.push.apply(allpoints,holes[h]);for(i=0,il=allpoints.length;il>i;i++)key=allpoints[i].x+":"+allpoints[i].y,void 0!==allPointsMap[key]&&console.warn("THREE.ShapeUtils: Duplicate point",key,i),allPointsMap[key]=i;var shapeWithoutHoles=removeHoles(contour,holes),triangles=ShapeUtils.triangulate(shapeWithoutHoles,!1);for(i=0,il=triangles.length;il>i;i++)for(face=triangles[i],f=0;3>f;f++)key=face[f].x+":"+face[f].y,index=allPointsMap[key],void 0!==index&&(face[f]=index);return triangles.concat()},isClockWise:function(pts){return ShapeUtils.area(pts)<0}};ExtrudeGeometry.prototype=Object.create(Geometry.prototype),ExtrudeGeometry.prototype.constructor=ExtrudeGeometry,ExtrudeBufferGeometry.prototype=Object.create(BufferGeometry.prototype),ExtrudeBufferGeometry.prototype.constructor=ExtrudeBufferGeometry,ExtrudeBufferGeometry.prototype.getArrays=function(){var positionAttribute=this.getAttribute("position"),verticesArray=positionAttribute?Array.prototype.slice.call(positionAttribute.array):[],uvAttribute=this.getAttribute("uv"),uvArray=uvAttribute?Array.prototype.slice.call(uvAttribute.array):[],IndexAttribute=this.index,indicesArray=IndexAttribute?Array.prototype.slice.call(IndexAttribute.array):[];return{position:verticesArray,uv:uvArray,index:indicesArray}},ExtrudeBufferGeometry.prototype.addShapeList=function(shapes,options){var sl=shapes.length;options.arrays=this.getArrays();for(var s=0;sl>s;s++){var shape=shapes[s];this.addShape(shape,options)}this.setIndex(options.arrays.index),this.addAttribute("position",new Float32BufferAttribute(options.arrays.position,3)),this.addAttribute("uv",new Float32BufferAttribute(options.arrays.uv,2))},ExtrudeBufferGeometry.prototype.addShape=function(shape,options){function scalePt2(pt,vec,size){return vec||console.error("THREE.ExtrudeGeometry: vec does not exist"),vec.clone().multiplyScalar(size).add(pt)}function getBevelVec(inPt,inPrev,inNext){var v_trans_x,v_trans_y,shrink_by,v_prev_x=inPt.x-inPrev.x,v_prev_y=inPt.y-inPrev.y,v_next_x=inNext.x-inPt.x,v_next_y=inNext.y-inPt.y,v_prev_lensq=v_prev_x*v_prev_x+v_prev_y*v_prev_y,collinear0=v_prev_x*v_next_y-v_prev_y*v_next_x;if(Math.abs(collinear0)>Number.EPSILON){var v_prev_len=Math.sqrt(v_prev_lensq),v_next_len=Math.sqrt(v_next_x*v_next_x+v_next_y*v_next_y),ptPrevShift_x=inPrev.x-v_prev_y/v_prev_len,ptPrevShift_y=inPrev.y+v_prev_x/v_prev_len,ptNextShift_x=inNext.x-v_next_y/v_next_len,ptNextShift_y=inNext.y+v_next_x/v_next_len,sf=((ptNextShift_x-ptPrevShift_x)*v_next_y-(ptNextShift_y-ptPrevShift_y)*v_next_x)/(v_prev_x*v_next_y-v_prev_y*v_next_x);v_trans_x=ptPrevShift_x+v_prev_x*sf-inPt.x,v_trans_y=ptPrevShift_y+v_prev_y*sf-inPt.y;var v_trans_lensq=v_trans_x*v_trans_x+v_trans_y*v_trans_y;if(2>=v_trans_lensq)return new Vector2(v_trans_x,v_trans_y);shrink_by=Math.sqrt(v_trans_lensq/2)}else{var direction_eq=!1;v_prev_x>Number.EPSILON?v_next_x>Number.EPSILON&&(direction_eq=!0):v_prev_x<-Number.EPSILON?v_next_x<-Number.EPSILON&&(direction_eq=!0):Math.sign(v_prev_y)===Math.sign(v_next_y)&&(direction_eq=!0),direction_eq?(v_trans_x=-v_prev_y,v_trans_y=v_prev_x,shrink_by=Math.sqrt(v_prev_lensq)):(v_trans_x=v_prev_x,v_trans_y=v_prev_y,shrink_by=Math.sqrt(v_prev_lensq/2))}return new Vector2(v_trans_x/shrink_by,v_trans_y/shrink_by)}function buildLidFaces(){var start=verticesArray.length/3;if(bevelEnabled){var layer=0,offset=vlen*layer;for(i=0;flen>i;i++)face=faces[i],f3(face[2]+offset,face[1]+offset,face[0]+offset);for(layer=steps+2*bevelSegments,offset=vlen*layer,i=0;flen>i;i++)face=faces[i],f3(face[0]+offset,face[1]+offset,face[2]+offset)}else{for(i=0;flen>i;i++)face=faces[i],f3(face[2],face[1],face[0]);for(i=0;flen>i;i++)face=faces[i],f3(face[0]+vlen*steps,face[1]+vlen*steps,face[2]+vlen*steps)}scope.addGroup(start,verticesArray.length/3-start,void 0!==options.material?options.material:0)}function buildSideFaces(){var start=verticesArray.length/3,layeroffset=0;for(sidewalls(contour,layeroffset),layeroffset+=contour.length,h=0,hl=holes.length;hl>h;h++)ahole=holes[h],sidewalls(ahole,layeroffset),layeroffset+=ahole.length;scope.addGroup(start,verticesArray.length/3-start,void 0!==options.extrudeMaterial?options.extrudeMaterial:1)}function sidewalls(contour,layeroffset){var j,k;for(i=contour.length;--i>=0;){j=i,k=i-1,0>k&&(k=contour.length-1);var s=0,sl=steps+2*bevelSegments;for(s=0;sl>s;s++){var slen1=vlen*s,slen2=vlen*(s+1),a=layeroffset+j+slen1,b=layeroffset+k+slen1,c=layeroffset+k+slen2,d=layeroffset+j+slen2;f4(a,b,c,d,contour,s,sl,j,k)}}}function v(x,y,z){placeholder.push(x),placeholder.push(y),placeholder.push(z)}function f3(a,b,c){addVertex(a),addVertex(b),addVertex(c);var nextIndex=verticesArray.length/3,uvs=uvgen.generateTopUV(scope,verticesArray,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]),addUV(uvs[1]),addUV(uvs[2])}function f4(a,b,c,d,wallContour,stepIndex,stepsLength,contourIndex1,contourIndex2){addVertex(a),addVertex(b),addVertex(d),addVertex(b),addVertex(c),addVertex(d);var nextIndex=verticesArray.length/3,uvs=uvgen.generateSideWallUV(scope,verticesArray,nextIndex-6,nextIndex-3,nextIndex-2,nextIndex-1);addUV(uvs[0]),addUV(uvs[1]),addUV(uvs[3]),addUV(uvs[1]),addUV(uvs[2]),addUV(uvs[3])}function addVertex(index){indicesArray.push(verticesArray.length/3),verticesArray.push(placeholder[3*index+0]),verticesArray.push(placeholder[3*index+1]),verticesArray.push(placeholder[3*index+2])}function addUV(vector2){uvArray.push(vector2.x),uvArray.push(vector2.y)}var extrudePts,splineTube,binormal,normal,position2,arrays=options.arrays?options.arrays:this.getArrays(),verticesArray=arrays.position,indicesArray=arrays.index,uvArray=arrays.uv,placeholder=[],amount=void 0!==options.amount?options.amount:100,bevelThickness=void 0!==options.bevelThickness?options.bevelThickness:6,bevelSize=void 0!==options.bevelSize?options.bevelSize:bevelThickness-2,bevelSegments=void 0!==options.bevelSegments?options.bevelSegments:3,bevelEnabled=void 0!==options.bevelEnabled?options.bevelEnabled:!0,curveSegments=void 0!==options.curveSegments?options.curveSegments:12,steps=void 0!==options.steps?options.steps:1,extrudePath=options.extrudePath,extrudeByPath=!1,uvgen=void 0!==options.UVGenerator?options.UVGenerator:ExtrudeGeometry.WorldUVGenerator;extrudePath&&(extrudePts=extrudePath.getSpacedPoints(steps),extrudeByPath=!0,bevelEnabled=!1,splineTube=void 0!==options.frames?options.frames:extrudePath.computeFrenetFrames(steps,!1),binormal=new Vector3,normal=new Vector3,position2=new Vector3),bevelEnabled||(bevelSegments=0,bevelThickness=0,bevelSize=0);var ahole,h,hl,scope=this,shapePoints=shape.extractPoints(curveSegments),vertices=shapePoints.shape,holes=shapePoints.holes,reverse=!ShapeUtils.isClockWise(vertices);if(reverse)for(vertices=vertices.reverse(),h=0,hl=holes.length;hl>h;h++)ahole=holes[h],ShapeUtils.isClockWise(ahole)&&(holes[h]=ahole.reverse());var faces=ShapeUtils.triangulateShape(vertices,holes),contour=vertices;for(h=0,hl=holes.length;hl>h;h++)ahole=holes[h],vertices=vertices.concat(ahole);for(var b,bs,t,z,vert,face,vlen=vertices.length,flen=faces.length,contourMovements=[],i=0,il=contour.length,j=il-1,k=i+1;il>i;i++,j++,k++)j===il&&(j=0),k===il&&(k=0),contourMovements[i]=getBevelVec(contour[i],contour[j],contour[k]);var oneHoleMovements,holesMovements=[],verticesMovements=contourMovements.concat();for(h=0,hl=holes.length;hl>h;h++){for(ahole=holes[h],oneHoleMovements=[],i=0,il=ahole.length,j=il-1,k=i+1;il>i;i++,j++,k++)j===il&&(j=0),k===il&&(k=0),oneHoleMovements[i]=getBevelVec(ahole[i],ahole[j],ahole[k]);holesMovements.push(oneHoleMovements),verticesMovements=verticesMovements.concat(oneHoleMovements)}for(b=0;bevelSegments>b;b++){for(t=b/bevelSegments,z=bevelThickness*Math.cos(t*Math.PI/2),bs=bevelSize*Math.sin(t*Math.PI/2),i=0,il=contour.length;il>i;i++)vert=scalePt2(contour[i],contourMovements[i],bs),v(vert.x,vert.y,-z);for(h=0,hl=holes.length;hl>h;h++)for(ahole=holes[h],oneHoleMovements=holesMovements[h],i=0,il=ahole.length;il>i;i++)vert=scalePt2(ahole[i],oneHoleMovements[i],bs),v(vert.x,vert.y,-z)}for(bs=bevelSize,i=0;vlen>i;i++)vert=bevelEnabled?scalePt2(vertices[i],verticesMovements[i],bs):vertices[i],extrudeByPath?(normal.copy(splineTube.normals[0]).multiplyScalar(vert.x),binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y),position2.copy(extrudePts[0]).add(normal).add(binormal),v(position2.x,position2.y,position2.z)):v(vert.x,vert.y,0);var s;for(s=1;steps>=s;s++)for(i=0;vlen>i;i++)vert=bevelEnabled?scalePt2(vertices[i],verticesMovements[i],bs):vertices[i],extrudeByPath?(normal.copy(splineTube.normals[s]).multiplyScalar(vert.x),binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y),position2.copy(extrudePts[s]).add(normal).add(binormal),v(position2.x,position2.y,position2.z)):v(vert.x,vert.y,amount/steps*s);for(b=bevelSegments-1;b>=0;b--){for(t=b/bevelSegments,z=bevelThickness*Math.cos(t*Math.PI/2),bs=bevelSize*Math.sin(t*Math.PI/2),i=0,il=contour.length;il>i;i++)vert=scalePt2(contour[i],contourMovements[i],bs),v(vert.x,vert.y,amount+z);for(h=0,hl=holes.length;hl>h;h++)for(ahole=holes[h],oneHoleMovements=holesMovements[h],i=0,il=ahole.length;il>i;i++)vert=scalePt2(ahole[i],oneHoleMovements[i],bs),extrudeByPath?v(vert.x,vert.y+extrudePts[steps-1].y,extrudePts[steps-1].x+z):v(vert.x,vert.y,amount+z)}buildLidFaces(),buildSideFaces(),options.arrays||(this.setIndex(indicesArray),this.addAttribute("position",new Float32BufferAttribute(verticesArray,3)),this.addAttribute("uv",new Float32BufferAttribute(options.arrays.uv,2)))},ExtrudeGeometry.WorldUVGenerator={generateTopUV:function(geometry,vertices,indexA,indexB,indexC){var a_x=vertices[3*indexA],a_y=vertices[3*indexA+1],b_x=vertices[3*indexB],b_y=vertices[3*indexB+1],c_x=vertices[3*indexC],c_y=vertices[3*indexC+1];return[new Vector2(a_x,a_y),new Vector2(b_x,b_y),new Vector2(c_x,c_y)]},generateSideWallUV:function(geometry,vertices,indexA,indexB,indexC,indexD){var a_x=vertices[3*indexA],a_y=vertices[3*indexA+1],a_z=vertices[3*indexA+2],b_x=vertices[3*indexB],b_y=vertices[3*indexB+1],b_z=vertices[3*indexB+2],c_x=vertices[3*indexC],c_y=vertices[3*indexC+1],c_z=vertices[3*indexC+2],d_x=vertices[3*indexD],d_y=vertices[3*indexD+1],d_z=vertices[3*indexD+2];return Math.abs(a_y-b_y)<.01?[new Vector2(a_x,1-a_z),new Vector2(b_x,1-b_z),new Vector2(c_x,1-c_z),new Vector2(d_x,1-d_z)]:[new Vector2(a_y,1-a_z),new Vector2(b_y,1-b_z),new Vector2(c_y,1-c_z),new Vector2(d_y,1-d_z)]}},TextGeometry.prototype=Object.create(Geometry.prototype),TextGeometry.prototype.constructor=TextGeometry,TextBufferGeometry.prototype=Object.create(ExtrudeBufferGeometry.prototype),TextBufferGeometry.prototype.constructor=TextBufferGeometry,SphereGeometry.prototype=Object.create(Geometry.prototype),SphereGeometry.prototype.constructor=SphereGeometry,SphereBufferGeometry.prototype=Object.create(BufferGeometry.prototype),SphereBufferGeometry.prototype.constructor=SphereBufferGeometry,RingGeometry.prototype=Object.create(Geometry.prototype),RingGeometry.prototype.constructor=RingGeometry,RingBufferGeometry.prototype=Object.create(BufferGeometry.prototype),RingBufferGeometry.prototype.constructor=RingBufferGeometry,LatheGeometry.prototype=Object.create(Geometry.prototype),LatheGeometry.prototype.constructor=LatheGeometry,LatheBufferGeometry.prototype=Object.create(BufferGeometry.prototype),LatheBufferGeometry.prototype.constructor=LatheBufferGeometry,ShapeGeometry.prototype=Object.create(Geometry.prototype),ShapeGeometry.prototype.constructor=ShapeGeometry,ShapeBufferGeometry.prototype=Object.create(BufferGeometry.prototype),ShapeBufferGeometry.prototype.constructor=ShapeBufferGeometry,EdgesGeometry.prototype=Object.create(BufferGeometry.prototype),EdgesGeometry.prototype.constructor=EdgesGeometry,CylinderGeometry.prototype=Object.create(Geometry.prototype),CylinderGeometry.prototype.constructor=CylinderGeometry,CylinderBufferGeometry.prototype=Object.create(BufferGeometry.prototype),CylinderBufferGeometry.prototype.constructor=CylinderBufferGeometry,ConeGeometry.prototype=Object.create(CylinderGeometry.prototype),ConeGeometry.prototype.constructor=ConeGeometry,ConeBufferGeometry.prototype=Object.create(CylinderBufferGeometry.prototype),ConeBufferGeometry.prototype.constructor=ConeBufferGeometry,CircleGeometry.prototype=Object.create(Geometry.prototype),CircleGeometry.prototype.constructor=CircleGeometry,CircleBufferGeometry.prototype=Object.create(BufferGeometry.prototype),CircleBufferGeometry.prototype.constructor=CircleBufferGeometry;var Geometries=Object.freeze({WireframeGeometry:WireframeGeometry,ParametricGeometry:ParametricGeometry,ParametricBufferGeometry:ParametricBufferGeometry,TetrahedronGeometry:TetrahedronGeometry,TetrahedronBufferGeometry:TetrahedronBufferGeometry,OctahedronGeometry:OctahedronGeometry,OctahedronBufferGeometry:OctahedronBufferGeometry,IcosahedronGeometry:IcosahedronGeometry,IcosahedronBufferGeometry:IcosahedronBufferGeometry,DodecahedronGeometry:DodecahedronGeometry,DodecahedronBufferGeometry:DodecahedronBufferGeometry,PolyhedronGeometry:PolyhedronGeometry,PolyhedronBufferGeometry:PolyhedronBufferGeometry,TubeGeometry:TubeGeometry,TubeBufferGeometry:TubeBufferGeometry,TorusKnotGeometry:TorusKnotGeometry,TorusKnotBufferGeometry:TorusKnotBufferGeometry,TorusGeometry:TorusGeometry,TorusBufferGeometry:TorusBufferGeometry,TextGeometry:TextGeometry,TextBufferGeometry:TextBufferGeometry,SphereGeometry:SphereGeometry,SphereBufferGeometry:SphereBufferGeometry,RingGeometry:RingGeometry,RingBufferGeometry:RingBufferGeometry,PlaneGeometry:PlaneGeometry,PlaneBufferGeometry:PlaneBufferGeometry,LatheGeometry:LatheGeometry,LatheBufferGeometry:LatheBufferGeometry,ShapeGeometry:ShapeGeometry,ShapeBufferGeometry:ShapeBufferGeometry,ExtrudeGeometry:ExtrudeGeometry,ExtrudeBufferGeometry:ExtrudeBufferGeometry,EdgesGeometry:EdgesGeometry,ConeGeometry:ConeGeometry,ConeBufferGeometry:ConeBufferGeometry,CylinderGeometry:CylinderGeometry,CylinderBufferGeometry:CylinderBufferGeometry,CircleGeometry:CircleGeometry,CircleBufferGeometry:CircleBufferGeometry,BoxGeometry:BoxGeometry,BoxBufferGeometry:BoxBufferGeometry});ShadowMaterial.prototype=Object.create(ShaderMaterial.prototype),ShadowMaterial.prototype.constructor=ShadowMaterial,ShadowMaterial.prototype.isShadowMaterial=!0,RawShaderMaterial.prototype=Object.create(ShaderMaterial.prototype),RawShaderMaterial.prototype.constructor=RawShaderMaterial,RawShaderMaterial.prototype.isRawShaderMaterial=!0,MeshStandardMaterial.prototype=Object.create(Material.prototype),MeshStandardMaterial.prototype.constructor=MeshStandardMaterial,MeshStandardMaterial.prototype.isMeshStandardMaterial=!0,MeshStandardMaterial.prototype.copy=function(source){return Material.prototype.copy.call(this,source),this.defines={STANDARD:""},this.color.copy(source.color),this.roughness=source.roughness,this.metalness=source.metalness,this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.roughnessMap=source.roughnessMap,this.metalnessMap=source.metalnessMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.envMapIntensity=source.envMapIntensity,this.refractionRatio=source.refractionRatio,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.skinning=source.skinning,this.morphTargets=source.morphTargets,this.morphNormals=source.morphNormals,this},MeshPhysicalMaterial.prototype=Object.create(MeshStandardMaterial.prototype),MeshPhysicalMaterial.prototype.constructor=MeshPhysicalMaterial,MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial=!0,MeshPhysicalMaterial.prototype.copy=function(source){return MeshStandardMaterial.prototype.copy.call(this,source),this.defines={PHYSICAL:""},this.reflectivity=source.reflectivity,this.clearCoat=source.clearCoat,this.clearCoatRoughness=source.clearCoatRoughness,this},MeshPhongMaterial.prototype=Object.create(Material.prototype),MeshPhongMaterial.prototype.constructor=MeshPhongMaterial,MeshPhongMaterial.prototype.isMeshPhongMaterial=!0,MeshPhongMaterial.prototype.copy=function(source){return Material.prototype.copy.call(this,source),this.color.copy(source.color),this.specular.copy(source.specular),this.shininess=source.shininess,this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.specularMap=source.specularMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.combine=source.combine,this.reflectivity=source.reflectivity,this.refractionRatio=source.refractionRatio,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.skinning=source.skinning,this.morphTargets=source.morphTargets,this.morphNormals=source.morphNormals,this},MeshToonMaterial.prototype=Object.create(MeshPhongMaterial.prototype),MeshToonMaterial.prototype.constructor=MeshToonMaterial,MeshToonMaterial.prototype.isMeshToonMaterial=!0,MeshToonMaterial.prototype.copy=function(source){return MeshPhongMaterial.prototype.copy.call(this,source),this.gradientMap=source.gradientMap,this},MeshNormalMaterial.prototype=Object.create(Material.prototype),MeshNormalMaterial.prototype.constructor=MeshNormalMaterial,MeshNormalMaterial.prototype.isMeshNormalMaterial=!0,MeshNormalMaterial.prototype.copy=function(source){return Material.prototype.copy.call(this,source),this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.skinning=source.skinning,this.morphTargets=source.morphTargets,this.morphNormals=source.morphNormals,this},MeshLambertMaterial.prototype=Object.create(Material.prototype),MeshLambertMaterial.prototype.constructor=MeshLambertMaterial,MeshLambertMaterial.prototype.isMeshLambertMaterial=!0,MeshLambertMaterial.prototype.copy=function(source){return Material.prototype.copy.call(this,source),this.color.copy(source.color),this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.specularMap=source.specularMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.combine=source.combine,this.reflectivity=source.reflectivity,this.refractionRatio=source.refractionRatio,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.skinning=source.skinning,this.morphTargets=source.morphTargets,this.morphNormals=source.morphNormals,this},LineDashedMaterial.prototype=Object.create(Material.prototype),LineDashedMaterial.prototype.constructor=LineDashedMaterial,LineDashedMaterial.prototype.isLineDashedMaterial=!0,LineDashedMaterial.prototype.copy=function(source){return Material.prototype.copy.call(this,source),this.color.copy(source.color),this.linewidth=source.linewidth,this.scale=source.scale,this.dashSize=source.dashSize,this.gapSize=source.gapSize,this};var Materials=Object.freeze({ShadowMaterial:ShadowMaterial,SpriteMaterial:SpriteMaterial,RawShaderMaterial:RawShaderMaterial,ShaderMaterial:ShaderMaterial,PointsMaterial:PointsMaterial,MeshPhysicalMaterial:MeshPhysicalMaterial,MeshStandardMaterial:MeshStandardMaterial,MeshPhongMaterial:MeshPhongMaterial,MeshToonMaterial:MeshToonMaterial,MeshNormalMaterial:MeshNormalMaterial,MeshLambertMaterial:MeshLambertMaterial,MeshDepthMaterial:MeshDepthMaterial,MeshBasicMaterial:MeshBasicMaterial,LineDashedMaterial:LineDashedMaterial,LineBasicMaterial:LineBasicMaterial,Material:Material}),Cache={enabled:!1,files:{},add:function(key,file){this.enabled!==!1&&(this.files[key]=file)},get:function(key){return this.enabled!==!1?this.files[key]:void 0},remove:function(key){delete this.files[key]},clear:function(){this.files={}}},DefaultLoadingManager=new LoadingManager;Object.assign(FileLoader.prototype,{load:function(url,onLoad,onProgress,onError){void 0===url&&(url=""),void 0!==this.path&&(url=this.path+url);var scope=this,cached=Cache.get(url);if(void 0!==cached)return scope.manager.itemStart(url),setTimeout(function(){onLoad&&onLoad(cached),scope.manager.itemEnd(url)},0),cached;var dataUriRegex=/^data:(.*?)(;base64)?,(.*)$/,dataUriRegexResult=url.match(dataUriRegex);if(dataUriRegexResult){var mimeType=dataUriRegexResult[1],isBase64=!!dataUriRegexResult[2],data=dataUriRegexResult[3];data=window.decodeURIComponent(data),isBase64&&(data=window.atob(data));try{var response,responseType=(this.responseType||"").toLowerCase();switch(responseType){case"arraybuffer":case"blob":response=new ArrayBuffer(data.length);for(var view=new Uint8Array(response),i=0;i<data.length;i++)view[i]=data.charCodeAt(i);"blob"===responseType&&(response=new Blob([response],{type:mimeType}));break;case"document":var parser=new DOMParser;response=parser.parseFromString(data,mimeType);break;case"json":response=JSON.parse(data);break;default:response=data}window.setTimeout(function(){onLoad&&onLoad(response),scope.manager.itemEnd(url)},0)}catch(error){window.setTimeout(function(){onError&&onError(error),scope.manager.itemEnd(url),scope.manager.itemError(url)},0)}}else{var request=new XMLHttpRequest;request.open("GET",url,!0),request.addEventListener("load",function(event){var response=event.target.response;Cache.add(url,response),200===this.status?(onLoad&&onLoad(response),scope.manager.itemEnd(url)):0===this.status?(console.warn("THREE.FileLoader: HTTP Status 0 received."),onLoad&&onLoad(response),scope.manager.itemEnd(url)):(onError&&onError(event),scope.manager.itemEnd(url),scope.manager.itemError(url))},!1),void 0!==onProgress&&request.addEventListener("progress",function(event){onProgress(event)},!1),request.addEventListener("error",function(event){onError&&onError(event),scope.manager.itemEnd(url),scope.manager.itemError(url)},!1),void 0!==this.responseType&&(request.responseType=this.responseType),void 0!==this.withCredentials&&(request.withCredentials=this.withCredentials),request.overrideMimeType&&request.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain");for(var header in this.requestHeader)request.setRequestHeader(header,this.requestHeader[header]);request.send(null)}return scope.manager.itemStart(url),request},setPath:function(value){return this.path=value,this},setResponseType:function(value){return this.responseType=value,this},setWithCredentials:function(value){return this.withCredentials=value,this},setMimeType:function(value){return this.mimeType=value,this},setRequestHeader:function(value){return this.requestHeader=value,this}}),Object.assign(CompressedTextureLoader.prototype,{load:function(url,onLoad,onProgress,onError){function loadTexture(i){loader.load(url[i],function(buffer){var texDatas=scope._parser(buffer,!0);images[i]={width:texDatas.width,height:texDatas.height,format:texDatas.format,mipmaps:texDatas.mipmaps},loaded+=1,6===loaded&&(1===texDatas.mipmapCount&&(texture.minFilter=LinearFilter),texture.format=texDatas.format,texture.needsUpdate=!0,onLoad&&onLoad(texture))},onProgress,onError)}var scope=this,images=[],texture=new CompressedTexture;texture.image=images;var loader=new FileLoader(this.manager);if(loader.setPath(this.path),loader.setResponseType("arraybuffer"),Array.isArray(url))for(var loaded=0,i=0,il=url.length;il>i;++i)loadTexture(i);else loader.load(url,function(buffer){var texDatas=scope._parser(buffer,!0);if(texDatas.isCubemap)for(var faces=texDatas.mipmaps.length/texDatas.mipmapCount,f=0;faces>f;f++){images[f]={mipmaps:[]};for(var i=0;i<texDatas.mipmapCount;i++)images[f].mipmaps.push(texDatas.mipmaps[f*texDatas.mipmapCount+i]),images[f].format=texDatas.format,images[f].width=texDatas.width,images[f].height=texDatas.height}else texture.image.width=texDatas.width,texture.image.height=texDatas.height,texture.mipmaps=texDatas.mipmaps;1===texDatas.mipmapCount&&(texture.minFilter=LinearFilter),texture.format=texDatas.format,texture.needsUpdate=!0,onLoad&&onLoad(texture)},onProgress,onError);return texture},setPath:function(value){return this.path=value,this}}),Object.assign(DataTextureLoader.prototype,{load:function(url,onLoad,onProgress,onError){var scope=this,texture=new DataTexture,loader=new FileLoader(this.manager);return loader.setResponseType("arraybuffer"),loader.load(url,function(buffer){var texData=scope._parser(buffer);texData&&(void 0!==texData.image?texture.image=texData.image:void 0!==texData.data&&(texture.image.width=texData.width,texture.image.height=texData.height,texture.image.data=texData.data),texture.wrapS=void 0!==texData.wrapS?texData.wrapS:ClampToEdgeWrapping,texture.wrapT=void 0!==texData.wrapT?texData.wrapT:ClampToEdgeWrapping,texture.magFilter=void 0!==texData.magFilter?texData.magFilter:LinearFilter,texture.minFilter=void 0!==texData.minFilter?texData.minFilter:LinearMipMapLinearFilter,texture.anisotropy=void 0!==texData.anisotropy?texData.anisotropy:1,void 0!==texData.format&&(texture.format=texData.format),void 0!==texData.type&&(texture.type=texData.type),void 0!==texData.mipmaps&&(texture.mipmaps=texData.mipmaps),1===texData.mipmapCount&&(texture.minFilter=LinearFilter),texture.needsUpdate=!0,onLoad&&onLoad(texture,texData))},onProgress,onError),texture}}),Object.assign(ImageLoader.prototype,{load:function(url,onLoad,onProgress,onError){void 0===url&&(url=""),void 0!==this.path&&(url=this.path+url);var scope=this,cached=Cache.get(url);if(void 0!==cached)return scope.manager.itemStart(url),setTimeout(function(){onLoad&&onLoad(cached),scope.manager.itemEnd(url)},0),cached;var image=document.createElementNS("http://www.w3.org/1999/xhtml","img");return image.addEventListener("load",function(){Cache.add(url,this),onLoad&&onLoad(this),scope.manager.itemEnd(url)},!1),image.addEventListener("error",function(event){onError&&onError(event),scope.manager.itemEnd(url),scope.manager.itemError(url)},!1),"data:"!==url.substr(0,5)&&void 0!==this.crossOrigin&&(image.crossOrigin=this.crossOrigin),scope.manager.itemStart(url),image.src=url,image},setCrossOrigin:function(value){return this.crossOrigin=value,this},setPath:function(value){return this.path=value,this}}),Object.assign(CubeTextureLoader.prototype,{load:function(urls,onLoad,onProgress,onError){function loadTexture(i){loader.load(urls[i],function(image){texture.images[i]=image,loaded++,6===loaded&&(texture.needsUpdate=!0,onLoad&&onLoad(texture))},void 0,onError)}var texture=new CubeTexture,loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin),loader.setPath(this.path);for(var loaded=0,i=0;i<urls.length;++i)loadTexture(i);return texture},setCrossOrigin:function(value){return this.crossOrigin=value,this},setPath:function(value){return this.path=value,this}}),Object.assign(TextureLoader.prototype,{load:function(url,onLoad,onProgress,onError){var loader=new ImageLoader(this.manager);loader.setCrossOrigin(this.crossOrigin),loader.setPath(this.path);var texture=new Texture;return texture.image=loader.load(url,function(){var isJPEG=url.search(/\.(jpg|jpeg)$/)>0||0===url.search(/^data\:image\/jpeg/);texture.format=isJPEG?RGBFormat:RGBAFormat,texture.needsUpdate=!0,void 0!==onLoad&&onLoad(texture)},onProgress,onError),texture},setCrossOrigin:function(value){return this.crossOrigin=value,this},setPath:function(value){return this.path=value,this}}),Light.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Light,isLight:!0,copy:function(source){return Object3D.prototype.copy.call(this,source),this.color.copy(source.color),this.intensity=source.intensity,this},toJSON:function(meta){var data=Object3D.prototype.toJSON.call(this,meta);return data.object.color=this.color.getHex(),data.object.intensity=this.intensity,void 0!==this.groundColor&&(data.object.groundColor=this.groundColor.getHex()),
void 0!==this.distance&&(data.object.distance=this.distance),void 0!==this.angle&&(data.object.angle=this.angle),void 0!==this.decay&&(data.object.decay=this.decay),void 0!==this.penumbra&&(data.object.penumbra=this.penumbra),void 0!==this.shadow&&(data.object.shadow=this.shadow.toJSON()),data}}),HemisphereLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:HemisphereLight,isHemisphereLight:!0,copy:function(source){return Light.prototype.copy.call(this,source),this.groundColor.copy(source.groundColor),this}}),Object.assign(LightShadow.prototype,{copy:function(source){return this.camera=source.camera.clone(),this.bias=source.bias,this.radius=source.radius,this.mapSize.copy(source.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var object={};return 0!==this.bias&&(object.bias=this.bias),1!==this.radius&&(object.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(object.mapSize=this.mapSize.toArray()),object.camera=this.camera.toJSON(!1).object,delete object.camera.matrix,object}}),SpotLightShadow.prototype=Object.assign(Object.create(LightShadow.prototype),{constructor:SpotLightShadow,isSpotLightShadow:!0,update:function(light){var camera=this.camera,fov=2*_Math.RAD2DEG*light.angle,aspect=this.mapSize.width/this.mapSize.height,far=light.distance||camera.far;fov===camera.fov&&aspect===camera.aspect&&far===camera.far||(camera.fov=fov,camera.aspect=aspect,camera.far=far,camera.updateProjectionMatrix())}}),SpotLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:SpotLight,isSpotLight:!0,copy:function(source){return Light.prototype.copy.call(this,source),this.distance=source.distance,this.angle=source.angle,this.penumbra=source.penumbra,this.decay=source.decay,this.target=source.target.clone(),this.shadow=source.shadow.clone(),this}}),PointLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:PointLight,isPointLight:!0,copy:function(source){return Light.prototype.copy.call(this,source),this.distance=source.distance,this.decay=source.decay,this.shadow=source.shadow.clone(),this}}),DirectionalLightShadow.prototype=Object.assign(Object.create(LightShadow.prototype),{constructor:DirectionalLightShadow}),DirectionalLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:DirectionalLight,isDirectionalLight:!0,copy:function(source){return Light.prototype.copy.call(this,source),this.target=source.target.clone(),this.shadow=source.shadow.clone(),this}}),AmbientLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:AmbientLight,isAmbientLight:!0}),RectAreaLight.prototype=Object.assign(Object.create(Light.prototype),{constructor:RectAreaLight,isRectAreaLight:!0,copy:function(source){return Light.prototype.copy.call(this,source),this.width=source.width,this.height=source.height,this},toJSON:function(meta){var data=Light.prototype.toJSON.call(this,meta);return data.object.width=this.width,data.object.height=this.height,data}});var AnimationUtils={arraySlice:function(array,from,to){return AnimationUtils.isTypedArray(array)?new array.constructor(array.subarray(from,void 0!==to?to:array.length)):array.slice(from,to)},convertArray:function(array,type,forceClone){return!array||!forceClone&&array.constructor===type?array:"number"==typeof type.BYTES_PER_ELEMENT?new type(array):Array.prototype.slice.call(array)},isTypedArray:function(object){return ArrayBuffer.isView(object)&&!(object instanceof DataView)},getKeyframeOrder:function(times){function compareTime(i,j){return times[i]-times[j]}for(var n=times.length,result=new Array(n),i=0;i!==n;++i)result[i]=i;return result.sort(compareTime),result},sortedArray:function(values,stride,order){for(var nValues=values.length,result=new values.constructor(nValues),i=0,dstOffset=0;dstOffset!==nValues;++i)for(var srcOffset=order[i]*stride,j=0;j!==stride;++j)result[dstOffset++]=values[srcOffset+j];return result},flattenJSON:function(jsonKeys,times,values,valuePropertyName){for(var i=1,key=jsonKeys[0];void 0!==key&&void 0===key[valuePropertyName];)key=jsonKeys[i++];if(void 0!==key){var value=key[valuePropertyName];if(void 0!==value)if(Array.isArray(value)){do value=key[valuePropertyName],void 0!==value&&(times.push(key.time),values.push.apply(values,value)),key=jsonKeys[i++];while(void 0!==key)}else if(void 0!==value.toArray){do value=key[valuePropertyName],void 0!==value&&(times.push(key.time),value.toArray(values,values.length)),key=jsonKeys[i++];while(void 0!==key)}else do value=key[valuePropertyName],void 0!==value&&(times.push(key.time),values.push(value)),key=jsonKeys[i++];while(void 0!==key)}}};Object.assign(Interpolant.prototype,{evaluate:function(t){var pp=this.parameterPositions,i1=this._cachedIndex,t1=pp[i1],t0=pp[i1-1];validate_interval:{seek:{var right;linear_scan:{forward_scan:if(!(t1>t)){for(var giveUpAt=i1+2;;){if(void 0===t1){if(t0>t)break forward_scan;return i1=pp.length,this._cachedIndex=i1,this.afterEnd_(i1-1,t,t0)}if(i1===giveUpAt)break;if(t0=t1,t1=pp[++i1],t1>t)break seek}right=pp.length;break linear_scan}{if(t>=t0)break validate_interval;var t1global=pp[1];t1global>t&&(i1=2,t0=t1global);for(var giveUpAt=i1-2;;){if(void 0===t0)return this._cachedIndex=0,this.beforeStart_(0,t,t1);if(i1===giveUpAt)break;if(t1=t0,t0=pp[--i1-1],t>=t0)break seek}right=i1,i1=0}}for(;right>i1;){var mid=i1+right>>>1;t<pp[mid]?right=mid:i1=mid+1}if(t1=pp[i1],t0=pp[i1-1],void 0===t0)return this._cachedIndex=0,this.beforeStart_(0,t,t1);if(void 0===t1)return i1=pp.length,this._cachedIndex=i1,this.afterEnd_(i1-1,t0,t)}this._cachedIndex=i1,this.intervalChanged_(i1,t0,t1)}return this.interpolate_(i1,t0,t,t1)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(index){for(var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset=index*stride,i=0;i!==stride;++i)result[i]=values[offset+i];return result},interpolate_:function(i1,t0,t,t1){throw new Error("call to abstract method")},intervalChanged_:function(i1,t0,t1){}}),Object.assign(Interpolant.prototype,{beforeStart_:Interpolant.prototype.copySampleValue_,afterEnd_:Interpolant.prototype.copySampleValue_}),CubicInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:CubicInterpolant,DefaultSettings_:{endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding},intervalChanged_:function(i1,t0,t1){var pp=this.parameterPositions,iPrev=i1-2,iNext=i1+1,tPrev=pp[iPrev],tNext=pp[iNext];if(void 0===tPrev)switch(this.getSettings_().endingStart){case ZeroSlopeEnding:iPrev=i1,tPrev=2*t0-t1;break;case WrapAroundEnding:iPrev=pp.length-2,tPrev=t0+pp[iPrev]-pp[iPrev+1];break;default:iPrev=i1,tPrev=t1}if(void 0===tNext)switch(this.getSettings_().endingEnd){case ZeroSlopeEnding:iNext=i1,tNext=2*t1-t0;break;case WrapAroundEnding:iNext=1,tNext=t1+pp[1]-pp[0];break;default:iNext=i1-1,tNext=t0}var halfDt=.5*(t1-t0),stride=this.valueSize;this._weightPrev=halfDt/(t0-tPrev),this._weightNext=halfDt/(tNext-t1),this._offsetPrev=iPrev*stride,this._offsetNext=iNext*stride},interpolate_:function(i1,t0,t,t1){for(var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,o1=i1*stride,o0=o1-stride,oP=this._offsetPrev,oN=this._offsetNext,wP=this._weightPrev,wN=this._weightNext,p=(t-t0)/(t1-t0),pp=p*p,ppp=pp*p,sP=-wP*ppp+2*wP*pp-wP*p,s0=(1+wP)*ppp+(-1.5-2*wP)*pp+(-.5+wP)*p+1,s1=(-1-wN)*ppp+(1.5+wN)*pp+.5*p,sN=wN*ppp-wN*pp,i=0;i!==stride;++i)result[i]=sP*values[oP+i]+s0*values[o0+i]+s1*values[o1+i]+sN*values[oN+i];return result}}),LinearInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:LinearInterpolant,interpolate_:function(i1,t0,t,t1){for(var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset1=i1*stride,offset0=offset1-stride,weight1=(t-t0)/(t1-t0),weight0=1-weight1,i=0;i!==stride;++i)result[i]=values[offset0+i]*weight0+values[offset1+i]*weight1;return result}}),DiscreteInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:DiscreteInterpolant,interpolate_:function(i1,t0,t,t1){return this.copySampleValue_(i1-1)}});var KeyframeTrackPrototype;KeyframeTrackPrototype={TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:InterpolateLinear,InterpolantFactoryMethodDiscrete:function(result){return new DiscreteInterpolant(this.times,this.values,this.getValueSize(),result)},InterpolantFactoryMethodLinear:function(result){return new LinearInterpolant(this.times,this.values,this.getValueSize(),result)},InterpolantFactoryMethodSmooth:function(result){return new CubicInterpolant(this.times,this.values,this.getValueSize(),result)},setInterpolation:function(interpolation){var factoryMethod;switch(interpolation){case InterpolateDiscrete:factoryMethod=this.InterpolantFactoryMethodDiscrete;break;case InterpolateLinear:factoryMethod=this.InterpolantFactoryMethodLinear;break;case InterpolateSmooth:factoryMethod=this.InterpolantFactoryMethodSmooth}if(void 0===factoryMethod){var message="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(interpolation===this.DefaultInterpolation)throw new Error(message);this.setInterpolation(this.DefaultInterpolation)}return void console.warn("THREE.KeyframeTrackPrototype:",message)}this.createInterpolant=factoryMethod},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return InterpolateSmooth}},getValueSize:function(){return this.values.length/this.times.length},shift:function(timeOffset){if(0!==timeOffset)for(var times=this.times,i=0,n=times.length;i!==n;++i)times[i]+=timeOffset;return this},scale:function(timeScale){if(1!==timeScale)for(var times=this.times,i=0,n=times.length;i!==n;++i)times[i]*=timeScale;return this},trim:function(startTime,endTime){for(var times=this.times,nKeys=times.length,from=0,to=nKeys-1;from!==nKeys&&times[from]<startTime;)++from;for(;-1!==to&&times[to]>endTime;)--to;if(++to,0!==from||to!==nKeys){from>=to&&(to=Math.max(to,1),from=to-1);var stride=this.getValueSize();this.times=AnimationUtils.arraySlice(times,from,to),this.values=AnimationUtils.arraySlice(this.values,from*stride,to*stride)}return this},validate:function(){var valid=!0,valueSize=this.getValueSize();valueSize-Math.floor(valueSize)!==0&&(console.error("THREE.KeyframeTrackPrototype: Invalid value size in track.",this),valid=!1);var times=this.times,values=this.values,nKeys=times.length;0===nKeys&&(console.error("THREE.KeyframeTrackPrototype: Track is empty.",this),valid=!1);for(var prevTime=null,i=0;i!==nKeys;i++){var currTime=times[i];if("number"==typeof currTime&&isNaN(currTime)){console.error("THREE.KeyframeTrackPrototype: Time is not a valid number.",this,i,currTime),valid=!1;break}if(null!==prevTime&&prevTime>currTime){console.error("THREE.KeyframeTrackPrototype: Out of order keys.",this,i,currTime,prevTime),valid=!1;break}prevTime=currTime}if(void 0!==values&&AnimationUtils.isTypedArray(values))for(var i=0,n=values.length;i!==n;++i){var value=values[i];if(isNaN(value)){console.error("THREE.KeyframeTrackPrototype: Value is not a valid number.",this,i,value),valid=!1;break}}return valid},optimize:function(){for(var times=this.times,values=this.values,stride=this.getValueSize(),smoothInterpolation=this.getInterpolation()===InterpolateSmooth,writeIndex=1,lastIndex=times.length-1,i=1;lastIndex>i;++i){var keep=!1,time=times[i],timeNext=times[i+1];if(time!==timeNext&&(1!==i||time!==time[0]))if(smoothInterpolation)keep=!0;else for(var offset=i*stride,offsetP=offset-stride,offsetN=offset+stride,j=0;j!==stride;++j){var value=values[offset+j];if(value!==values[offsetP+j]||value!==values[offsetN+j]){keep=!0;break}}if(keep){if(i!==writeIndex){times[writeIndex]=times[i];for(var readOffset=i*stride,writeOffset=writeIndex*stride,j=0;j!==stride;++j)values[writeOffset+j]=values[readOffset+j]}++writeIndex}}if(lastIndex>0){times[writeIndex]=times[lastIndex];for(var readOffset=lastIndex*stride,writeOffset=writeIndex*stride,j=0;j!==stride;++j)values[writeOffset+j]=values[readOffset+j];++writeIndex}return writeIndex!==times.length&&(this.times=AnimationUtils.arraySlice(times,0,writeIndex),this.values=AnimationUtils.arraySlice(values,0,writeIndex*stride)),this}},VectorKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrackPrototype),{constructor:VectorKeyframeTrack,ValueTypeName:"vector"}),QuaternionLinearInterpolant.prototype=Object.assign(Object.create(Interpolant.prototype),{constructor:QuaternionLinearInterpolant,interpolate_:function(i1,t0,t,t1){for(var result=this.resultBuffer,values=this.sampleValues,stride=this.valueSize,offset=i1*stride,alpha=(t-t0)/(t1-t0),end=offset+stride;offset!==end;offset+=4)Quaternion.slerpFlat(result,0,values,offset-stride,values,offset,alpha);return result}}),QuaternionKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrackPrototype),{constructor:QuaternionKeyframeTrack,ValueTypeName:"quaternion",DefaultInterpolation:InterpolateLinear,InterpolantFactoryMethodLinear:function(result){return new QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),result)},InterpolantFactoryMethodSmooth:void 0}),NumberKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrackPrototype),{constructor:NumberKeyframeTrack,ValueTypeName:"number"}),StringKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrackPrototype),{constructor:StringKeyframeTrack,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),BooleanKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrackPrototype),{constructor:BooleanKeyframeTrack,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:InterpolateDiscrete,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),ColorKeyframeTrack.prototype=Object.assign(Object.create(KeyframeTrackPrototype),{constructor:ColorKeyframeTrack,ValueTypeName:"color"}),KeyframeTrack.prototype=KeyframeTrackPrototype,KeyframeTrackPrototype.constructor=KeyframeTrack,Object.assign(KeyframeTrack,{parse:function(json){if(void 0===json.type)throw new Error("track type undefined, can not parse");var trackType=KeyframeTrack._getTrackTypeForValueTypeName(json.type);if(void 0===json.times){var times=[],values=[];AnimationUtils.flattenJSON(json.keys,times,values,"value"),json.times=times,json.values=values}return void 0!==trackType.parse?trackType.parse(json):new trackType(json.name,json.times,json.values,json.interpolation)},toJSON:function(track){var json,trackType=track.constructor;if(void 0!==trackType.toJSON)json=trackType.toJSON(track);else{json={name:track.name,times:AnimationUtils.convertArray(track.times,Array),values:AnimationUtils.convertArray(track.values,Array)};var interpolation=track.getInterpolation();interpolation!==track.DefaultInterpolation&&(json.interpolation=interpolation)}return json.type=track.ValueTypeName,json},_getTrackTypeForValueTypeName:function(typeName){switch(typeName.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return NumberKeyframeTrack;case"vector":case"vector2":case"vector3":case"vector4":return VectorKeyframeTrack;case"color":return ColorKeyframeTrack;case"quaternion":return QuaternionKeyframeTrack;case"bool":case"boolean":return BooleanKeyframeTrack;case"string":return StringKeyframeTrack}throw new Error("Unsupported typeName: "+typeName)}}),Object.assign(AnimationClip,{parse:function(json){for(var tracks=[],jsonTracks=json.tracks,frameTime=1/(json.fps||1),i=0,n=jsonTracks.length;i!==n;++i)tracks.push(KeyframeTrack.parse(jsonTracks[i]).scale(frameTime));return new AnimationClip(json.name,json.duration,tracks)},toJSON:function(clip){for(var tracks=[],clipTracks=clip.tracks,json={name:clip.name,duration:clip.duration,tracks:tracks},i=0,n=clipTracks.length;i!==n;++i)tracks.push(KeyframeTrack.toJSON(clipTracks[i]));return json},CreateFromMorphTargetSequence:function(name,morphTargetSequence,fps,noLoop){for(var numMorphTargets=morphTargetSequence.length,tracks=[],i=0;numMorphTargets>i;i++){var times=[],values=[];times.push((i+numMorphTargets-1)%numMorphTargets,i,(i+1)%numMorphTargets),values.push(0,1,0);var order=AnimationUtils.getKeyframeOrder(times);times=AnimationUtils.sortedArray(times,1,order),values=AnimationUtils.sortedArray(values,1,order),noLoop||0!==times[0]||(times.push(numMorphTargets),values.push(values[0])),tracks.push(new NumberKeyframeTrack(".morphTargetInfluences["+morphTargetSequence[i].name+"]",times,values).scale(1/fps))}return new AnimationClip(name,-1,tracks)},findByName:function(objectOrClipArray,name){var clipArray=objectOrClipArray;if(!Array.isArray(objectOrClipArray)){var o=objectOrClipArray;clipArray=o.geometry&&o.geometry.animations||o.animations}for(var i=0;i<clipArray.length;i++)if(clipArray[i].name===name)return clipArray[i];return null},CreateClipsFromMorphTargetSequences:function(morphTargets,fps,noLoop){for(var animationToMorphTargets={},pattern=/^([\w-]*?)([\d]+)$/,i=0,il=morphTargets.length;il>i;i++){var morphTarget=morphTargets[i],parts=morphTarget.name.match(pattern);if(parts&&parts.length>1){var name=parts[1],animationMorphTargets=animationToMorphTargets[name];animationMorphTargets||(animationToMorphTargets[name]=animationMorphTargets=[]),animationMorphTargets.push(morphTarget)}}var clips=[];for(var name in animationToMorphTargets)clips.push(AnimationClip.CreateFromMorphTargetSequence(name,animationToMorphTargets[name],fps,noLoop));return clips},parseAnimation:function(animation,bones){if(!animation)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var addNonemptyTrack=function(trackType,trackName,animationKeys,propertyName,destTracks){if(0!==animationKeys.length){var times=[],values=[];AnimationUtils.flattenJSON(animationKeys,times,values,propertyName),0!==times.length&&destTracks.push(new trackType(trackName,times,values))}},tracks=[],clipName=animation.name||"default",duration=animation.length||-1,fps=animation.fps||30,hierarchyTracks=animation.hierarchy||[],h=0;h<hierarchyTracks.length;h++){var animationKeys=hierarchyTracks[h].keys;if(animationKeys&&0!==animationKeys.length)if(animationKeys[0].morphTargets){for(var morphTargetNames={},k=0;k<animationKeys.length;k++)if(animationKeys[k].morphTargets)for(var m=0;m<animationKeys[k].morphTargets.length;m++)morphTargetNames[animationKeys[k].morphTargets[m]]=-1;for(var morphTargetName in morphTargetNames){for(var times=[],values=[],m=0;m!==animationKeys[k].morphTargets.length;++m){var animationKey=animationKeys[k];times.push(animationKey.time),values.push(animationKey.morphTarget===morphTargetName?1:0)}tracks.push(new NumberKeyframeTrack(".morphTargetInfluence["+morphTargetName+"]",times,values))}duration=morphTargetNames.length*(fps||1)}else{var boneName=".bones["+bones[h].name+"]";addNonemptyTrack(VectorKeyframeTrack,boneName+".position",animationKeys,"pos",tracks),addNonemptyTrack(QuaternionKeyframeTrack,boneName+".quaternion",animationKeys,"rot",tracks),addNonemptyTrack(VectorKeyframeTrack,boneName+".scale",animationKeys,"scl",tracks)}}if(0===tracks.length)return null;var clip=new AnimationClip(clipName,duration,tracks);return clip}}),Object.assign(AnimationClip.prototype,{resetDuration:function(){for(var tracks=this.tracks,duration=0,i=0,n=tracks.length;i!==n;++i){var track=this.tracks[i];duration=Math.max(duration,track.times[track.times.length-1])}this.duration=duration},trim:function(){for(var i=0;i<this.tracks.length;i++)this.tracks[i].trim(0,this.duration);return this},optimize:function(){for(var i=0;i<this.tracks.length;i++)this.tracks[i].optimize();return this}}),Object.assign(MaterialLoader.prototype,{load:function(url,onLoad,onProgress,onError){var scope=this,loader=new FileLoader(scope.manager);loader.load(url,function(text){onLoad(scope.parse(JSON.parse(text)))},onProgress,onError)},setTextures:function(value){this.textures=value},parse:function(json){function getTexture(name){return void 0===textures[name]&&console.warn("THREE.MaterialLoader: Undefined texture",name),textures[name]}var textures=this.textures,material=new Materials[json.type];if(void 0!==json.uuid&&(material.uuid=json.uuid),void 0!==json.name&&(material.name=json.name),void 0!==json.color&&material.color.setHex(json.color),void 0!==json.roughness&&(material.roughness=json.roughness),void 0!==json.metalness&&(material.metalness=json.metalness),void 0!==json.emissive&&material.emissive.setHex(json.emissive),void 0!==json.specular&&material.specular.setHex(json.specular),void 0!==json.shininess&&(material.shininess=json.shininess),void 0!==json.clearCoat&&(material.clearCoat=json.clearCoat),void 0!==json.clearCoatRoughness&&(material.clearCoatRoughness=json.clearCoatRoughness),void 0!==json.uniforms&&(material.uniforms=json.uniforms),void 0!==json.vertexShader&&(material.vertexShader=json.vertexShader),void 0!==json.fragmentShader&&(material.fragmentShader=json.fragmentShader),void 0!==json.vertexColors&&(material.vertexColors=json.vertexColors),void 0!==json.fog&&(material.fog=json.fog),void 0!==json.shading&&(material.shading=json.shading),void 0!==json.blending&&(material.blending=json.blending),void 0!==json.side&&(material.side=json.side),void 0!==json.opacity&&(material.opacity=json.opacity),void 0!==json.transparent&&(material.transparent=json.transparent),void 0!==json.alphaTest&&(material.alphaTest=json.alphaTest),void 0!==json.depthTest&&(material.depthTest=json.depthTest),void 0!==json.depthWrite&&(material.depthWrite=json.depthWrite),void 0!==json.colorWrite&&(material.colorWrite=json.colorWrite),void 0!==json.wireframe&&(material.wireframe=json.wireframe),void 0!==json.wireframeLinewidth&&(material.wireframeLinewidth=json.wireframeLinewidth),void 0!==json.wireframeLinecap&&(material.wireframeLinecap=json.wireframeLinecap),void 0!==json.wireframeLinejoin&&(material.wireframeLinejoin=json.wireframeLinejoin),void 0!==json.skinning&&(material.skinning=json.skinning),void 0!==json.morphTargets&&(material.morphTargets=json.morphTargets),void 0!==json.size&&(material.size=json.size),void 0!==json.sizeAttenuation&&(material.sizeAttenuation=json.sizeAttenuation),void 0!==json.map&&(material.map=getTexture(json.map)),void 0!==json.alphaMap&&(material.alphaMap=getTexture(json.alphaMap),material.transparent=!0),void 0!==json.bumpMap&&(material.bumpMap=getTexture(json.bumpMap)),void 0!==json.bumpScale&&(material.bumpScale=json.bumpScale),void 0!==json.normalMap&&(material.normalMap=getTexture(json.normalMap)),void 0!==json.normalScale){var normalScale=json.normalScale;Array.isArray(normalScale)===!1&&(normalScale=[normalScale,normalScale]),material.normalScale=(new Vector2).fromArray(normalScale)}return void 0!==json.displacementMap&&(material.displacementMap=getTexture(json.displacementMap)),void 0!==json.displacementScale&&(material.displacementScale=json.displacementScale),void 0!==json.displacementBias&&(material.displacementBias=json.displacementBias),void 0!==json.roughnessMap&&(material.roughnessMap=getTexture(json.roughnessMap)),void 0!==json.metalnessMap&&(material.metalnessMap=getTexture(json.metalnessMap)),void 0!==json.emissiveMap&&(material.emissiveMap=getTexture(json.emissiveMap)),void 0!==json.emissiveIntensity&&(material.emissiveIntensity=json.emissiveIntensity),void 0!==json.specularMap&&(material.specularMap=getTexture(json.specularMap)),void 0!==json.envMap&&(material.envMap=getTexture(json.envMap)),void 0!==json.reflectivity&&(material.reflectivity=json.reflectivity),void 0!==json.lightMap&&(material.lightMap=getTexture(json.lightMap)),void 0!==json.lightMapIntensity&&(material.lightMapIntensity=json.lightMapIntensity),void 0!==json.aoMap&&(material.aoMap=getTexture(json.aoMap)),void 0!==json.aoMapIntensity&&(material.aoMapIntensity=json.aoMapIntensity),void 0!==json.gradientMap&&(material.gradientMap=getTexture(json.gradientMap)),material}}),Object.assign(BufferGeometryLoader.prototype,{load:function(url,onLoad,onProgress,onError){var scope=this,loader=new FileLoader(scope.manager);loader.load(url,function(text){onLoad(scope.parse(JSON.parse(text)))},onProgress,onError)},parse:function(json){var geometry=new BufferGeometry,index=json.data.index;if(void 0!==index){var typedArray=new TYPED_ARRAYS[index.type](index.array);geometry.setIndex(new BufferAttribute(typedArray,1))}var attributes=json.data.attributes;for(var key in attributes){var attribute=attributes[key],typedArray=new TYPED_ARRAYS[attribute.type](attribute.array);geometry.addAttribute(key,new BufferAttribute(typedArray,attribute.itemSize,attribute.normalized))}var groups=json.data.groups||json.data.drawcalls||json.data.offsets;if(void 0!==groups)for(var i=0,n=groups.length;i!==n;++i){var group=groups[i];geometry.addGroup(group.start,group.count,group.materialIndex)}var boundingSphere=json.data.boundingSphere;if(void 0!==boundingSphere){var center=new Vector3;void 0!==boundingSphere.center&&center.fromArray(boundingSphere.center),geometry.boundingSphere=new Sphere(center,boundingSphere.radius)}return geometry}});var TYPED_ARRAYS={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};Loader.Handlers={handlers:[],add:function(regex,loader){this.handlers.push(regex,loader)},get:function(file){for(var handlers=this.handlers,i=0,l=handlers.length;l>i;i+=2){var regex=handlers[i],loader=handlers[i+1];if(regex.test(file))return loader}return null}},Object.assign(Loader.prototype,{crossOrigin:void 0,extractUrlBase:function(url){var parts=url.split("/");return 1===parts.length?"./":(parts.pop(),parts.join("/")+"/")},initMaterials:function(materials,texturePath,crossOrigin){for(var array=[],i=0;i<materials.length;++i)array[i]=this.createMaterial(materials[i],texturePath,crossOrigin);return array},createMaterial:function(){var BlendingMode={NoBlending:NoBlending,NormalBlending:NormalBlending,AdditiveBlending:AdditiveBlending,SubtractiveBlending:SubtractiveBlending,MultiplyBlending:MultiplyBlending,CustomBlending:CustomBlending},color=new Color,textureLoader=new TextureLoader,materialLoader=new MaterialLoader;return function(m,texturePath,crossOrigin){function loadTexture(path,repeat,offset,wrap,anisotropy){var texture,fullPath=texturePath+path,loader=Loader.Handlers.get(fullPath);null!==loader?texture=loader.load(fullPath):(textureLoader.setCrossOrigin(crossOrigin),texture=textureLoader.load(fullPath)),void 0!==repeat&&(texture.repeat.fromArray(repeat),1!==repeat[0]&&(texture.wrapS=RepeatWrapping),1!==repeat[1]&&(texture.wrapT=RepeatWrapping)),void 0!==offset&&texture.offset.fromArray(offset),void 0!==wrap&&("repeat"===wrap[0]&&(texture.wrapS=RepeatWrapping),"mirror"===wrap[0]&&(texture.wrapS=MirroredRepeatWrapping),"repeat"===wrap[1]&&(texture.wrapT=RepeatWrapping),"mirror"===wrap[1]&&(texture.wrapT=MirroredRepeatWrapping)),void 0!==anisotropy&&(texture.anisotropy=anisotropy);var uuid=_Math.generateUUID();return textures[uuid]=texture,uuid}var textures={},json={uuid:_Math.generateUUID(),type:"MeshLambertMaterial"};for(var name in m){var value=m[name];switch(name){case"DbgColor":case"DbgIndex":case"opticalDensity":case"illumination":break;case"DbgName":json.name=value;break;case"blending":json.blending=BlendingMode[value];break;case"colorAmbient":case"mapAmbient":console.warn("THREE.Loader.createMaterial:",name,"is no longer supported.");break;case"colorDiffuse":json.color=color.fromArray(value).getHex();break;case"colorSpecular":json.specular=color.fromArray(value).getHex();break;case"colorEmissive":json.emissive=color.fromArray(value).getHex();break;case"specularCoef":json.shininess=value;break;case"shading":"basic"===value.toLowerCase()&&(json.type="MeshBasicMaterial"),"phong"===value.toLowerCase()&&(json.type="MeshPhongMaterial"),"standard"===value.toLowerCase()&&(json.type="MeshStandardMaterial");break;case"mapDiffuse":json.map=loadTexture(value,m.mapDiffuseRepeat,m.mapDiffuseOffset,m.mapDiffuseWrap,m.mapDiffuseAnisotropy);break;case"mapDiffuseRepeat":case"mapDiffuseOffset":case"mapDiffuseWrap":case"mapDiffuseAnisotropy":break;case"mapEmissive":json.emissiveMap=loadTexture(value,m.mapEmissiveRepeat,m.mapEmissiveOffset,m.mapEmissiveWrap,m.mapEmissiveAnisotropy);break;case"mapEmissiveRepeat":case"mapEmissiveOffset":case"mapEmissiveWrap":case"mapEmissiveAnisotropy":break;case"mapLight":json.lightMap=loadTexture(value,m.mapLightRepeat,m.mapLightOffset,m.mapLightWrap,m.mapLightAnisotropy);break;case"mapLightRepeat":case"mapLightOffset":case"mapLightWrap":case"mapLightAnisotropy":break;case"mapAO":json.aoMap=loadTexture(value,m.mapAORepeat,m.mapAOOffset,m.mapAOWrap,m.mapAOAnisotropy);break;case"mapAORepeat":case"mapAOOffset":case"mapAOWrap":case"mapAOAnisotropy":break;case"mapBump":json.bumpMap=loadTexture(value,m.mapBumpRepeat,m.mapBumpOffset,m.mapBumpWrap,m.mapBumpAnisotropy);break;case"mapBumpScale":json.bumpScale=value;break;case"mapBumpRepeat":case"mapBumpOffset":case"mapBumpWrap":case"mapBumpAnisotropy":break;case"mapNormal":json.normalMap=loadTexture(value,m.mapNormalRepeat,m.mapNormalOffset,m.mapNormalWrap,m.mapNormalAnisotropy);break;case"mapNormalFactor":json.normalScale=[value,value];break;case"mapNormalRepeat":case"mapNormalOffset":case"mapNormalWrap":case"mapNormalAnisotropy":break;case"mapSpecular":json.specularMap=loadTexture(value,m.mapSpecularRepeat,m.mapSpecularOffset,m.mapSpecularWrap,m.mapSpecularAnisotropy);break;case"mapSpecularRepeat":case"mapSpecularOffset":case"mapSpecularWrap":case"mapSpecularAnisotropy":break;case"mapMetalness":json.metalnessMap=loadTexture(value,m.mapMetalnessRepeat,m.mapMetalnessOffset,m.mapMetalnessWrap,m.mapMetalnessAnisotropy);break;case"mapMetalnessRepeat":case"mapMetalnessOffset":case"mapMetalnessWrap":case"mapMetalnessAnisotropy":break;case"mapRoughness":json.roughnessMap=loadTexture(value,m.mapRoughnessRepeat,m.mapRoughnessOffset,m.mapRoughnessWrap,m.mapRoughnessAnisotropy);break;case"mapRoughnessRepeat":case"mapRoughnessOffset":case"mapRoughnessWrap":case"mapRoughnessAnisotropy":break;case"mapAlpha":json.alphaMap=loadTexture(value,m.mapAlphaRepeat,m.mapAlphaOffset,m.mapAlphaWrap,m.mapAlphaAnisotropy);break;case"mapAlphaRepeat":case"mapAlphaOffset":case"mapAlphaWrap":case"mapAlphaAnisotropy":break;case"flipSided":json.side=BackSide;break;case"doubleSided":json.side=DoubleSide;break;case"transparency":console.warn("THREE.Loader.createMaterial: transparency has been renamed to opacity"),json.opacity=value;break;case"depthTest":case"depthWrite":case"colorWrite":case"opacity":case"reflectivity":case"transparent":case"visible":case"wireframe":json[name]=value;break;case"vertexColors":value===!0&&(json.vertexColors=VertexColors),"face"===value&&(json.vertexColors=FaceColors);break;default:console.error("THREE.Loader.createMaterial: Unsupported",name,value)}}return"MeshBasicMaterial"===json.type&&delete json.emissive,"MeshPhongMaterial"!==json.type&&delete json.specular,json.opacity<1&&(json.transparent=!0),materialLoader.setTextures(textures),materialLoader.parse(json)}}()}),Object.assign(JSONLoader.prototype,{load:function(url,onLoad,onProgress,onError){var scope=this,texturePath=this.texturePath&&"string"==typeof this.texturePath?this.texturePath:Loader.prototype.extractUrlBase(url),loader=new FileLoader(this.manager);loader.setWithCredentials(this.withCredentials),loader.load(url,function(text){var json=JSON.parse(text),metadata=json.metadata;if(void 0!==metadata){var type=metadata.type;if(void 0!==type){if("object"===type.toLowerCase())return void console.error("THREE.JSONLoader: "+url+" should be loaded with THREE.ObjectLoader instead.");
if("scene"===type.toLowerCase())return void console.error("THREE.JSONLoader: "+url+" should be loaded with THREE.SceneLoader instead.")}}var object=scope.parse(json,texturePath);onLoad(object.geometry,object.materials)},onProgress,onError)},setTexturePath:function(value){this.texturePath=value},parse:function(){function parseModel(json,geometry){function isBitSet(value,position){return value&1<<position}var i,j,fi,offset,zLength,colorIndex,normalIndex,uvIndex,materialIndex,type,isQuad,hasMaterial,hasFaceVertexUv,hasFaceNormal,hasFaceVertexNormal,hasFaceColor,hasFaceVertexColor,vertex,face,faceA,faceB,hex,normal,uvLayer,uv,u,v,faces=json.faces,vertices=json.vertices,normals=json.normals,colors=json.colors,scale=json.scale,nUvLayers=0;if(void 0!==json.uvs){for(i=0;i<json.uvs.length;i++)json.uvs[i].length&&nUvLayers++;for(i=0;nUvLayers>i;i++)geometry.faceVertexUvs[i]=[]}for(offset=0,zLength=vertices.length;zLength>offset;)vertex=new Vector3,vertex.x=vertices[offset++]*scale,vertex.y=vertices[offset++]*scale,vertex.z=vertices[offset++]*scale,geometry.vertices.push(vertex);for(offset=0,zLength=faces.length;zLength>offset;)if(type=faces[offset++],isQuad=isBitSet(type,0),hasMaterial=isBitSet(type,1),hasFaceVertexUv=isBitSet(type,3),hasFaceNormal=isBitSet(type,4),hasFaceVertexNormal=isBitSet(type,5),hasFaceColor=isBitSet(type,6),hasFaceVertexColor=isBitSet(type,7),isQuad){if(faceA=new Face3,faceA.a=faces[offset],faceA.b=faces[offset+1],faceA.c=faces[offset+3],faceB=new Face3,faceB.a=faces[offset+1],faceB.b=faces[offset+2],faceB.c=faces[offset+3],offset+=4,hasMaterial&&(materialIndex=faces[offset++],faceA.materialIndex=materialIndex,faceB.materialIndex=materialIndex),fi=geometry.faces.length,hasFaceVertexUv)for(i=0;nUvLayers>i;i++)for(uvLayer=json.uvs[i],geometry.faceVertexUvs[i][fi]=[],geometry.faceVertexUvs[i][fi+1]=[],j=0;4>j;j++)uvIndex=faces[offset++],u=uvLayer[2*uvIndex],v=uvLayer[2*uvIndex+1],uv=new Vector2(u,v),2!==j&&geometry.faceVertexUvs[i][fi].push(uv),0!==j&&geometry.faceVertexUvs[i][fi+1].push(uv);if(hasFaceNormal&&(normalIndex=3*faces[offset++],faceA.normal.set(normals[normalIndex++],normals[normalIndex++],normals[normalIndex]),faceB.normal.copy(faceA.normal)),hasFaceVertexNormal)for(i=0;4>i;i++)normalIndex=3*faces[offset++],normal=new Vector3(normals[normalIndex++],normals[normalIndex++],normals[normalIndex]),2!==i&&faceA.vertexNormals.push(normal),0!==i&&faceB.vertexNormals.push(normal);if(hasFaceColor&&(colorIndex=faces[offset++],hex=colors[colorIndex],faceA.color.setHex(hex),faceB.color.setHex(hex)),hasFaceVertexColor)for(i=0;4>i;i++)colorIndex=faces[offset++],hex=colors[colorIndex],2!==i&&faceA.vertexColors.push(new Color(hex)),0!==i&&faceB.vertexColors.push(new Color(hex));geometry.faces.push(faceA),geometry.faces.push(faceB)}else{if(face=new Face3,face.a=faces[offset++],face.b=faces[offset++],face.c=faces[offset++],hasMaterial&&(materialIndex=faces[offset++],face.materialIndex=materialIndex),fi=geometry.faces.length,hasFaceVertexUv)for(i=0;nUvLayers>i;i++)for(uvLayer=json.uvs[i],geometry.faceVertexUvs[i][fi]=[],j=0;3>j;j++)uvIndex=faces[offset++],u=uvLayer[2*uvIndex],v=uvLayer[2*uvIndex+1],uv=new Vector2(u,v),geometry.faceVertexUvs[i][fi].push(uv);if(hasFaceNormal&&(normalIndex=3*faces[offset++],face.normal.set(normals[normalIndex++],normals[normalIndex++],normals[normalIndex])),hasFaceVertexNormal)for(i=0;3>i;i++)normalIndex=3*faces[offset++],normal=new Vector3(normals[normalIndex++],normals[normalIndex++],normals[normalIndex]),face.vertexNormals.push(normal);if(hasFaceColor&&(colorIndex=faces[offset++],face.color.setHex(colors[colorIndex])),hasFaceVertexColor)for(i=0;3>i;i++)colorIndex=faces[offset++],face.vertexColors.push(new Color(colors[colorIndex]));geometry.faces.push(face)}}function parseSkin(json,geometry){var influencesPerVertex=void 0!==json.influencesPerVertex?json.influencesPerVertex:2;if(json.skinWeights)for(var i=0,l=json.skinWeights.length;l>i;i+=influencesPerVertex){var x=json.skinWeights[i],y=influencesPerVertex>1?json.skinWeights[i+1]:0,z=influencesPerVertex>2?json.skinWeights[i+2]:0,w=influencesPerVertex>3?json.skinWeights[i+3]:0;geometry.skinWeights.push(new Vector4(x,y,z,w))}if(json.skinIndices)for(var i=0,l=json.skinIndices.length;l>i;i+=influencesPerVertex){var a=json.skinIndices[i],b=influencesPerVertex>1?json.skinIndices[i+1]:0,c=influencesPerVertex>2?json.skinIndices[i+2]:0,d=influencesPerVertex>3?json.skinIndices[i+3]:0;geometry.skinIndices.push(new Vector4(a,b,c,d))}geometry.bones=json.bones,geometry.bones&&geometry.bones.length>0&&(geometry.skinWeights.length!==geometry.skinIndices.length||geometry.skinIndices.length!==geometry.vertices.length)&&console.warn("When skinning, number of vertices ("+geometry.vertices.length+"), skinIndices ("+geometry.skinIndices.length+"), and skinWeights ("+geometry.skinWeights.length+") should match.")}function parseMorphing(json,geometry){var scale=json.scale;if(void 0!==json.morphTargets)for(var i=0,l=json.morphTargets.length;l>i;i++){geometry.morphTargets[i]={},geometry.morphTargets[i].name=json.morphTargets[i].name,geometry.morphTargets[i].vertices=[];for(var dstVertices=geometry.morphTargets[i].vertices,srcVertices=json.morphTargets[i].vertices,v=0,vl=srcVertices.length;vl>v;v+=3){var vertex=new Vector3;vertex.x=srcVertices[v]*scale,vertex.y=srcVertices[v+1]*scale,vertex.z=srcVertices[v+2]*scale,dstVertices.push(vertex)}}if(void 0!==json.morphColors&&json.morphColors.length>0){console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');for(var faces=geometry.faces,morphColors=json.morphColors[0].colors,i=0,l=faces.length;l>i;i++)faces[i].color.fromArray(morphColors,3*i)}}function parseAnimations(json,geometry){var outputAnimations=[],animations=[];void 0!==json.animation&&animations.push(json.animation),void 0!==json.animations&&(json.animations.length?animations=animations.concat(json.animations):animations.push(json.animations));for(var i=0;i<animations.length;i++){var clip=AnimationClip.parseAnimation(animations[i],geometry.bones);clip&&outputAnimations.push(clip)}if(geometry.morphTargets){var morphAnimationClips=AnimationClip.CreateClipsFromMorphTargetSequences(geometry.morphTargets,10);outputAnimations=outputAnimations.concat(morphAnimationClips)}outputAnimations.length>0&&(geometry.animations=outputAnimations)}return function(json,texturePath){void 0!==json.data&&(json=json.data),void 0!==json.scale?json.scale=1/json.scale:json.scale=1;var geometry=new Geometry;if(parseModel(json,geometry),parseSkin(json,geometry),parseMorphing(json,geometry),parseAnimations(json,geometry),geometry.computeFaceNormals(),geometry.computeBoundingSphere(),void 0===json.materials||0===json.materials.length)return{geometry:geometry};var materials=Loader.prototype.initMaterials(json.materials,texturePath,this.crossOrigin);return{geometry:geometry,materials:materials}}}()}),Object.assign(ObjectLoader.prototype,{load:function(url,onLoad,onProgress,onError){""===this.texturePath&&(this.texturePath=url.substring(0,url.lastIndexOf("/")+1));var scope=this,loader=new FileLoader(scope.manager);loader.load(url,function(text){var json=null;try{json=JSON.parse(text)}catch(error){return void 0!==onError&&onError(error),void console.error("THREE:ObjectLoader: Can't parse "+url+".",error.message)}var metadata=json.metadata;return void 0===metadata||void 0===metadata.type||"geometry"===metadata.type.toLowerCase()?void console.error("THREE.ObjectLoader: Can't load "+url+". Use THREE.JSONLoader instead."):void scope.parse(json,onLoad)},onProgress,onError)},setTexturePath:function(value){this.texturePath=value},setCrossOrigin:function(value){this.crossOrigin=value},parse:function(json,onLoad){var geometries=this.parseGeometries(json.geometries),images=this.parseImages(json.images,function(){void 0!==onLoad&&onLoad(object)}),textures=this.parseTextures(json.textures,images),materials=this.parseMaterials(json.materials,textures),object=this.parseObject(json.object,geometries,materials);return json.animations&&(object.animations=this.parseAnimations(json.animations)),void 0!==json.images&&0!==json.images.length||void 0!==onLoad&&onLoad(object),object},parseGeometries:function(json){var geometries={};if(void 0!==json)for(var geometryLoader=new JSONLoader,bufferGeometryLoader=new BufferGeometryLoader,i=0,l=json.length;l>i;i++){var geometry,data=json[i];switch(data.type){case"PlaneGeometry":case"PlaneBufferGeometry":geometry=new Geometries[data.type](data.width,data.height,data.widthSegments,data.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":geometry=new Geometries[data.type](data.width,data.height,data.depth,data.widthSegments,data.heightSegments,data.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":geometry=new Geometries[data.type](data.radius,data.segments,data.thetaStart,data.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":geometry=new Geometries[data.type](data.radiusTop,data.radiusBottom,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":geometry=new Geometries[data.type](data.radius,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":geometry=new Geometries[data.type](data.radius,data.widthSegments,data.heightSegments,data.phiStart,data.phiLength,data.thetaStart,data.thetaLength);break;case"DodecahedronGeometry":case"IcosahedronGeometry":case"OctahedronGeometry":case"TetrahedronGeometry":geometry=new Geometries[data.type](data.radius,data.detail);break;case"RingGeometry":case"RingBufferGeometry":geometry=new Geometries[data.type](data.innerRadius,data.outerRadius,data.thetaSegments,data.phiSegments,data.thetaStart,data.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":geometry=new Geometries[data.type](data.radius,data.tube,data.radialSegments,data.tubularSegments,data.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":geometry=new Geometries[data.type](data.radius,data.tube,data.tubularSegments,data.radialSegments,data.p,data.q);break;case"LatheGeometry":case"LatheBufferGeometry":geometry=new Geometries[data.type](data.points,data.segments,data.phiStart,data.phiLength);break;case"BufferGeometry":geometry=bufferGeometryLoader.parse(data);break;case"Geometry":geometry=geometryLoader.parse(data,this.texturePath).geometry;break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+data.type+'"');continue}geometry.uuid=data.uuid,void 0!==data.name&&(geometry.name=data.name),geometries[data.uuid]=geometry}return geometries},parseMaterials:function(json,textures){var materials={};if(void 0!==json){var loader=new MaterialLoader;loader.setTextures(textures);for(var i=0,l=json.length;l>i;i++){var data=json[i];if("MultiMaterial"===data.type){for(var array=[],j=0;j<data.materials.length;j++)array.push(loader.parse(data.materials[j]));materials[data.uuid]=array}else materials[data.uuid]=loader.parse(data)}}return materials},parseAnimations:function(json){for(var animations=[],i=0;i<json.length;i++){var clip=AnimationClip.parse(json[i]);animations.push(clip)}return animations},parseImages:function(json,onLoad){function loadImage(url){return scope.manager.itemStart(url),loader.load(url,function(){scope.manager.itemEnd(url)},void 0,function(){scope.manager.itemEnd(url),scope.manager.itemError(url)})}var scope=this,images={};if(void 0!==json&&json.length>0){var manager=new LoadingManager(onLoad),loader=new ImageLoader(manager);loader.setCrossOrigin(this.crossOrigin);for(var i=0,l=json.length;l>i;i++){var image=json[i],path=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(image.url)?image.url:scope.texturePath+image.url;images[image.uuid]=loadImage(path)}}return images},parseTextures:function(json,images){function parseConstant(value,type){return"number"==typeof value?value:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",value),type[value])}var textures={};if(void 0!==json)for(var i=0,l=json.length;l>i;i++){var data=json[i];void 0===data.image&&console.warn('THREE.ObjectLoader: No "image" specified for',data.uuid),void 0===images[data.image]&&console.warn("THREE.ObjectLoader: Undefined image",data.image);var texture=new Texture(images[data.image]);texture.needsUpdate=!0,texture.uuid=data.uuid,void 0!==data.name&&(texture.name=data.name),void 0!==data.mapping&&(texture.mapping=parseConstant(data.mapping,TEXTURE_MAPPING)),void 0!==data.offset&&texture.offset.fromArray(data.offset),void 0!==data.repeat&&texture.repeat.fromArray(data.repeat),void 0!==data.wrap&&(texture.wrapS=parseConstant(data.wrap[0],TEXTURE_WRAPPING),texture.wrapT=parseConstant(data.wrap[1],TEXTURE_WRAPPING)),void 0!==data.minFilter&&(texture.minFilter=parseConstant(data.minFilter,TEXTURE_FILTER)),void 0!==data.magFilter&&(texture.magFilter=parseConstant(data.magFilter,TEXTURE_FILTER)),void 0!==data.anisotropy&&(texture.anisotropy=data.anisotropy),void 0!==data.flipY&&(texture.flipY=data.flipY),textures[data.uuid]=texture}return textures},parseObject:function(){var matrix=new Matrix4;return function(data,geometries,materials){function getGeometry(name){return void 0===geometries[name]&&console.warn("THREE.ObjectLoader: Undefined geometry",name),geometries[name]}function getMaterial(name){if(void 0!==name){if(Array.isArray(name)){for(var array=[],i=0,l=name.length;l>i;i++){var uuid=name[i];void 0===materials[uuid]&&console.warn("THREE.ObjectLoader: Undefined material",uuid),array.push(materials[uuid])}return array}return void 0===materials[name]&&console.warn("THREE.ObjectLoader: Undefined material",name),materials[name]}}var object;switch(data.type){case"Scene":object=new Scene,void 0!==data.background&&Number.isInteger(data.background)&&(object.background=new Color(data.background)),void 0!==data.fog&&("Fog"===data.fog.type?object.fog=new Fog(data.fog.color,data.fog.near,data.fog.far):"FogExp2"===data.fog.type&&(object.fog=new FogExp2(data.fog.color,data.fog.density)));break;case"PerspectiveCamera":object=new PerspectiveCamera(data.fov,data.aspect,data.near,data.far),void 0!==data.focus&&(object.focus=data.focus),void 0!==data.zoom&&(object.zoom=data.zoom),void 0!==data.filmGauge&&(object.filmGauge=data.filmGauge),void 0!==data.filmOffset&&(object.filmOffset=data.filmOffset),void 0!==data.view&&(object.view=Object.assign({},data.view));break;case"OrthographicCamera":object=new OrthographicCamera(data.left,data.right,data.top,data.bottom,data.near,data.far);break;case"AmbientLight":object=new AmbientLight(data.color,data.intensity);break;case"DirectionalLight":object=new DirectionalLight(data.color,data.intensity);break;case"PointLight":object=new PointLight(data.color,data.intensity,data.distance,data.decay);break;case"RectAreaLight":object=new RectAreaLight(data.color,data.intensity,data.width,data.height);break;case"SpotLight":object=new SpotLight(data.color,data.intensity,data.distance,data.angle,data.penumbra,data.decay);break;case"HemisphereLight":object=new HemisphereLight(data.color,data.groundColor,data.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":var geometry=getGeometry(data.geometry),material=getMaterial(data.material);object=geometry.bones&&geometry.bones.length>0?new SkinnedMesh(geometry,material):new Mesh(geometry,material);break;case"LOD":object=new LOD;break;case"Line":object=new Line(getGeometry(data.geometry),getMaterial(data.material),data.mode);break;case"LineLoop":object=new LineLoop(getGeometry(data.geometry),getMaterial(data.material));break;case"LineSegments":object=new LineSegments(getGeometry(data.geometry),getMaterial(data.material));break;case"PointCloud":case"Points":object=new Points(getGeometry(data.geometry),getMaterial(data.material));break;case"Sprite":object=new Sprite(getMaterial(data.material));break;case"Group":object=new Group;break;default:object=new Object3D}if(object.uuid=data.uuid,void 0!==data.name&&(object.name=data.name),void 0!==data.matrix?(matrix.fromArray(data.matrix),matrix.decompose(object.position,object.quaternion,object.scale)):(void 0!==data.position&&object.position.fromArray(data.position),void 0!==data.rotation&&object.rotation.fromArray(data.rotation),void 0!==data.quaternion&&object.quaternion.fromArray(data.quaternion),void 0!==data.scale&&object.scale.fromArray(data.scale)),void 0!==data.castShadow&&(object.castShadow=data.castShadow),void 0!==data.receiveShadow&&(object.receiveShadow=data.receiveShadow),data.shadow&&(void 0!==data.shadow.bias&&(object.shadow.bias=data.shadow.bias),void 0!==data.shadow.radius&&(object.shadow.radius=data.shadow.radius),void 0!==data.shadow.mapSize&&object.shadow.mapSize.fromArray(data.shadow.mapSize),void 0!==data.shadow.camera&&(object.shadow.camera=this.parseObject(data.shadow.camera))),void 0!==data.visible&&(object.visible=data.visible),void 0!==data.userData&&(object.userData=data.userData),void 0!==data.children)for(var child in data.children)object.add(this.parseObject(data.children[child],geometries,materials));if("LOD"===data.type)for(var levels=data.levels,l=0;l<levels.length;l++){var level=levels[l],child=object.getObjectByProperty("uuid",level.object);void 0!==child&&object.addLevel(child,level.distance)}return object}}()});var TEXTURE_MAPPING={UVMapping:UVMapping,CubeReflectionMapping:CubeReflectionMapping,CubeRefractionMapping:CubeRefractionMapping,EquirectangularReflectionMapping:EquirectangularReflectionMapping,EquirectangularRefractionMapping:EquirectangularRefractionMapping,SphericalReflectionMapping:SphericalReflectionMapping,CubeUVReflectionMapping:CubeUVReflectionMapping,CubeUVRefractionMapping:CubeUVRefractionMapping},TEXTURE_WRAPPING={RepeatWrapping:RepeatWrapping,ClampToEdgeWrapping:ClampToEdgeWrapping,MirroredRepeatWrapping:MirroredRepeatWrapping},TEXTURE_FILTER={NearestFilter:NearestFilter,NearestMipMapNearestFilter:NearestMipMapNearestFilter,NearestMipMapLinearFilter:NearestMipMapLinearFilter,LinearFilter:LinearFilter,LinearMipMapNearestFilter:LinearMipMapNearestFilter,LinearMipMapLinearFilter:LinearMipMapLinearFilter};Object.assign(Curve.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(u){var t=this.getUtoTmapping(u);return this.getPoint(t)},getPoints:function(divisions){void 0===divisions&&(divisions=5);for(var points=[],d=0;divisions>=d;d++)points.push(this.getPoint(d/divisions));return points},getSpacedPoints:function(divisions){void 0===divisions&&(divisions=5);for(var points=[],d=0;divisions>=d;d++)points.push(this.getPointAt(d/divisions));return points},getLength:function(){var lengths=this.getLengths();return lengths[lengths.length-1]},getLengths:function(divisions){if(void 0===divisions&&(divisions=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===divisions+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var current,p,cache=[],last=this.getPoint(0),sum=0;for(cache.push(0),p=1;divisions>=p;p++)current=this.getPoint(p/divisions),sum+=current.distanceTo(last),cache.push(sum),last=current;return this.cacheArcLengths=cache,cache},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(u,distance){var targetArcLength,arcLengths=this.getLengths(),i=0,il=arcLengths.length;targetArcLength=distance?distance:u*arcLengths[il-1];for(var comparison,low=0,high=il-1;high>=low;)if(i=Math.floor(low+(high-low)/2),comparison=arcLengths[i]-targetArcLength,0>comparison)low=i+1;else{if(!(comparison>0)){high=i;break}high=i-1}if(i=high,arcLengths[i]===targetArcLength)return i/(il-1);var lengthBefore=arcLengths[i],lengthAfter=arcLengths[i+1],segmentLength=lengthAfter-lengthBefore,segmentFraction=(targetArcLength-lengthBefore)/segmentLength,t=(i+segmentFraction)/(il-1);return t},getTangent:function(t){var delta=1e-4,t1=t-delta,t2=t+delta;0>t1&&(t1=0),t2>1&&(t2=1);var pt1=this.getPoint(t1),pt2=this.getPoint(t2),vec=pt2.clone().sub(pt1);return vec.normalize()},getTangentAt:function(u){var t=this.getUtoTmapping(u);return this.getTangent(t)},computeFrenetFrames:function(segments,closed){var i,u,theta,normal=new Vector3,tangents=[],normals=[],binormals=[],vec=new Vector3,mat=new Matrix4;for(i=0;segments>=i;i++)u=i/segments,tangents[i]=this.getTangentAt(u),tangents[i].normalize();normals[0]=new Vector3,binormals[0]=new Vector3;var min=Number.MAX_VALUE,tx=Math.abs(tangents[0].x),ty=Math.abs(tangents[0].y),tz=Math.abs(tangents[0].z);for(min>=tx&&(min=tx,normal.set(1,0,0)),min>=ty&&(min=ty,normal.set(0,1,0)),min>=tz&&normal.set(0,0,1),vec.crossVectors(tangents[0],normal).normalize(),normals[0].crossVectors(tangents[0],vec),binormals[0].crossVectors(tangents[0],normals[0]),i=1;segments>=i;i++)normals[i]=normals[i-1].clone(),binormals[i]=binormals[i-1].clone(),vec.crossVectors(tangents[i-1],tangents[i]),vec.length()>Number.EPSILON&&(vec.normalize(),theta=Math.acos(_Math.clamp(tangents[i-1].dot(tangents[i]),-1,1)),normals[i].applyMatrix4(mat.makeRotationAxis(vec,theta))),binormals[i].crossVectors(tangents[i],normals[i]);if(closed===!0)for(theta=Math.acos(_Math.clamp(normals[0].dot(normals[segments]),-1,1)),theta/=segments,tangents[0].dot(vec.crossVectors(normals[0],normals[segments]))>0&&(theta=-theta),i=1;segments>=i;i++)normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i],theta*i)),binormals[i].crossVectors(tangents[i],normals[i]);return{tangents:tangents,normals:normals,binormals:binormals}}}),LineCurve.prototype=Object.create(Curve.prototype),LineCurve.prototype.constructor=LineCurve,LineCurve.prototype.isLineCurve=!0,LineCurve.prototype.getPoint=function(t){if(1===t)return this.v2.clone();var point=this.v2.clone().sub(this.v1);return point.multiplyScalar(t).add(this.v1),point},LineCurve.prototype.getPointAt=function(u){return this.getPoint(u)},LineCurve.prototype.getTangent=function(t){var tangent=this.v2.clone().sub(this.v1);return tangent.normalize()},CurvePath.prototype=Object.assign(Object.create(Curve.prototype),{constructor:CurvePath,add:function(curve){this.curves.push(curve)},closePath:function(){var startPoint=this.curves[0].getPoint(0),endPoint=this.curves[this.curves.length-1].getPoint(1);startPoint.equals(endPoint)||this.curves.push(new LineCurve(endPoint,startPoint))},getPoint:function(t){for(var d=t*this.getLength(),curveLengths=this.getCurveLengths(),i=0;i<curveLengths.length;){if(curveLengths[i]>=d){var diff=curveLengths[i]-d,curve=this.curves[i],segmentLength=curve.getLength(),u=0===segmentLength?0:1-diff/segmentLength;return curve.getPointAt(u)}i++}return null},getLength:function(){var lens=this.getCurveLengths();return lens[lens.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var lengths=[],sums=0,i=0,l=this.curves.length;l>i;i++)sums+=this.curves[i].getLength(),lengths.push(sums);return this.cacheLengths=lengths,lengths},getSpacedPoints:function(divisions){void 0===divisions&&(divisions=40);for(var points=[],i=0;divisions>=i;i++)points.push(this.getPoint(i/divisions));return this.autoClose&&points.push(points[0]),points},getPoints:function(divisions){divisions=divisions||12;for(var last,points=[],i=0,curves=this.curves;i<curves.length;i++)for(var curve=curves[i],resolution=curve&&curve.isEllipseCurve?2*divisions:curve&&curve.isLineCurve?1:curve&&curve.isSplineCurve?divisions*curve.points.length:divisions,pts=curve.getPoints(resolution),j=0;j<pts.length;j++){var point=pts[j];last&&last.equals(point)||(points.push(point),last=point)}return this.autoClose&&points.length>1&&!points[points.length-1].equals(points[0])&&points.push(points[0]),points},createPointsGeometry:function(divisions){var pts=this.getPoints(divisions);return this.createGeometry(pts)},createSpacedPointsGeometry:function(divisions){var pts=this.getSpacedPoints(divisions);return this.createGeometry(pts)},createGeometry:function(points){for(var geometry=new Geometry,i=0,l=points.length;l>i;i++){var point=points[i];geometry.vertices.push(new Vector3(point.x,point.y,point.z||0))}return geometry}}),EllipseCurve.prototype=Object.create(Curve.prototype),EllipseCurve.prototype.constructor=EllipseCurve,EllipseCurve.prototype.isEllipseCurve=!0,EllipseCurve.prototype.getPoint=function(t){for(var twoPi=2*Math.PI,deltaAngle=this.aEndAngle-this.aStartAngle,samePoints=Math.abs(deltaAngle)<Number.EPSILON;0>deltaAngle;)deltaAngle+=twoPi;for(;deltaAngle>twoPi;)deltaAngle-=twoPi;deltaAngle<Number.EPSILON&&(deltaAngle=samePoints?0:twoPi),this.aClockwise!==!0||samePoints||(deltaAngle===twoPi?deltaAngle=-twoPi:deltaAngle-=twoPi);var angle=this.aStartAngle+t*deltaAngle,x=this.aX+this.xRadius*Math.cos(angle),y=this.aY+this.yRadius*Math.sin(angle);if(0!==this.aRotation){var cos=Math.cos(this.aRotation),sin=Math.sin(this.aRotation),tx=x-this.aX,ty=y-this.aY;x=tx*cos-ty*sin+this.aX,y=tx*sin+ty*cos+this.aY}return new Vector2(x,y)},SplineCurve.prototype=Object.create(Curve.prototype),SplineCurve.prototype.constructor=SplineCurve,SplineCurve.prototype.isSplineCurve=!0,SplineCurve.prototype.getPoint=function(t){var points=this.points,point=(points.length-1)*t,intPoint=Math.floor(point),weight=point-intPoint,point0=points[0===intPoint?intPoint:intPoint-1],point1=points[intPoint],point2=points[intPoint>points.length-2?points.length-1:intPoint+1],point3=points[intPoint>points.length-3?points.length-1:intPoint+2];return new Vector2(CatmullRom(weight,point0.x,point1.x,point2.x,point3.x),CatmullRom(weight,point0.y,point1.y,point2.y,point3.y))},CubicBezierCurve.prototype=Object.create(Curve.prototype),CubicBezierCurve.prototype.constructor=CubicBezierCurve,CubicBezierCurve.prototype.getPoint=function(t){var v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;return new Vector2(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y))},QuadraticBezierCurve.prototype=Object.create(Curve.prototype),QuadraticBezierCurve.prototype.constructor=QuadraticBezierCurve,QuadraticBezierCurve.prototype.getPoint=function(t){var v0=this.v0,v1=this.v1,v2=this.v2;return new Vector2(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y))};var PathPrototype=Object.assign(Object.create(CurvePath.prototype),{fromPoints:function(vectors){this.moveTo(vectors[0].x,vectors[0].y);for(var i=1,l=vectors.length;l>i;i++)this.lineTo(vectors[i].x,vectors[i].y)},moveTo:function(x,y){this.currentPoint.set(x,y)},lineTo:function(x,y){var curve=new LineCurve(this.currentPoint.clone(),new Vector2(x,y));this.curves.push(curve),this.currentPoint.set(x,y)},quadraticCurveTo:function(aCPx,aCPy,aX,aY){var curve=new QuadraticBezierCurve(this.currentPoint.clone(),new Vector2(aCPx,aCPy),new Vector2(aX,aY));this.curves.push(curve),this.currentPoint.set(aX,aY)},bezierCurveTo:function(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){var curve=new CubicBezierCurve(this.currentPoint.clone(),new Vector2(aCP1x,aCP1y),new Vector2(aCP2x,aCP2y),new Vector2(aX,aY));this.curves.push(curve),this.currentPoint.set(aX,aY)},splineThru:function(pts){var npts=[this.currentPoint.clone()].concat(pts),curve=new SplineCurve(npts);this.curves.push(curve),this.currentPoint.copy(pts[pts.length-1])},arc:function(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){var x0=this.currentPoint.x,y0=this.currentPoint.y;this.absarc(aX+x0,aY+y0,aRadius,aStartAngle,aEndAngle,aClockwise)},absarc:function(aX,aY,aRadius,aStartAngle,aEndAngle,aClockwise){this.absellipse(aX,aY,aRadius,aRadius,aStartAngle,aEndAngle,aClockwise)},ellipse:function(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){var x0=this.currentPoint.x,y0=this.currentPoint.y;this.absellipse(aX+x0,aY+y0,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation)},absellipse:function(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation){var curve=new EllipseCurve(aX,aY,xRadius,yRadius,aStartAngle,aEndAngle,aClockwise,aRotation);if(this.curves.length>0){var firstPoint=curve.getPoint(0);firstPoint.equals(this.currentPoint)||this.lineTo(firstPoint.x,firstPoint.y)}this.curves.push(curve);var lastPoint=curve.getPoint(1);this.currentPoint.copy(lastPoint)}});Path.prototype=PathPrototype,PathPrototype.constructor=Path,Shape.prototype=Object.assign(Object.create(PathPrototype),{constructor:Shape,getPointsHoles:function(divisions){for(var holesPts=[],i=0,l=this.holes.length;l>i;i++)holesPts[i]=this.holes[i].getPoints(divisions);return holesPts},extractAllPoints:function(divisions){return{shape:this.getPoints(divisions),holes:this.getPointsHoles(divisions)}},extractPoints:function(divisions){return this.extractAllPoints(divisions)}}),Object.assign(ShapePath.prototype,{moveTo:function(x,y){this.currentPath=new Path,this.subPaths.push(this.currentPath),this.currentPath.moveTo(x,y)},lineTo:function(x,y){this.currentPath.lineTo(x,y)},quadraticCurveTo:function(aCPx,aCPy,aX,aY){this.currentPath.quadraticCurveTo(aCPx,aCPy,aX,aY)},bezierCurveTo:function(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY){this.currentPath.bezierCurveTo(aCP1x,aCP1y,aCP2x,aCP2y,aX,aY)},splineThru:function(pts){this.currentPath.splineThru(pts)},toShapes:function(isCCW,noHoles){function toShapesNoHoles(inSubpaths){for(var shapes=[],i=0,l=inSubpaths.length;l>i;i++){var tmpPath=inSubpaths[i],tmpShape=new Shape;tmpShape.curves=tmpPath.curves,shapes.push(tmpShape)}return shapes}function isPointInsidePolygon(inPt,inPolygon){for(var polyLen=inPolygon.length,inside=!1,p=polyLen-1,q=0;polyLen>q;p=q++){var edgeLowPt=inPolygon[p],edgeHighPt=inPolygon[q],edgeDx=edgeHighPt.x-edgeLowPt.x,edgeDy=edgeHighPt.y-edgeLowPt.y;if(Math.abs(edgeDy)>Number.EPSILON){if(0>edgeDy&&(edgeLowPt=inPolygon[q],edgeDx=-edgeDx,edgeHighPt=inPolygon[p],edgeDy=-edgeDy),inPt.y<edgeLowPt.y||inPt.y>edgeHighPt.y)continue;if(inPt.y===edgeLowPt.y){if(inPt.x===edgeLowPt.x)return!0}else{var perpEdge=edgeDy*(inPt.x-edgeLowPt.x)-edgeDx*(inPt.y-edgeLowPt.y);if(0===perpEdge)return!0;if(0>perpEdge)continue;inside=!inside}}else{if(inPt.y!==edgeLowPt.y)continue;if(edgeHighPt.x<=inPt.x&&inPt.x<=edgeLowPt.x||edgeLowPt.x<=inPt.x&&inPt.x<=edgeHighPt.x)return!0}}return inside}var isClockWise=ShapeUtils.isClockWise,subPaths=this.subPaths;if(0===subPaths.length)return[];if(noHoles===!0)return toShapesNoHoles(subPaths);var solid,tmpPath,tmpShape,shapes=[];if(1===subPaths.length)return tmpPath=subPaths[0],tmpShape=new Shape,tmpShape.curves=tmpPath.curves,shapes.push(tmpShape),shapes;var holesFirst=!isClockWise(subPaths[0].getPoints());holesFirst=isCCW?!holesFirst:holesFirst;var tmpPoints,betterShapeHoles=[],newShapes=[],newShapeHoles=[],mainIdx=0;newShapes[mainIdx]=void 0,newShapeHoles[mainIdx]=[];for(var i=0,l=subPaths.length;l>i;i++)tmpPath=subPaths[i],tmpPoints=tmpPath.getPoints(),solid=isClockWise(tmpPoints),solid=isCCW?!solid:solid,solid?(!holesFirst&&newShapes[mainIdx]&&mainIdx++,newShapes[mainIdx]={s:new Shape,p:tmpPoints},newShapes[mainIdx].s.curves=tmpPath.curves,holesFirst&&mainIdx++,newShapeHoles[mainIdx]=[]):newShapeHoles[mainIdx].push({h:tmpPath,p:tmpPoints[0]});if(!newShapes[0])return toShapesNoHoles(subPaths);if(newShapes.length>1){for(var ambiguous=!1,toChange=[],sIdx=0,sLen=newShapes.length;sLen>sIdx;sIdx++)betterShapeHoles[sIdx]=[];for(var sIdx=0,sLen=newShapes.length;sLen>sIdx;sIdx++)for(var sho=newShapeHoles[sIdx],hIdx=0;hIdx<sho.length;hIdx++){for(var ho=sho[hIdx],hole_unassigned=!0,s2Idx=0;s2Idx<newShapes.length;s2Idx++)isPointInsidePolygon(ho.p,newShapes[s2Idx].p)&&(sIdx!==s2Idx&&toChange.push({froms:sIdx,tos:s2Idx,hole:hIdx}),hole_unassigned?(hole_unassigned=!1,betterShapeHoles[s2Idx].push(ho)):ambiguous=!0);hole_unassigned&&betterShapeHoles[sIdx].push(ho)}toChange.length>0&&(ambiguous||(newShapeHoles=betterShapeHoles))}for(var tmpHoles,i=0,il=newShapes.length;il>i;i++){tmpShape=newShapes[i].s,shapes.push(tmpShape),tmpHoles=newShapeHoles[i];for(var j=0,jl=tmpHoles.length;jl>j;j++)tmpShape.holes.push(tmpHoles[j].h);
}return shapes}}),Object.assign(Font.prototype,{isFont:!0,generateShapes:function(text,size,divisions){function createPaths(text){for(var chars=String(text).split(""),scale=size/data.resolution,line_height=(data.boundingBox.yMax-data.boundingBox.yMin+data.underlineThickness)*scale,offsetX=0,offsetY=0,paths=[],i=0;i<chars.length;i++){var char=chars[i];if("\n"===char)offsetX=0,offsetY-=line_height;else{var ret=createPath(char,scale,offsetX,offsetY);offsetX+=ret.offsetX,paths.push(ret.path)}}return paths}function createPath(c,scale,offsetX,offsetY){var glyph=data.glyphs[c]||data.glyphs["?"];if(glyph){var x,y,cpx,cpy,cpx0,cpy0,cpx1,cpy1,cpx2,cpy2,laste,path=new ShapePath,pts=[];if(glyph.o)for(var outline=glyph._cachedOutline||(glyph._cachedOutline=glyph.o.split(" ")),i=0,l=outline.length;l>i;){var action=outline[i++];switch(action){case"m":x=outline[i++]*scale+offsetX,y=outline[i++]*scale+offsetY,path.moveTo(x,y);break;case"l":x=outline[i++]*scale+offsetX,y=outline[i++]*scale+offsetY,path.lineTo(x,y);break;case"q":if(cpx=outline[i++]*scale+offsetX,cpy=outline[i++]*scale+offsetY,cpx1=outline[i++]*scale+offsetX,cpy1=outline[i++]*scale+offsetY,path.quadraticCurveTo(cpx1,cpy1,cpx,cpy),laste=pts[pts.length-1]){cpx0=laste.x,cpy0=laste.y;for(var i2=1;divisions>=i2;i2++){var t=i2/divisions;QuadraticBezier(t,cpx0,cpx1,cpx),QuadraticBezier(t,cpy0,cpy1,cpy)}}break;case"b":if(cpx=outline[i++]*scale+offsetX,cpy=outline[i++]*scale+offsetY,cpx1=outline[i++]*scale+offsetX,cpy1=outline[i++]*scale+offsetY,cpx2=outline[i++]*scale+offsetX,cpy2=outline[i++]*scale+offsetY,path.bezierCurveTo(cpx1,cpy1,cpx2,cpy2,cpx,cpy),laste=pts[pts.length-1]){cpx0=laste.x,cpy0=laste.y;for(var i2=1;divisions>=i2;i2++){var t=i2/divisions;CubicBezier(t,cpx0,cpx1,cpx2,cpx),CubicBezier(t,cpy0,cpy1,cpy2,cpy)}}}}return{offsetX:glyph.ha*scale,path:path}}}void 0===size&&(size=100),void 0===divisions&&(divisions=4);for(var data=this.data,paths=createPaths(text),shapes=[],p=0,pl=paths.length;pl>p;p++)Array.prototype.push.apply(shapes,paths[p].toShapes());return shapes}}),Object.assign(FontLoader.prototype,{load:function(url,onLoad,onProgress,onError){var scope=this,loader=new FileLoader(this.manager);loader.load(url,function(text){var json;try{json=JSON.parse(text)}catch(e){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),json=JSON.parse(text.substring(65,text.length-2))}var font=scope.parse(json);onLoad&&onLoad(font)},onProgress,onError)},parse:function(json){return new Font(json)}});var context,AudioContext={getContext:function(){return void 0===context&&(context=new(window.AudioContext||window.webkitAudioContext)),context},setContext:function(value){context=value}};Object.assign(AudioLoader.prototype,{load:function(url,onLoad,onProgress,onError){var loader=new FileLoader(this.manager);loader.setResponseType("arraybuffer"),loader.load(url,function(buffer){var context=AudioContext.getContext();context.decodeAudioData(buffer,function(audioBuffer){onLoad(audioBuffer)})},onProgress,onError)}}),Object.assign(StereoCamera.prototype,{update:function(){var instance,focus,fov,aspect,near,far,zoom,eyeSep,eyeRight=new Matrix4,eyeLeft=new Matrix4;return function(camera){var needsUpdate=instance!==this||focus!==camera.focus||fov!==camera.fov||aspect!==camera.aspect*this.aspect||near!==camera.near||far!==camera.far||zoom!==camera.zoom||eyeSep!==this.eyeSep;if(needsUpdate){instance=this,focus=camera.focus,fov=camera.fov,aspect=camera.aspect*this.aspect,near=camera.near,far=camera.far,zoom=camera.zoom;var projectionMatrix=camera.projectionMatrix.clone();eyeSep=this.eyeSep/2;var xmin,xmax,eyeSepOnProjection=eyeSep*near/focus,ymax=near*Math.tan(_Math.DEG2RAD*fov*.5)/zoom;eyeLeft.elements[12]=-eyeSep,eyeRight.elements[12]=eyeSep,xmin=-ymax*aspect+eyeSepOnProjection,xmax=ymax*aspect+eyeSepOnProjection,projectionMatrix.elements[0]=2*near/(xmax-xmin),projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin),this.cameraL.projectionMatrix.copy(projectionMatrix),xmin=-ymax*aspect-eyeSepOnProjection,xmax=ymax*aspect-eyeSepOnProjection,projectionMatrix.elements[0]=2*near/(xmax-xmin),projectionMatrix.elements[8]=(xmax+xmin)/(xmax-xmin),this.cameraR.projectionMatrix.copy(projectionMatrix)}this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(eyeLeft),this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(eyeRight)}}()}),CubeCamera.prototype=Object.create(Object3D.prototype),CubeCamera.prototype.constructor=CubeCamera,AudioListener.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:AudioListener,getInput:function(){return this.gain},removeFilter:function(){null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null)},getFilter:function(){return this.filter},setFilter:function(value){null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=value,this.gain.connect(this.filter),this.filter.connect(this.context.destination)},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(value){this.gain.gain.value=value},updateMatrixWorld:function(){var position=new Vector3,quaternion=new Quaternion,scale=new Vector3,orientation=new Vector3;return function(force){Object3D.prototype.updateMatrixWorld.call(this,force);var listener=this.context.listener,up=this.up;this.matrixWorld.decompose(position,quaternion,scale),orientation.set(0,0,-1).applyQuaternion(quaternion),listener.positionX?(listener.positionX.setValueAtTime(position.x,this.context.currentTime),listener.positionY.setValueAtTime(position.y,this.context.currentTime),listener.positionZ.setValueAtTime(position.z,this.context.currentTime),listener.forwardX.setValueAtTime(orientation.x,this.context.currentTime),listener.forwardY.setValueAtTime(orientation.y,this.context.currentTime),listener.forwardZ.setValueAtTime(orientation.z,this.context.currentTime),listener.upX.setValueAtTime(up.x,this.context.currentTime),listener.upY.setValueAtTime(up.y,this.context.currentTime),listener.upZ.setValueAtTime(up.z,this.context.currentTime)):(listener.setPosition(position.x,position.y,position.z),listener.setOrientation(orientation.x,orientation.y,orientation.z,up.x,up.y,up.z))}}()}),Audio.prototype=Object.assign(Object.create(Object3D.prototype),{constructor:Audio,getOutput:function(){return this.gain},setNodeSource:function(audioNode){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=audioNode,this.connect(),this},setBuffer:function(audioBuffer){return this.buffer=audioBuffer,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(){if(this.isPlaying===!0)return void console.warn("THREE.Audio: Audio is already playing.");if(this.hasPlaybackControl===!1)return void console.warn("THREE.Audio: this Audio has no playback control.");var source=this.context.createBufferSource();return source.buffer=this.buffer,source.loop=this.loop,source.onended=this.onEnded.bind(this),source.playbackRate.setValueAtTime(this.playbackRate,this.startTime),source.start(0,this.startTime),this.isPlaying=!0,this.source=source,this.connect()},pause:function(){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.source.stop(),this.startTime=this.context.currentTime,this.isPlaying=!1,this)},stop:function(){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.source.stop(),this.startTime=0,this.isPlaying=!1,this)},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var i=1,l=this.filters.length;l>i;i++)this.filters[i-1].connect(this.filters[i]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var i=1,l=this.filters.length;l>i;i++)this.filters[i-1].disconnect(this.filters[i]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(value){return value||(value=[]),this.isPlaying===!0?(this.disconnect(),this.filters=value,this.connect()):this.filters=value,this},getFilter:function(){return this.getFilters()[0]},setFilter:function(filter){return this.setFilters(filter?[filter]:[])},setPlaybackRate:function(value){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.playbackRate=value,this.isPlaying===!0&&this.source.playbackRate.setValueAtTime(this.playbackRate,this.context.currentTime),this)},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(value){return this.hasPlaybackControl===!1?void console.warn("THREE.Audio: this Audio has no playback control."):(this.loop=value,this.isPlaying===!0&&(this.source.loop=this.loop),this)},getVolume:function(){return this.gain.gain.value},setVolume:function(value){return this.gain.gain.value=value,this}}),PositionalAudio.prototype=Object.assign(Object.create(Audio.prototype),{constructor:PositionalAudio,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(value){this.panner.refDistance=value},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(value){this.panner.rolloffFactor=value},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(value){this.panner.distanceModel=value},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(value){this.panner.maxDistance=value},updateMatrixWorld:function(){var position=new Vector3;return function(force){Object3D.prototype.updateMatrixWorld.call(this,force),position.setFromMatrixPosition(this.matrixWorld),this.panner.setPosition(position.x,position.y,position.z)}}()}),Object.assign(AudioAnalyser.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var value=0,data=this.getFrequencyData(),i=0;i<data.length;i++)value+=data[i];return value/data.length}}),Object.assign(PropertyMixer.prototype,{accumulate:function(accuIndex,weight){var buffer=this.buffer,stride=this.valueSize,offset=accuIndex*stride+stride,currentWeight=this.cumulativeWeight;if(0===currentWeight){for(var i=0;i!==stride;++i)buffer[offset+i]=buffer[i];currentWeight=weight}else{currentWeight+=weight;var mix=weight/currentWeight;this._mixBufferRegion(buffer,offset,0,mix,stride)}this.cumulativeWeight=currentWeight},apply:function(accuIndex){var stride=this.valueSize,buffer=this.buffer,offset=accuIndex*stride+stride,weight=this.cumulativeWeight,binding=this.binding;if(this.cumulativeWeight=0,1>weight){var originalValueOffset=3*stride;this._mixBufferRegion(buffer,offset,originalValueOffset,1-weight,stride)}for(var i=stride,e=stride+stride;i!==e;++i)if(buffer[i]!==buffer[i+stride]){binding.setValue(buffer,offset);break}},saveOriginalState:function(){var binding=this.binding,buffer=this.buffer,stride=this.valueSize,originalValueOffset=3*stride;binding.getValue(buffer,originalValueOffset);for(var i=stride,e=originalValueOffset;i!==e;++i)buffer[i]=buffer[originalValueOffset+i%stride];this.cumulativeWeight=0},restoreOriginalState:function(){var originalValueOffset=3*this.valueSize;this.binding.setValue(this.buffer,originalValueOffset)},_select:function(buffer,dstOffset,srcOffset,t,stride){if(t>=.5)for(var i=0;i!==stride;++i)buffer[dstOffset+i]=buffer[srcOffset+i]},_slerp:function(buffer,dstOffset,srcOffset,t){Quaternion.slerpFlat(buffer,dstOffset,buffer,dstOffset,buffer,srcOffset,t)},_lerp:function(buffer,dstOffset,srcOffset,t,stride){for(var s=1-t,i=0;i!==stride;++i){var j=dstOffset+i;buffer[j]=buffer[j]*s+buffer[srcOffset+i]*t}}}),Object.assign(Composite.prototype,{getValue:function(array,offset){this.bind();var firstValidIndex=this._targetGroup.nCachedObjects_,binding=this._bindings[firstValidIndex];void 0!==binding&&binding.getValue(array,offset)},setValue:function(array,offset){for(var bindings=this._bindings,i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i)bindings[i].setValue(array,offset)},bind:function(){for(var bindings=this._bindings,i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i)bindings[i].bind()},unbind:function(){for(var bindings=this._bindings,i=this._targetGroup.nCachedObjects_,n=bindings.length;i!==n;++i)bindings[i].unbind()}}),Object.assign(PropertyBinding,{Composite:Composite,create:function(root,path,parsedPath){return root&&root.isAnimationObjectGroup?new PropertyBinding.Composite(root,path,parsedPath):new PropertyBinding(root,path,parsedPath)},sanitizeNodeName:function(name){return name.replace(/\s/g,"_").replace(/[^\w-]/g,"")},parseTrackName:function(){var directoryRe=/((?:[\w-]+[\/:])*)/,nodeRe=/([\w-\.]+)?/,objectRe=/(?:\.([\w-]+)(?:\[(.+)\])?)?/,propertyRe=/\.([\w-]+)(?:\[(.+)\])?/,trackRe=new RegExp("^"+directoryRe.source+nodeRe.source+objectRe.source+propertyRe.source+"$"),supportedObjectNames=["material","materials","bones"];return function(trackName){var matches=trackRe.exec(trackName);if(!matches)throw new Error("PropertyBinding: Cannot parse trackName: "+trackName);var results={nodeName:matches[2],objectName:matches[3],objectIndex:matches[4],propertyName:matches[5],propertyIndex:matches[6]},lastDot=results.nodeName&&results.nodeName.lastIndexOf(".");if(void 0!==lastDot&&-1!==lastDot){var objectName=results.nodeName.substring(lastDot+1);-1!==supportedObjectNames.indexOf(objectName)&&(results.nodeName=results.nodeName.substring(0,lastDot),results.objectName=objectName)}if(null===results.propertyName||0===results.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+trackName);return results}}(),findNode:function(root,nodeName){if(!nodeName||""===nodeName||"root"===nodeName||"."===nodeName||-1===nodeName||nodeName===root.name||nodeName===root.uuid)return root;if(root.skeleton){var searchSkeleton=function(skeleton){for(var i=0;i<skeleton.bones.length;i++){var bone=skeleton.bones[i];if(bone.name===nodeName)return bone}return null},bone=searchSkeleton(root.skeleton);if(bone)return bone}if(root.children){var searchNodeSubtree=function(children){for(var i=0;i<children.length;i++){var childNode=children[i];if(childNode.name===nodeName||childNode.uuid===nodeName)return childNode;var result=searchNodeSubtree(childNode.children);if(result)return result}return null},subTreeNode=searchNodeSubtree(root.children);if(subTreeNode)return subTreeNode}return null}}),Object.assign(PropertyBinding.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(buffer,offset){buffer[offset]=this.node[this.propertyName]},function(buffer,offset){for(var source=this.resolvedProperty,i=0,n=source.length;i!==n;++i)buffer[offset++]=source[i]},function(buffer,offset){buffer[offset]=this.resolvedProperty[this.propertyIndex]},function(buffer,offset){this.resolvedProperty.toArray(buffer,offset)}],SetterByBindingTypeAndVersioning:[[function(buffer,offset){this.node[this.propertyName]=buffer[offset]},function(buffer,offset){this.node[this.propertyName]=buffer[offset],this.targetObject.needsUpdate=!0},function(buffer,offset){this.node[this.propertyName]=buffer[offset],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(buffer,offset){for(var dest=this.resolvedProperty,i=0,n=dest.length;i!==n;++i)dest[i]=buffer[offset++]},function(buffer,offset){for(var dest=this.resolvedProperty,i=0,n=dest.length;i!==n;++i)dest[i]=buffer[offset++];this.targetObject.needsUpdate=!0},function(buffer,offset){for(var dest=this.resolvedProperty,i=0,n=dest.length;i!==n;++i)dest[i]=buffer[offset++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset]},function(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset],this.targetObject.needsUpdate=!0},function(buffer,offset){this.resolvedProperty[this.propertyIndex]=buffer[offset],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(buffer,offset){this.resolvedProperty.fromArray(buffer,offset)},function(buffer,offset){this.resolvedProperty.fromArray(buffer,offset),this.targetObject.needsUpdate=!0},function(buffer,offset){this.resolvedProperty.fromArray(buffer,offset),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(targetArray,offset){this.bind(),this.getValue(targetArray,offset)},setValue:function(sourceArray,offset){this.bind(),this.setValue(sourceArray,offset)},bind:function(){var targetObject=this.node,parsedPath=this.parsedPath,objectName=parsedPath.objectName,propertyName=parsedPath.propertyName,propertyIndex=parsedPath.propertyIndex;if(targetObject||(targetObject=PropertyBinding.findNode(this.rootNode,parsedPath.nodeName)||this.rootNode,this.node=targetObject),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!targetObject)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(objectName){var objectIndex=parsedPath.objectIndex;switch(objectName){case"materials":if(!targetObject.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!targetObject.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);targetObject=targetObject.material.materials;break;case"bones":if(!targetObject.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);targetObject=targetObject.skeleton.bones;for(var i=0;i<targetObject.length;i++)if(targetObject[i].name===objectIndex){objectIndex=i;break}break;default:if(void 0===targetObject[objectName])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);targetObject=targetObject[objectName]}if(void 0!==objectIndex){if(void 0===targetObject[objectIndex])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,targetObject);targetObject=targetObject[objectIndex]}}var nodeProperty=targetObject[propertyName];if(void 0===nodeProperty){var nodeName=parsedPath.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+nodeName+"."+propertyName+" but it wasn't found.",targetObject)}var versioning=this.Versioning.None;void 0!==targetObject.needsUpdate?(versioning=this.Versioning.NeedsUpdate,this.targetObject=targetObject):void 0!==targetObject.matrixWorldNeedsUpdate&&(versioning=this.Versioning.MatrixWorldNeedsUpdate,this.targetObject=targetObject);var bindingType=this.BindingType.Direct;if(void 0!==propertyIndex){if("morphTargetInfluences"===propertyName){if(!targetObject.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(targetObject.geometry.isBufferGeometry){if(!targetObject.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(var i=0;i<this.node.geometry.morphAttributes.position.length;i++)if(targetObject.geometry.morphAttributes.position[i].name===propertyIndex){propertyIndex=i;break}}else{if(!targetObject.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(var i=0;i<this.node.geometry.morphTargets.length;i++)if(targetObject.geometry.morphTargets[i].name===propertyIndex){propertyIndex=i;break}}}bindingType=this.BindingType.ArrayElement,this.resolvedProperty=nodeProperty,this.propertyIndex=propertyIndex}else void 0!==nodeProperty.fromArray&&void 0!==nodeProperty.toArray?(bindingType=this.BindingType.HasFromToArray,this.resolvedProperty=nodeProperty):Array.isArray(nodeProperty)?(bindingType=this.BindingType.EntireArray,this.resolvedProperty=nodeProperty):this.propertyName=propertyName;this.getValue=this.GetterByBindingType[bindingType],this.setValue=this.SetterByBindingTypeAndVersioning[bindingType][versioning]},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),Object.assign(PropertyBinding.prototype,{_getValue_unbound:PropertyBinding.prototype.getValue,_setValue_unbound:PropertyBinding.prototype.setValue}),Object.assign(AnimationObjectGroup.prototype,{isAnimationObjectGroup:!0,add:function(var_args){for(var objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,indicesByUUID=this._indicesByUUID,paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,nBindings=bindings.length,i=0,n=arguments.length;i!==n;++i){var object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid],knownObject=void 0;if(void 0===index){index=nObjects++,indicesByUUID[uuid]=index,objects.push(object);for(var j=0,m=nBindings;j!==m;++j)bindings[j].push(new PropertyBinding(object,paths[j],parsedPaths[j]))}else if(nCachedObjects>index){knownObject=objects[index];var firstActiveIndex=--nCachedObjects,lastCachedObject=objects[firstActiveIndex];indicesByUUID[lastCachedObject.uuid]=index,objects[index]=lastCachedObject,indicesByUUID[uuid]=firstActiveIndex,objects[firstActiveIndex]=object;for(var j=0,m=nBindings;j!==m;++j){var bindingsForPath=bindings[j],lastCached=bindingsForPath[firstActiveIndex],binding=bindingsForPath[index];bindingsForPath[index]=lastCached,void 0===binding&&(binding=new PropertyBinding(object,paths[j],parsedPaths[j])),bindingsForPath[firstActiveIndex]=binding}}else objects[index]!==knownObject&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=nCachedObjects},remove:function(var_args){for(var objects=this._objects,nCachedObjects=this.nCachedObjects_,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length,i=0,n=arguments.length;i!==n;++i){var object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(void 0!==index&&index>=nCachedObjects){var lastCachedIndex=nCachedObjects++,firstActiveObject=objects[lastCachedIndex];indicesByUUID[firstActiveObject.uuid]=index,objects[index]=firstActiveObject,indicesByUUID[uuid]=lastCachedIndex,objects[lastCachedIndex]=object;for(var j=0,m=nBindings;j!==m;++j){var bindingsForPath=bindings[j],firstActive=bindingsForPath[lastCachedIndex],binding=bindingsForPath[index];bindingsForPath[index]=firstActive,bindingsForPath[lastCachedIndex]=binding}}}this.nCachedObjects_=nCachedObjects},uncache:function(var_args){for(var objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,indicesByUUID=this._indicesByUUID,bindings=this._bindings,nBindings=bindings.length,i=0,n=arguments.length;i!==n;++i){var object=arguments[i],uuid=object.uuid,index=indicesByUUID[uuid];if(void 0!==index)if(delete indicesByUUID[uuid],nCachedObjects>index){var firstActiveIndex=--nCachedObjects,lastCachedObject=objects[firstActiveIndex],lastIndex=--nObjects,lastObject=objects[lastIndex];indicesByUUID[lastCachedObject.uuid]=index,objects[index]=lastCachedObject,indicesByUUID[lastObject.uuid]=firstActiveIndex,objects[firstActiveIndex]=lastObject,objects.pop();for(var j=0,m=nBindings;j!==m;++j){var bindingsForPath=bindings[j],lastCached=bindingsForPath[firstActiveIndex],last=bindingsForPath[lastIndex];bindingsForPath[index]=lastCached,bindingsForPath[firstActiveIndex]=last,bindingsForPath.pop()}}else{var lastIndex=--nObjects,lastObject=objects[lastIndex];indicesByUUID[lastObject.uuid]=index,objects[index]=lastObject,objects.pop();for(var j=0,m=nBindings;j!==m;++j){var bindingsForPath=bindings[j];bindingsForPath[index]=bindingsForPath[lastIndex],bindingsForPath.pop()}}}this.nCachedObjects_=nCachedObjects},subscribe_:function(path,parsedPath){var indicesByPath=this._bindingsIndicesByPath,index=indicesByPath[path],bindings=this._bindings;if(void 0!==index)return bindings[index];var paths=this._paths,parsedPaths=this._parsedPaths,objects=this._objects,nObjects=objects.length,nCachedObjects=this.nCachedObjects_,bindingsForPath=new Array(nObjects);index=bindings.length,indicesByPath[path]=index,paths.push(path),parsedPaths.push(parsedPath),bindings.push(bindingsForPath);for(var i=nCachedObjects,n=objects.length;i!==n;++i){var object=objects[i];bindingsForPath[i]=new PropertyBinding(object,path,parsedPath)}return bindingsForPath},unsubscribe_:function(path){var indicesByPath=this._bindingsIndicesByPath,index=indicesByPath[path];if(void 0!==index){var paths=this._paths,parsedPaths=this._parsedPaths,bindings=this._bindings,lastBindingsIndex=bindings.length-1,lastBindings=bindings[lastBindingsIndex],lastBindingsPath=path[lastBindingsIndex];indicesByPath[lastBindingsPath]=index,bindings[index]=lastBindings,bindings.pop(),parsedPaths[index]=parsedPaths[lastBindingsIndex],parsedPaths.pop(),paths[index]=paths[lastBindingsIndex],paths.pop()}}}),Object.assign(AnimationAction.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(time){return this._startTime=time,this},setLoop:function(mode,repetitions){return this.loop=mode,this.repetitions=repetitions,this},setEffectiveWeight:function(weight){return this.weight=weight,this._effectiveWeight=this.enabled?weight:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(duration){return this._scheduleFading(duration,0,1)},fadeOut:function(duration){return this._scheduleFading(duration,1,0)},crossFadeFrom:function(fadeOutAction,duration,warp){if(fadeOutAction.fadeOut(duration),this.fadeIn(duration),warp){var fadeInDuration=this._clip.duration,fadeOutDuration=fadeOutAction._clip.duration,startEndRatio=fadeOutDuration/fadeInDuration,endStartRatio=fadeInDuration/fadeOutDuration;fadeOutAction.warp(1,startEndRatio,duration),this.warp(endStartRatio,1,duration)}return this},crossFadeTo:function(fadeInAction,duration,warp){return fadeInAction.crossFadeFrom(this,duration,warp)},stopFading:function(){var weightInterpolant=this._weightInterpolant;return null!==weightInterpolant&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(weightInterpolant)),this},setEffectiveTimeScale:function(timeScale){return this.timeScale=timeScale,this._effectiveTimeScale=this.paused?0:timeScale,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(duration){return this.timeScale=this._clip.duration/duration,this.stopWarping()},syncWith:function(action){return this.time=action.time,this.timeScale=action.timeScale,this.stopWarping()},halt:function(duration){return this.warp(this._effectiveTimeScale,0,duration)},warp:function(startTimeScale,endTimeScale,duration){var mixer=this._mixer,now=mixer.time,interpolant=this._timeScaleInterpolant,timeScale=this.timeScale;null===interpolant&&(interpolant=mixer._lendControlInterpolant(),this._timeScaleInterpolant=interpolant);var times=interpolant.parameterPositions,values=interpolant.sampleValues;return times[0]=now,times[1]=now+duration,values[0]=startTimeScale/timeScale,values[1]=endTimeScale/timeScale,this},stopWarping:function(){var timeScaleInterpolant=this._timeScaleInterpolant;return null!==timeScaleInterpolant&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(timeScaleInterpolant)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(time,deltaTime,timeDirection,accuIndex){if(!this.enabled)return void this._updateWeight(time);var startTime=this._startTime;if(null!==startTime){var timeRunning=(time-startTime)*timeDirection;if(0>timeRunning||0===timeDirection)return;this._startTime=null,deltaTime=timeDirection*timeRunning}deltaTime*=this._updateTimeScale(time);var clipTime=this._updateTime(deltaTime),weight=this._updateWeight(time);if(weight>0)for(var interpolants=this._interpolants,propertyMixers=this._propertyBindings,j=0,m=interpolants.length;j!==m;++j)interpolants[j].evaluate(clipTime),propertyMixers[j].accumulate(accuIndex,weight)},_updateWeight:function(time){var weight=0;if(this.enabled){weight=this.weight;var interpolant=this._weightInterpolant;if(null!==interpolant){var interpolantValue=interpolant.evaluate(time)[0];weight*=interpolantValue,time>interpolant.parameterPositions[1]&&(this.stopFading(),0===interpolantValue&&(this.enabled=!1))}}return this._effectiveWeight=weight,weight},_updateTimeScale:function(time){var timeScale=0;if(!this.paused){timeScale=this.timeScale;var interpolant=this._timeScaleInterpolant;if(null!==interpolant){var interpolantValue=interpolant.evaluate(time)[0];timeScale*=interpolantValue,time>interpolant.parameterPositions[1]&&(this.stopWarping(),0===timeScale?this.paused=!0:this.timeScale=timeScale)}}return this._effectiveTimeScale=timeScale,timeScale},_updateTime:function(deltaTime){var time=this.time+deltaTime;if(0===deltaTime)return time;var duration=this._clip.duration,loop=this.loop,loopCount=this._loopCount;if(loop===LoopOnce){-1===loopCount&&(this._loopCount=0,this._setEndings(!0,!0,!1));handle_stop:{if(time>=duration)time=duration;else{if(!(0>time))break handle_stop;time=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this._mixer.dispatchEvent({type:"finished",action:this,direction:0>deltaTime?-1:1})}}else{var pingPong=loop===LoopPingPong;if(-1===loopCount&&(deltaTime>=0?(loopCount=0,this._setEndings(!0,0===this.repetitions,pingPong)):this._setEndings(0===this.repetitions,!0,pingPong)),time>=duration||0>time){var loopDelta=Math.floor(time/duration);time-=duration*loopDelta,loopCount+=Math.abs(loopDelta);var pending=this.repetitions-loopCount;if(0>pending)this.clampWhenFinished?this.paused=!0:this.enabled=!1,time=deltaTime>0?duration:0,this._mixer.dispatchEvent({type:"finished",action:this,direction:deltaTime>0?1:-1});else{if(0===pending){var atStart=0>deltaTime;this._setEndings(atStart,!atStart,pingPong)}else this._setEndings(!1,!1,pingPong);this._loopCount=loopCount,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:loopDelta})}}if(pingPong&&1===(1&loopCount))return this.time=time,duration-time}return this.time=time,time},_setEndings:function(atStart,atEnd,pingPong){var settings=this._interpolantSettings;pingPong?(settings.endingStart=ZeroSlopeEnding,settings.endingEnd=ZeroSlopeEnding):(atStart?settings.endingStart=this.zeroSlopeAtStart?ZeroSlopeEnding:ZeroCurvatureEnding:settings.endingStart=WrapAroundEnding,atEnd?settings.endingEnd=this.zeroSlopeAtEnd?ZeroSlopeEnding:ZeroCurvatureEnding:settings.endingEnd=WrapAroundEnding)},_scheduleFading:function(duration,weightNow,weightThen){var mixer=this._mixer,now=mixer.time,interpolant=this._weightInterpolant;null===interpolant&&(interpolant=mixer._lendControlInterpolant(),
this._weightInterpolant=interpolant);var times=interpolant.parameterPositions,values=interpolant.sampleValues;return times[0]=now,values[0]=weightNow,times[1]=now+duration,values[1]=weightThen,this}}),Object.assign(AnimationMixer.prototype,EventDispatcher.prototype,{_bindAction:function(action,prototypeAction){var root=action._localRoot||this._root,tracks=action._clip.tracks,nTracks=tracks.length,bindings=action._propertyBindings,interpolants=action._interpolants,rootUuid=root.uuid,bindingsByRoot=this._bindingsByRootAndName,bindingsByName=bindingsByRoot[rootUuid];void 0===bindingsByName&&(bindingsByName={},bindingsByRoot[rootUuid]=bindingsByName);for(var i=0;i!==nTracks;++i){var track=tracks[i],trackName=track.name,binding=bindingsByName[trackName];if(void 0!==binding)bindings[i]=binding;else{if(binding=bindings[i],void 0!==binding){null===binding._cacheIndex&&(++binding.referenceCount,this._addInactiveBinding(binding,rootUuid,trackName));continue}var path=prototypeAction&&prototypeAction._propertyBindings[i].binding.parsedPath;binding=new PropertyMixer(PropertyBinding.create(root,trackName,path),track.ValueTypeName,track.getValueSize()),++binding.referenceCount,this._addInactiveBinding(binding,rootUuid,trackName),bindings[i]=binding}interpolants[i].resultBuffer=binding.buffer}},_activateAction:function(action){if(!this._isActiveAction(action)){if(null===action._cacheIndex){var rootUuid=(action._localRoot||this._root).uuid,clipUuid=action._clip.uuid,actionsForClip=this._actionsByClip[clipUuid];this._bindAction(action,actionsForClip&&actionsForClip.knownActions[0]),this._addInactiveAction(action,clipUuid,rootUuid)}for(var bindings=action._propertyBindings,i=0,n=bindings.length;i!==n;++i){var binding=bindings[i];0===binding.useCount++&&(this._lendBinding(binding),binding.saveOriginalState())}this._lendAction(action)}},_deactivateAction:function(action){if(this._isActiveAction(action)){for(var bindings=action._propertyBindings,i=0,n=bindings.length;i!==n;++i){var binding=bindings[i];0===--binding.useCount&&(binding.restoreOriginalState(),this._takeBackBinding(binding))}this._takeBackAction(action)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var scope=this;this.stats={actions:{get total(){return scope._actions.length},get inUse(){return scope._nActiveActions}},bindings:{get total(){return scope._bindings.length},get inUse(){return scope._nActiveBindings}},controlInterpolants:{get total(){return scope._controlInterpolants.length},get inUse(){return scope._nActiveControlInterpolants}}}},_isActiveAction:function(action){var index=action._cacheIndex;return null!==index&&index<this._nActiveActions},_addInactiveAction:function(action,clipUuid,rootUuid){var actions=this._actions,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid];if(void 0===actionsForClip)actionsForClip={knownActions:[action],actionByRoot:{}},action._byClipCacheIndex=0,actionsByClip[clipUuid]=actionsForClip;else{var knownActions=actionsForClip.knownActions;action._byClipCacheIndex=knownActions.length,knownActions.push(action)}action._cacheIndex=actions.length,actions.push(action),actionsForClip.actionByRoot[rootUuid]=action},_removeInactiveAction:function(action){var actions=this._actions,lastInactiveAction=actions[actions.length-1],cacheIndex=action._cacheIndex;lastInactiveAction._cacheIndex=cacheIndex,actions[cacheIndex]=lastInactiveAction,actions.pop(),action._cacheIndex=null;var clipUuid=action._clip.uuid,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid],knownActionsForClip=actionsForClip.knownActions,lastKnownAction=knownActionsForClip[knownActionsForClip.length-1],byClipCacheIndex=action._byClipCacheIndex;lastKnownAction._byClipCacheIndex=byClipCacheIndex,knownActionsForClip[byClipCacheIndex]=lastKnownAction,knownActionsForClip.pop(),action._byClipCacheIndex=null;var actionByRoot=actionsForClip.actionByRoot,rootUuid=(action._localRoot||this._root).uuid;delete actionByRoot[rootUuid],0===knownActionsForClip.length&&delete actionsByClip[clipUuid],this._removeInactiveBindingsForAction(action)},_removeInactiveBindingsForAction:function(action){for(var bindings=action._propertyBindings,i=0,n=bindings.length;i!==n;++i){var binding=bindings[i];0===--binding.referenceCount&&this._removeInactiveBinding(binding)}},_lendAction:function(action){var actions=this._actions,prevIndex=action._cacheIndex,lastActiveIndex=this._nActiveActions++,firstInactiveAction=actions[lastActiveIndex];action._cacheIndex=lastActiveIndex,actions[lastActiveIndex]=action,firstInactiveAction._cacheIndex=prevIndex,actions[prevIndex]=firstInactiveAction},_takeBackAction:function(action){var actions=this._actions,prevIndex=action._cacheIndex,firstInactiveIndex=--this._nActiveActions,lastActiveAction=actions[firstInactiveIndex];action._cacheIndex=firstInactiveIndex,actions[firstInactiveIndex]=action,lastActiveAction._cacheIndex=prevIndex,actions[prevIndex]=lastActiveAction},_addInactiveBinding:function(binding,rootUuid,trackName){var bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid],bindings=this._bindings;void 0===bindingByName&&(bindingByName={},bindingsByRoot[rootUuid]=bindingByName),bindingByName[trackName]=binding,binding._cacheIndex=bindings.length,bindings.push(binding)},_removeInactiveBinding:function(binding){var bindings=this._bindings,propBinding=binding.binding,rootUuid=propBinding.rootNode.uuid,trackName=propBinding.path,bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid],lastInactiveBinding=bindings[bindings.length-1],cacheIndex=binding._cacheIndex;lastInactiveBinding._cacheIndex=cacheIndex,bindings[cacheIndex]=lastInactiveBinding,bindings.pop(),delete bindingByName[trackName];remove_empty_map:{for(var _ in bindingByName)break remove_empty_map;delete bindingsByRoot[rootUuid]}},_lendBinding:function(binding){var bindings=this._bindings,prevIndex=binding._cacheIndex,lastActiveIndex=this._nActiveBindings++,firstInactiveBinding=bindings[lastActiveIndex];binding._cacheIndex=lastActiveIndex,bindings[lastActiveIndex]=binding,firstInactiveBinding._cacheIndex=prevIndex,bindings[prevIndex]=firstInactiveBinding},_takeBackBinding:function(binding){var bindings=this._bindings,prevIndex=binding._cacheIndex,firstInactiveIndex=--this._nActiveBindings,lastActiveBinding=bindings[firstInactiveIndex];binding._cacheIndex=firstInactiveIndex,bindings[firstInactiveIndex]=binding,lastActiveBinding._cacheIndex=prevIndex,bindings[prevIndex]=lastActiveBinding},_lendControlInterpolant:function(){var interpolants=this._controlInterpolants,lastActiveIndex=this._nActiveControlInterpolants++,interpolant=interpolants[lastActiveIndex];return void 0===interpolant&&(interpolant=new LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),interpolant.__cacheIndex=lastActiveIndex,interpolants[lastActiveIndex]=interpolant),interpolant},_takeBackControlInterpolant:function(interpolant){var interpolants=this._controlInterpolants,prevIndex=interpolant.__cacheIndex,firstInactiveIndex=--this._nActiveControlInterpolants,lastActiveInterpolant=interpolants[firstInactiveIndex];interpolant.__cacheIndex=firstInactiveIndex,interpolants[firstInactiveIndex]=interpolant,lastActiveInterpolant.__cacheIndex=prevIndex,interpolants[prevIndex]=lastActiveInterpolant},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(clip,optionalRoot){var root=optionalRoot||this._root,rootUuid=root.uuid,clipObject="string"==typeof clip?AnimationClip.findByName(root,clip):clip,clipUuid=null!==clipObject?clipObject.uuid:clip,actionsForClip=this._actionsByClip[clipUuid],prototypeAction=null;if(void 0!==actionsForClip){var existingAction=actionsForClip.actionByRoot[rootUuid];if(void 0!==existingAction)return existingAction;prototypeAction=actionsForClip.knownActions[0],null===clipObject&&(clipObject=prototypeAction._clip)}if(null===clipObject)return null;var newAction=new AnimationAction(this,clipObject,optionalRoot);return this._bindAction(newAction,prototypeAction),this._addInactiveAction(newAction,clipUuid,rootUuid),newAction},existingAction:function(clip,optionalRoot){var root=optionalRoot||this._root,rootUuid=root.uuid,clipObject="string"==typeof clip?AnimationClip.findByName(root,clip):clip,clipUuid=clipObject?clipObject.uuid:clip,actionsForClip=this._actionsByClip[clipUuid];return void 0!==actionsForClip?actionsForClip.actionByRoot[rootUuid]||null:null},stopAllAction:function(){var actions=this._actions,nActions=this._nActiveActions,bindings=this._bindings,nBindings=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var i=0;i!==nActions;++i)actions[i].reset();for(var i=0;i!==nBindings;++i)bindings[i].useCount=0;return this},update:function(deltaTime){deltaTime*=this.timeScale;for(var actions=this._actions,nActions=this._nActiveActions,time=this.time+=deltaTime,timeDirection=Math.sign(deltaTime),accuIndex=this._accuIndex^=1,i=0;i!==nActions;++i){var action=actions[i];action._update(time,deltaTime,timeDirection,accuIndex)}for(var bindings=this._bindings,nBindings=this._nActiveBindings,i=0;i!==nBindings;++i)bindings[i].apply(accuIndex);return this},getRoot:function(){return this._root},uncacheClip:function(clip){var actions=this._actions,clipUuid=clip.uuid,actionsByClip=this._actionsByClip,actionsForClip=actionsByClip[clipUuid];if(void 0!==actionsForClip){for(var actionsToRemove=actionsForClip.knownActions,i=0,n=actionsToRemove.length;i!==n;++i){var action=actionsToRemove[i];this._deactivateAction(action);var cacheIndex=action._cacheIndex,lastInactiveAction=actions[actions.length-1];action._cacheIndex=null,action._byClipCacheIndex=null,lastInactiveAction._cacheIndex=cacheIndex,actions[cacheIndex]=lastInactiveAction,actions.pop(),this._removeInactiveBindingsForAction(action)}delete actionsByClip[clipUuid]}},uncacheRoot:function(root){var rootUuid=root.uuid,actionsByClip=this._actionsByClip;for(var clipUuid in actionsByClip){var actionByRoot=actionsByClip[clipUuid].actionByRoot,action=actionByRoot[rootUuid];void 0!==action&&(this._deactivateAction(action),this._removeInactiveAction(action))}var bindingsByRoot=this._bindingsByRootAndName,bindingByName=bindingsByRoot[rootUuid];if(void 0!==bindingByName)for(var trackName in bindingByName){var binding=bindingByName[trackName];binding.restoreOriginalState(),this._removeInactiveBinding(binding)}},uncacheAction:function(clip,optionalRoot){var action=this.existingAction(clip,optionalRoot);null!==action&&(this._deactivateAction(action),this._removeInactiveAction(action))}}),Uniform.prototype.clone=function(){return new Uniform(void 0===this.value.clone?this.value:this.value.clone())},InstancedBufferGeometry.prototype=Object.assign(Object.create(BufferGeometry.prototype),{constructor:InstancedBufferGeometry,isInstancedBufferGeometry:!0,addGroup:function(start,count,materialIndex){this.groups.push({start:start,count:count,materialIndex:materialIndex})},copy:function(source){var index=source.index;null!==index&&this.setIndex(index.clone());var attributes=source.attributes;for(var name in attributes){var attribute=attributes[name];this.addAttribute(name,attribute.clone())}for(var groups=source.groups,i=0,l=groups.length;l>i;i++){var group=groups[i];this.addGroup(group.start,group.count,group.materialIndex)}return this}}),Object.defineProperties(InterleavedBufferAttribute.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(InterleavedBufferAttribute.prototype,{isInterleavedBufferAttribute:!0,setX:function(index,x){return this.data.array[index*this.data.stride+this.offset]=x,this},setY:function(index,y){return this.data.array[index*this.data.stride+this.offset+1]=y,this},setZ:function(index,z){return this.data.array[index*this.data.stride+this.offset+2]=z,this},setW:function(index,w){return this.data.array[index*this.data.stride+this.offset+3]=w,this},getX:function(index){return this.data.array[index*this.data.stride+this.offset]},getY:function(index){return this.data.array[index*this.data.stride+this.offset+1]},getZ:function(index){return this.data.array[index*this.data.stride+this.offset+2]},getW:function(index){return this.data.array[index*this.data.stride+this.offset+3]},setXY:function(index,x,y){return index=index*this.data.stride+this.offset,this.data.array[index+0]=x,this.data.array[index+1]=y,this},setXYZ:function(index,x,y,z){return index=index*this.data.stride+this.offset,this.data.array[index+0]=x,this.data.array[index+1]=y,this.data.array[index+2]=z,this},setXYZW:function(index,x,y,z,w){return index=index*this.data.stride+this.offset,this.data.array[index+0]=x,this.data.array[index+1]=y,this.data.array[index+2]=z,this.data.array[index+3]=w,this}}),Object.defineProperty(InterleavedBuffer.prototype,"needsUpdate",{set:function(value){value===!0&&this.version++}}),Object.assign(InterleavedBuffer.prototype,{isInterleavedBuffer:!0,setArray:function(array){if(Array.isArray(array))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.count=void 0!==array?array.length/this.stride:0,this.array=array},setDynamic:function(value){return this.dynamic=value,this},copy:function(source){return this.array=new source.array.constructor(source.array),this.count=source.count,this.stride=source.stride,this.dynamic=source.dynamic,this},copyAt:function(index1,attribute,index2){index1*=this.stride,index2*=attribute.stride;for(var i=0,l=this.stride;l>i;i++)this.array[index1+i]=attribute.array[index2+i];return this},set:function(value,offset){return void 0===offset&&(offset=0),this.array.set(value,offset),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(callback){return this.onUploadCallback=callback,this}}),InstancedInterleavedBuffer.prototype=Object.assign(Object.create(InterleavedBuffer.prototype),{constructor:InstancedInterleavedBuffer,isInstancedInterleavedBuffer:!0,copy:function(source){return InterleavedBuffer.prototype.copy.call(this,source),this.meshPerAttribute=source.meshPerAttribute,this}}),InstancedBufferAttribute.prototype=Object.assign(Object.create(BufferAttribute.prototype),{constructor:InstancedBufferAttribute,isInstancedBufferAttribute:!0,copy:function(source){return BufferAttribute.prototype.copy.call(this,source),this.meshPerAttribute=source.meshPerAttribute,this}}),Object.assign(Raycaster.prototype,{linePrecision:1,set:function(origin,direction){this.ray.set(origin,direction)},setFromCamera:function(coords,camera){camera&&camera.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(camera.matrixWorld),this.ray.direction.set(coords.x,coords.y,.5).unproject(camera).sub(this.ray.origin).normalize()):camera&&camera.isOrthographicCamera?(this.ray.origin.set(coords.x,coords.y,(camera.near+camera.far)/(camera.near-camera.far)).unproject(camera),this.ray.direction.set(0,0,-1).transformDirection(camera.matrixWorld)):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(object,recursive){var intersects=[];return intersectObject(object,this,intersects,recursive),intersects.sort(ascSort),intersects},intersectObjects:function(objects,recursive){var intersects=[];if(Array.isArray(objects)===!1)return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),intersects;for(var i=0,l=objects.length;l>i;i++)intersectObject(objects[i],this,intersects,recursive);return intersects.sort(ascSort),intersects}}),Object.assign(Clock.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var diff=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var newTime=("undefined"==typeof performance?Date:performance).now();diff=(newTime-this.oldTime)/1e3,this.oldTime=newTime,this.elapsedTime+=diff}return diff}}),Object.assign(Spherical.prototype,{set:function(radius,phi,theta){return this.radius=radius,this.phi=phi,this.theta=theta,this},clone:function(){return(new this.constructor).copy(this)},copy:function(other){return this.radius=other.radius,this.phi=other.phi,this.theta=other.theta,this},makeSafe:function(){var EPS=1e-6;return this.phi=Math.max(EPS,Math.min(Math.PI-EPS,this.phi)),this},setFromVector3:function(vec3){return this.radius=vec3.length(),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(vec3.x,vec3.z),this.phi=Math.acos(_Math.clamp(vec3.y/this.radius,-1,1))),this}}),Object.assign(Cylindrical.prototype,{set:function(radius,theta,y){return this.radius=radius,this.theta=theta,this.y=y,this},clone:function(){return(new this.constructor).copy(this)},copy:function(other){return this.radius=other.radius,this.theta=other.theta,this.y=other.y,this},setFromVector3:function(vec3){return this.radius=Math.sqrt(vec3.x*vec3.x+vec3.z*vec3.z),this.theta=Math.atan2(vec3.x,vec3.z),this.y=vec3.y,this}}),MorphBlendMesh.prototype=Object.create(Mesh.prototype),MorphBlendMesh.prototype.constructor=MorphBlendMesh,MorphBlendMesh.prototype.createAnimation=function(name,start,end,fps){var animation={start:start,end:end,length:end-start+1,fps:fps,duration:(end-start)/fps,lastFrame:0,currentFrame:0,active:!1,time:0,direction:1,weight:1,directionBackwards:!1,mirroredLoop:!1};this.animationsMap[name]=animation,this.animationsList.push(animation)},MorphBlendMesh.prototype.autoCreateAnimations=function(fps){for(var firstAnimation,pattern=/([a-z]+)_?(\d+)/i,frameRanges={},geometry=this.geometry,i=0,il=geometry.morphTargets.length;il>i;i++){var morph=geometry.morphTargets[i],chunks=morph.name.match(pattern);if(chunks&&chunks.length>1){var name=chunks[1];frameRanges[name]||(frameRanges[name]={start:1/0,end:-(1/0)});var range=frameRanges[name];i<range.start&&(range.start=i),i>range.end&&(range.end=i),firstAnimation||(firstAnimation=name)}}for(var name in frameRanges){var range=frameRanges[name];this.createAnimation(name,range.start,range.end,fps)}this.firstAnimation=firstAnimation},MorphBlendMesh.prototype.setAnimationDirectionForward=function(name){var animation=this.animationsMap[name];animation&&(animation.direction=1,animation.directionBackwards=!1)},MorphBlendMesh.prototype.setAnimationDirectionBackward=function(name){var animation=this.animationsMap[name];animation&&(animation.direction=-1,animation.directionBackwards=!0)},MorphBlendMesh.prototype.setAnimationFPS=function(name,fps){var animation=this.animationsMap[name];animation&&(animation.fps=fps,animation.duration=(animation.end-animation.start)/animation.fps)},MorphBlendMesh.prototype.setAnimationDuration=function(name,duration){var animation=this.animationsMap[name];animation&&(animation.duration=duration,animation.fps=(animation.end-animation.start)/animation.duration)},MorphBlendMesh.prototype.setAnimationWeight=function(name,weight){var animation=this.animationsMap[name];animation&&(animation.weight=weight)},MorphBlendMesh.prototype.setAnimationTime=function(name,time){var animation=this.animationsMap[name];animation&&(animation.time=time)},MorphBlendMesh.prototype.getAnimationTime=function(name){var time=0,animation=this.animationsMap[name];return animation&&(time=animation.time),time},MorphBlendMesh.prototype.getAnimationDuration=function(name){var duration=-1,animation=this.animationsMap[name];return animation&&(duration=animation.duration),duration},MorphBlendMesh.prototype.playAnimation=function(name){var animation=this.animationsMap[name];animation?(animation.time=0,animation.active=!0):console.warn("THREE.MorphBlendMesh: animation["+name+"] undefined in .playAnimation()")},MorphBlendMesh.prototype.stopAnimation=function(name){var animation=this.animationsMap[name];animation&&(animation.active=!1)},MorphBlendMesh.prototype.update=function(delta){for(var i=0,il=this.animationsList.length;il>i;i++){var animation=this.animationsList[i];if(animation.active){var frameTime=animation.duration/animation.length;animation.time+=animation.direction*delta,animation.mirroredLoop?(animation.time>animation.duration||animation.time<0)&&(animation.direction*=-1,animation.time>animation.duration&&(animation.time=animation.duration,animation.directionBackwards=!0),animation.time<0&&(animation.time=0,animation.directionBackwards=!1)):(animation.time=animation.time%animation.duration,animation.time<0&&(animation.time+=animation.duration));var keyframe=animation.start+_Math.clamp(Math.floor(animation.time/frameTime),0,animation.length-1),weight=animation.weight;keyframe!==animation.currentFrame&&(this.morphTargetInfluences[animation.lastFrame]=0,this.morphTargetInfluences[animation.currentFrame]=1*weight,this.morphTargetInfluences[keyframe]=0,animation.lastFrame=animation.currentFrame,animation.currentFrame=keyframe);var mix=animation.time%frameTime/frameTime;animation.directionBackwards&&(mix=1-mix),animation.currentFrame!==animation.lastFrame?(this.morphTargetInfluences[animation.currentFrame]=mix*weight,this.morphTargetInfluences[animation.lastFrame]=(1-mix)*weight):this.morphTargetInfluences[animation.currentFrame]=weight}}},ImmediateRenderObject.prototype=Object.create(Object3D.prototype),ImmediateRenderObject.prototype.constructor=ImmediateRenderObject,ImmediateRenderObject.prototype.isImmediateRenderObject=!0,VertexNormalsHelper.prototype=Object.create(LineSegments.prototype),VertexNormalsHelper.prototype.constructor=VertexNormalsHelper,VertexNormalsHelper.prototype.update=function(){var v1=new Vector3,v2=new Vector3,normalMatrix=new Matrix3;return function(){var keys=["a","b","c"];this.object.updateMatrixWorld(!0),normalMatrix.getNormalMatrix(this.object.matrixWorld);var matrixWorld=this.object.matrixWorld,position=this.geometry.attributes.position,objGeometry=this.object.geometry;if(objGeometry&&objGeometry.isGeometry)for(var vertices=objGeometry.vertices,faces=objGeometry.faces,idx=0,i=0,l=faces.length;l>i;i++)for(var face=faces[i],j=0,jl=face.vertexNormals.length;jl>j;j++){var vertex=vertices[face[keys[j]]],normal=face.vertexNormals[j];v1.copy(vertex).applyMatrix4(matrixWorld),v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1),position.setXYZ(idx,v1.x,v1.y,v1.z),idx+=1,position.setXYZ(idx,v2.x,v2.y,v2.z),idx+=1}else if(objGeometry&&objGeometry.isBufferGeometry)for(var objPos=objGeometry.attributes.position,objNorm=objGeometry.attributes.normal,idx=0,j=0,jl=objPos.count;jl>j;j++)v1.set(objPos.getX(j),objPos.getY(j),objPos.getZ(j)).applyMatrix4(matrixWorld),v2.set(objNorm.getX(j),objNorm.getY(j),objNorm.getZ(j)),v2.applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1),position.setXYZ(idx,v1.x,v1.y,v1.z),idx+=1,position.setXYZ(idx,v2.x,v2.y,v2.z),idx+=1;position.needsUpdate=!0}}(),SpotLightHelper.prototype=Object.create(Object3D.prototype),SpotLightHelper.prototype.constructor=SpotLightHelper,SpotLightHelper.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},SpotLightHelper.prototype.update=function(){var vector=new Vector3,vector2=new Vector3;return function(){this.light.updateMatrixWorld();var coneLength=this.light.distance?this.light.distance:1e3,coneWidth=coneLength*Math.tan(this.light.angle);this.cone.scale.set(coneWidth,coneWidth,coneLength),vector.setFromMatrixPosition(this.light.matrixWorld),vector2.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(vector2.sub(vector)),this.cone.material.color.copy(this.light.color)}}(),SkeletonHelper.prototype=Object.create(LineSegments.prototype),SkeletonHelper.prototype.constructor=SkeletonHelper,SkeletonHelper.prototype.onBeforeRender=function(){var vector=new Vector3,boneMatrix=new Matrix4,matrixWorldInv=new Matrix4;return function(){var bones=this.bones,geometry=this.geometry,position=geometry.getAttribute("position");matrixWorldInv.getInverse(this.root.matrixWorld);for(var i=0,j=0;i<bones.length;i++){var bone=bones[i];bone.parent&&bone.parent.isBone&&(boneMatrix.multiplyMatrices(matrixWorldInv,bone.matrixWorld),vector.setFromMatrixPosition(boneMatrix),position.setXYZ(j,vector.x,vector.y,vector.z),boneMatrix.multiplyMatrices(matrixWorldInv,bone.parent.matrixWorld),vector.setFromMatrixPosition(boneMatrix),position.setXYZ(j+1,vector.x,vector.y,vector.z),j+=2)}geometry.getAttribute("position").needsUpdate=!0}}(),PointLightHelper.prototype=Object.create(Mesh.prototype),PointLightHelper.prototype.constructor=PointLightHelper,PointLightHelper.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},PointLightHelper.prototype.update=function(){this.material.color.copy(this.light.color)},RectAreaLightHelper.prototype=Object.create(Object3D.prototype),RectAreaLightHelper.prototype.constructor=RectAreaLightHelper,RectAreaLightHelper.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},RectAreaLightHelper.prototype.update=function(){var line=this.children[0];line.material.color.copy(this.light.color);var hx=.5*this.light.width,hy=.5*this.light.height,position=line.geometry.attributes.position,array=position.array;array[0]=hx,array[1]=-hy,array[2]=0,array[3]=hx,array[4]=hy,array[5]=0,array[6]=-hx,array[7]=hy,array[8]=0,array[9]=-hx,array[10]=-hy,array[11]=0,array[12]=hx,array[13]=-hy,array[14]=0,position.needsUpdate=!0},HemisphereLightHelper.prototype=Object.create(Object3D.prototype),HemisphereLightHelper.prototype.constructor=HemisphereLightHelper,HemisphereLightHelper.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},HemisphereLightHelper.prototype.update=function(){var vector=new Vector3,color1=new Color,color2=new Color;return function(){var mesh=this.children[0],colors=mesh.geometry.getAttribute("color");color1.copy(this.light.color),color2.copy(this.light.groundColor);for(var i=0,l=colors.count;l>i;i++){var color=l/2>i?color1:color2;colors.setXYZ(i,color.r,color.g,color.b)}mesh.lookAt(vector.setFromMatrixPosition(this.light.matrixWorld).negate()),colors.needsUpdate=!0}}(),GridHelper.prototype=Object.create(LineSegments.prototype),GridHelper.prototype.constructor=GridHelper,PolarGridHelper.prototype=Object.create(LineSegments.prototype),PolarGridHelper.prototype.constructor=PolarGridHelper,FaceNormalsHelper.prototype=Object.create(LineSegments.prototype),FaceNormalsHelper.prototype.constructor=FaceNormalsHelper,FaceNormalsHelper.prototype.update=function(){var v1=new Vector3,v2=new Vector3,normalMatrix=new Matrix3;return function(){this.object.updateMatrixWorld(!0),normalMatrix.getNormalMatrix(this.object.matrixWorld);for(var matrixWorld=this.object.matrixWorld,position=this.geometry.attributes.position,objGeometry=this.object.geometry,vertices=objGeometry.vertices,faces=objGeometry.faces,idx=0,i=0,l=faces.length;l>i;i++){var face=faces[i],normal=face.normal;v1.copy(vertices[face.a]).add(vertices[face.b]).add(vertices[face.c]).divideScalar(3).applyMatrix4(matrixWorld),v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1),position.setXYZ(idx,v1.x,v1.y,v1.z),idx+=1,position.setXYZ(idx,v2.x,v2.y,v2.z),idx+=1}position.needsUpdate=!0}}(),DirectionalLightHelper.prototype=Object.create(Object3D.prototype),DirectionalLightHelper.prototype.constructor=DirectionalLightHelper,DirectionalLightHelper.prototype.dispose=function(){var lightPlane=this.children[0],targetLine=this.children[1];lightPlane.geometry.dispose(),lightPlane.material.dispose(),targetLine.geometry.dispose(),targetLine.material.dispose()},DirectionalLightHelper.prototype.update=function(){var v1=new Vector3,v2=new Vector3,v3=new Vector3;return function(){v1.setFromMatrixPosition(this.light.matrixWorld),v2.setFromMatrixPosition(this.light.target.matrixWorld),v3.subVectors(v2,v1);var lightPlane=this.children[0],targetLine=this.children[1];lightPlane.lookAt(v3),lightPlane.material.color.copy(this.light.color),targetLine.lookAt(v3),targetLine.scale.z=v3.length()}}(),CameraHelper.prototype=Object.create(LineSegments.prototype),CameraHelper.prototype.constructor=CameraHelper,CameraHelper.prototype.update=function(){function setPoint(point,x,y,z){vector.set(x,y,z).unproject(camera);var points=pointMap[point];if(void 0!==points)for(var position=geometry.getAttribute("position"),i=0,l=points.length;l>i;i++)position.setXYZ(points[i],vector.x,vector.y,vector.z)}var geometry,pointMap,vector=new Vector3,camera=new Camera;return function(){geometry=this.geometry,pointMap=this.pointMap;var w=1,h=1;camera.projectionMatrix.copy(this.camera.projectionMatrix),setPoint("c",0,0,-1),setPoint("t",0,0,1),setPoint("n1",-w,-h,-1),setPoint("n2",w,-h,-1),setPoint("n3",-w,h,-1),setPoint("n4",w,h,-1),setPoint("f1",-w,-h,1),setPoint("f2",w,-h,1),setPoint("f3",-w,h,1),setPoint("f4",w,h,1),setPoint("u1",.7*w,1.1*h,-1),setPoint("u2",.7*-w,1.1*h,-1),setPoint("u3",0,2*h,-1),setPoint("cf1",-w,0,1),setPoint("cf2",w,0,1),setPoint("cf3",0,-h,1),setPoint("cf4",0,h,1),setPoint("cn1",-w,0,-1),setPoint("cn2",w,0,-1),setPoint("cn3",0,-h,-1),setPoint("cn4",0,h,-1),geometry.getAttribute("position").needsUpdate=!0}}(),BoxHelper.prototype=Object.create(LineSegments.prototype),BoxHelper.prototype.constructor=BoxHelper,BoxHelper.prototype.update=function(){var box=new Box3;return function(object){if(void 0!==object&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&box.setFromObject(this.object),!box.isEmpty()){var min=box.min,max=box.max,position=this.geometry.attributes.position,array=position.array;array[0]=max.x,array[1]=max.y,array[2]=max.z,array[3]=min.x,array[4]=max.y,array[5]=max.z,array[6]=min.x,array[7]=min.y,array[8]=max.z,array[9]=max.x,array[10]=min.y,array[11]=max.z,array[12]=max.x,array[13]=max.y,array[14]=min.z,array[15]=min.x,array[16]=max.y,array[17]=min.z,array[18]=min.x,array[19]=min.y,array[20]=min.z,array[21]=max.x,array[22]=min.y,array[23]=min.z,position.needsUpdate=!0,this.geometry.computeBoundingSphere()}}}(),BoxHelper.prototype.setFromObject=function(object){return this.object=object,this.update(),this};var lineGeometry,coneGeometry;ArrowHelper.prototype=Object.create(Object3D.prototype),ArrowHelper.prototype.constructor=ArrowHelper,ArrowHelper.prototype.setDirection=function(){var radians,axis=new Vector3;return function(dir){dir.y>.99999?this.quaternion.set(0,0,0,1):dir.y<-.99999?this.quaternion.set(1,0,0,0):(axis.set(dir.z,0,-dir.x).normalize(),radians=Math.acos(dir.y),this.quaternion.setFromAxisAngle(axis,radians))}}(),ArrowHelper.prototype.setLength=function(length,headLength,headWidth){void 0===headLength&&(headLength=.2*length),void 0===headWidth&&(headWidth=.2*headLength),this.line.scale.set(1,Math.max(0,length-headLength),1),this.line.updateMatrix(),this.cone.scale.set(headWidth,headLength,headWidth),this.cone.position.y=length,this.cone.updateMatrix()},ArrowHelper.prototype.setColor=function(color){this.line.material.color.copy(color),this.cone.material.color.copy(color)},AxisHelper.prototype=Object.create(LineSegments.prototype),AxisHelper.prototype.constructor=AxisHelper;var tmp=new Vector3,px=new CubicPoly,py=new CubicPoly,pz=new CubicPoly;CatmullRomCurve3.prototype=Object.create(Curve.prototype),CatmullRomCurve3.prototype.constructor=CatmullRomCurve3,CatmullRomCurve3.prototype.getPoint=function(t){var points=this.points,l=points.length,point=(l-(this.closed?0:1))*t,intPoint=Math.floor(point),weight=point-intPoint;this.closed?intPoint+=intPoint>0?0:(Math.floor(Math.abs(intPoint)/points.length)+1)*points.length:0===weight&&intPoint===l-1&&(intPoint=l-2,weight=1);var p0,p1,p2,p3;if(this.closed||intPoint>0?p0=points[(intPoint-1)%l]:(tmp.subVectors(points[0],points[1]).add(points[0]),p0=tmp),p1=points[intPoint%l],p2=points[(intPoint+1)%l],this.closed||l>intPoint+2?p3=points[(intPoint+2)%l]:(tmp.subVectors(points[l-1],points[l-2]).add(points[l-1]),
p3=tmp),void 0===this.type||"centripetal"===this.type||"chordal"===this.type){var pow="chordal"===this.type?.5:.25,dt0=Math.pow(p0.distanceToSquared(p1),pow),dt1=Math.pow(p1.distanceToSquared(p2),pow),dt2=Math.pow(p2.distanceToSquared(p3),pow);1e-4>dt1&&(dt1=1),1e-4>dt0&&(dt0=dt1),1e-4>dt2&&(dt2=dt1),px.initNonuniformCatmullRom(p0.x,p1.x,p2.x,p3.x,dt0,dt1,dt2),py.initNonuniformCatmullRom(p0.y,p1.y,p2.y,p3.y,dt0,dt1,dt2),pz.initNonuniformCatmullRom(p0.z,p1.z,p2.z,p3.z,dt0,dt1,dt2)}else if("catmullrom"===this.type){var tension=void 0!==this.tension?this.tension:.5;px.initCatmullRom(p0.x,p1.x,p2.x,p3.x,tension),py.initCatmullRom(p0.y,p1.y,p2.y,p3.y,tension),pz.initCatmullRom(p0.z,p1.z,p2.z,p3.z,tension)}return new Vector3(px.calc(weight),py.calc(weight),pz.calc(weight))},CubicBezierCurve3.prototype=Object.create(Curve.prototype),CubicBezierCurve3.prototype.constructor=CubicBezierCurve3,CubicBezierCurve3.prototype.getPoint=function(t){var v0=this.v0,v1=this.v1,v2=this.v2,v3=this.v3;return new Vector3(CubicBezier(t,v0.x,v1.x,v2.x,v3.x),CubicBezier(t,v0.y,v1.y,v2.y,v3.y),CubicBezier(t,v0.z,v1.z,v2.z,v3.z))},QuadraticBezierCurve3.prototype=Object.create(Curve.prototype),QuadraticBezierCurve3.prototype.constructor=QuadraticBezierCurve3,QuadraticBezierCurve3.prototype.getPoint=function(t){var v0=this.v0,v1=this.v1,v2=this.v2;return new Vector3(QuadraticBezier(t,v0.x,v1.x,v2.x),QuadraticBezier(t,v0.y,v1.y,v2.y),QuadraticBezier(t,v0.z,v1.z,v2.z))},LineCurve3.prototype=Object.create(Curve.prototype),LineCurve3.prototype.constructor=LineCurve3,LineCurve3.prototype.getPoint=function(t){if(1===t)return this.v2.clone();var vector=new Vector3;return vector.subVectors(this.v2,this.v1),vector.multiplyScalar(t),vector.add(this.v1),vector},ArcCurve.prototype=Object.create(EllipseCurve.prototype),ArcCurve.prototype.constructor=ArcCurve;var SceneUtils={createMultiMaterialObject:function(geometry,materials){for(var group=new Group,i=0,l=materials.length;l>i;i++)group.add(new Mesh(geometry,materials[i]));return group},detach:function(child,parent,scene){child.applyMatrix(parent.matrixWorld),parent.remove(child),scene.add(child)},attach:function(child,scene,parent){child.applyMatrix((new Matrix4).getInverse(parent.matrixWorld)),scene.remove(child),parent.add(child)}},LineStrip=0,LinePieces=1;Curve.create=function(construct,getPoint){return console.log("THREE.Curve.create() has been deprecated"),construct.prototype=Object.create(Curve.prototype),construct.prototype.constructor=construct,construct.prototype.getPoint=getPoint,construct},ClosedSplineCurve3.prototype=Object.create(CatmullRomCurve3.prototype),SplineCurve3.prototype=Object.create(CatmullRomCurve3.prototype),Spline.prototype=Object.create(CatmullRomCurve3.prototype),Object.assign(Spline.prototype,{initFromArray:function(a){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(optionalTarget){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(samplingCoef){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),GridHelper.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},SkeletonHelper.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(Box2.prototype,{center:function(optionalTarget){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(optionalTarget)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(box){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(box)},size:function(optionalTarget){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(optionalTarget)}}),Object.assign(Box3.prototype,{center:function(optionalTarget){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(optionalTarget)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(box){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(box)},isIntersectionSphere:function(sphere){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(sphere)},size:function(optionalTarget){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(optionalTarget)}}),Line3.prototype.center=function(optionalTarget){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(optionalTarget)},_Math.random16=function(){return console.warn("THREE.Math.random16() has been deprecated. Use Math.random() instead."),Math.random()},Object.assign(Matrix3.prototype,{flattenToArrayOffset:function(array,offset){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(array,offset)},multiplyVector3:function(vector){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),vector.applyMatrix3(this)},multiplyVector3Array:function(a){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBuffer:function(buffer,offset,length){return console.warn("THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(buffer)},applyToVector3Array:function(array,offset,length){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(Matrix4.prototype,{extractPosition:function(m){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(m)},flattenToArrayOffset:function(array,offset){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(array,offset)},getPosition:function(){var v1;return function(){return void 0===v1&&(v1=new Vector3),console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),v1.setFromMatrixColumn(this,3)}}(),setRotationFromQuaternion:function(q){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(q)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(vector){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),vector.applyMatrix4(this)},multiplyVector4:function(vector){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),vector.applyMatrix4(this)},multiplyVector3Array:function(a){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(v){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),v.transformDirection(this)},crossVector:function(vector){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),vector.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBuffer:function(buffer,offset,length){return console.warn("THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead."),this.applyToBufferAttribute(buffer)},applyToVector3Array:function(array,offset,length){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(left,right,bottom,top,near,far){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(left,right,top,bottom,near,far)}}),Plane.prototype.isIntersectionLine=function(line){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(line)},Quaternion.prototype.multiplyVector3=function(vector){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),vector.applyQuaternion(this)},Object.assign(Ray.prototype,{isIntersectionBox:function(box){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(box)},isIntersectionPlane:function(plane){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(plane)},isIntersectionSphere:function(sphere){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(sphere)}}),Object.assign(Shape.prototype,{extrude:function(options){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new ExtrudeGeometry(this,options)},makeGeometry:function(options){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new ShapeGeometry(this,options)}}),Object.assign(Vector2.prototype,{fromAttribute:function(attribute,index,offset){return console.error("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(attribute,index,offset)}}),Object.assign(Vector3.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(m){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(m)},getScaleFromMatrix:function(m){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(m)},getColumnFromMatrix:function(index,matrix){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(matrix,index)},applyProjection:function(m){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(m)},fromAttribute:function(attribute,index,offset){return console.error("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(attribute,index,offset)}}),Object.assign(Vector4.prototype,{fromAttribute:function(attribute,index,offset){return console.error("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(attribute,index,offset)}}),Geometry.prototype.computeTangents=function(){console.warn("THREE.Geometry: .computeTangents() has been removed.")},Object.assign(Object3D.prototype,{getChildByName:function(name){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(name)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(distance,axis){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(axis,distance)}}),Object.defineProperties(Object3D.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(value){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=value}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.defineProperties(LOD.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(Skeleton.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),Object.defineProperty(Curve.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(value){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=value}}),PerspectiveCamera.prototype.setLens=function(focalLength,filmGauge){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==filmGauge&&(this.filmGauge=filmGauge),this.setFocalLength(focalLength)},Object.defineProperties(Light.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(value){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=value}},shadowCameraLeft:{set:function(value){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=value}},shadowCameraRight:{set:function(value){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=value}},shadowCameraTop:{set:function(value){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=value}},shadowCameraBottom:{set:function(value){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=value}},shadowCameraNear:{set:function(value){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=value}},shadowCameraFar:{set:function(value){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=value}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(value){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=value}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(value){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=value}},shadowMapHeight:{set:function(value){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=value}}}),Object.defineProperties(BufferAttribute.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}}}),Object.assign(BufferGeometry.prototype,{addIndex:function(index){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(index)},addDrawCall:function(start,count,indexOffset){void 0!==indexOffset&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(start,count)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")}}),Object.defineProperties(BufferGeometry.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.defineProperties(Uniform.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(Material.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Color}}}),Object.defineProperties(MeshPhongMaterial.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(ShaderMaterial.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(value){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=value}}}),Object.assign(WebGLRenderer.prototype,{getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(boolean){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(boolean)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")}}),Object.defineProperties(WebGLRenderer.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(value){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=value}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(value){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=value}},shadowMapCullFace:{get:function(){return this.shadowMap.cullFace},set:function(value){console.warn("THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace."),this.shadowMap.cullFace=value}}}),Object.defineProperties(WebGLShadowMap.prototype,{cullFace:{get:function(){return this.renderReverseSided?CullFaceFront:CullFaceBack},set:function(cullFace){var value=cullFace!==CullFaceBack;console.warn("WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to "+value+"."),this.renderReverseSided=value}}}),Object.defineProperties(WebGLRenderTarget.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(value){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=value}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(value){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=value}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(value){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=value}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(value){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=value}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(value){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=value}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(value){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=value}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(value){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=value}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(value){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=value}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(value){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=value}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(value){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=value}}}),Audio.prototype.load=function(file){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var scope=this,audioLoader=new AudioLoader;return audioLoader.load(file,function(buffer){scope.setBuffer(buffer)}),this},AudioAnalyser.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()};var GeometryUtils={merge:function(geometry1,geometry2,materialIndexOffset){console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.");var matrix;geometry2.isMesh&&(geometry2.matrixAutoUpdate&&geometry2.updateMatrix(),matrix=geometry2.matrix,geometry2=geometry2.geometry),geometry1.merge(geometry2,matrix,materialIndexOffset)},center:function(geometry){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),geometry.center()}},ImageUtils={crossOrigin:void 0,loadTexture:function(url,mapping,onLoad,onError){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var loader=new TextureLoader;loader.setCrossOrigin(this.crossOrigin);var texture=loader.load(url,onLoad,void 0,onError);return mapping&&(texture.mapping=mapping),texture},loadTextureCube:function(urls,mapping,onLoad,onError){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var loader=new CubeTextureLoader;loader.setCrossOrigin(this.crossOrigin);var texture=loader.load(urls,onLoad,void 0,onError);return mapping&&(texture.mapping=mapping),texture},loadCompressedTexture:function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},loadCompressedTextureCube:function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")}};exports.WebGLRenderTargetCube=WebGLRenderTargetCube,exports.WebGLRenderTarget=WebGLRenderTarget,exports.WebGLRenderer=WebGLRenderer,exports.ShaderLib=ShaderLib,exports.UniformsLib=UniformsLib,exports.UniformsUtils=UniformsUtils,exports.ShaderChunk=ShaderChunk,exports.FogExp2=FogExp2,exports.Fog=Fog,exports.Scene=Scene,exports.LensFlare=LensFlare,exports.Sprite=Sprite,exports.LOD=LOD,exports.SkinnedMesh=SkinnedMesh,exports.Skeleton=Skeleton,exports.Bone=Bone,exports.Mesh=Mesh,exports.LineSegments=LineSegments,exports.LineLoop=LineLoop,exports.Line=Line,exports.Points=Points,exports.Group=Group,exports.VideoTexture=VideoTexture,exports.DataTexture=DataTexture,exports.CompressedTexture=CompressedTexture,exports.CubeTexture=CubeTexture,exports.CanvasTexture=CanvasTexture,exports.DepthTexture=DepthTexture,exports.Texture=Texture,exports.CompressedTextureLoader=CompressedTextureLoader,exports.DataTextureLoader=DataTextureLoader,exports.CubeTextureLoader=CubeTextureLoader,exports.TextureLoader=TextureLoader,exports.ObjectLoader=ObjectLoader,exports.MaterialLoader=MaterialLoader,exports.BufferGeometryLoader=BufferGeometryLoader,exports.DefaultLoadingManager=DefaultLoadingManager,exports.LoadingManager=LoadingManager,exports.JSONLoader=JSONLoader,exports.ImageLoader=ImageLoader,exports.FontLoader=FontLoader,exports.FileLoader=FileLoader,exports.Loader=Loader,exports.Cache=Cache,exports.AudioLoader=AudioLoader,exports.SpotLightShadow=SpotLightShadow,exports.SpotLight=SpotLight,exports.PointLight=PointLight,exports.RectAreaLight=RectAreaLight,exports.HemisphereLight=HemisphereLight,exports.DirectionalLightShadow=DirectionalLightShadow,exports.DirectionalLight=DirectionalLight,exports.AmbientLight=AmbientLight,exports.LightShadow=LightShadow,exports.Light=Light,exports.StereoCamera=StereoCamera,exports.PerspectiveCamera=PerspectiveCamera,exports.OrthographicCamera=OrthographicCamera,exports.CubeCamera=CubeCamera,exports.ArrayCamera=ArrayCamera,exports.Camera=Camera,exports.AudioListener=AudioListener,exports.PositionalAudio=PositionalAudio,exports.AudioContext=AudioContext,exports.AudioAnalyser=AudioAnalyser,exports.Audio=Audio,exports.VectorKeyframeTrack=VectorKeyframeTrack,exports.StringKeyframeTrack=StringKeyframeTrack,exports.QuaternionKeyframeTrack=QuaternionKeyframeTrack,exports.NumberKeyframeTrack=NumberKeyframeTrack,exports.ColorKeyframeTrack=ColorKeyframeTrack,exports.BooleanKeyframeTrack=BooleanKeyframeTrack,exports.PropertyMixer=PropertyMixer,exports.PropertyBinding=PropertyBinding,exports.KeyframeTrack=KeyframeTrack,exports.AnimationUtils=AnimationUtils,exports.AnimationObjectGroup=AnimationObjectGroup,exports.AnimationMixer=AnimationMixer,exports.AnimationClip=AnimationClip,exports.Uniform=Uniform,exports.InstancedBufferGeometry=InstancedBufferGeometry,exports.BufferGeometry=BufferGeometry,exports.GeometryIdCount=GeometryIdCount,exports.Geometry=Geometry,exports.InterleavedBufferAttribute=InterleavedBufferAttribute,exports.InstancedInterleavedBuffer=InstancedInterleavedBuffer,exports.InterleavedBuffer=InterleavedBuffer,exports.InstancedBufferAttribute=InstancedBufferAttribute,exports.Face3=Face3,exports.Object3D=Object3D,exports.Raycaster=Raycaster,exports.Layers=Layers,exports.EventDispatcher=EventDispatcher,exports.Clock=Clock,exports.QuaternionLinearInterpolant=QuaternionLinearInterpolant,exports.LinearInterpolant=LinearInterpolant,exports.DiscreteInterpolant=DiscreteInterpolant,exports.CubicInterpolant=CubicInterpolant,exports.Interpolant=Interpolant,exports.Triangle=Triangle,exports.Math=_Math,exports.Spherical=Spherical,exports.Cylindrical=Cylindrical,exports.Plane=Plane,exports.Frustum=Frustum,exports.Sphere=Sphere,exports.Ray=Ray,exports.Matrix4=Matrix4,exports.Matrix3=Matrix3,exports.Box3=Box3,exports.Box2=Box2,exports.Line3=Line3,exports.Euler=Euler,exports.Vector4=Vector4,exports.Vector3=Vector3,exports.Vector2=Vector2,exports.Quaternion=Quaternion,exports.Color=Color,exports.MorphBlendMesh=MorphBlendMesh,exports.ImmediateRenderObject=ImmediateRenderObject,exports.VertexNormalsHelper=VertexNormalsHelper,exports.SpotLightHelper=SpotLightHelper,exports.SkeletonHelper=SkeletonHelper,exports.PointLightHelper=PointLightHelper,exports.RectAreaLightHelper=RectAreaLightHelper,exports.HemisphereLightHelper=HemisphereLightHelper,exports.GridHelper=GridHelper,exports.PolarGridHelper=PolarGridHelper,exports.FaceNormalsHelper=FaceNormalsHelper,exports.DirectionalLightHelper=DirectionalLightHelper,exports.CameraHelper=CameraHelper,exports.BoxHelper=BoxHelper,exports.ArrowHelper=ArrowHelper,exports.AxisHelper=AxisHelper,exports.CatmullRomCurve3=CatmullRomCurve3,exports.CubicBezierCurve3=CubicBezierCurve3,exports.QuadraticBezierCurve3=QuadraticBezierCurve3,exports.LineCurve3=LineCurve3,exports.ArcCurve=ArcCurve,exports.EllipseCurve=EllipseCurve,exports.SplineCurve=SplineCurve,exports.CubicBezierCurve=CubicBezierCurve,exports.QuadraticBezierCurve=QuadraticBezierCurve,exports.LineCurve=LineCurve,exports.Shape=Shape,exports.Path=Path,exports.ShapePath=ShapePath,exports.Font=Font,exports.CurvePath=CurvePath,exports.Curve=Curve,exports.ShapeUtils=ShapeUtils,exports.SceneUtils=SceneUtils,exports.WireframeGeometry=WireframeGeometry,exports.ParametricGeometry=ParametricGeometry,exports.ParametricBufferGeometry=ParametricBufferGeometry,exports.TetrahedronGeometry=TetrahedronGeometry,exports.TetrahedronBufferGeometry=TetrahedronBufferGeometry,exports.OctahedronGeometry=OctahedronGeometry,exports.OctahedronBufferGeometry=OctahedronBufferGeometry,exports.IcosahedronGeometry=IcosahedronGeometry,exports.IcosahedronBufferGeometry=IcosahedronBufferGeometry,exports.DodecahedronGeometry=DodecahedronGeometry,exports.DodecahedronBufferGeometry=DodecahedronBufferGeometry,exports.PolyhedronGeometry=PolyhedronGeometry,exports.PolyhedronBufferGeometry=PolyhedronBufferGeometry,exports.TubeGeometry=TubeGeometry,exports.TubeBufferGeometry=TubeBufferGeometry,exports.TorusKnotGeometry=TorusKnotGeometry,exports.TorusKnotBufferGeometry=TorusKnotBufferGeometry,exports.TorusGeometry=TorusGeometry,exports.TorusBufferGeometry=TorusBufferGeometry,exports.TextGeometry=TextGeometry,
exports.TextBufferGeometry=TextBufferGeometry,exports.SphereGeometry=SphereGeometry,exports.SphereBufferGeometry=SphereBufferGeometry,exports.RingGeometry=RingGeometry,exports.RingBufferGeometry=RingBufferGeometry,exports.PlaneGeometry=PlaneGeometry,exports.PlaneBufferGeometry=PlaneBufferGeometry,exports.LatheGeometry=LatheGeometry,exports.LatheBufferGeometry=LatheBufferGeometry,exports.ShapeGeometry=ShapeGeometry,exports.ShapeBufferGeometry=ShapeBufferGeometry,exports.ExtrudeGeometry=ExtrudeGeometry,exports.ExtrudeBufferGeometry=ExtrudeBufferGeometry,exports.EdgesGeometry=EdgesGeometry,exports.ConeGeometry=ConeGeometry,exports.ConeBufferGeometry=ConeBufferGeometry,exports.CylinderGeometry=CylinderGeometry,exports.CylinderBufferGeometry=CylinderBufferGeometry,exports.CircleGeometry=CircleGeometry,exports.CircleBufferGeometry=CircleBufferGeometry,exports.BoxGeometry=BoxGeometry,exports.BoxBufferGeometry=BoxBufferGeometry,exports.ShadowMaterial=ShadowMaterial,exports.SpriteMaterial=SpriteMaterial,exports.RawShaderMaterial=RawShaderMaterial,exports.ShaderMaterial=ShaderMaterial,exports.PointsMaterial=PointsMaterial,exports.MeshPhysicalMaterial=MeshPhysicalMaterial,exports.MeshStandardMaterial=MeshStandardMaterial,exports.MeshPhongMaterial=MeshPhongMaterial,exports.MeshToonMaterial=MeshToonMaterial,exports.MeshNormalMaterial=MeshNormalMaterial,exports.MeshLambertMaterial=MeshLambertMaterial,exports.MeshDepthMaterial=MeshDepthMaterial,exports.MeshBasicMaterial=MeshBasicMaterial,exports.LineDashedMaterial=LineDashedMaterial,exports.LineBasicMaterial=LineBasicMaterial,exports.Material=Material,exports.Float64BufferAttribute=Float64BufferAttribute,exports.Float32BufferAttribute=Float32BufferAttribute,exports.Uint32BufferAttribute=Uint32BufferAttribute,exports.Int32BufferAttribute=Int32BufferAttribute,exports.Uint16BufferAttribute=Uint16BufferAttribute,exports.Int16BufferAttribute=Int16BufferAttribute,exports.Uint8ClampedBufferAttribute=Uint8ClampedBufferAttribute,exports.Uint8BufferAttribute=Uint8BufferAttribute,exports.Int8BufferAttribute=Int8BufferAttribute,exports.BufferAttribute=BufferAttribute,exports.REVISION=REVISION,exports.MOUSE=MOUSE,exports.CullFaceNone=CullFaceNone,exports.CullFaceBack=CullFaceBack,exports.CullFaceFront=CullFaceFront,exports.CullFaceFrontBack=CullFaceFrontBack,exports.FrontFaceDirectionCW=FrontFaceDirectionCW,exports.FrontFaceDirectionCCW=FrontFaceDirectionCCW,exports.BasicShadowMap=BasicShadowMap,exports.PCFShadowMap=PCFShadowMap,exports.PCFSoftShadowMap=PCFSoftShadowMap,exports.FrontSide=FrontSide,exports.BackSide=BackSide,exports.DoubleSide=DoubleSide,exports.FlatShading=FlatShading,exports.SmoothShading=SmoothShading,exports.NoColors=NoColors,exports.FaceColors=FaceColors,exports.VertexColors=VertexColors,exports.NoBlending=NoBlending,exports.NormalBlending=NormalBlending,exports.AdditiveBlending=AdditiveBlending,exports.SubtractiveBlending=SubtractiveBlending,exports.MultiplyBlending=MultiplyBlending,exports.CustomBlending=CustomBlending,exports.AddEquation=AddEquation,exports.SubtractEquation=SubtractEquation,exports.ReverseSubtractEquation=ReverseSubtractEquation,exports.MinEquation=MinEquation,exports.MaxEquation=MaxEquation,exports.ZeroFactor=ZeroFactor,exports.OneFactor=OneFactor,exports.SrcColorFactor=SrcColorFactor,exports.OneMinusSrcColorFactor=OneMinusSrcColorFactor,exports.SrcAlphaFactor=SrcAlphaFactor,exports.OneMinusSrcAlphaFactor=OneMinusSrcAlphaFactor,exports.DstAlphaFactor=DstAlphaFactor,exports.OneMinusDstAlphaFactor=OneMinusDstAlphaFactor,exports.DstColorFactor=DstColorFactor,exports.OneMinusDstColorFactor=OneMinusDstColorFactor,exports.SrcAlphaSaturateFactor=SrcAlphaSaturateFactor,exports.NeverDepth=NeverDepth,exports.AlwaysDepth=AlwaysDepth,exports.LessDepth=LessDepth,exports.LessEqualDepth=LessEqualDepth,exports.EqualDepth=EqualDepth,exports.GreaterEqualDepth=GreaterEqualDepth,exports.GreaterDepth=GreaterDepth,exports.NotEqualDepth=NotEqualDepth,exports.MultiplyOperation=MultiplyOperation,exports.MixOperation=MixOperation,exports.AddOperation=AddOperation,exports.NoToneMapping=NoToneMapping,exports.LinearToneMapping=LinearToneMapping,exports.ReinhardToneMapping=ReinhardToneMapping,exports.Uncharted2ToneMapping=Uncharted2ToneMapping,exports.CineonToneMapping=CineonToneMapping,exports.UVMapping=UVMapping,exports.CubeReflectionMapping=CubeReflectionMapping,exports.CubeRefractionMapping=CubeRefractionMapping,exports.EquirectangularReflectionMapping=EquirectangularReflectionMapping,exports.EquirectangularRefractionMapping=EquirectangularRefractionMapping,exports.SphericalReflectionMapping=SphericalReflectionMapping,exports.CubeUVReflectionMapping=CubeUVReflectionMapping,exports.CubeUVRefractionMapping=CubeUVRefractionMapping,exports.RepeatWrapping=RepeatWrapping,exports.ClampToEdgeWrapping=ClampToEdgeWrapping,exports.MirroredRepeatWrapping=MirroredRepeatWrapping,exports.NearestFilter=NearestFilter,exports.NearestMipMapNearestFilter=NearestMipMapNearestFilter,exports.NearestMipMapLinearFilter=NearestMipMapLinearFilter,exports.LinearFilter=LinearFilter,exports.LinearMipMapNearestFilter=LinearMipMapNearestFilter,exports.LinearMipMapLinearFilter=LinearMipMapLinearFilter,exports.UnsignedByteType=UnsignedByteType,exports.ByteType=ByteType,exports.ShortType=ShortType,exports.UnsignedShortType=UnsignedShortType,exports.IntType=IntType,exports.UnsignedIntType=UnsignedIntType,exports.FloatType=FloatType,exports.HalfFloatType=HalfFloatType,exports.UnsignedShort4444Type=UnsignedShort4444Type,exports.UnsignedShort5551Type=UnsignedShort5551Type,exports.UnsignedShort565Type=UnsignedShort565Type,exports.UnsignedInt248Type=UnsignedInt248Type,exports.AlphaFormat=AlphaFormat,exports.RGBFormat=RGBFormat,exports.RGBAFormat=RGBAFormat,exports.LuminanceFormat=LuminanceFormat,exports.LuminanceAlphaFormat=LuminanceAlphaFormat,exports.RGBEFormat=RGBEFormat,exports.DepthFormat=DepthFormat,exports.DepthStencilFormat=DepthStencilFormat,exports.RGB_S3TC_DXT1_Format=RGB_S3TC_DXT1_Format,exports.RGBA_S3TC_DXT1_Format=RGBA_S3TC_DXT1_Format,exports.RGBA_S3TC_DXT3_Format=RGBA_S3TC_DXT3_Format,exports.RGBA_S3TC_DXT5_Format=RGBA_S3TC_DXT5_Format,exports.RGB_PVRTC_4BPPV1_Format=RGB_PVRTC_4BPPV1_Format,exports.RGB_PVRTC_2BPPV1_Format=RGB_PVRTC_2BPPV1_Format,exports.RGBA_PVRTC_4BPPV1_Format=RGBA_PVRTC_4BPPV1_Format,exports.RGBA_PVRTC_2BPPV1_Format=RGBA_PVRTC_2BPPV1_Format,exports.RGB_ETC1_Format=RGB_ETC1_Format,exports.LoopOnce=LoopOnce,exports.LoopRepeat=LoopRepeat,exports.LoopPingPong=LoopPingPong,exports.InterpolateDiscrete=InterpolateDiscrete,exports.InterpolateLinear=InterpolateLinear,exports.InterpolateSmooth=InterpolateSmooth,exports.ZeroCurvatureEnding=ZeroCurvatureEnding,exports.ZeroSlopeEnding=ZeroSlopeEnding,exports.WrapAroundEnding=WrapAroundEnding,exports.TrianglesDrawMode=TrianglesDrawMode,exports.TriangleStripDrawMode=TriangleStripDrawMode,exports.TriangleFanDrawMode=TriangleFanDrawMode,exports.LinearEncoding=LinearEncoding,exports.sRGBEncoding=sRGBEncoding,exports.GammaEncoding=GammaEncoding,exports.RGBEEncoding=RGBEEncoding,exports.LogLuvEncoding=LogLuvEncoding,exports.RGBM7Encoding=RGBM7Encoding,exports.RGBM16Encoding=RGBM16Encoding,exports.RGBDEncoding=RGBDEncoding,exports.BasicDepthPacking=BasicDepthPacking,exports.RGBADepthPacking=RGBADepthPacking,exports.CubeGeometry=BoxGeometry,exports.Face4=Face4,exports.LineStrip=LineStrip,exports.LinePieces=LinePieces,exports.MeshFaceMaterial=MeshFaceMaterial,exports.MultiMaterial=MultiMaterial,exports.PointCloud=PointCloud,exports.Particle=Particle,exports.ParticleSystem=ParticleSystem,exports.PointCloudMaterial=PointCloudMaterial,exports.ParticleBasicMaterial=ParticleBasicMaterial,exports.ParticleSystemMaterial=ParticleSystemMaterial,exports.Vertex=Vertex,exports.DynamicBufferAttribute=DynamicBufferAttribute,exports.Int8Attribute=Int8Attribute,exports.Uint8Attribute=Uint8Attribute,exports.Uint8ClampedAttribute=Uint8ClampedAttribute,exports.Int16Attribute=Int16Attribute,exports.Uint16Attribute=Uint16Attribute,exports.Int32Attribute=Int32Attribute,exports.Uint32Attribute=Uint32Attribute,exports.Float32Attribute=Float32Attribute,exports.Float64Attribute=Float64Attribute,exports.ClosedSplineCurve3=ClosedSplineCurve3,exports.SplineCurve3=SplineCurve3,exports.Spline=Spline,exports.BoundingBoxHelper=BoundingBoxHelper,exports.EdgesHelper=EdgesHelper,exports.WireframeHelper=WireframeHelper,exports.XHRLoader=XHRLoader,exports.BinaryTextureLoader=BinaryTextureLoader,exports.GeometryUtils=GeometryUtils,exports.ImageUtils=ImageUtils,exports.Projector=Projector,exports.CanvasRenderer=CanvasRenderer,Object.defineProperty(exports,"__esModule",{value:!0})})},{}],59:[function(require,module,exports){"use strict";function split(sep){return function(o){return void 0===o?[]:Array.isArray(o)?o:"string"==typeof o?o.trim().split(sep):[o]}}function hasVal(e){return e||0===e}function map(fn,list){return arguments.length>1?map(fn)(list):function(l){return asArr(l).map(fn)}}function compact(arr){return asArr(arr).filter(hasVal)}function filter(fn,list){return arguments.length>1?filter(fn)(list):function(l){return asArr(l).filter(fn)}}function objHeight(p){if(!p)return-(1/0);var f=7*tonalPitch.fifths(p),o=tonalPitch.focts(p)||-Math.floor(f/12)-100;return f+12*o}function ascComp(a,b){return objHeight(a)-objHeight(b)}function descComp(a,b){return-ascComp(a,b)}function sort(list,comp){var fn=1===arguments.length||comp===!0?ascComp:comp===!1?descComp:"function"==typeof comp?comp:ascComp;return list=Array.isArray(list)?list.slice():asArr(list),listFn(function(arr){return arr.sort(fn).filter(hasVal)},list)}function trOct(n){return tonalTranspose.transpose(tonalPitch.pitch(0,n,1))}function rotate(times,list){var arr=asArr(list),len=arr.length,n=(times%len+len)%len;return arr.slice(n,len).concat(arr.slice(0,n))}function rotateAsc(times,list){return listFn(function(arr){var len=arr.length,n=(times%len+len)%len,head=arr.slice(n,len),tail=arr.slice(0,n),s=tonalDistance.semitones(head[len-n-1],tail[0]);if(0>s){var octs=Math.floor(s/12);0>times?head=head.map(trOct(octs)):tail=tail.map(trOct(-octs))}return head.concat(tail)},list)}function select(nums,list){if(1===arguments.length)return function(l){return select(nums,l)};var arr=asArr(list);return asArr(nums).map(function(n){return arr[n-1]||null})}function permutations(list){return list=asArr(list),0===list.length?[[]]:permutations(list.slice(1)).reduce(function(acc,perm){return acc.concat(list.map(function(e,pos){var newPerm=perm.slice();return newPerm.splice(pos,0,list[0]),newPerm}))},[])}function asPitchStr(p){return tonalPitch.strPitch(p)||p}function listToStr(v){return tonalPitch.isPitch(v)?tonalPitch.strPitch(v):isArr(v)?v.map(asPitchStr):v}function listFn(fn,list){if(1===arguments.length)return function(l){return listFn(fn,l)};var arr=asArr(list).map(tonalPitch.asPitch),res=fn(arr);return listToStr(res)}Object.defineProperty(exports,"__esModule",{value:!0});var tonalPitch=require("tonal-pitch"),tonalTranspose=require("tonal-transpose"),tonalDistance=require("tonal-distance"),isArr=Array.isArray,asArr=split(/\s*\|\s*|\s*,\s*|\s+/),shuffle=listFn(function(arr){for(var i,t,m=arr.length;m;)i=Math.random()*m--|0,t=arr[m],arr[m]=arr[i],arr[i]=t;return arr});exports.asArr=asArr,exports.map=map,exports.compact=compact,exports.filter=filter,exports.sort=sort,exports.shuffle=shuffle,exports.rotate=rotate,exports.rotateAsc=rotateAsc,exports.select=select,exports.permutations=permutations},{"tonal-distance":62,"tonal-pitch":72,"tonal-transpose":78}],60:[function(require,module,exports){"use strict";function get(type,tonic){if(1===arguments.length)return function(t){return get(type,t)};var ivls=dict.get(type);return ivls?tonalHarmonizer.harmonize(ivls,tonic):null}function notes(chord){var p=parse(chord),ivls=dict.get(p.type);return ivls?tonalHarmonizer.harmonize(ivls,p.tonic):tonalArray.compact(tonalArray.map(tonalNote.name,chord))}function intervals(name$$1){var p=parse(name$$1);return dict.get(p.type)||[]}function isKnownChord(name$$1){return intervals(name$$1).length>0}function position(chord){var pcs=tonalArray.map(tonalNote.pc,chord),sorted=sortTriads(pcs);return sorted?sorted.indexOf(pcs[0]):null}function inversion(num,chord){if(1===arguments.length)return function(c){return inversion(num,c)};var sorted=sortTriads(chord);return sorted?tonalArray.rotate(num,sorted):[]}function sortTriads(chord){for(var all=tonalArray.permutations(notes(chord).map(tonalNote.pc)),i=0;i<all.length;i++){var ivls=tonalHarmonizer.intervallic(all[i]);if(areTriads(ivls))return all[i]}return null}function areTriads(list){for(var i=0;i<list.length;i++)if("3"!==list[i][0])return!1;return!0}function parse(name$$1){var p=noteParser.regex().exec(name$$1);return p?p[4]?"7"===p[3]||"6"===p[3]?{type:p[3]+p[4],tonic:p[1]+p[2]}:{type:p[4],tonic:p[1]+p[2]+p[3]}:{type:p[3],tonic:p[1]+p[2]}:{type:name$$1,tonic:!1}}Object.defineProperty(exports,"__esModule",{value:!0});var tonalDictionary=require("tonal-dictionary"),tonalArray=require("tonal-array"),tonalNote=require("tonal-note"),noteParser=require("note-parser"),tonalHarmonizer=require("tonal-harmonizer"),M=["1P 3M 5P",["Major",""]],M13=["1P 3M 5P 7M 9M 13M",["maj13","Maj13"]],M6=["1P 3M 5P 13M",["6"]],M69=["1P 3M 5P 6M 9M",["69"]],M7add13=["1P 3M 5P 6M 7M 9M"],M7b5=["1P 3M 5d 7M"],M7b6=["1P 3M 6m 7M"],M7b9=["1P 3M 5P 7M 9m"],M7sus4=["1P 4P 5P 7M"],M9=["1P 3M 5P 7M 9M",["maj9","Maj9"]],M9b5=["1P 3M 5d 7M 9M"],M9sus4=["1P 4P 5P 7M 9M"],Madd9=["1P 3M 5P 9M",["2","add9","add2"]],Maj7=["1P 3M 5P 7M",["maj7","M7"]],Mb5=["1P 3M 5d"],Mb6=["1P 3M 13m"],Msus2=["1P 2M 5P",["add9no3","sus2"]],Msus4=["1P 4P 5P",["sus","sus4"]],addb9=["1P 3M 5P 9m"],m=["1P 3m 5P",["minor"]],m11=["1P 3m 5P 7m 9M 11P",["_11"]],m11b5=["1P 3m 7m 12d 2M 4P",["h11","_11b5"]],m13=["1P 3m 5P 7m 9M 11P 13M",["_13"]],m6=["1P 3m 4P 5P 13M",["_6"]],m69=["1P 3m 5P 6M 9M",["_69"]],m7=["1P 3m 5P 7m",["minor7","_","_7"]],m7add11=["1P 3m 5P 7m 11P",["m7add4"]],m7b5=["1P 3m 5d 7m",["half-diminished","h7","_7b5"]],m9=["1P 3m 5P 7m 9M",["_9"]],m9b5=["1P 3m 7m 12d 2M",["h9","-9b5"]],mMaj7=["1P 3m 5P 7M",["mM7","_M7"]],mMaj7b6=["1P 3m 5P 6m 7M",["mM7b6"]],mM9=["1P 3m 5P 7M 9M",["mMaj9","-M9"]],mM9b6=["1P 3m 5P 6m 7M 9M",["mMaj9b6"]],mb6M7=["1P 3m 6m 7M"],mb6b9=["1P 3m 6m 9m"],o=["1P 3m 5d",["mb5","dim"]],o7=["1P 3m 5d 13M",["diminished","m6b5","dim7"]],o7M7=["1P 3m 5d 6M 7M"],oM7=["1P 3m 5d 7M"],sus24=["1P 2M 4P 5P",["sus4add9"]],madd4=["1P 3m 4P 5P"],madd9=["1P 3m 5P 9M"],DATA={M:M,M13:M13,M6:M6,M69:M69,M7add13:M7add13,M7b5:M7b5,M7b6:M7b6,M7b9:M7b9,M7sus4:M7sus4,M9:M9,M9b5:M9b5,M9sus4:M9sus4,Madd9:Madd9,Maj7:Maj7,Mb5:Mb5,Mb6:Mb6,Msus2:Msus2,Msus4:Msus4,addb9:addb9,m:m,m11:m11,m11b5:m11b5,m13:m13,m6:m6,m69:m69,m7:m7,m7add11:m7add11,m7b5:m7b5,m9:m9,m9b5:m9b5,mMaj7:mMaj7,mMaj7b6:mMaj7b6,mM9:mM9,mM9b6:mM9b6,mb6M7:mb6M7,mb6b9:mb6b9,o:o,o7:o7,o7M7:o7M7,oM7:oM7,sus24:sus24,madd4:madd4,madd9:madd9,4:["1P 4P 7m 10m",["quartal"]],5:["1P 5P"],7:["1P 3M 5P 7m",["Dominant","Dom"]],9:["1P 3M 5P 7m 9M",["79"]],11:["1P 5P 7m 9M 11P"],13:["1P 3M 5P 7m 9M 13M",["13_"]],64:["5P 8P 10M"],"M#5":["1P 3M 5A",["augmented","maj#5","Maj#5","+","aug"]],"M#5add9":["1P 3M 5A 9M",["+add9"]],"M13#11":["1P 3M 5P 7M 9M 11A 13M",["maj13#11","Maj13#11","M13+4","M13#4"]],"M6#11":["1P 3M 5P 6M 11A",["M6b5","6#11","6b5"]],"M69#11":["1P 3M 5P 6M 9M 11A"],"M7#11":["1P 3M 5P 7M 11A",["maj7#11","Maj7#11","M7+4","M7#4"]],"M7#5":["1P 3M 5A 7M",["maj7#5","Maj7#5","maj9#5","M7+"]],"M7#5sus4":["1P 4P 5A 7M"],"M7#9#11":["1P 3M 5P 7M 9A 11A"],"M9#11":["1P 3M 5P 7M 9M 11A",["maj9#11","Maj9#11","M9+4","M9#4"]],"M9#5":["1P 3M 5A 7M 9M",["Maj9#5"]],"M9#5sus4":["1P 4P 5A 7M 9M"],"11b9":["1P 5P 7m 9m 11P"],"13#11":["1P 3M 5P 7m 9M 11A 13M",["13+4","13#4"]],"13#9":["1P 3M 5P 7m 9A 13M",["13#9_"]],"13#9#11":["1P 3M 5P 7m 9A 11A 13M"],"13b5":["1P 3M 5d 6M 7m 9M"],"13b9":["1P 3M 5P 7m 9m 13M"],"13b9#11":["1P 3M 5P 7m 9m 11A 13M"],"13no5":["1P 3M 7m 9M 13M"],"13sus4":["1P 4P 5P 7m 9M 13M",["13sus"]],"69#11":["1P 3M 5P 6M 9M 11A"],"7#11":["1P 3M 5P 7m 11A",["7+4","7#4","7#11_","7#4_"]],"7#11b13":["1P 3M 5P 7m 11A 13m",["7b5b13"]],"7#5":["1P 3M 5A 7m",["+7","7aug","aug7"]],"7#5#9":["1P 3M 5A 7m 9A",["7alt","7#5#9_","7#9b13_"]],"7#5b9":["1P 3M 5A 7m 9m"],"7#5b9#11":["1P 3M 5A 7m 9m 11A"],"7#5sus4":["1P 4P 5A 7m"],"7#9":["1P 3M 5P 7m 9A",["7#9_"]],"7#9#11":["1P 3M 5P 7m 9A 11A",["7b5#9"]],"7#9#11b13":["1P 3M 5P 7m 9A 11A 13m"],"7#9b13":["1P 3M 5P 7m 9A 13m"],"7add6":["1P 3M 5P 7m 13M",["67","7add13"]],"7b13":["1P 3M 7m 13m"],"7b5":["1P 3M 5d 7m"],"7b6":["1P 3M 5P 6m 7m"],"7b9":["1P 3M 5P 7m 9m"],"7b9#11":["1P 3M 5P 7m 9m 11A",["7b5b9"]],"7b9#9":["1P 3M 5P 7m 9m 9A"],"7b9b13":["1P 3M 5P 7m 9m 13m"],"7b9b13#11":["1P 3M 5P 7m 9m 11A 13m",["7b9#11b13","7b5b9b13"]],"7no5":["1P 3M 7m"],"7sus4":["1P 4P 5P 7m",["7sus"]],"7sus4b9":["1P 4P 5P 7m 9m",["susb9","7susb9","7b9sus","7b9sus4","phryg"]],"7sus4b9b13":["1P 4P 5P 7m 9m 13m",["7b9b13sus4"]],"9#11":["1P 3M 5P 7m 9M 11A",["9+4","9#4","9#11_","9#4_"]],"9#11b13":["1P 3M 5P 7m 9M 11A 13m",["9b5b13"]],"9#5":["1P 3M 5A 7m 9M",["9+"]],"9#5#11":["1P 3M 5A 7m 9M 11A"],"9b13":["1P 3M 7m 9M 13m"],"9b5":["1P 3M 5d 7m 9M"],"9no5":["1P 3M 7m 9M"],"9sus4":["1P 4P 5P 7m 9M",["9sus"]],"m#5":["1P 3m 5A",["m+","mb6"]],"m11A 5":["1P 3m 6m 7m 9M 11P"],"m7#5":["1P 3m 6m 7m"],"m9#5":["1P 3m 6m 7m 9M"],"+add#9":["1P 3M 5A 9A"]},dict=tonalDictionary.dictionary(DATA,function(str){return str.split(" ")}),names=dict.keys,detect=tonalDictionary.detector(dict,"");exports.names=names,exports.get=get,exports.notes=notes,exports.intervals=intervals,exports.isKnownChord=isKnownChord,exports.detect=detect,exports.position=position,exports.inversion=inversion,exports.parse=parse},{"note-parser":54,"tonal-array":59,"tonal-dictionary":61,"tonal-harmonizer":65,"tonal-note":70}],61:[function(require,module,exports){"use strict";function id(x){return x}function dictionary(raw,parse){parse=parse||id;var byKey={},names=Object.keys(raw),aliases=[];return names.forEach(function(k){var value=parse(raw[k][0]);byKey[k]=value,raw[k][1]&&raw[k][1].forEach(function(alias){byKey[alias]=value,aliases.push(alias)})}),{get:function(n){return byKey[n]},keys:function(all,filter){var keys=all?names.concat(aliases):names.slice();return"function"!=typeof filter?keys:keys.filter(function(k){return filter(k,byKey[k])})}}}function detector(dict,build){var isSep="string"==typeof build,isFn="function"==typeof build,nameByChroma=dict.keys(!1).reduce(function(map$$1,key){return map$$1[tonalPcset.chroma(dict.get(key))]=key,map$$1},{});return function(notes){notes=tonalArray.sort(tonalArray.map(tonalNote.pc,notes));var sets=tonalPcset.modes(notes);return tonalArray.compact(sets.map(function(set,i){var type=nameByChroma[set];if(!type)return null;var tonic=notes[i];return isSep?tonic+build+type:isFn?build(type,tonic):[type,tonic]}))}}Object.defineProperty(exports,"__esModule",{value:!0});var tonalArray=require("tonal-array"),tonalNote=require("tonal-note"),tonalPcset=require("tonal-pcset");exports.dictionary=dictionary,exports.detector=detector},{"tonal-array":59,"tonal-note":70,"tonal-pcset":71}],62:[function(require,module,exports){"use strict";function substr(a,b){if(!a||!b||a[1].length!==b[1].length)return null;var f=tonalPitch.fifths(b)-tonalPitch.fifths(a);if(tonalPitch.isPC(a))return tonalPitch.pitch(f,-Math.floor(7*f/12),1);var o=tonalPitch.focts(b)-tonalPitch.focts(a),d=tonalPitch.height(b)-tonalPitch.height(a)<0?-1:1;return tonalPitch.pitch(d*f,d*o,d)}function interval(a,b){if(1===arguments.length)return function(b){return interval(a,b)};var pa=tonalPitch.asPitch(a),pb=tonalPitch.asPitch(b),i=substr(pa,pb);return a===pa&&b===pb?i:tonalPitch.strIvl(i)}function semitones(a,b){var i=substr(tonalPitch.asPitch(a),tonalPitch.asPitch(b));return i?tonalPitch.height(i):null}Object.defineProperty(exports,"__esModule",{value:!0});var tonalPitch=require("tonal-pitch");exports.interval=interval,exports.semitones=semitones},{"tonal-pitch":72}],63:[function(require,module,exports){"use strict";function isNum(n){return"number"==typeof n}function fOcts(f){return Math.floor(7*f/12)}function encode(step,alt,oct){var f=FIFTHS[step]+7*alt;if(!isNum(oct))return[f];var o=oct-FIFTH_OCTS[step]-4*alt;return[f,o]}function unaltered(f){var i=(f+1)%7;return 0>i?7+i:i}function decode(f,o){var step=STEPS[unaltered(f)],alt=Math.floor((f+1)/7);if(!isNum(o))return[step,alt];var oct=o+4*alt+FIFTH_OCTS[step];return[step,alt,oct]}Object.defineProperty(exports,"__esModule",{value:!0});var FIFTHS=[0,2,4,-1,1,3,5],FIFTH_OCTS=FIFTHS.map(fOcts),STEPS=[3,0,4,1,5,2,6];exports.encode=encode,exports.decode=decode},{}],64:[function(require,module,exports){"use strict";function round(m,fn){return m=m||0===m?Math.pow(10,m):!1,function(v){return v=fn(v),null===v?null:m?Math.round(v*m)/m:v}}function eqTempFreq(ref,max,note$$1){return arguments.length>2?eqTempFreq(ref,max)(note$$1):round(max,function(p){var m=tonalMidi.toMidi(p);return m?Math.pow(2,(m-69)/12)*ref:null})}function eqTempFreqToMidi(ref,max,freq){return arguments.length>2?eqTempFreqToMidi(ref,max)(freq):round(max,function(freq){return 12*(Math.log(freq)-Math.log(ref))/Math.log(2)+69})}function note$1(freq,useSharps){return tonalMidi.note(toMidi$1(freq),useSharps)}function cents(base,freq){var b=toFreq(base)||base,f=toFreq(freq)||freq;return Math.round(1200*(Math.log(f/b)/Math.log(2)))}Object.defineProperty(exports,"__esModule",{value:!0});var tonalMidi=require("tonal-midi"),toFreq=eqTempFreq(440,2),toMidi$1=eqTempFreqToMidi(440,2);exports.eqTempFreq=eqTempFreq,exports.toFreq=toFreq,exports.eqTempFreqToMidi=eqTempFreqToMidi,exports.toMidi=toMidi$1,exports.note=note$1,exports.cents=cents},{"tonal-midi":68}],65:[function(require,module,exports){"use strict";function harmonics(list){var a=tonalArray.asArr(list);return a.length?tonalArray.compact(a.map(tonalDistance.interval(a[0]))):a}function intervallic(notes){var dist=[];notes=tonalArray.asArr(notes);for(var i=1;i<notes.length;i++)dist.push(tonalDistance.interval(notes[i-1],notes[i]));return dist}function harmonize(list,pitch){return arguments.length>1?harmonize(list)(pitch):function(tonic){return tonalArray.compact(tonalArray.map(tonalTranspose.transpose(tonic||"P1"),list))}}Object.defineProperty(exports,"__esModule",{value:!0});var tonalTranspose=require("tonal-transpose"),tonalDistance=require("tonal-distance"),tonalArray=require("tonal-array");exports.harmonics=harmonics,exports.intervallic=intervallic,exports.harmonize=harmonize},{"tonal-array":59,"tonal-distance":62,"tonal-transpose":78}],66:[function(require,module,exports){"use strict";function toInterval(ivl){var i=tonalPitch.asIvlPitch(ivl);return i?tonalPitch.strIvl(i):null}function num(ivl){var p=props(ivl);return p?p.num:null}function value(ivl){var p=props(ivl);return p?p.num*p.dir:null}function props(ivl){var i=tonalPitch.asIvlPitch(ivl);if(!i)return null;var d=tonalPitch.decode(i);return{num:d[0]+1+7*d[2],alt:d[1],dir:i[2]}}function fromProps(props){if(!props||props.num<1)return null;var octs=Math.floor(props.num/8),simple=props.num-7*octs;return intervalNotation.build(simple,props.alt||0,octs,props.dir)}function semitones(ivl){var i=tonalPitch.asIvlPitch(ivl);return i?tonalPitch.height(i):null}function fromSemitones(num){var d=0>num?-1:1,n=Math.abs(num),c=n%12,o=Math.floor(n/12);return d*(IN[c]+7*o)+IQ[c]}function ic(ivl){var i=tonalPitch.asIvlPitch(ivl),s=i?tonalPitch.chr(i):Math.round(ivl);return isNaN(s)?null:CLASSES[Math.abs(s)%12]}function type(ivl){var i=tonalPitch.asIvlPitch(ivl);return i?TYPES[tonalPitch.decode(i)[0]]:null}Object.defineProperty(exports,"__esModule",{value:!0});var intervalNotation=require("interval-notation"),tonalPitch=require("tonal-pitch"),IN=[1,2,2,3,3,4,5,5,6,6,7,7],IQ="P m M m M P d P m M m M".split(" "),CLASSES=[0,1,2,3,4,5,6,5,4,3,2,1],TYPES="PMMPPMM",invert=tonalPitch.ivlFn(function(i){var d=tonalPitch.decode(i),step=(7-d[0])%7,alt="P"===TYPES[d[0]]?-d[1]:-(d[1]+1);return tonalPitch.encode(step,alt,d[2],tonalPitch.dir(i))}),simplify=tonalPitch.ivlFn(function(i){var dec=tonalPitch.decode(i);return 0===dec[0]&&1===dec[2]||(dec[2]=0),tonalPitch.encode(dec[0],dec[1],dec[2],tonalPitch.dir(i))});exports.toInterval=toInterval,exports.num=num,exports.value=value,exports.props=props,exports.fromProps=fromProps,exports.semitones=semitones,exports.fromSemitones=fromSemitones,exports.ic=ic,exports.type=type,exports.invert=invert,exports.simplify=simplify},{"interval-notation":53,"tonal-pitch":72}],67:[function(require,module,exports){"use strict";function toKey(t,m){return t?t+" "+m:m}function majorKey(n){return toKey(tonalTranspose.trFifths("C",n),"major")}function modeNum(mode){return FIFTHS[MODES.indexOf(mode)]}function validMode(m){return m=m.trim().toLowerCase(),-1===MODES.indexOf(m)?null:m}function props(str){if("string"!=typeof str)return null;var key,ndx=str.indexOf(" ");if(-1===ndx){var p=tonalNote.pc(str);key=p?{tonic:p,mode:"major"}:{tonic:!1,mode:validMode(str)}}else key={tonic:tonalNote.pc(str.slice(0,ndx)),mode:validMode(str.slice(ndx+1))};return key.mode?key:null}function isKeyName(name){return null!==props(name)}function tonic(key){return(props(key)||key||{}).tonic||null}function mode(key){return(props(key)||key||{}).mode||null}function relative(rel,key){if(1===arguments.length)return function(k){return relative(rel,k)};if(rel=props(rel),!rel||rel.tonic)return null;if(key=props(key),!key||!key.tonic)return null;var tonic=tonalTranspose.trFifths(key.tonic,modeNum(rel.mode)-modeNum(key.mode));return toKey(tonic,rel.mode)}function alteredNotes(key){var alt=alteration(key);return null===alt?null:0>alt?tonalRange.numeric([-1,alt]).map(tonalTranspose.trFifths("F")):tonalRange.numeric([1,alt]).map(tonalTranspose.trFifths("B"))}function modes(alias){return alias?MODES.slice():MODES.slice(0,-2)}function fromAlter(n){return"number"==typeof n?majorKey(n):null}function fromAcc(s){return tonalNotation.areSharps(s)?majorKey(s.length):tonalNotation.areFlats(s)?majorKey(-s.length):null}function scale(key){var p=props(key);return p&&p.tonic?tonalHarmonizer.harmonize(SCALES[MODES.indexOf(p.mode)],p.tonic):null}function alteration(key){var k=props(key);if(!k||!k.tonic)return null;var toMajor=modeNum(k.mode),toC=tonalNote.pcFifths(k.tonic);return toC-toMajor}function signature(key){return tonalNotation.toAcc(alteration(key))}Object.defineProperty(exports,"__esModule",{value:!0});var tonalNotation=require("tonal-notation"),tonalTranspose=require("tonal-transpose"),tonalNote=require("tonal-note"),tonalRange=require("tonal-range"),tonalArray=require("tonal-array"),tonalHarmonizer=require("tonal-harmonizer"),MODES=["ionian","dorian","phrygian","lydian","mixolydian","aeolian","locrian","major","minor"],FIFTHS=[0,2,4,-1,1,3,5,0,3],SCALES=[0,1,2,3,4,5,6,0,5].map(function(n){return tonalHarmonizer.harmonics(tonalArray.rotate(n,["C","D","E","F","G","A","B"]))}),accidentals=signature;exports.props=props,exports.isKeyName=isKeyName,exports.tonic=tonic,exports.mode=mode,exports.relative=relative,exports.alteredNotes=alteredNotes,exports.modes=modes,exports.fromAlter=fromAlter,exports.fromAcc=fromAcc,exports.scale=scale,exports.alteration=alteration,exports.signature=signature,exports.accidentals=accidentals},{"tonal-array":59,"tonal-harmonizer":65,"tonal-notation":69,"tonal-note":70,"tonal-range":75,"tonal-transpose":78}],68:[function(require,module,exports){"use strict";function toMidi(val){return Array.isArray(val)&&2===val.length?7*val[0]+12*val[1]+12:noteParser.midi(val)}function note(num,sharps){if(num===!0||num===!1)return function(m){return note(m,num)};num=Math.round(num);var pcs=sharps===!0?SHARPS:FLATS,pc=pcs[num%12],o=Math.floor(num/12)-1;return pc+o}Object.defineProperty(exports,"__esModule",{value:!0});var noteParser=require("note-parser"),FLATS="C Db D Eb E F Gb G Ab A Bb B".split(" "),SHARPS="C C# D D# E F F# G G# A A# B".split(" ");exports.toMidi=toMidi,exports.note=note},{"note-parser":54}],69:[function(require,module,exports){"use strict";function toStep(l){var s="CDEFGAB".indexOf(l.toUpperCase());return 0>s?null:s}function isStep(d){return!(0>d||d>6)}function toLetter(s){return isStep(s)?"CDEFGAB".charAt(s):null}function areFlats(s){return/^b+$/.test(s)}function areSharps(s){return/^#+$/.test(s)}function toAlt(s){return""===s?0:areFlats(s)?-s.length:areSharps(s)?s.length:null}function fillStr(s,num){return Array(num+1).join(s)}function toAcc(n){return n?0>n?fillStr("b",-n):fillStr("#",n):""}Object.defineProperty(exports,"__esModule",{value:!0}),exports.toStep=toStep,exports.isStep=isStep,exports.toLetter=toLetter,exports.areFlats=areFlats,exports.areSharps=areSharps,exports.toAlt=toAlt,exports.toAcc=toAcc},{}],70:[function(require,module,exports){"use strict";function parseNote(name){return"string"!=typeof name?null:cache[name]||(cache[name]=noteParser.parse(name))}function chroma(n){var p=parseNote(n);return p?p.chroma:null}function name(n){var p=tonalPitch.asNotePitch(n);return p?tonalPitch.strNote(p):null}function note$1(n){return console.warn("note.note() is deprecated. Use note.name()"),name(n)}function props(n){console.warn("note.props() is deprecated. Use: note.step(), note.alt() or note.oct()");var p=tonalPitch.asNotePitch(n);if(!p)return null;var d=tonalPitch.decode(p);return{step:d[0],alt:d[1],oct:d[2]}}function fromProps(props){return console.warn("note.fromProps() is deprecated. See npm package note-parser."),props?noteParser.build(props.step,props.alt,props.oct):null}function getProp(name){return function(n){var p=props(n);return p?p[name]:null}}function pcFifths(note$$1){var p=tonalPitch.asNotePitch(note$$1);return p?tonalPitch.fifths(p):null}function pc(n){var p=tonalPitch.asNotePitch(n);return p?tonalPitch.strNote([p[0],[tonalPitch.fifths(p)]]):null}function enharmonics(pitch){var notes=[];return notes.push(tonalTranspose.transpose(DESC,pitch)),null===notes[0]?null:(notes.push(pitch),notes.push(tonalTranspose.transpose(ASC,pitch)),notes)}function simplify(pitch){return enharmonics(pitch).reduce(function(simple,next){return simple?simple.length>next.length?next:simple:next},null)}Object.defineProperty(exports,"__esModule",{value:!0});var noteParser=require("note-parser"),tonalPitch=require("tonal-pitch"),tonalTranspose=require("tonal-transpose"),tonalMidi=require("tonal-midi"),tonalFreq=require("tonal-freq"),cache={},midi=tonalMidi.toMidi,fromMidi=tonalMidi.note,freq=tonalFreq.toFreq,oct=getProp("oct"),step=getProp("step"),alt=getProp("alt"),ASC=tonalPitch.parseIvl("2d"),DESC=tonalPitch.parseIvl("-2d");exports.midi=midi,exports.fromMidi=fromMidi,exports.freq=freq,exports.chroma=chroma,exports.name=name,exports.note=note$1,exports.props=props,exports.fromProps=fromProps,exports.oct=oct,exports.step=step,exports.pcFifths=pcFifths,exports.alt=alt,exports.pc=pc,exports.enharmonics=enharmonics,exports.simplify=simplify},{"note-parser":54,"tonal-freq":64,"tonal-midi":68,"tonal-pitch":72,"tonal-transpose":78}],71:[function(require,module,exports){"use strict";function chrToInt(set){return parseInt(chroma(set),2)}function pitchChr(p){return p=tonalPitch.asPitch(p),p?tonalPitch.chr(p):null}function chroma(set){if(isChroma(set))return set;var b=[0,0,0,0,0,0,0,0,0,0,0,0];return tonalArray.map(pitchChr,set).forEach(function(i){b[i]=1}),b.join("")}function notes(notes){console.warn("pcset.notes deprecated. Use collection.pcset");var pcs=tonalArray.map(tonalNote.pc,notes);if(!pcs.length)return pcs;var tonic=pcs[0],rotated=tonalArray.rotate(pitchChr(tonic),chroma(pcs).split("")).join("");return fromChroma(rotated,tonic)}function modes(set,normalize){normalize=normalize!==!1;var binary=chroma(set).split("");return tonalArray.compact(binary.map(function(_,i){var r=tonalArray.rotate(i,binary);return normalize&&"0"===r[0]?null:r.join("")}))}function chromaModes(set,norm){return console.warn("pcset.chromaModes deprecated. Renamed to pcset.modes"),modes(set,norm)}function isChroma(set){return REGEX.test(set)}function intervals(set){return tonalArray.compact(chroma(set).split("").map(function(d,i){
return"1"===d?IVLS[i]:null}))}function fromChroma(binary,tonic){return console.warn("pcset.fromChroma is deprecated. Use pcset.intervals().map(...)"),1===arguments.length?function(t){return fromChroma(binary,t)}:(tonic||(tonic="P1"),intervals(binary).map(tonalTranspose.transpose(tonic)))}function isEqual(s1,s2){return 1===arguments.length?function(s){return isEqual(s1,s)}:chroma(s1)===chroma(s2)}function equal(a,b){return console.warn("pcset.equal is deprecated. Use pcset.isEqual"),isEqual(a,b)}function isSubset(set,test){return 1===arguments.length?function(t){return isSubset(set,t)}:(test=chrToInt(test),(test&chrToInt(set))===test)}function subset(a,b){return console.warn("pcset.subset is deprecated. Use pcset.isSubset"),isSubset(a,b)}function isSuperset(set,test){return 1===arguments.length?function(t){return isSuperset(set,t)}:(test=chrToInt(test),(test|chrToInt(set))===test)}function superset(a,b){return console.warn("pcset.superset is deprecated. Use pcset.isSuperset"),isSuperset(a,b)}function includes(set,note){return arguments.length>1?includes(set)(note):(set=chroma(set),function(note){return"1"===set[pitchChr(note)]})}function filter(set,notes){return 1===arguments.length?function(n){return filter(set,n)}:tonalArray.asArr(notes).filter(includes(set))}Object.defineProperty(exports,"__esModule",{value:!0});var tonalPitch=require("tonal-pitch"),tonalNote=require("tonal-note"),tonalArray=require("tonal-array"),tonalTranspose=require("tonal-transpose"),REGEX=/^[01]{12}$/,IVLS="1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M".split(" ");exports.chroma=chroma,exports.notes=notes,exports.modes=modes,exports.chromaModes=chromaModes,exports.isChroma=isChroma,exports.intervals=intervals,exports.fromChroma=fromChroma,exports.isEqual=isEqual,exports.equal=equal,exports.isSubset=isSubset,exports.subset=subset,exports.isSuperset=isSuperset,exports.superset=superset,exports.includes=includes,exports.filter=filter},{"tonal-array":59,"tonal-note":70,"tonal-pitch":72,"tonal-transpose":78}],72:[function(require,module,exports){"use strict";function pitch(fifths,focts,dir){return dir?["tnlp",[fifths,focts],dir]:["tnlp",[fifths,focts]]}function isPitch(p){return Array.isArray(p)&&"tnlp"===p[0]}function encode$1(s,a,o,dir){return dir?["tnlp",tonalEncoding.encode(s,a,o),dir]:["tnlp",tonalEncoding.encode(s,a,o)]}function decode$1(p){return tonalEncoding.decode.apply(null,p[1])}function pType(p){return isPitch(p)?p[2]?"ivl":"note":null}function isNotePitch(p){return"note"===pType(p)}function isIvlPitch(p){return"ivl"===pType(p)}function isPC(p){return isPitch(p)&&1===p[1].length}function dir(p){return-1===p[2]?-1:1}function fifths(p){return-1===p[2]?-p[1][0]:p[1][0]}function focts(p){return-1===p[2]?-p[1][1]:p[1][1]}function height(p){return 7*fifths(p)+12*focts(p)}function chr(p){var f=fifths(p);return 7*f-12*Math.floor(7*f/12)}function memoize(fn){var cache={};return function(str){return"string"!=typeof str?null:cache[str]||(cache[str]=fn(str))}}function parsePitch(s){return parseNote(s)||parseIvl(s)}function asNotePitch(p){return isNotePitch(p)?p:parseNote(p)}function asIvlPitch(p){return isIvlPitch(p)?p:parseIvl(p)}function asPitch(p){return isPitch(p)?p:parsePitch(p)}function strNote(p){return isNotePitch(p)?noteParser.build.apply(null,decode$1(p)):null}function strIvl(p){if(!isIvlPitch(p))return null;var d=decode$1(p),num=d[0]+1+7*d[2];return p[2]*num+intervalNotation.altToQ(num,d[1])}function strPitch(p){return strNote(p)||strIvl(p)}function decorator(is,parse$$1,str){return function(fn){return function(v){var i=is(v);if(i)return fn(v);var p=parse$$1(v);return p?str(fn(p)):null}}}Object.defineProperty(exports,"__esModule",{value:!0});var noteParser=require("note-parser"),intervalNotation=require("interval-notation"),tonalEncoding=require("tonal-encoding"),parseNote=memoize(function(s){var p=noteParser.parse(s);return p?encode$1(p.step,p.alt,p.oct):null}),parseIvl=memoize(function(s){var p=intervalNotation.parse(s);return p&&p?encode$1(p.simple-1,p.alt,p.oct,p.dir):null}),noteFn=decorator(isNotePitch,parseNote,strNote),ivlFn=decorator(isIvlPitch,parseIvl,strIvl),pitchFn=decorator(isPitch,parsePitch,strPitch);exports.pitch=pitch,exports.isPitch=isPitch,exports.encode=encode$1,exports.decode=decode$1,exports.pType=pType,exports.isNotePitch=isNotePitch,exports.isIvlPitch=isIvlPitch,exports.isPC=isPC,exports.dir=dir,exports.fifths=fifths,exports.focts=focts,exports.height=height,exports.chr=chr,exports.parseNote=parseNote,exports.parseIvl=parseIvl,exports.parsePitch=parsePitch,exports.asNotePitch=asNotePitch,exports.asIvlPitch=asIvlPitch,exports.asPitch=asPitch,exports.strNote=strNote,exports.strIvl=strIvl,exports.strPitch=strPitch,exports.noteFn=noteFn,exports.ivlFn=ivlFn,exports.pitchFn=pitchFn},{"interval-notation":53,"note-parser":54,"tonal-encoding":63}],73:[function(require,module,exports){"use strict";function notes(notes){return tonalArray.sort(notes).filter(function(n,i,arr){return 0===i||n!==arr[i-1]})}Object.defineProperty(exports,"__esModule",{value:!0});var tonalArray=require("tonal-array");exports.notes=notes},{"tonal-array":59}],74:[function(require,module,exports){"use strict";function abstract(chords,tonic){tonic=tonalNote.pc(tonic),chords=tonalArray.map(tonalChord.parse,chords);var tonics=tonalArray.compact(chords.map(function(x){return x.tonic}));return tonics.length!==chords.length?null:tonics.map(function(t,i){var p=tonalInterval.props(tonalDistance.interval(tonic,t));return buildRoman(p.num-1,p.alt,chords[i].type)})}function buildRoman(num,alt,element){return tonalNotation.toAcc(alt)+NUMS[num%7]+(element||"")}function concrete(chords,tonic){return tonalArray.map(function(e){var r=parseRomanChord(e);return r?tonalTranspose.transpose(r.root,tonic)+r.type:null},chords)}function romanRegex(){return ROMAN}function parseRomanChord(str){var m=ROMAN.exec(str);if(!m)return null;var num=NUM[m[2].toLowerCase()]+1,alt=m[1].length;return"b"===m[1][0]&&(alt=-alt),{root:tonalInterval.fromProps({num:num,alt:alt,dir:1}),type:m[3]}}Object.defineProperty(exports,"__esModule",{value:!0});var tonalNote=require("tonal-note"),tonalInterval=require("tonal-interval"),tonalArray=require("tonal-array"),tonalTranspose=require("tonal-transpose"),tonalDistance=require("tonal-distance"),tonalChord=require("tonal-chord"),tonalNotation=require("tonal-notation"),NUMS=["I","II","III","IV","V","VI","VII"],ROMAN=/^\s*(b|bb|#|##|)(IV|III|II|I|VII|VI|V|iv|iii|ii|i|vii|vi|v)\s*(.*)\s*$/,NUM={i:0,ii:1,iii:2,iv:3,v:4,vi:5,vii:6};exports["abstract"]=abstract,exports.buildRoman=buildRoman,exports.concrete=concrete,exports.romanRegex=romanRegex,exports.parseRomanChord=parseRomanChord},{"tonal-array":59,"tonal-chord":60,"tonal-distance":62,"tonal-interval":66,"tonal-notation":69,"tonal-note":70,"tonal-transpose":78}],75:[function(require,module,exports){"use strict";function isNum(n){return"number"==typeof n}function asNum(n){return isNum(n)?n:tonalMidi.toMidi(n)}function ascR(b,n){for(var a=[];n--;a[n]=n+b);return a}function descR(b,n){for(var a=[];n--;a[n]=b-n);return a}function ran(a,b){return null===a||null===b?[]:b>a?ascR(a,b-a+1):descR(a,a-b+1)}function numeric(list){return tonalArray.asArr(list).map(asNum).reduce(function(r,n,i){if(1===i)return ran(r,n);var last=r[r.length-1];return r.concat(ran(last,n).slice(1))})}function chromatic(list,sharps){return tonalArray.map(tonalMidi.note(sharps===!0),numeric(list))}function fifths(tonic,range){return numeric(range).map(tonalTranspose.trFifths(tonic))}function pitchSet(set,range){return 1===arguments.length?function(l){return pitchSet(set,l)}:tonalPcset.filter(set,chromatic(range))}Object.defineProperty(exports,"__esModule",{value:!0});var tonalArray=require("tonal-array"),tonalTranspose=require("tonal-transpose"),tonalMidi=require("tonal-midi"),tonalPcset=require("tonal-pcset");exports.numeric=numeric,exports.chromatic=chromatic,exports.fifths=fifths,exports.pitchSet=pitchSet},{"tonal-array":59,"tonal-midi":68,"tonal-pcset":71,"tonal-transpose":78}],76:[function(require,module,exports){"use strict";function get(type,tonic){if(1===arguments.length)return function(t){return get(type,t)};var ivls=dict.get(type);return ivls?tonalHarmonizer.harmonize(ivls,tonic):null}function notes(name$$1){var scale=parse(name$$1),notes=scale.tonic?get(scale.type,tonalNote.pc(scale.tonic)):null;return notes||tonalArray.compact(tonalArray.map(tonalNote.pc,name$$1).map(function(n,i,arr){return arr.indexOf(n)<i?null:n}))}function intervals(name$$1){var scale=parse(name$$1);return get(scale.type,!1)||[]}function isKnowScale(name$$1){return intervals(name$$1).length>0}function parse(str){if("string"!=typeof str)return null;var i=str.indexOf(" "),tonic=tonalNote.name(str.substring(0,i))||!1,type=tonic?str.substring(i+1):str;return{tonic:tonic,type:type}}Object.defineProperty(exports,"__esModule",{value:!0});var tonalDictionary=require("tonal-dictionary"),tonalArray=require("tonal-array"),tonalNote=require("tonal-note"),tonalHarmonizer=require("tonal-harmonizer"),chromatic=["1P 2m 2M 3m 3M 4P 4A 5P 6m 6M 7m 7M"],lydian=["1P 2M 3M 4A 5P 6M 7M"],major=["1P 2M 3M 4P 5P 6M 7M",["ionian"]],mixolydian=["1P 2M 3M 4P 5P 6M 7m",["dominant"]],dorian=["1P 2M 3m 4P 5P 6M 7m"],aeolian=["1P 2M 3m 4P 5P 6m 7m",["minor"]],phrygian=["1P 2m 3m 4P 5P 6m 7m"],locrian=["1P 2m 3m 4P 5d 6m 7m"],altered=["1P 2m 3m 3M 5d 6m 7m",["super locrian","diminished whole tone","pomeroy"]],iwato=["1P 2m 4P 5d 7m"],hirajoshi=["1P 2M 3m 5P 6m"],kumoijoshi=["1P 2m 4P 5P 6m"],pelog=["1P 2m 3m 5P 6m"],prometheus=["1P 2M 3M 4A 6M 7m"],ritusen=["1P 2M 4P 5P 6M"],scriabin=["1P 2m 3M 5P 6M"],piongio=["1P 2M 4P 5P 6M 7m"],augmented=["1P 2A 3M 5P 5A 7M"],neopolitan=["1P 2m 3m 4P 5P 6m 7M"],diminished=["1P 2M 3m 4P 5d 6m 6M 7M"],egyptian=["1P 2M 4P 5P 7m"],oriental=["1P 2m 3M 4P 5d 6M 7m"],spanish=["1P 2m 3M 4P 5P 6m 7m",["phrygian major"]],flamenco=["1P 2m 3m 3M 4A 5P 7m"],balinese=["1P 2m 3m 4P 5P 6m 7M"],persian=["1P 2m 3M 4P 5d 6m 7M"],bebop=["1P 2M 3M 4P 5P 6M 7m 7M"],enigmatic=["1P 2m 3M 5d 6m 7m 7M"],ichikosucho=["1P 2M 3M 4P 5d 5P 6M 7M"],DATA={chromatic:chromatic,lydian:lydian,major:major,mixolydian:mixolydian,dorian:dorian,aeolian:aeolian,phrygian:phrygian,locrian:locrian,altered:altered,iwato:iwato,hirajoshi:hirajoshi,kumoijoshi:kumoijoshi,pelog:pelog,prometheus:prometheus,ritusen:ritusen,scriabin:scriabin,piongio:piongio,augmented:augmented,neopolitan:neopolitan,diminished:diminished,egyptian:egyptian,oriental:oriental,spanish:spanish,flamenco:flamenco,balinese:balinese,persian:persian,bebop:bebop,enigmatic:enigmatic,ichikosucho:ichikosucho,"melodic minor":["1P 2M 3m 4P 5P 6M 7M"],"melodic minor second mode":["1P 2m 3m 4P 5P 6M 7m"],"lydian augmented":["1P 2M 3M 4A 5A 6M 7M"],"lydian dominant":["1P 2M 3M 4A 5P 6M 7m",["lydian b7"]],"melodic minor fifth mode":["1P 2M 3M 4P 5P 6m 7m",["hindu","mixolydian b6M"]],"locrian #2":["1P 2M 3m 4P 5d 6m 7m"],"locrian major":["1P 2M 3M 4P 5d 6m 7m",["arabian"]],"major pentatonic":["1P 2M 3M 5P 6M",["pentatonic"]],"lydian pentatonic":["1P 3M 4A 5P 7M",["chinese"]],"mixolydian pentatonic":["1P 3M 4P 5P 7m",["indian"]],"locrian pentatonic":["1P 3m 4P 5d 7m",["minor seven flat five pentatonic"]],"minor pentatonic":["1P 3m 4P 5P 7m"],"minor six pentatonic":["1P 3m 4P 5P 6M"],"minor hexatonic":["1P 2M 3m 4P 5P 7M"],"flat three pentatonic":["1P 2M 3m 5P 6M",["kumoi"]],"flat six pentatonic":["1P 2M 3M 5P 6m"],"major flat two pentatonic":["1P 2m 3M 5P 6M"],"whole tone pentatonic":["1P 3M 5d 6m 7m"],"ionian pentatonic":["1P 3M 4P 5P 7M"],"lydian #5P pentatonic":["1P 3M 4A 5A 7M"],"lydian dominant pentatonic":["1P 3M 4A 5P 7m"],"minor #7M pentatonic":["1P 3m 4P 5P 7M"],"super locrian pentatonic":["1P 3m 4d 5d 7m"],"in-sen":["1P 2m 4P 5P 7m"],"vietnamese 1":["1P 3m 4P 5P 6m"],"vietnamese 2":["1P 3m 4P 5P 7m"],"prometheus neopolitan":["1P 2m 3M 4A 6M 7m"],"major blues":["1P 2M 3m 3M 5P 6M"],"minor blues":["1P 3m 4P 5d 5P 7m",["blues"]],"composite blues":["1P 2M 3m 3M 4P 5d 5P 6M 7m"],"augmented heptatonic":["1P 2A 3M 4P 5P 5A 7M"],"dorian #4":["1P 2M 3m 4A 5P 6M 7m"],"lydian diminished":["1P 2M 3m 4A 5P 6M 7M"],"whole tone":["1P 2M 3M 4A 5A 7m"],"leading whole tone":["1P 2M 3M 4A 5A 7m 7M"],"harmonic minor":["1P 2M 3m 4P 5P 6m 7M"],"lydian minor":["1P 2M 3M 4A 5P 6m 7m"],"neopolitan minor":["1P 2m 3m 4P 5P 6m 7M"],"neopolitan major":["1P 2m 3m 4P 5P 6M 7M",["dorian b2"]],"neopolitan major pentatonic":["1P 3M 4P 5d 7m"],"romanian minor":["1P 2M 3m 5d 5P 6M 7m"],"double harmonic lydian":["1P 2m 3M 4A 5P 6m 7M"],"harmonic major":["1P 2M 3M 4P 5P 6m 7M"],"double harmonic major":["1P 2m 3M 4P 5P 6m 7M",["gypsy"]],"hungarian minor":["1P 2M 3m 4A 5P 6m 7M"],"hungarian major":["1P 2A 3M 4A 5P 6M 7m"],"spanish heptatonic":["1P 2m 3m 3M 4P 5P 6m 7m"],"todi raga":["1P 2m 3m 4A 5P 6m 7M"],"malkos raga":["1P 3m 4P 6m 7m"],"kafi raga":["1P 3m 3M 4P 5P 6M 7m 7M"],"purvi raga":["1P 2m 3M 4P 4A 5P 6m 7M"],"bebop dominant":["1P 2M 3M 4P 5P 6M 7m 7M"],"bebop minor":["1P 2M 3m 3M 4P 5P 6M 7m"],"bebop major":["1P 2M 3M 4P 5P 5A 6M 7M"],"bebop locrian":["1P 2m 3m 4P 5d 5P 6m 7m"],"minor bebop":["1P 2M 3m 4P 5P 6m 7m 7M"],"mystery #1":["1P 2m 3M 5d 6m 7m"],"minor six diminished":["1P 2M 3m 4P 5P 6m 6M 7M"],"ionian augmented":["1P 2M 3M 4P 5A 6M 7M"],"lydian #9":["1P 2m 3M 4A 5P 6M 7M"],"six tone symmetric":["1P 2m 3M 4P 5A 6M"]},dict=tonalDictionary.dictionary(DATA,function(str){return str.split(" ")}),names=dict.keys,detect=tonalDictionary.detector(dict," ");exports.get=get,exports.names=names,exports.notes=notes,exports.intervals=intervals,exports.isKnowScale=isKnowScale,exports.parse=parse,exports.detect=detect},{"tonal-array":59,"tonal-dictionary":61,"tonal-harmonizer":65,"tonal-note":70}],77:[function(require,module,exports){"use strict";function density(list){var a,b,i,notes=tonalArray.compact(tonalArray.map(tonalPitch.asNotePitch,list)),len=notes.length,result=[0,0,0,0,0,0];for(a=0;len>a;a++)for(b=a;len>b;b++)i=tonalInterval.ic(tonalPitch.chr(notes[b])-tonalPitch.chr(notes[a])),6===i?result[5]=result[5]+1:i>0&&(result[5-i]=result[5-i]+1);return result}Object.defineProperty(exports,"__esModule",{value:!0});var tonalInterval=require("tonal-interval"),tonalPitch=require("tonal-pitch"),tonalArray=require("tonal-array");exports.density=density},{"tonal-array":59,"tonal-interval":66,"tonal-pitch":72}],78:[function(require,module,exports){"use strict";function trBy(i,p){var t=tonalPitch.pType(p);if(!t)return null;var f=tonalPitch.fifths(i)+tonalPitch.fifths(p);if(tonalPitch.isPC(p))return["tnlp",[f]];var o=tonalPitch.focts(i)+tonalPitch.focts(p);if("note"===t)return["tnlp",[f,o]];var d=tonalPitch.height(i)+tonalPitch.height(p)<0?-1:1;return["tnlp",[d*f,d*o],d]}function transpose(a,b){if(1===arguments.length)return function(b){return transpose(a,b)};var pa=tonalPitch.asPitch(a),pb=tonalPitch.asPitch(b),r=tonalPitch.isIvlPitch(pa)?trBy(pa,pb):tonalPitch.isIvlPitch(pb)?trBy(pb,pa):null;return a===pa&&b===pb?r:tonalPitch.strPitch(r)}function trFifths(t,n){return arguments.length>1?trFifths(t)(n):function(n){return transpose(t,tonalPitch.pitch(n,0,1))}}Object.defineProperty(exports,"__esModule",{value:!0});var tonalPitch=require("tonal-pitch");exports.transpose=transpose,exports.trFifths=trFifths},{"tonal-pitch":72}],79:[function(require,module,exports){"use strict";var array=require("tonal-array"),transpose=require("tonal-transpose"),harmonizer=require("tonal-harmonizer"),distance=require("tonal-distance"),note=require("tonal-note"),interval=require("tonal-interval"),midi=require("tonal-midi"),freq=require("tonal-freq"),range=require("tonal-range"),key=require("tonal-key"),scale=require("tonal-scale"),chord=require("tonal-chord"),pitch=require("tonal-pitch"),notation=require("tonal-notation"),progression=require("tonal-progression"),sonority=require("tonal-sonority"),pitchset=require("tonal-pitchset"),pcset=require("tonal-pcset"),assign=Object.assign,tonal=assign({},array,transpose,harmonizer,distance);tonal.pitch=pitch,tonal.notation=notation,tonal.note=note,tonal.ivl=interval,tonal.midi=midi,tonal.freq=freq,tonal.range=range,tonal.key=key,tonal.progression=progression,tonal.sonority=sonority,tonal.pitchset=pitchset,tonal.pcset=pcset,tonal.scale=function(name){return tonal.scale.notes(name)},assign(tonal.scale,scale),tonal.chord=function(name){return tonal.chord.notes(name)},assign(tonal.chord,chord),"undefined"!=typeof window&&(window.Tonal=tonal),module.exports=tonal},{"tonal-array":59,"tonal-chord":60,"tonal-distance":62,"tonal-freq":64,"tonal-harmonizer":65,"tonal-interval":66,"tonal-key":67,"tonal-midi":68,"tonal-notation":69,"tonal-note":70,"tonal-pcset":71,"tonal-pitch":72,"tonal-pitchset":73,"tonal-progression":74,"tonal-range":75,"tonal-scale":76,"tonal-sonority":77,"tonal-transpose":78}],80:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var real=exports.real=[.5154639175257731,1,.8144329896907216,.20618556701030927,.020618556701030927];exports.imag=real.map(function(){return 0})},{}],81:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var real=exports.real=[0,.4,.4,1,1,1,.3,.7,.6,.5,.9,.8];exports.imag=real.map(function(){return 0})},{}],82:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var real=exports.real=Array.from({length:8192},function(_,n){return 0===n?0:4/(n*Math.PI)*Math.sin(Math.PI*n*.18)});exports.imag=real.map(function(){return 0})},{}],83:[function(require,module,exports){"use strict";function _interopRequireWildcard(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(newObj[key]=obj[key]);return newObj["default"]=obj,newObj}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function createOscillator(_ref3,ctx){var real=_ref3.real,imag=_ref3.imag,oscillator=ctx.createOscillator();return oscillator.setPeriodicWave(ctx.createPeriodicWave(Float32Array.from(real),Float32Array.from(imag))),oscillator}Object.defineProperty(exports,"__esModule",{value:!0});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{!_n&&_i["return"]&&_i["return"]()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr))return arr;if(Symbol.iterator in Object(arr))return sliceIterator(arr,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_sine=require("./sine"),sine=_interopRequireWildcard(_sine),_square=require("./square"),square=_interopRequireWildcard(_square),_sawtooth=require("./sawtooth"),sawtooth=_interopRequireWildcard(_sawtooth),_triangle=require("./triangle"),triangle=_interopRequireWildcard(_triangle),_chiptune=require("./chiptune"),chiptune=_interopRequireWildcard(_chiptune),_organ=require("./organ"),organ=_interopRequireWildcard(_organ),_organ2=require("./organ2"),organ2=_interopRequireWildcard(_organ2),_bass=require("./bass"),bass=_interopRequireWildcard(_bass),_brass=require("./brass"),brass=_interopRequireWildcard(_brass),_waveTables=require("@mohayonao/wave-tables");exports["default"]=Object.entries({sine:sine,square:square,square2:_waveTables.DroppedSquare,sawtooth:sawtooth,triangle:triangle,triangle2:_waveTables.WarmTriangle,chiptune:chiptune,organ:organ,organ2:organ2,organ3:_waveTables.Organ2,organ4:_waveTables.Organ3,organ5:_waveTables.Dissonant2,bass:bass,bass2:_waveTables.Bass,bass3:_waveTables.BassSubDub,bass4:_waveTables.BassFuzz2,brass:brass,brass2:_waveTables.Trombone,aah:_waveTables.PhonemeAh,ooh:_waveTables.PhonemeOoh,eeh:_waveTables.PhonemeEe,buzz:_waveTables.Buzzy1,buzz2:_waveTables.DynaEPBright,dissonance:_waveTables.DissonantPiano}).reduce(function(obj,_ref){var _ref2=_slicedToArray(_ref,2),type=_ref2[0],coefficients=_ref2[1];return Object.assign(obj,_defineProperty({},type,createOscillator.bind(null,coefficients)))},{})},{"./bass":80,"./brass":81,"./chiptune":82,"./organ":84,"./organ2":85,"./sawtooth":86,"./sine":87,"./square":88,"./triangle":89,"@mohayonao/wave-tables":52}],84:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var imag=exports.imag=[0,1,1,1,1,0,1,0,1,0,0,0,1];exports.real=imag.map(function(){return 0})},{}],85:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var real=exports.real=[.4,.8,.6,.6,.7,.6,0,.8,.3,1];exports.imag=real.map(function(){return 0})},{}],86:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var imag=exports.imag=Array.from({length:8192},function(_,n){return 0===n?0:Math.pow(-1,n+1)*(2/(n*Math.PI))});exports.real=imag.map(function(){return 0})},{}],87:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var imag=exports.imag=Array.from({length:8192},function(_,n){return 1===n?1:0});exports.real=imag.map(function(){return 0})},{}],88:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var imag=exports.imag=Array.from({length:8192},function(_,n){return 0===n?0:2/(n*Math.PI)*(1-Math.pow(-1,n))});exports.real=imag.map(function(){return 0})},{}],89:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var imag=exports.imag=Array.from({length:8192},function(_,n){return 0===n?0:8*Math.sin(n*Math.PI/2)/Math.pow(Math.PI*n,2)});exports.real=imag.map(function(){return 0})},{}],90:[function(require,module,exports){"use strict";function getIndex(i,l){var m=i%l;return 0>m?m+l:m}function wrapIndex(i,l){return Array.isArray(l)?l[getIndex(i,l.length)]:getIndex(i,l)}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=wrapIndex},{}],91:[function(require,module,exports){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _interopRequireWildcard(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(newObj[key]=obj[key]);return newObj["default"]=obj,newObj}function init(){return _synthesizer2["default"].init().then(function(){ThreeExtensions.install(),renderer=new THREE.WebGLRenderer({alpha:!0,antialias:!0}),renderer.setSize(window.innerWidth,window.innerHeight),document.querySelector(".app").appendChild(renderer.domElement),camera=new THREE.PerspectiveCamera(30,renderer.domElement.clientWidth/renderer.domElement.clientHeight,1,Number.MAX_SAFE_INTEGER),camera.position.x=0,camera.position.y=0,camera.position.z=1300,(0,_threeWindowResize2["default"])(renderer,camera),scene=new THREE.Scene,clock=new THREE.Clock,light=new THREE.SpotLight("#aaaaaa"),light.position.x=0,light.position.y=1e3,light.position.z=0,scene.add(light);var visibleRect=camera.visibleRect(0);synthesizer=new _synthesizer2["default"]({width:.8*visibleRect.width,height:.07*visibleRect.width,depth:.15*visibleRect.width}),synthesizer.bbox.centerX=0,synthesizer.bbox.minY=visibleRect.max.y,synthesizer.bbox.centerZ=0,synthesizer.addInputListener(renderer,camera),scene.add(synthesizer)})}function render(){var delta=clock.getDelta();synthesizer.bbox.centerY>0?synthesizer.bbox.centerY-=150*delta:synthesizer.rotation.x<THREE.Math.degToRad(45)&&(synthesizer.rotation.x+=THREE.Math.degToRad(20)*delta),renderer.render(scene,camera),requestAnimationFrame(render)}var _three=require("three"),THREE=_interopRequireWildcard(_three),_threeWindowResize=require("three-window-resize"),_threeWindowResize2=_interopRequireDefault(_threeWindowResize),_three2=require("./three"),ThreeExtensions=_interopRequireWildcard(_three2),_synthesizer=require("./synthesizer"),_synthesizer2=_interopRequireDefault(_synthesizer),renderer=void 0,camera=void 0,scene=void 0,clock=void 0,light=void 0,synthesizer=void 0;init().then(render),function(i,s,o,g,r,a,m){i.GoogleAnalyticsObject=r,i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date,a=s.createElement(o),m=s.getElementsByTagName(o)[0],a.async=1,a.src=g,m.parentNode.insertBefore(a,m)}(window,document,"script","https://www.google-analytics.com/analytics.js","ga"),ga("create","UA-24505142-7","auto"),ga("send","pageview")},{"./synthesizer":92,"./three":93,three:58,"three-window-resize":57}],92:[function(require,module,exports){"use strict";function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}function _interopRequireWildcard(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(newObj[key]=obj[key]);return newObj["default"]=obj,newObj}function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++)arr2[i]=arr[i];return arr2}return Array.from(arr)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(self,call){if(!self)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!=typeof call&&"function"!=typeof call?self:call}function _inherits(subClass,superClass){if("function"!=typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}}),superClass&&(Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}(),_three=require("three"),THREE=_interopRequireWildcard(_three),_webAudioOscillators=require("web-audio-oscillators"),_webAudioOscillators2=_interopRequireDefault(_webAudioOscillators),_soundbankReverb=require("soundbank-reverb"),_soundbankReverb2=_interopRequireDefault(_soundbankReverb),_tonal=require("tonal"),_tonal2=_interopRequireDefault(_tonal),_wrapIndex=require("wrap-index"),_wrapIndex2=_interopRequireDefault(_wrapIndex),keyboardKeyMap=["q","Q","w","W","e","r","R","t","T","y","Y","u","i","I","o","O","p","a","A","s","S","d","D","f","g","G","h","H","j","k","K","l","L","z","Z","x","c","C","v","V","b","n","N","m","M",",","!","."],Synthesizer=function(_THREE$Group){function Synthesizer(){var options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};_classCallCheck(this,Synthesizer);var _this=_possibleConstructorReturn(this,(Synthesizer.__proto__||Object.getPrototypeOf(Synthesizer)).call(this));return _this.options=options,_this.audioContext=new(window.AudioContext||window.webkitAudioContext),_this.gain=_this.audioContext.createGain(),_this.gain.gain.value=.2,_this.reverb=(0,_soundbankReverb2["default"])(_this.audioContext),_this.reverb.time=1,_this.reverb.wet.value=.8,_this.reverb.dry.value=.6,_this.oscillatorIndex=Object.keys(_webAudioOscillators2["default"]).indexOf("organ"),_this.isMouseDown=!1,_this.createBottomPanel(),_this.createBackPanel(),_this.createLeftPanel(),_this.createRightPanel(),_this.createScreen(),_this.createScreenText(),_this.createLeftButton(),_this.createRightButton(),_this.createKeys(),_this}return _inherits(Synthesizer,_THREE$Group),_createClass(Synthesizer,[{key:"createBottomPanel",value:function(){var width=this.options.width,height=this.options.height/4,depth=this.options.depth;this.bottomPanel=new THREE.Mesh,this.bottomPanel.material=new THREE.MeshPhysicalMaterial({color:"#3a3a3a",emissive:"#1a1a1a",reflectivity:.1,metalness:.1,side:THREE.DoubleSide}),this.bottomPanel.geometry=new THREE.BoxGeometry(width,height,depth),this.bottomPanel.bbox.centerX=0,this.bottomPanel.bbox.centerY=0,this.bottomPanel.bbox.centerZ=0,this.add(this.bottomPanel)}},{key:"createBackPanel",value:function(){var width=this.bottomPanel.bbox.width,height=this.options.height/1.45,depth=.32*this.bottomPanel.bbox.depth;this.backPanel=new THREE.Mesh,this.backPanel.material=this.bottomPanel.material,this.backPanel.geometry=new THREE.BoxGeometry(width,height,depth),this.backPanel.bbox.centerX=this.bottomPanel.bbox.centerX,this.backPanel.bbox.minY=this.bottomPanel.bbox.maxY,this.backPanel.bbox.minZ=this.bottomPanel.bbox.minZ,this.add(this.backPanel)}},{key:"createLeftPanel",value:function(){var width=.06*this.bottomPanel.bbox.width,height=this.backPanel.bbox.height,depth=this.bottomPanel.bbox.depth-this.backPanel.bbox.depth,hypotenuse=Math.hypot(height,depth),angle=Math.asin(depth/hypotenuse);this.leftPanel=new THREE.Mesh,this.leftPanel.material=this.bottomPanel.material,this.leftPanel.geometry=new THREE.Geometry;var mesh1=new THREE.Mesh;mesh1.geometry=new THREE.ShapeGeometry(new THREE.Shape([new THREE.Vector2(0,0),new THREE.Vector2(width,0),new THREE.Vector2(width,hypotenuse),new THREE.Vector2(0,hypotenuse)])),mesh1.bbox.minX=0,mesh1.bbox.minY=0,mesh1.bbox.maxZ=depth,mesh1.rotation.x=-angle,this.leftPanel.geometry.mergeMesh(mesh1);var mesh2=new THREE.Mesh;mesh2.geometry=new THREE.ShapeGeometry(new THREE.Shape([new THREE.Vector2(0,0),new THREE.Vector2(depth,0),new THREE.Vector2(0,height)])),mesh2.bbox.minX=0,mesh2.bbox.minY=0,mesh2.bbox.minZ=0,mesh2.rotation.y=-THREE.Math.degToRad(90),this.leftPanel.geometry.mergeMesh(mesh2);var mesh3=mesh2.clone();mesh3.bbox.maxX=width,this.leftPanel.geometry.mergeMesh(mesh3),this.leftPanel.bbox.minX=this.bottomPanel.bbox.minX,this.leftPanel.bbox.minY=this.bottomPanel.bbox.maxY,this.leftPanel.bbox.maxZ=this.bottomPanel.bbox.maxZ,this.add(this.leftPanel)}},{key:"createRightPanel",value:function(){this.rightPanel=this.leftPanel.clone(),this.rightPanel.bbox.maxX=this.bottomPanel.bbox.maxX,this.add(this.rightPanel)}},{key:"createScreen",value:function(){var width=.18*this.backPanel.bbox.width,height=(this.options.height-this.backPanel.bbox.height-this.bottomPanel.bbox.height)/3,depth=.6*this.backPanel.bbox.depth;this.screen=new THREE.Mesh,this.screen.material=new THREE.MeshPhysicalMaterial({color:"#000000",emissive:"#161616",reflectivity:.2,metalness:.8}),this.screen.geometry=new THREE.BoxGeometry(width,height,depth),this.screen.bbox.centerX=this.backPanel.bbox.centerX,this.screen.bbox.minY=this.backPanel.bbox.maxY,this.screen.bbox.centerZ=this.backPanel.bbox.centerZ,this.add(this.screen)}},{key:"createScreenText",value:function(){var oscillatorName=Object.keys(_webAudioOscillators2["default"])[this.oscillatorIndex].toUpperCase();this.screenText=new THREE.Mesh,this.screenText.material=new THREE.MeshPhysicalMaterial({color:"#ff6600",emissive:"#bb3300",reflectivity:0,metalness:0}),this.screenText.geometry=new THREE.TextGeometry(oscillatorName,{font:Synthesizer.font,size:.4*this.screen.bbox.depth,height:1}),this.screenText.bbox.centerX=this.screen.bbox.centerX,this.screenText.bbox.minY=this.screen.bbox.maxY,this.screenText.bbox.minZ=this.screen.bbox.centerZ+this.screenText.bbox.height/2,this.screenText.rotation.x=-THREE.Math.degToRad(90),this.add(this.screenText),this.screenText.position.x-=2,this.screenText.position.z+=1.7}},{key:"createLeftButton",value:function(){var width=.02*this.backPanel.bbox.width,height=this.options.height-this.backPanel.bbox.height-this.bottomPanel.bbox.height,depth=.7*this.screen.bbox.depth,hypotenuse=Math.hypot(width,depth/2),angle=Math.asin(depth/2/hypotenuse);
this.leftButton=new THREE.Mesh,this.leftButton.material=new THREE.MeshPhysicalMaterial({color:"#111111",emissive:"#1a1a1a",reflectivity:.1,metalness:.7,side:THREE.DoubleSide}),this.leftButton.geometry=new THREE.Geometry;var mesh1=new THREE.Mesh;mesh1.geometry=new THREE.ShapeGeometry(new THREE.Shape([new THREE.Vector2(0,0),new THREE.Vector2(-width,depth/2),new THREE.Vector2(0,depth)])),mesh1.bbox.minX=0,mesh1.bbox.minY=height,mesh1.bbox.maxZ=0,mesh1.rotation.x=THREE.Math.degToRad(90),this.leftButton.geometry.mergeMesh(mesh1);var mesh2=new THREE.Mesh;mesh2.geometry=new THREE.ShapeGeometry(new THREE.Shape([new THREE.Vector2(0,0),new THREE.Vector2(hypotenuse,0),new THREE.Vector2(hypotenuse,height),new THREE.Vector2(0,height)])),mesh2.bbox.minX=0,mesh2.bbox.minY=0,mesh2.bbox.maxZ=depth/2,mesh2.rotation.y=-angle,this.leftButton.geometry.mergeMesh(mesh2);var mesh3=mesh2.clone();mesh3.rotation.y=angle,this.leftButton.geometry.mergeMesh(mesh3);var mesh4=new THREE.Mesh;mesh4.geometry=new THREE.ShapeGeometry(new THREE.Shape([new THREE.Vector2(0,0),new THREE.Vector2(depth,0),new THREE.Vector2(depth,height),new THREE.Vector2(0,height)])),mesh4.bbox.minX=width,mesh4.bbox.minY=0,mesh4.bbox.maxZ=depth,mesh4.rotation.y=THREE.Math.degToRad(90),this.leftButton.geometry.mergeMesh(mesh4),this.leftButton.bbox.maxX=this.screen.bbox.minX-(this.backPanel.bbox.depth-this.screen.bbox.depth)/2,this.leftButton.bbox.minY=this.backPanel.bbox.maxY,this.leftButton.bbox.centerZ=this.backPanel.bbox.centerZ,this.leftButton.userData.pressHeight=this.leftButton.bbox.height/2,this.add(this.leftButton)}},{key:"createRightButton",value:function(){this.rightButton=this.leftButton.clone(),this.rightButton.rotation.y=THREE.Math.degToRad(180),this.rightButton.bbox.minX=this.screen.bbox.maxX+(this.backPanel.bbox.depth-this.screen.bbox.depth)/2,this.rightButton.bbox.centerZ=this.backPanel.bbox.centerZ,this.add(this.rightButton)}},{key:"createKeys",value:function(){this.keys=_tonal2["default"].range.chromatic("C2, B5").map(this.createKey.bind(this))}},{key:"createKey",value:function(note,index,notes){var key=new THREE.Mesh,keyGap=2,keyWidth=(this.backPanel.bbox.width-this.leftPanel.bbox.width-this.rightPanel.bbox.width-(notes.length+1)*keyGap)/notes.length,keyBlackHeight=this.backPanel.bbox.height/2,keyWhiteHeight=keyBlackHeight/1.75,keyWhiteDepth=this.bottomPanel.bbox.depth-this.backPanel.bbox.depth-keyGap,keyBlackDepth=.65*keyWhiteDepth,keyPressHeight=keyWhiteHeight/2,semitone=index%12;if([1,3,6,8,10].includes(semitone))key.material=new THREE.MeshPhysicalMaterial({color:"#333333",emissive:"#000000",reflectivity:.1,metalness:.1}),key.geometry=new THREE.BoxGeometry(keyWidth,keyBlackHeight,keyBlackDepth);else{if(key.material=new THREE.MeshPhysicalMaterial({color:"#dddddd",emissive:"#888888",reflectivity:.5,metalness:.5}),key.geometry=new THREE.BoxGeometry(keyWidth,keyWhiteHeight,keyWhiteDepth),[2,4,7,9,11].includes(semitone)){var width=.5*keyGap+keyWidth*function(){switch(semitone){case 2:case 7:return.25;case 4:case 11:return.75;case 9:return.5}}(),height=key.bbox.height,depth=keyWhiteDepth-keyBlackDepth-keyGap,mesh1=new THREE.Mesh;mesh1.geometry=new THREE.BoxGeometry(width,height,depth),mesh1.bbox.maxX=key.bbox.minX,mesh1.bbox.minY=key.bbox.minY,mesh1.bbox.maxZ=key.bbox.maxZ,key.geometry.mergeMesh(mesh1)}if([0,2,5,7,9].includes(semitone)){var _width=.5*keyGap+keyWidth*function(){switch(semitone){case 2:case 9:return.25;case 0:case 5:return.75;case 7:return.5}}(),_height=key.bbox.height,_depth=keyWhiteDepth-keyBlackDepth-keyGap,mesh2=new THREE.Mesh;mesh2.geometry=new THREE.BoxGeometry(_width,_height,_depth),mesh2.bbox.minX=key.bbox.maxX,mesh2.bbox.minY=key.bbox.minY,mesh2.bbox.maxZ=key.bbox.maxZ,key.geometry.mergeMesh(mesh2)}}return key.position.x=this.leftPanel.bbox.maxX+keyGap+keyWidth/2+(keyWidth+keyGap)*index,key.bbox.minY=this.bottomPanel.bbox.maxY+keyGap+keyPressHeight,key.bbox.minZ=this.backPanel.bbox.maxZ,key.userData.pressHeight=keyPressHeight,key.userData.frequency=_tonal2["default"].note.freq(note),this.add(key),key}},{key:"addInputListener",value:function(renderer,camera){var _this2=this,clickableObjects=[this.leftButton,this.rightButton].concat(_toConsumableArray(this.keys));window.addEventListener("keydown",function(event){var keyIndex=keyboardKeyMap.indexOf(event.key);-1!==keyIndex&&_this2.keys[keyIndex]&&!_this2.clickedObject&&(_this2.onMouseUp(),_this2.clickedObject=_this2.keys[keyIndex],_this2.onMouseDown())}),window.addEventListener("keyup",function(event){var keyIndex=keyboardKeyMap.indexOf(event.key);("Shift"===event.key||-1!==keyIndex&&_this2.clickedObject===_this2.keys[keyIndex])&&_this2.onMouseUp()}),renderer.domElement.addEventListener("mousedown",function(event){_this2.onMouseUp(),_this2.isMouseDown=!0,1===event.buttons&&(_this2.clickedObject=clickableObjects.find(function(object){return camera.isObjectAtCoord({object:object,x:event.clientX,y:event.clientY,renderer:renderer})}),_this2.onMouseDown())}),renderer.domElement.addEventListener("mouseup",function(event){_this2.isMouseDown=!1,_this2.onMouseUp()}),renderer.domElement.addEventListener("mousemove",function(event){if(_this2.isMouseDown){var object=clickableObjects.find(function(object){return camera.isObjectAtCoord({object:object,x:event.clientX,y:event.clientY,renderer:renderer})});renderer.domElement.style.cursor=clickableObjects.includes(object)?"pointer":null,_this2.clickedObject!==object&&_this2.keys.includes(_this2.clickedObject)&&_this2.keys.includes(object)&&(_this2.onMouseUp(),_this2.clickedObject=object,_this2.onMouseDown())}}),renderer.domElement.addEventListener("mouseleave",function(event){_this2.onMouseUp()})}},{key:"onMouseDown",value:function(){this.clickedObject&&([this.leftButton,this.rightButton].includes(this.clickedObject)?(this.clickedObject.bbox.minY-=this.clickedObject.userData.pressHeight,this.oscillatorIndex=(0,_wrapIndex2["default"])(this.oscillatorIndex+(this.clickedObject===this.rightButton?1:-1),Object.entries(_webAudioOscillators2["default"]).length),this.remove(this.screenText)):this.keys.includes(this.clickedObject)&&(this.clickedObject.bbox.minY-=this.clickedObject.userData.pressHeight,this.oscillator=Object.values(_webAudioOscillators2["default"])[this.oscillatorIndex](this.audioContext),this.oscillator.frequency.value=this.clickedObject.userData.frequency,this.oscillator.connect(this.gain).connect(this.reverb).connect(this.audioContext.destination),this.oscillator.start()))}},{key:"onMouseUp",value:function(){this.clickedObject&&([this.leftButton,this.rightButton].includes(this.clickedObject)?(this.clickedObject.bbox.minY+=this.clickedObject.userData.pressHeight,this.createScreenText()):this.keys.includes(this.clickedObject)&&(this.clickedObject.bbox.minY+=this.clickedObject.userData.pressHeight,this.oscillator.stop()),this.clickedObject=null)}}],[{key:"init",value:function(){var _this3=this;return new Promise(function(resolve){(new THREE.FontLoader).load("fonts/share-tech-mono.json",function(font){_this3.font=font,resolve()})})}}]),Synthesizer}(THREE.Group);exports["default"]=Synthesizer;var _console=console,warn=_console.warn;console.warn=function(msg){var _context,_ref;!msg.includes("note.props() is deprecated.")&&(_context=console,_ref=warn).call.apply(_ref,[_context].concat(Array.prototype.slice.call(arguments)))}},{"soundbank-reverb":56,three:58,tonal:79,"web-audio-oscillators":83,"wrap-index":90}],93:[function(require,module,exports){"use strict";function _interopRequireWildcard(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)Object.prototype.hasOwnProperty.call(obj,key)&&(newObj[key]=obj[key]);return newObj["default"]=obj,newObj}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function install(){Object.defineProperty(THREE.Object3D.prototype,"bbox",{get:function(){return new BoundingBox(this)}}),Object.defineProperty(THREE.Euler.prototype,"inverted",{value:function(){return new this.constructor(-this.x,-this.y,-this.z)}}),Object.defineProperty(THREE.Camera.prototype,"isObjectAtCoord",{value:function(){var options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},object=options.object,x=options.x,y=options.y,renderer=options.renderer,bbox=options.bbox;x=x/renderer.domElement.clientWidth*2-1,y=2*-(y/renderer.domElement.clientHeight)+1;var raycaster=new THREE.Raycaster;return raycaster.setFromCamera(new THREE.Vector2(x,y),this),bbox?raycaster.ray.intersectsBox(object.bbox.bbox.world):raycaster.intersectObject(object).length}}),Object.defineProperty(THREE.Camera.prototype,"visibleRect",{value:function(z){var distance=Math.abs(z-this.position.z),height=2*Math.tan(THREE.Math.degToRad(this.fov)/2)*distance,width=height*this.aspect;return Object.assign(new THREE.Box2(new THREE.Vector2(-width/2,-height/2),new THREE.Vector2(width/2,height/2)),{width:width,height:height})}})}Object.defineProperty(exports,"__esModule",{value:!0});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();exports.install=install;var _three=require("three"),THREE=_interopRequireWildcard(_three),BoundingBox=function(){function BoundingBox(object){_classCallCheck(this,BoundingBox),this.object=object}return _createClass(BoundingBox,[{key:"withoutRotation",value:function(fn){var rotation=this.object.rotation.clone(),worldRotation=this.object.getWorldRotation();this.object.setRotationFromEuler(worldRotation.inverted());var value=fn();return this.object.setRotationFromEuler(rotation),value}},{key:"bbox",get:function(){var _this=this;return this.withoutRotation(function(){var world=(new THREE.Box3).setFromObject(_this.object),local=new THREE.Box3(_this.object.worldToLocal(world.min.clone()),_this.object.worldToLocal(world.max.clone()));return{world:world,local:local}})}},{key:"position",get:function(){var world=this.object.getWorldPosition(),local=this.object.worldToLocal(world.clone());return{world:world,local:local}}},{key:"width",get:function(){return Math.abs(this.bbox.local.min.x-this.bbox.local.max.x)}},{key:"height",get:function(){return Math.abs(this.bbox.local.min.y-this.bbox.local.max.y)}},{key:"depth",get:function(){return Math.abs(this.bbox.local.min.z-this.bbox.local.max.z)}},{key:"minX",get:function(){return this.object.position.x-Math.abs(this.position.local.x-this.bbox.local.min.x)},set:function(x){this.object.position.x=x+Math.abs(this.object.position.x-this.minX)}},{key:"maxX",get:function(){return this.minX+this.width},set:function(x){this.minX=x-this.width}},{key:"centerX",get:function(){return this.minX+this.width/2},set:function(x){this.minX=x-this.width/2}},{key:"minY",get:function(){return this.object.position.y-Math.abs(this.position.local.y-this.bbox.local.min.y)},set:function(y){this.object.position.y=y+Math.abs(this.object.position.y-this.minY)}},{key:"maxY",get:function(){return this.minY+this.height},set:function(y){this.minY=y-this.height}},{key:"centerY",get:function(){return this.minY+this.height/2},set:function(y){this.minY=y-this.height/2}},{key:"minZ",get:function(){return this.object.position.z-Math.abs(this.position.local.z-this.bbox.local.min.z)},set:function(z){this.object.position.z=z+Math.abs(this.object.position.z-this.minZ)}},{key:"maxZ",get:function(){return this.minZ+this.depth},set:function(z){this.minZ=z-this.depth}},{key:"centerZ",get:function(){return this.minZ+this.depth/2},set:function(z){this.minZ=z-this.depth/2}}]),BoundingBox}()},{three:58}]},{},[91]);